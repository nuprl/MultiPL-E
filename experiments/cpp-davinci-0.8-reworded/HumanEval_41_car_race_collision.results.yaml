language: cpp
name: HumanEval_41_car_race_collision
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  assert(n>=0);\n\
    \  // your code here\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpbzpz7o7k: /tmp/tmpbzpz7o7k.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n>=0);\n\
    \    return n*(n-1);\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp55r1bj3c: /tmp/tmp55r1bj3c.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn n*(n\
    \ - 1);\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpcz1xwhwc: /tmp/tmpcz1xwhwc.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092870
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n//    assert(false);\n\
    \    // Implement this function\n    if(n<2) return 0;\n    long collision_times\
    \ = n*(n-1)/2;\n    return collision_times;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp164nzk43: /tmp/tmp164nzk43.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // number\
    \ of cars\n    //assert(n > 0);\n    //assert(n % 2 == 0);\n    // store the position\
    \ of each car\n    std::list<long> left_to_right(n);\n    std::list<long> right_to_left(n);\n\
    \    // position each car\n    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n  \
    \  }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (left_to_right[i] == right_to_left[j]) {\n               \
    \ count += 1;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhg8ifdi.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpkhg8ifdi.cpp:21:22: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::__cxx11::list<long int>\u2019 and \u2018long int\u2019\
    )\n   21 |         left_to_right[i] = i;\n      |                      ^\n/tmp/tmpkhg8ifdi.cpp:22:22:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::__cxx11::list<long\
    \ int>\u2019 and \u2018long int\u2019)\n   22 |         right_to_left[i] = n -\
    \ i - 1;\n      |                      ^\n/tmp/tmpkhg8ifdi.cpp:26:30: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018std::__cxx11::list<long\
    \ int>\u2019 and \u2018long int\u2019)\n   26 |             if (left_to_right[i]\
    \ == right_to_left[j]) {\n      |                              ^\n/tmp/tmpkhg8ifdi.cpp:26:50:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::__cxx11::list<long\
    \ int>\u2019 and \u2018long int\u2019)\n   26 |             if (left_to_right[i]\
    \ == right_to_left[j]) {\n      |                                            \
    \      ^\n"
  stdout: ''
  timestamp: 1660092870
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // n cars are\
    \ driving left to right;  simultaneously, a different set of n cars\n  // are\
    \ driving right to left.   The two sets of cars start out being very far from\n\
    \  // each other.  All cars move in the same speed.  Two cars are said to collide\n\
    \  // when a car that's moving left to right hits a car that's moving right to\
    \ left.\n  // However, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n  // in their trajectory as if they did not collide.\n\
    \  // This function outputs the number of such collisions.\n  long a = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    a += i;\n  }\n  return a;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpqep5w2wc: /tmp/tmpqep5w2wc.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Replace\
    \ this code with a faster implementation\n    long long res = 0;\n    for (long\
    \ l = 0; l < n; ++l)\n        for (long r = 0; r < n; ++r)\n            res +=\
    \ l > r;\n    return res;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpz0qupy3k: /tmp/tmpz0qupy3k.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Imagine\
    \ a line of cars moving left to right.  Let's place their starting\n    // position\
    \ of car i in the long A[i], where A[i] is the distance from the\n    // leftmost\
    \ car to the starting position of car i.\n    // Similary, let's place the starting\
    \ position of car i on the right-to-left\n    // line in the long B[i], where\
    \ B[i] is the distance from the rightmost car\n    // to the starting position\
    \ of car i.\n    // This function allows you to generate a random test case.\n\
    \    std::default_random_engine gen((std::random_device())());\n    std::uniform_int_distribution<long>\
    \ dist(0, n);\n    std::vector<long> A(n);\n    for (long i = 0; i < n; ++i) {\n\
    \        A[i] = dist(gen);\n    }\n    std::vector<long> B(n);\n    for (long\
    \ i = 0; i < n; ++i) {\n        B[i] = dist(gen);\n    }\n    // Since the cars\
    \ are driving in the same speed, it's safe to assume that\n    // the order of\
    \ the cars won't change.  Thus, the cars remain sorted in\n    // increasing order\
    \ by their starting position.\n    std::sort(A.begin(), A.end());\n    std::sort(B.begin(),\
    \ B.end());\n    // This function outputs the number of collision.\n    long count\
    \ = 0;\n    for (long i = 0; i < n; ++i) {\n        if (A[i] < B[i])\n       \
    \     ++count;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp6hvjrbss: /tmp/tmp6hvjrbss.cpp:44: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  if (n==0) return\
    \ 0;\n  if (n==1) return 0;\n  if (n==2) return 1;\n  if (n==3) return 2;\n  if\
    \ (n==4) return 3;\n  return 4;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpulykwu84: /tmp/tmpulykwu84.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n\
    \ >= 1);\n    if (n==1) {\n        return 0;\n    }\n    if (n==2) {\n       \
    \ return 1;\n    }\n    if (n==3) {\n        return 3;\n    }\n    long result\
    \ = 0;\n    if (n%2==0) {\n        result = n*(n-1)/2;\n    }\n    else {\n  \
    \      long small = ((n-1)/2) * (n-1);\n        long large = ((n-1)/2) * (n-2);\n\
    \        result = small + large;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmph2l9yo6r: /tmp/tmph2l9yo6r.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// You must\
    \ write the function\n\t// You cannot use the built-in sort function\n\t// You\
    \ are not allowed to add any global variables\n\tlong a[n];\n\tlong b[n];\n\t\
    for (long i = 0; i < n; i++) {\n\t\tstd::cin >> a[i];\n\t}\n\tfor (long i = 0;\
    \ i < n; i++) {\n\t\tstd::cin >> b[i];\n\t}\n\tsort(a, a + n);\n\tsort(b, b +\
    \ n);\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong j = 0;\n\tlong ctr = 0;\n\twhile\
    \ (l < n && r >= 0) {\n\t\tif (a[l] < b[r]) {\n\t\t\tl++;\n\t\t\tj++;\n\t\t}\n\
    \t\telse {\n\t\t\tctr += j;\n\t\t\tr--;\n\t\t}\n\t}\n\treturn ctr;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dn41ky2.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmp3dn41ky2.cpp:23:2: error: \u2018sort\u2019 was not declared\
    \ in this scope; did you mean \u2018std::sort\u2019?\n   23 |  sort(a, a + n);\n\
    \      |  ^~~~\n      |  std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3dn41ky2.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:296:1:\
    \ note: \u2018std::sort\u2019 declared here\n  296 | sort(_ExecutionPolicy&& __exec,\
    \ _RandomAccessIterator __first, _RandomAccessIterator __last);\n      | ^~~~\n"
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         if (i > j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpyqymh1au: /tmp/tmpyqymh1au.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong cars =\
    \ n;\n\tlong collisions = 0;\n\tstd::vector<long> *sortedCars = new std::vector<long>();\n\
    \tlong car = 0;\n\t//filling the sorted cars vector with all cars values\n\tfor\
    \ (long i = 0; i < cars; i++) {\n\t\tstd::cin >> car;\n\t\tsortedCars->push_back(car);\n\
    \t}\n\tstd::sort(sortedCars->begin(), sortedCars->end());\n\tstd::vector<long>\
    \ leftcars;\n\tstd::vector<long> rightcars;\n\t//putting all cars in their vectors\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tleftcars.push_back(sortedCars->at(i));\n\
    \t\t}\n\t\telse {\n\t\t\trightcars.push_back(sortedCars->at(i));\n\t\t}\n\t}\n\
    \t//sorting the cars by their locations\n\tstd::sort(leftcars.begin(), leftcars.end());\n\
    \tstd::sort(rightcars.begin(), rightcars.end());\n\tint right = rightcars.size()\
    \ - 1;\n\tint left = 0;\n\t//checking each car in right vector if it matches any\
    \ car in left vector\n\twhile (right >= 0 && left < leftcars.size()) {\n\t\tif\
    \ (rightcars.at(right) > leftcars.at(left)) {\n\t\t\tcollisions++;\n\t\t\tright--;\n\
    \t\t\tleft++;\n\t\t}\n\t\telse {\n\t\t\tright--;\n\t\t}\n\t}\n\tdelete sortedCars;\n\
    \treturn collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong ans =\
    \ 0;\n\tif (n < 2) return 0;\n\tstd::vector<long> v;\n\tlong l = n, r = n;\n\t\
    for (int i = 0; i < n; i++) {\n\t\tlong lr = 0, rr = 0;\n\t\tstd::cin >> lr >>\
    \ rr;\n\t\tif (lr > 0) v.push_back(lr);\n\t\tif (rr > 0) v.push_back(rr);\n\t\
    }\n\tstd::sort(v.begin(), v.end());\n\tstd::vector<long> v2;\n\tfor (auto i :\
    \ v) {\n\t\tif (v2.size() == 0 || v2.back() != i) v2.push_back(i);\n\t}\n\tv =\
    \ v2;\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tif (v[i] == 0) continue;\n\t\
    \tlong ll = l, rr = r;\n\t\tif (v[i] > 0) {\n\t\t\tll--;\n\t\t\tans += rr;\n\t\
    \t}\n\t\telse {\n\t\t\trr--;\n\t\t\tans += ll;\n\t\t}\n\t\tl = ll;\n\t\tr = rr;\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t//precondition\n\
    \tassert(n >= 0);\n\t//Postcondition\n\t//Returns the number of collisions as\
    \ per the above explanation\n\t// Complexity: O(n)\n\treturn (n * (n - 1)) / 2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpsg17mgz6: /tmp/tmpsg17mgz6.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n   return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpd19oui_q: /tmp/tmpd19oui_q.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n-1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmppmyjpusk: /tmp/tmppmyjpusk.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    long collisions = 0;\n    long *cars = new long[n];\n  \
    \  long *cars_reverse = new long[n];\n    // initialize the cars\n    for (long\
    \ i = 0; i < n; i++) {\n        cars[i] = i;\n        cars_reverse[i] = n - i\
    \ - 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j\
    \ < n; j++) {\n            if (cars[i] == cars_reverse[j]) {\n               \
    \ collisions++;\n            }\n        }\n    }\n    delete[] cars;\n    delete[]\
    \ cars_reverse;\n    return collisions;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpxp_l3yl1: /tmp/tmpxp_l3yl1.cpp:34: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// The two\
    \ sets of cars are a left to right and a right to left\n\t// car, with each car\
    \ moving with the same velocity, so it must\n\t// be that the first collision\
    \ is between the leftmost left to right\n\t// car and the rightmost right to left\
    \ car.  That is, there are no\n\t// collisions involving other left to right or\
    \ right to left cars because\n\t// those would have to happen earlier in order\
    \ to appear in the first\n\t// collision; but for the first collision to happen,\
    \ the leftmost left to right\n\t// car and the rightmost right to left car have\
    \ to be at the same location,\n\t// and hence no collisions are possible.\n\t\
    // Now, imagine that the two cars collide, but they are perfectly strong, so\n\
    \t// they do not stop, but go on as if they did not collide.  That is,\n\t// the\
    \ same collision will happen again, and again and again, with the same\n\t// two\
    \ cars, ad infinitum, which corresponds to infinity collisions, which\n\t// is\
    \ why the number of collisions is the product of the number of left to right\n\
    \t// cars with the number of right to left cars, which is the number of cars\n\
    \t// squared.\n\treturn n * n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your solution here\n    /*\n     *  if there are 2 cars, they will collide in\
    \ the first second\n     *  if there are 4 cars, 2 cars will collide in the first\
    \ second, and then 2 others will collide in the next second\n     *  if there\
    \ are 8 cars, 4 cars will collide in the first second, and then 4 others will\
    \ collide in the next second\n     *  if there are 16 cars, 8 cars will collide\
    \ in the first second, and then 8 others will collide in the next second\n   \
    \  *  if there are 2^k cars, 2^(k-1) cars will collide in the first second, and\
    \ then 2^(k-1) others will collide in the next second\n     *\n     *  so, if\
    \ there are n cars,\n     *  let k be the largest power of 2 that's less than\
    \ or equal to n\n     *  then n - k cars will collide in the first second\n  \
    \   *  then the remaining cars will collide in the next k seconds\n     *  so\
    \ we have k + (n - k) collisions\n     *  total collisions = k + (n - k) = n\n\
    \     */\n    int count = 0;\n    while (n > 0) {\n        count++;\n        n\
    \ >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpl0jop_df: /tmp/tmpl0jop_df.cpp:36: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long c=0;\n\
    \    std::unordered_map<long, long> set1;\n    std::unordered_map<long, long>\
    \ set2;\n    //std::unordered_map<long, long>::iterator it;\n    for(long i=0;i<n;i++)\n\
    \    {\n        if(set1.find(i)==set1.end())\n        {\n            set1.insert(i,i);\n\
    \        }\n        if(set2.find(i)==set2.end())\n        {\n            set2.insert(i,i);\n\
    \        }\n    }\n    for(long i=0;i<n;i++)\n    {\n        if(set1.find(i)!=set1.end()\
    \ && set2.find(i)!=set2.end())\n        {\n            c++;\n        }\n    }\n\
    \    return c;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/hashtable.h:35,\n       \
    \          from /usr/include/c++/9/unordered_map:46,\n                 from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpebqs37o7.cpp:2:\n/usr/include/c++/9/bits/hashtable_policy.h:\
    \ In instantiation of \u2018void std::__detail::_Insert_base<_Key, _Value, _Alloc,\
    \ _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_range(_InputIterator,\
    \ _InputIterator, const _NodeGetter&, std::true_type) [with _InputIterator = long\
    \ int; _NodeGetter = std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<const\
    \ long int, long int>, false> > >; _Key = long int; _Value = std::pair<const long\
    \ int, long int>; _Alloc = std::allocator<std::pair<const long int, long int>\
    \ >; _ExtractKey = std::__detail::_Select1st; _Equal = std::equal_to<long int>;\
    \ _H1 = std::hash<long int>; _H2 = std::__detail::_Mod_range_hashing; _Hash =\
    \ std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy;\
    \ _Traits = std::__detail::_Hashtable_traits<false, false, true>; std::true_type\
    \ = std::integral_constant<bool, true>]\u2019:\n/usr/include/c++/9/bits/hashtable_policy.h:845:71:\
    \   required from \u2018void std::__detail::_Insert_base<_Key, _Value, _Alloc,\
    \ _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::insert(_InputIterator,\
    \ _InputIterator) [with _InputIterator = long int; _Key = long int; _Value = std::pair<const\
    \ long int, long int>; _Alloc = std::allocator<std::pair<const long int, long\
    \ int> >; _ExtractKey = std::__detail::_Select1st; _Equal = std::equal_to<long\
    \ int>; _H1 = std::hash<long int>; _H2 = std::__detail::_Mod_range_hashing; _Hash\
    \ = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy;\
    \ _Traits = std::__detail::_Hashtable_traits<false, false, true>]\u2019\n/usr/inc"
  stdout: ''
  timestamp: 1660092871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long *cars_left\
    \ = new long[n];\n  long *cars_right = new long[n];\n  for (long i = 0; i < n;\
    \ i++) {\n    cars_left[i] = i + 1;\n    cars_right[i] = i + 1;\n  }\n  long start_index\
    \ = 0;\n  long end_index = n - 1;\n  long num_collisions = 0;\n  while (start_index\
    \ < n && end_index >= 0) {\n    if (cars_left[start_index] <= cars_right[end_index])\
    \ {\n      num_collisions += end_index + 1;\n      start_index++;\n    } else\
    \ {\n      end_index--;\n    }\n  }\n  return num_collisions;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdw6jmxdh: /tmp/tmpdw6jmxdh.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::vector<long>\
    \ cars_left_to_right;\n    std::vector<long> cars_right_to_left;\n    std::vector<long>\
    \ cars_left_to_right_result;\n    std::vector<long> cars_right_to_left_result;\n\
    \    for (long i = 0; i < n; i++) {\n        cars_left_to_right.push_back(i);\n\
    \        cars_right_to_left.push_back(i);\n    }\n    std::sort(cars_left_to_right.begin(),\
    \ cars_left_to_right.end());\n    std::sort(cars_right_to_left.begin(), cars_right_to_left.end());\n\
    \    for (long i = 0; i < n; i++) {\n        if (cars_left_to_right[i] == cars_right_to_left[i])\
    \ {\n            return 0;\n        }\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        if (cars_left_to_right[i] != cars_right_to_left[i]) {\n         \
    \   cars_left_to_right_result.push_back(cars_left_to_right[i]);\n            cars_right_to_left_result.push_back(cars_right_to_left[i]);\n\
    \        }\n    }\n    std::sort(cars_left_to_right_result.begin(), cars_left_to_right_result.end());\n\
    \    std::sort(cars_right_to_left_result.begin(), cars_right_to_left_result.end());\n\
    \    long count = 0;\n    for (long i = 0; i < n - 1; i++) {\n        if (cars_left_to_right_result[i]\
    \ != cars_right_to_left_result[i]) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpwl0h6i3f: /tmp/tmpwl0h6i3f.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s4bei74: /tmp/tmp5s4bei74.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Fill in\
    \ this stub.\n  long result = 0;\n  long distance = 0;\n  for (long i = 0; i <\
    \ n; i++) {\n    for (long j = 0; j < n; j++) {\n      if (distance < 0) {\n \
    \       result++;\n      }\n      distance++;\n    }\n    distance = 0;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpviisbv30: /tmp/tmpviisbv30.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmvbwoxoi: /tmp/tmpmvbwoxoi.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::vector<long>\
    \ left(n);\n    std::vector<long> right(n);\n    for (long j = 0; j < n; ++j)\
    \ {\n        left[j] = j + 1;\n        right[j] = n - j;\n    }\n    std::sort(left.begin(),\
    \ left.end());\n    std::sort(right.begin(), right.end());\n    long count = 0;\n\
    \    for (long j = 0; j < n; ++j) {\n        if (left[j] > right[j]) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp_5mfye_p: /tmp/tmp_5mfye_p.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Forward\
    \ cars are 0..n-1, backwards cars are n..2n-1\n    // Label them such that the\
    \ first car in each direction is car 0.\n    // At any time t, a backwards car\
    \ will have travelled (t+1) * n + i miles,\n    // where i is the number of that\
    \ car.  A forward car will have travelled\n    // t * n + i miles.\n    // When\
    \ do these two cars meet?  At t * n + i = (t+1) * n + i\n    // t * n = i\n  \
    \  // t = i / n\n    // This shows that car #i from one direction will meet car\
    \ #i from the other\n    // direction at time i / n.\n    long collisions = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        if (i % n == 0) {\n            collisions++;\n\
    \        }\n    }\n    return collisions;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpxb3fhsf7: /tmp/tmpxb3fhsf7.cpp:32: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n   long res=0;\n\
    \   std::vector<long> a(n);\n   for(long i=0;i<n;i++)\n       std::cin>>a[i];\n\
    \   std::vector<long> b(n);\n   for(long i=0;i<n;i++)\n       std::cin>>b[i];\n\
    \   std::vector<long> pos(n);\n   for(long i=0;i<n;i++)\n       pos[i]=a[i];\n\
    \   std::vector<long> posr(n);\n   for(long i=0;i<n;i++)\n       posr[i]=b[i];\n\
    \   for(long i=0;i<n;i++)\n   {\n       for(long j=0;j<n;j++)\n       {\n    \
    \       if(pos[i]==posr[j])\n               res++;\n       }\n   }\n   return\
    \ res;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long num =\
    \ 0;\n  long k = 0;\n  while (k < n) {\n    num += n - k;\n    k++;\n  }\n  return\
    \ num;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmptxgod9uc: /tmp/tmptxgod9uc.cpp:22: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // if n is zero or negative, it's not a valid input.\n    if (n <=\
    \ 0) {\n        return collisions;\n    }\n    std::vector<long> array_right_to_left(n);\n\
    \    std::vector<long> array_left_to_right(n);\n    for (long i = 0; i < n; i++)\
    \ {\n        // copying from stdin to the two arrays.\n        std::cin >> array_right_to_left[i];\n\
    \        std::cin >> array_left_to_right[i];\n    }\n    // sorting the two arrays\
    \ (in ascending order) for binary search.\n    std::sort(array_right_to_left.begin(),\
    \ array_right_to_left.end());\n    std::sort(array_left_to_right.begin(), array_left_to_right.end());\n\
    \    // looping through the array_left_to_right array.\n    for (auto const car\
    \ : array_left_to_right) {\n        // if the binary search finds a car that's\
    \ equal, or greater than\n        // the current car, that means there is a collision.\n\
    \        if (std::binary_search(array_right_to_left.begin(), array_right_to_left.end(),\
    \ car)) {\n            collisions++;\n        }\n    }\n    return collisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  if (n < 2)\
    \ return 0;\n  return n * (n - 1);\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmptnw0jzhn: /tmp/tmptnw0jzhn.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long ans =\
    \ 0;\n  return ans;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmphr0bumsw: /tmp/tmphr0bumsw.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // your code\
    \ here\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n      count +=\
    \ i;\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp6y7zmqj1: /tmp/tmp6y7zmqj1.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdw6jmxdh: /tmp/tmpdw6jmxdh.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Since there\
    \ is no input, there cannot be any collision.\n  return 0;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpzes4tjjo: /tmp/tmpzes4tjjo.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t//assert(n\
    \ > 0);\n\tif (n == 1) return 0;\n\treturn n*(n - 1) / 2;\n}\nint main() {\n \
    \   auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp4k_ohgbz: /tmp/tmp4k_ohgbz.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpylwzcdci: /tmp/tmpylwzcdci.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    if (n <= 0) {\n        return collisions;\n    }\n    // The cars\
    \ are moving in a line, sort of like a race track.\n    // Think of it as an infinitely\
    \ long road.  Let's say the left to right cars are\n    // represented by positive\
    \ numbers, and the right to left cars are represented by\n    // negative numbers.\
    \  We can keep track of these numbers in an array.\n    // Each car is represented\
    \ by a number, at the array position (index) corresponding\n    // to that car's\
    \ start position.  So for example, consider this case:\n    //   10 left to right\
    \ cars, 5 right to left cars.\n    // The first left to right car starts at position\
    \ 0, the second at position 1, and so on.\n    // Similarly, the first right to\
    \ left car starts at position -1, the second at position -2,\n    // and so on.\n\
    \    // So the positions array initially looks like this:\n    //   positions[0]\
    \ = 1, positions[1] = 2, ... positions[9] = 10, positions[-1] = -5,\n    // positions[-2]\
    \ = -4, ... positions[-5] = -1.\n    // Now we move all the cars, and then see\
    \ if any positions are positive and negative.\n    // If so, we increment the\
    \ collision count.\n    // Each car moves its speed.  So for example, the car\
    \ at index 2, which starts at\n    // position 2 and moves at speed 5, now moves\
    \ to position 7.  The car at index 3\n    // moves to position 8.  The car at\
    \ index 4 moves to position 9.  However, we don't\n    // care about the new positions\
    \ of these cars, because they will not collide with\n    // any of the cars moving\
    \ right to left.  If they were to collide, they would have\n    // already done\
    \ so by now.  So let's just keep track of the positions of the cars\n    // moving\
    \ left to right.  We could do that with another array, and we could do it\n  \
    \  // as follows:\n    //   newPositions[2] = 7, newPositions[3] = 8, newPositions[4]\
    \ = 9.\n    // However, we don't need to\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp6puajt37: /tmp/tmp6puajt37.cpp:44: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpylwzcdci: /tmp/tmpylwzcdci.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // keep track\
    \ of the cars moving from left to right\n    std::unordered_set<long> moving_left_to_right;\n\
    \    // keep track of the cars moving from right to left\n    std::unordered_set<long>\
    \ moving_right_to_left;\n    for (long i = 0; i < n; i++) {\n        // initialize\
    \ moving_left_to_right with cars that are moving left to right\n        moving_left_to_right.insert(i);\n\
    \        // initialize moving_right_to_left with cars that are moving right to\
    \ left\n        moving_right_to_left.insert(n - i - 1);\n    }\n    long coll\
    \ = 0;\n    while (moving_left_to_right.size() > 0) {\n        // keep track of\
    \ which cars are going to collide this iteration\n        std::unordered_set<long>\
    \ cars_to_remove;\n        for (auto car_id: moving_left_to_right) {\n       \
    \     // if this car that is moving left to right is moving in the opposite direction\n\
    \            // of any car that is moving right to left, then it will collide\
    \ with that car\n            if (moving_right_to_left.find(car_id) != moving_right_to_left.end())\
    \ {\n                coll++;\n                // remove the car from moving_right_to_left\
    \ since it has collided\n                cars_to_remove.insert(car_id);\n    \
    \        }\n        }\n        // remove cars that collided\n        for (auto\
    \ car_id: cars_to_remove) {\n            moving_right_to_left.erase(car_id);\n\
    \        }\n        // all cars that are moving left to right move one unit right\n\
    \        for (auto car_id: moving_left_to_right) {\n            moving_right_to_left.insert(car_id);\n\
    \        }\n        // remove these cars from moving_left_to_right\n        moving_left_to_right.clear();\n\
    \    }\n    return coll;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmps6t__dqb: /tmp/tmps6t__dqb.cpp:50: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // this function\
    \ returns the expected number of collisions for n cars.\n    // The code in this\
    \ function contains a bug, which can be fixed by replacing\n    // this comment\
    \ with a line containing the code return (2*n) - 1;\n    return 2*n;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp68j4_7a4: /tmp/tmp68j4_7a4.cpp:20: int main(): Assertion `candidate((3))
    == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // WRITE\
    \ YOUR CODE HERE\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = 0; j < n; j++) {\n            if(i+j == n-1) {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpo388e07w: /tmp/tmpo388e07w.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n>=1);\n\
    \    // put your solution here!\n    return ((n*(n-1))/2);\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpsnsl1i1l: /tmp/tmpsnsl1i1l.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long count\
    \ = 0;\n  // Write your code here\n  return count;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpgtau67fd: /tmp/tmpgtau67fd.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long first[n],\
    \ second[n];\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n       \
    \ std::cin >> first[i];\n    }\n    for(long i = 0; i < n; i++) {\n        std::cin\
    \ >> second[i];\n    }\n    std::sort(first, first + n);\n    std::sort(second,\
    \ second + n);\n    for(long i = 0; i < n; i++) {\n        if(first[i] == second[i])\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong numCollisions\
    \ = 0;\n\t// Write your code here\n\tint num1 = n;\n\tint num2 = n;\n\tint i,\
    \ j;\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (i\
    \ == n - j - 1) {\n\t\t\t\tnumCollisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn numCollisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp6e9pekxe: /tmp/tmp6e9pekxe.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    if (n > 2) {\n        long* lefttoRight = new long[n];\n        long*\
    \ righttoLeft = new long[n];\n        // Populate arrays\n        long i;\n  \
    \      for (i = 0; i < n; i++) {\n            lefttoRight[i] = i;\n          \
    \  righttoLeft[i] = n - 1 - i;\n        }\n        // Car collision\n        for\
    \ (i = 0; i < n; i++) {\n            if (lefttoRight[i] == righttoLeft[i]) {\n\
    \                count++;\n            }\n        }\n        delete[] lefttoRight;\n\
    \        delete[] righttoLeft;\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpa9b8aagv: /tmp/tmpa9b8aagv.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    std::cin >> n;\n    std::vector<long> leftToRight(n);\n    std::vector<long>\
    \ rightToLeft(n);\n    for (long i = 0; i < n; i++) {\n        std::cin >> leftToRight[i];\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        std::cin >> rightToLeft[i];\n\
    \    }\n    std::sort(leftToRight.begin(), leftToRight.end());\n    std::sort(rightToLeft.begin(),\
    \ rightToLeft.end());\n    long l = 0;\n    long r = 0;\n    while (l < n && r\
    \ < n) {\n        if (leftToRight[l] < rightToLeft[r]) {\n            count +=\
    \ r;\n            l++;\n        } else {\n            r++;\n        }\n    }\n\
    \    count += n * (n - l);\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmvbwoxoi: /tmp/tmpmvbwoxoi.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::vector<long>left_to_right(n,0);\n\
    \    std::vector<long>right_to_left(n,0);\n    for(int i=0;i<n;i++){\n       \
    \ left_to_right[i]=i;\n        right_to_left[i]=n-i-1;\n    }\n    sort(left_to_right.begin(),left_to_right.end());\n\
    \    sort(right_to_left.begin(),right_to_left.end());\n    int l=0,r=0;\n    long\
    \ ans=0;\n    while(l<n&&r<n){\n        if(left_to_right[l]<right_to_left[r]){\n\
    \            ans+=r;\n            l++;\n        }\n        else\n            r++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp6h7ikawy: /tmp/tmp6h7ikawy.cpp:34: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count_lef\
    \ = 0;\n    long count_right = 0;\n    long collision = 0;\n    for (long i =\
    \ 0; i < n; i++) {\n        count_lef++;\n        for (long j = 0; j < n; j++)\
    \ {\n            count_right++;\n            collision++;\n        }\n    }\n\
    \    return collision;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong l = 1,\
    \ r = n, m;\n\twhile (l != r) {\n\t\tm = (l + r) / 2;\n\t\tlong s = m*(m + 1)\
    \ / 2;\n\t\tif (s == n) {\n\t\t\treturn m;\n\t\t}\n\t\telse if (s < n) {\n\t\t\
    \tl = m + 1;\n\t\t}\n\t\telse {\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpifoioazu: /tmp/tmpifoioazu.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Please complete\
    \ this function.\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpvl2y68zp: /tmp/tmpvl2y68zp.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Note: this\
    \ is a short but complete program.  You need to complete it.\n  return 1;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmplxof26j_: /tmp/tmplxof26j_.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n\
    \ * (n - 1)) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpggpfx66h: /tmp/tmpggpfx66h.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::vector<long>\
    \ colls;\n    long i, j, c=0;\n    while(n>1) {\n        j = n%2;\n        i =\
    \ n/2;\n        if(j==1) {\n            colls.push_back(i);\n            n = i;\n\
    \        }\n        else\n            n = i;\n    }\n    for(i=0; i<colls.size();\
    \ i++)\n        c += colls[i];\n    return c;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp286tzj28: /tmp/tmp286tzj28.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long numCollisions\
    \ = 0;\n    int c1[n];\n    int c2[n];\n    int c3[n];\n    int c4[n];\n    int\
    \ c5[n];\n    int c6[n];\n    int c7[n];\n    int c8[n];\n    int c9[n];\n   \
    \ int c10[n];\n    int c11[n];\n    int c12[n];\n    int c13[n];\n    int c14[n];\n\
    \    int c15[n];\n    int c16[n];\n    int c17[n];\n    int c18[n];\n    int c19[n];\n\
    \    int c20[n];\n    int c21[n];\n    int c22[n];\n    int c23[n];\n    int c24[n];\n\
    \    int c25[n];\n    int c26[n];\n    int c27[n];\n    int c28[n];\n    int c29[n];\n\
    \    int c30[n];\n    int c31[n];\n    int c32[n];\n    int c33[n];\n    int c34[n];\n\
    \    int c35[n];\n    int c36[n];\n    int c37[n];\n    int c38[n];\n    int c39[n];\n\
    \    int c40[n];\n    int c41[n];\n    int c42[n];\n    int c43[n];\n    int c44[n];\n\
    \    int c45[n];\n    int c46[n];\n    int c47[n];\n    int c48[n];\n    int c49[n];\n\
    \    int c50[n];\n    int c51[n];\n    int c52[n];\n    int c53[n];\n    int c54[n];\n\
    \    int c55[n];\n    int c56[n];\n    int c57[n];\n    int c58[n];\n    int c59[n];\n\
    \    int c60[n];\n    int c61[n];\n    int c62[n];\n    int c63[n\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdow21ibr.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpdow21ibr.cpp:75:14: error: expected \u2018]\u2019 before\
    \ \u2018}\u2019 token\n   75 |     int c63[n\n      |              ^\n      |\
    \              ]\n   76 | }\n      | ~             \n/tmp/tmpdow21ibr.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660092873
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::unordered_map<long,long>\
    \ left_car_map; // maps a car's starting position to its speed\n    std::unordered_map<long,long>\
    \ right_car_map; // maps a car's starting position to its speed\n    assert(n\
    \ >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    // we have n cars driving\
    \ left to right and n cars driving right to left\n    // the left-to-right cars\
    \ start out at positions 0 through n-1, and \n    // the right-to-left cars start\
    \ out at positions 0 through n-1.\n    for (long left_car_pos = 0; left_car_pos\
    \ < n; left_car_pos++) {\n        long car_speed = rand() % n;\n        left_car_map[left_car_pos]\
    \ = car_speed;\n    }\n    for (long right_car_pos = 0; right_car_pos < n; right_car_pos++)\
    \ {\n        long car_speed = rand() % n;\n        right_car_map[right_car_pos]\
    \ = car_speed;\n    }\n    // now find the collisions\n    long collisions = 0;\n\
    \    for (long pos = 0; pos < n; pos++) {\n        if (left_car_map.find(pos)\
    \ != left_car_map.end() && right_car_map.find(pos) != right_car_map.end()) {\n\
    \            // there's a left-to-right car and a right-to-left car at position\
    \ pos.\n            // these cars are not moving.\n            collisions++;\n\
    \        }\n        for (long t = 1; t < n; t++) {\n            // for t = 1,\
    \ 2, 3, ..., n-1, we move each car's position according to its speed.\n      \
    \      // then we check whether there are any collisions at the new positions.\n\
    \            // by doing this we find all the collisions (which occur at some\
    \ time t).\n            long left_car_pos = pos + t * left_car_map[pos];\n   \
    \         long right_car_pos = pos - t * right_car_map[pos];\n            if (left_car_pos\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr15nlwy_.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpr15nlwy_.cpp:43:29: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   43 |             if (left_car_pos\n      |         \
    \       ~            ^\n      |                             )\n   44 | }\n   \
    \   | ~                            \n/tmp/tmpr15nlwy_.cpp:44:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   44 | }\n      | ^\n/tmp/tmpr15nlwy_.cpp:45:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   45 | int main() {\n      |            ^\n/tmp/tmpr15nlwy_.cpp:52:1: error:\
    \ expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmpr15nlwy_.cpp:31:40:\
    \ note: to match this \u2018{\u2019\n   31 |     for (long pos = 0; pos < n; pos++)\
    \ {\n      |                                        ^\n/tmp/tmpr15nlwy_.cpp:52:1:\
    \ error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmpr15nlwy_.cpp:11:33:\
    \ note: to match this \u2018{\u2019\n   11 | long car_race_collision(long n) {\n\
    \      |                                 ^\n/tmp/tmpr15nlwy_.cpp:52:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Implement\
    \ this placeholder.\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpq_71d9th: /tmp/tmpq_71d9th.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// TODO\n\t\
    long count = 0;\n\tlong coll = 0;\n\tint a[n];\n\tint b[n];\n\tfor (int i = 0;\
    \ i < n; i++) {\n\t\ta[i] = i;\n\t\tb[i] = i;\n\t}\n\twhile (count < n) {\n\t\t\
    for (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif\
    \ (a[i] > b[j]) {\n\t\t\t\t\tcoll++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcount++;\n\
    \t}\n\treturn coll;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpcrwsuzyz: /tmp/tmpcrwsuzyz.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tstd::set<int>\
    \ cars;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcars.insert(i);\n\t}\n\tstd::set<int>::iterator\
    \ it;\n\tint count = 0;\n\tfor (it = cars.begin(); it != cars.end(); it++) {\n\
    \t\tif (*it >= 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmphbgsuxe6: /tmp/tmphbgsuxe6.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  \tlong collisions\
    \ = 0;\n\tlong l_speed = 0;\n\tlong r_speed = 0;\n\tfor(long i = 0; i < n; i++)\
    \ {\n\t\tl_speed += 2;\n\t\tr_speed += 1;\n\t\tif(l_speed >= r_speed) {\n\t\t\t\
    collisions++;\n\t\t}\n\t}\n\treturn collisions;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpn097zhr8: /tmp/tmpn097zhr8.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpl0r1zys9: /tmp/tmpl0r1zys9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n\
    \ * (n-1)) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n \
    \   assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpx4x1hntz: /tmp/tmpx4x1hntz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // For n=1,\
    \ the answer is 0.  For n=2, the answer is 1.\n    // For n=3, the answer is 2.\
    \  For n=4, the answer is 4.\n    assert(n>=1);\n    // REPLACE THIS LINE WITH\
    \ CODE THAT RETURNS THE CORRECT VALUE.\n    return (n*(n-1))/2;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp2rl8ngxl: /tmp/tmp2rl8ngxl.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpylwzcdci: /tmp/tmpylwzcdci.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long num_collisions\
    \ = 0;\n  int i;\n  std::vector<long> right_to_left_pos;\n  std::vector<long>\
    \ left_to_right_pos;\n  for (i = 0; i < n; i++) {\n    left_to_right_pos.push_back(i);\n\
    \    right_to_left_pos.push_back(n - i - 1);\n  }\n  std::sort(left_to_right_pos.begin(),\
    \ left_to_right_pos.end());\n  std::sort(right_to_left_pos.begin(), right_to_left_pos.end());\n\
    \  i = 0;\n  int j = 0;\n  int out_of_range = 0;\n  while (!out_of_range) {\n\
    \    if (left_to_right_pos[i] > right_to_left_pos[j]) {\n      if (j < n - 1)\
    \ {\n        j++;\n      } else {\n        out_of_range = 1;\n      }\n    } else\
    \ if (left_to_right_pos[i] < right_to_left_pos[j]) {\n      if (i < n - 1) {\n\
    \        i++;\n      } else {\n        out_of_range = 1;\n      }\n    } else\
    \ {\n      num_collisions++;\n      if (i < n - 1) {\n        i++;\n      } else\
    \ {\n        out_of_range = 1;\n      }\n      if (j < n - 1) {\n        j++;\n\
    \      } else {\n        out_of_range = 1;\n      }\n    }\n  }\n  return num_collisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpgkofqw8o: /tmp/tmpgkofqw8o.cpp:56: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tif (n == 0)\
    \ return 0;\n\treturn n * n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092874
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong i, j,\
    \ k;\n\tlong a[n], b[n];\n\tfor (i = 0; i < n; i++)\n\t\tstd::cin >> a[i];\n\t\
    for (i = 0; i < n; i++)\n\t\tstd::cin >> b[i];\n\tstd::sort(a, a + n);\n\tstd::sort(b,\
    \ b + n);\n\ti = 0;\n\tj = 0;\n\tk = 0;\n\twhile (i < n && j < n) {\n\t\tif (a[i]\
    \ <= b[j]) {\n\t\t\tif (a[i] == b[j]) {\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\
    \t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn k;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n>=0);\n\
    \    // Please write your code here.\n    long ways=0;\n    ways=pow(n,2);\n \
    \   return ways;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Assume we\
    \ have a clock that is infinitely precise.\n  // Each time a car moves, it is\
    \ at a very precise time; say 0.1\n  // If two cars collide, the time of collision\
    \ can be computed as the\n  // average of the time of the two cars.  For example,\
    \ if two cars collide\n  // at time 0.1, and 0.3, the collision time is 0.2.\n\
    \  // The way we solve this problem is to maintain an ordered list of\n  // all\
    \ times at which cars collide.  The list is sorted from smallest\n  // to largest.\n\
    \  // The number of collisions is the number of elements in the list.\n  std::vector<double>\
    \ times;\n  times.push_back(0.0);\n  // The time a car collides with the last\
    \ car is trivial to compute.\n  // We simply add the time it takes to go n-1 cars\
    \ to the time of the last car.\n  // We add the resulting time to the list of\
    \ times.\n  // We keep doing this until all cars in the first set are accounted\
    \ for.\n  for (int i = 0; i < n; i++) {\n    double t = times.back() + n-1;\n\
    \    times.push_back(t);\n  }\n  // In theory, we are done.  In practice, however,\
    \ there is some amount of\n  // error from computing double.  This error accumulates\
    \ and can lead to\n  // duplicate entries.  We use the following loop to eliminate\
    \ any duplicate\n  // entries that are in the list.\n  for (int i = 0; i < times.size();\
    \ i++) {\n    for (int j = i+1; j < times.size(); j++) {\n      if (times[i] ==\
    \ times[j]) {\n        // remove j from the list\n        times.erase(times.begin()+j);\n\
    \        j--;\n      }\n    }\n  }\n  // The number of collisions is the number\
    \ of elements in the list.\n  return times.size();\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp5cgqvs0z: /tmp/tmp5cgqvs0z.cpp:49: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  //1000000000000000000\n\
    \  long long ans=0;\n  std::vector<long long> left_to_right(n);\n  std::vector<long\
    \ long> right_to_left(n);\n  for(long long i=0;i<n;i++){\n      left_to_right[i]=10000000000000+i;\n\
    \      right_to_left[i]=10000000000000-i;\n  }\n  sort(left_to_right.begin(),left_to_right.end());\n\
    \  sort(right_to_left.begin(),right_to_left.end());\n  ans=n*(n-1);\n  for(long\
    \ long i=0;i<n;i++){\n      for(long long j=i+1;j<n;j++){\n          if(left_to_right[i]>right_to_left[j]){\n\
    \              ans=ans-(j-i);\n              break;\n          }\n      }\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpzxpax0ch: /tmp/tmpzxpax0ch.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  assert(n >=\
    \ 1);\n  return n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpnn9dkll2: /tmp/tmpnn9dkll2.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t//int *right=new\
    \ int[n],*left=new int[n];\n\tint right[n],left[n];\n\t//cout<<n<<endl;\n\tfor(int\
    \ i=0;i<n;i++)\n\t\tcin>>right[i];\n\tfor(int i=0;i<n;i++)\n\t\tcin>>left[i];\n\
    \t//cout<<n<<endl;\n\tsort(right,right+n);\n\tsort(left,left+n);\n\t//cout<<n<<endl;\n\
    \tint count=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(right[i]>left[i])\n\t\t\t\
    count++;\n\t}\n\treturn count;\n\t// Write your solution here\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz63jolk3.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpz63jolk3.cpp:16:3: error: \u2018cin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cin\u2019?\n   16 |   cin>>right[i];\n\
    \      |   ^~~\n      |   std::cin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpz63jolk3.cpp:2:\n/usr/include/c++/9/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmpz63jolk3.cpp:18:3:\
    \ error: \u2018cin\u2019 was not declared in this scope; did you mean \u2018std::cin\u2019\
    ?\n   18 |   cin>>left[i];\n      |   ^~~\n      |   std::cin\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n               \
    \  from /tmp/tmpz63jolk3.cpp:2:\n/usr/include/c++/9/iostream:60:18: note: \u2018\
    std::cin\u2019 declared here\n   60 |   extern istream cin;  /// Linked to standard\
    \ input\n      |                  ^~~\n/tmp/tmpz63jolk3.cpp:20:2: error: \u2018\
    sort\u2019 was not declared in this scope; did you mean \u2018std::sort\u2019\
    ?\n   20 |  sort(right,right+n);\n      |  ^~~~\n      |  std::sort\nIn file included\
    \ from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz63jolk3.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:296:1:\
    \ note: \u2018std::sort\u2019 declared here\n  296 | sort(_ExecutionPolicy&& __exec,\
    \ _RandomAccessIterator __first, _RandomAccessIterator __last);\n      | ^~~~\n"
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpufdztue_: /tmp/tmpufdztue_.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n-1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmppmyjpusk: /tmp/tmppmyjpusk.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092871
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long numberOfCollisions=0;\n\
    \  int i,j;\n  for(i=0;i<n;i++)\n  {\n    for(j=0;j<n;j++)\n    {\n      if(i<j)\n\
    \      {\n        numberOfCollisions++;\n      }\n    }\n  }\n  return numberOfCollisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpisg9nyuw: /tmp/tmpisg9nyuw.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  std::vector<int>\
    \ cars;\n  for (int i = 0; i < n; i++) {\n    cars.push_back(i);\n  }\n  long\
    \ result = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n;\
    \ j++) {\n      if (cars[i] > cars[j]) {\n        result++;\n      }\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmppwjfywzq: /tmp/tmppwjfywzq.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  //ASSUME: n>=2\n\
    \  long dp[n+1][n+1];\n  dp[0][0]=0;\n  for(long i=1;i<=n;i++)\n  {\n    dp[i][0]=i;\n\
    \    dp[0][i]=i;\n  }\n  for(long i=1;i<=n;i++)\n  {\n    for(long j=1;j<=n;j++)\n\
    \    {\n      if(i==j)\n      {\n        dp[i][j]=dp[i-1][j-1]+j;\n      }\n \
    \     else\n      {\n        dp[i][j]=dp[i-1][j]+j;\n      }\n    }\n  }\n  return\
    \ dp[n][n];\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpq55hslum: /tmp/tmpq55hslum.cpp:38: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // remove this\
    \ line\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpe8pkn200: /tmp/tmpe8pkn200.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n   long result\
    \ = 0;\n    for(long i=0;i<n;i++)\n    {\n      result = result + i;\n    }\n\
    \   return result;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpd2sbed7e: /tmp/tmpd2sbed7e.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // This is\
    \ your job.  Fix this stub to calculate\n    // the proper output.\n    return\
    \ (n*(n-1))/2;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpwlzqpaf0: /tmp/tmpwlzqpaf0.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // your code\
    \ goes here\n    return n*(n-1)/2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp1h2e6vwp: /tmp/tmp1h2e6vwp.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong left_to_right[n],\
    \ right_to_left[n];\n\tlong no_of_collisions = 0;\n\tfor (long i = 0; i < n; i++)\
    \ {\n\t\tscanf(\"%ld\", &left_to_right[i]);\n\t}\n\tfor (long i = 0; i < n; i++)\
    \ {\n\t\tscanf(\"%ld\", &right_to_left[i]);\n\t}\n\tstd::sort(left_to_right, left_to_right\
    \ + n);\n\tstd::sort(right_to_left, right_to_left + n);\n\tlong j = 0;\n\tfor\
    \ (long i = 0; i < n; i++) {\n\t\twhile (j < n && right_to_left[j] <= left_to_right[i])\
    \ {\n\t\t\tno_of_collisions++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn no_of_collisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n\
    \ > 0);\n    return (n * (n - 1)) / 2;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpio6bcut6: /tmp/tmpio6bcut6.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// Write your\
    \ solution here.\n\treturn n * (n - 1) / 2;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpux_oew_5: /tmp/tmpux_oew_5.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function.\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp618q1tc6: /tmp/tmp618q1tc6.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long long\
    \ ans = 0;\n    std::multiset<long long> right_pos;\n    std::multiset<long long>\
    \ left_pos;\n    for (long long i = 1; i <= n; i++) {\n        right_pos.insert(1LL\
    \ * i * 1e9);\n        left_pos.insert(-1LL * i * 1e9);\n    }\n    while (!right_pos.empty())\
    \ {\n        ans += left_pos.count(*right_pos.begin());\n        left_pos.erase(-*right_pos.begin());\n\
    \        right_pos.erase(right_pos.begin());\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp49y408gx: /tmp/tmp49y408gx.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function\n  // The function should have time complexity O(n^2)\n\n  //\
    \ For example, if n is 5, and\n  // leftToRightCars  = [1, 3, 6, 8, 10]\n  //\
    \ rightToLeftCars = [5, 8, 2, 4, 9]\n  // Then output is 2.\n  // The two cars\
    \ to collide are: 1 and 9, 3 and 4\n  long count=0;\n  for(long i=0;i<n;i++)\n\
    \  {\n    for(long j=0;j<n;j++)\n    {\n      if(leftToRightCars[i]<rightToLeftCars[j])\n\
    \      {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpyxnevj.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpgpyxnevj.cpp:25:10: error: \u2018leftToRightCars\u2019\
    \ was not declared in this scope\n   25 |       if(leftToRightCars[i]<rightToLeftCars[j])\n\
    \      |          ^~~~~~~~~~~~~~~\n/tmp/tmpgpyxnevj.cpp:25:29: error: \u2018rightToLeftCars\u2019\
    \ was not declared in this scope\n   25 |       if(leftToRightCars[i]<rightToLeftCars[j])\n\
    \      |                             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long c =\
    \ 0;\n    std::vector<long> v(n);\n    std::iota(v.begin(), v.end(), 0);\n   \
    \ do {\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                if (v[i] < v[j]) {\n                    c++;\n\
    \                }\n            }\n        }\n    } while (std::next_permutation(v.begin(),\
    \ v.end()));\n    return c;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpwo9g43z5: /tmp/tmpwo9g43z5.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n   if (n <= 1)\
    \ {\n      return 0;\n   }\n\n   // left is a boolean value which is true if a\
    \ car is moving left to right and false otherwise.\n   // left is the leftmost\
    \ car moving left to right.\n   bool left = true;\n   // right is the rightmost\
    \ car moving right to left.\n   bool right = false;\n   long collisions = 0;\n\
    \   // loop invariant:\n   // (1) if n <= 1, collisions = 0\n   // (2) if n >\
    \ 1, collisions is the number of collisions between the leftmost car moving left\
    \ to right\n   //     and rightmost car moving right to left.\n   // initialization:\n\
    \   // (1) if n <= 1, collisions = 0 which is the correct value\n   // (2) if\
    \ n > 1, the leftmost car moving left to right and rightmost car moving right\
    \ to left do not\n   //     collide because they are infinitely far from each\
    \ other.\n   while (n > 1) {\n      // number of cars moving left to right\n \
    \     long leftCars = (n + 1) / 2;\n      // number of cars moving right to left\n\
    \      long rightCars = n / 2;\n      if (left) {\n         if (leftCars == 1)\
    \ {\n            left = false;\n         }\n         else {\n            collisions\
    \ += (leftCars - 1) * rightCars;\n         }\n      }\n      else {\n        \
    \ if (rightCars == 1) {\n            right = true;\n         }\n         else\
    \ {\n            collisions += (rightCars - 1) * leftCars;\n         }\n     \
    \ }\n      n--;\n   }\n   return collisions;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpk0qpy5h6: /tmp/tmpk0qpy5h6.cpp:57: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong* ptr;\n\
    \tlong* p;\n\tlong count=0;\n\tlong* a;\n\tlong* b;\n\ta=(long*)malloc(n*sizeof(long));\n\
    \tassert(a!=NULL);\n\tb=(long*)malloc(n*sizeof(long));\n\tassert(b!=NULL);\n\t\
    long i;\n\tlong j;\n\tfor(i=0;i<n;i++)\n\t{\n\t\ta[i]=i;\n\t\tb[i]=i;\n\t}\n\t\
    for(i=0;i<n;i++)\n\t{\n\t\tfor(j=0;j<n;j++)\n\t\t{\n\t\t\tif(a[i]==b[j])\n\t\t\
    \t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tfree(a);\n\tfree(b);\n\treturn count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ap_08u1: /tmp/tmp5ap_08u1.cpp:44: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn (n-1)*n/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpxikqqx0u: /tmp/tmpxikqqx0u.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s4bei74: /tmp/tmp5s4bei74.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // vector<vector<long>>\
    \ A(n, vector<long>(2));\n    std::vector<std::vector<long>> A(n, std::vector<long>(2));\n\
    \    for (long i = 0; i < n; i++) {\n        long x;\n        cin >> x;\n    \
    \    A[i][0] = x;\n        A[i][1] = 0;\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        long x;\n        cin >> x;\n        A[i][0] = x;\n        A[i][1]\
    \ = 1;\n    }\n    sort(A.begin(), A.end());\n    long ans = 0;\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        if (A[i][1] == 0) {\n    \
    \        count++;\n        } else {\n            ans += count;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpbptmh2.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpnpbptmh2.cpp:16:9: error: \u2018cin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cin\u2019?\n   16 |         cin >> x;\n\
    \      |         ^~~\n      |         std::cin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpnpbptmh2.cpp:2:\n/usr/include/c++/9/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmpnpbptmh2.cpp:22:9:\
    \ error: \u2018cin\u2019 was not declared in this scope; did you mean \u2018std::cin\u2019\
    ?\n   22 |         cin >> x;\n      |         ^~~\n      |         std::cin\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpnpbptmh2.cpp:2:\n/usr/include/c++/9/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n"
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // your code\
    \ here\n    return (n*(n-1))/2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpfhxceukj: /tmp/tmpfhxceukj.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long res\
    \ = 0;\n    long *ar = new long[n];\n    for(long i = 0; i < n; i++) {\n     \
    \   ar[i] = i;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ i + 1; j < n; j++) {\n            if(ar[i] > ar[j]) {\n                res++;\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp00p2ve4x: /tmp/tmp00p2ve4x.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092874
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Your code\
    \ goes here\n    std::vector<long> a(n);\n    std::vector<long> b(n);\n    long\
    \ a_max = 0;\n    long b_max = 0;\n    for (long i = 0; i < n; i++) {\n      \
    \  std::cin >> a[i];\n        a_max = std::max(a_max, a[i]);\n    }\n    for (long\
    \ i = 0; i < n; i++) {\n        std::cin >> b[i];\n        b_max = std::max(b_max,\
    \ b[i]);\n    }\n    long max_dist = std::max(a_max, b_max);\n    long ans = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n\
    \            ans += (max_dist - a[i] - b[j]) * 2 + 1;\n        }\n    }\n    std::cout\
    \ << \"ans \" << ans << std::endl;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    if (n <=\
    \ 1) {\n        return 0;\n    }\n    long count = 0;\n    int k = n;\n    while\
    \ (k > 1) {\n        count += k - 1;\n        k--;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp2gpk1591: /tmp/tmp2gpk1591.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092875
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpl0r1zys9: /tmp/tmpl0r1zys9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long left =\
    \ 0;\n  long right = 0;\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n  \
    \  long car = i + 1;\n    left += car;\n    right += n - car + 1;\n    sum +=\
    \ car - 1;\n  }\n  long smaller = std::min(left, right);\n  return (sum - smaller)\
    \ * 2 + 1;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpw1lz14_8: /tmp/tmpw1lz14_8.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092875
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    std::vector<int> v1(n);\n    std::vector<int> v2(n);\n    for (long\
    \ i = 0; i < n; i++) {\n        std::cin >> v1[i];\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        std::cin >> v2[i];\n    }\n    sort(v1.begin(), v1.end());\n\
    \    sort(v2.begin(), v2.end());\n    for (long i = 0; i < n; i++) {\n       \
    \ std::cout << v1[i] << \" \";\n    }\n    std::cout << \"\\n\";\n    for (long\
    \ i = 0; i < n; i++) {\n        std::cout << v2[i] << \" \";\n    }\n    std::cout\
    \ << \"\\n\";\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) {\n\
    \        if (v1[i] < v2[j]) {\n            i++;\n        } else if (v1[i] > v2[j])\
    \ {\n            j++;\n        } else {\n            std::cout << v1[i] << \"\
    \ \" << v2[j] << \" \" << count << std::endl;\n            i++;\n            j++;\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  assert(n >\
    \ 0);\n\n  std::vector<long> left_to_right(n);\n  std::vector<long> right_to_left(n);\n\
    \n  // Your code goes here\n  for (long i = 0; i < n; i++) {\n      left_to_right[i]\
    \ = i;\n      right_to_left[i] = n - i - 1;\n  }\n\n  long result = 0;\n  for\
    \ (long i = 0; i < n; i++) {\n      for (long j = 0; j < n; j++) {\n         \
    \ if (left_to_right[i] == right_to_left[j]) {\n              result++;\n     \
    \     }\n      }\n  }\n\n  return result;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpgj9f3wic: /tmp/tmpgj9f3wic.cpp:36: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  std::vector<long>\
    \ cars(n);\n  for (long i = 0; i < n; i++) {\n    cars[i] = i;\n  }\n  long collisions\
    \ = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = i+1; j < n; j++) {\n\
    \      if (cars[i] > cars[j]) {\n        collisions++;\n      }\n    }\n  }\n\
    \  return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpg1mv4osh: /tmp/tmpg1mv4osh.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tif (n == 0)\
    \ {\n\t\treturn 0;\n\t}\n\telse {\n\t\treturn n - 1;\n\t}\n}\nint main() {\n \
    \   auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpxp7ftq0v: /tmp/tmpxp7ftq0v.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpfjahnhkq: /tmp/tmpfjahnhkq.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long cnt =\
    \ 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n \
    \     cnt++;\n    }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n   long collisions\
    \ = 0;\n   long* cars_left = new long[n];\n   long* cars_right = new long[n];\n\
    \   for (long i = 0; i < n; i++) {\n      cars_left[i] = n - i;\n      cars_right[i]\
    \ = i + 1;\n   }\n   for (long i = 0; i < n; i++) {\n      for (long j = 0; j\
    \ < n; j++) {\n         if (cars_left[i] == cars_right[j]) {\n            collisions++;\n\
    \         }\n      }\n   }\n   delete[] cars_left;\n   delete[] cars_right;\n\
    \   return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp4mdh2omb: /tmp/tmp4mdh2omb.cpp:32: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Your code\
    \ here.\n    int m = n*2;\n    long coll[m];\n    int i;\n    for(i=0;i<m;i++)\n\
    \        coll[i] = i;\n    i = m;\n    while(i>0)\n    {\n        long index =\
    \ rand()%i;\n        i--;\n        coll[index] = coll[i];\n    }\n    long j =\
    \ 0;\n    long c = 0;\n    for(i=0;i<m;i++)\n    {\n        if(coll[i]>=n)\n \
    \       {\n            if(coll[i] - n == coll[j])\n                c++;\n    \
    \        j++;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpebxt9qlp: /tmp/tmpebxt9qlp.cpp:40: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpylwzcdci: /tmp/tmpylwzcdci.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::cout\
    \ << \"----------\" << std::endl;\n    std::cout << \"Number of cars = \" << n\
    \ << std::endl;\n    long collisions = 0;\n    long num_cars_moving_left_to_right\
    \ = 0;\n    long num_cars_moving_right_to_left = 0;\n    while (num_cars_moving_left_to_right\
    \ != n) {\n        long cars_that_started_moving_left_to_right = n - num_cars_moving_left_to_right;\n\
    \        long cars_that_started_moving_right_to_left = n - num_cars_moving_right_to_left;\n\
    \        std::cout << \"\\tnum_cars_moving_left_to_right = \" << num_cars_moving_left_to_right\n\
    \                << \" num_cars_moving_right_to_left = \" << num_cars_moving_right_to_left\n\
    \                << \" collisions = \" << collisions << std::endl;\n        if\
    \ (cars_that_started_moving_left_to_right >= cars_that_started_moving_right_to_left)\
    \ {\n            // current number of cars moving left to right is greater than\
    \ that moving right to left;\n            // therefore, all cars moving right\
    \ to left will reach the collision point\n            collisions += cars_that_started_moving_right_to_left;\n\
    \            num_cars_moving_right_to_left = 0;\n        } else {\n          \
    \  // current number of cars moving left to right is less than that moving right\
    \ to left;\n            // therefore, all cars moving left to right will reach\
    \ the collision point\n            collisions += cars_that_started_moving_left_to_right;\n\
    \            num_cars_moving_left_to_right = 0;\n        }\n        num_cars_moving_left_to_right\
    \ += cars_that_started_moving_left_to_right;\n        num_cars_moving_right_to_left\
    \ += cars_that_started_moving_right_to_left;\n    }\n    std::cout << \"----------\"\
    \ << std::endl;\n    return collisions;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpryzkolld: /tmp/tmpryzkolld.cpp:42: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: "----------\nNumber of cars = 2\n\tnum_cars_moving_left_to_right = 0 num_cars_moving_right_to_left\
    \ = 0 collisions = 0\n----------\n"
  timestamp: 1660092876
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    if (n <=\
    \ 1) return 0;\n    long collisions = 0;\n    long left_cars = 0;\n    long right_cars\
    \ = 0;\n    long i = 0;\n    // iterate from the left to the right\n    for (i\
    \ = 0; i < n; i++) {\n        left_cars++;\n        collisions += right_cars;\n\
    \    }\n    // iterate from the right to the left\n    for (i = 0; i < n; i++)\
    \ {\n        right_cars++;\n        collisions += left_cars;\n    }\n    return\
    \ collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n   \
    \ assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong count\
    \ = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\
    \t\t\tif (i > j)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp42l0igxq: /tmp/tmp42l0igxq.cpp:23: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_ar6hk_: /tmp/tmpl_ar6hk_.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long c =\
    \ 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n; j++)\
    \ {\n            if (i < j) {\n                c++;\n            }\n        }\n\
    \    }\n    return c;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmppwa0pztj: /tmp/tmppwa0pztj.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // The output\
    \ is the number of inversions in the array\n  // We use merge sort to find number\
    \ of inversions\n  std::vector<long> array;\n  array.reserve(n);\n  // The first\
    \ n natural numbers are the cars moving left to right\n  for (int i = 0; i < n;\
    \ i++) {\n    array.push_back(i);\n  }\n  // Generate an array of n random numbers\
    \ between 0 and n-1\n  // The second n cars are moving right to left in this random\
    \ order\n  std::vector<long> array2;\n  array2.reserve(n);\n  for (int i = 0;\
    \ i < n; i++) {\n    int r;\n    r = rand() % n;\n    array2.push_back(r);\n \
    \ }\n  // Merge sort to find the number of inversions\n  // These are the collisions\n\
    \  long numCollisions = sort(array, array2, 0, n - 1);\n  return numCollisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgyy5a87.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpmgyy5a87.cpp:31:52: error: no matching function for call\
    \ to \u2018sort(std::vector<long int>&, std::vector<long int>&, int, long int)\u2019\
    \n   31 |   long numCollisions = sort(array, array2, 0, n - 1);\n      |     \
    \                                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmgyy5a87.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4863:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::sort(_RAIter, _RAIter)\u2019\
    \n 4863 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4863:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpmgyy5a87.cpp:31:52: note: \
    \  candidate expects 2 arguments, 4 provided\n   31 |   long numCollisions = sort(array,\
    \ array2, 0, n - 1);\n      |                                                \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpmgyy5a87.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4893:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4893 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4893:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpmgyy5a87.cpp:31:52:\
    \ note:   candidate expects 3 arguments, 4 provided\n   31 |   long numCollisions\
    \ = sort(array, array2, 0, n - 1);\n      |                                  \
    \                  ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmgyy5a87.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:292:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, cla"
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return 0; //\
    \ replace this line with your code\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxrtypntt: /tmp/tmpxrtypntt.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong res=0;\n\
    \t//YOUR CODE HERE\n\tlong *nums=new long[n];\n\tfor(long i=0;i<n;i++) {\n\t\t\
    nums[i]=i;\n\t}\n\tfor(long i=0;i<n;i++) {\n\t\tfor(long j=0;j<n;j++) {\n\t\t\t\
    if(nums[i]==nums[j]) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t}\n\tres-=n;\n\tres/=2;\n\
    \treturn res;\n}\nint main() {\n    auto candidate = car_race_collision;\n   \
    \ assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp84icigdo: /tmp/tmp84icigdo.cpp:31: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // n is the\
    \ number of cars in each of the two tracks.\n    // YOUR CODE GOES HERE.\n   \
    \ // This value will be wrong until you fix it.\n    long num = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if\
    \ (i == j) {\n                num++;\n            }\n        }\n    }\n    return\
    \ num;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp7gy0_y14: /tmp/tmp7gy0_y14.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Fill in\
    \ the blanks in this function.\n  // You can add more functions to this file,\
    \ but you are not allowed to change\n  // the signature of this function.\n  //\
    \ You can add more functions to this file, but you are not allowed to change\n\
    \  // the signature of this function.\n  // You are allowed to define and use\
    \ more functions, with one constraint:\n  // You are not allowed to define any\
    \ function that takes an integer n and returns an integer;\n  // (you can however\
    \ create helper functions that take an integer and return nothing)\n  // You are\
    \ allowed to define local variables\n  // You are not allowed to use any binary\
    \ operator \"&\", \"|\", \"^\", \"<<\", \">>\"\n  // You are not allowed to use\
    \ any statement that includes the word \"if\"\n  // You are not allowed to define\
    \ any static variables\n  // You are not allowed to use any function from the\
    \ standard library that\n  // does not satisfy the above conditions.\n  // You\
    \ can use unsigned integers, signed integers, arrays, or pointers.\n  // Notice\
    \ that a struct can be used as a variable.\n  // If you want to use binary operators\
    \ for these structs, you can use the\n  // \"bitwise_xor\" struct from the std\
    \ library.\n\n  long i;\n  long counter = 0;\n  long start;\n  long end;\n  long\
    \ end_right;\n  long start_right;\n  long end_left;\n  long start_left;\n  long*\
    \ arr;\n  long* arr_right;\n  long* arr_left;\n  long curr;\n  long curr_right;\n\
    \  long curr_left;\n  arr = new long[n];\n  arr_right = new long[n];\n  arr_left\
    \ = new long[n];\n  start = 0;\n  end = n;\n  start_right = n;\n  end_right =\
    \ n;\n  start_left = n;\n  end_left = n;\n  for (i = start; i < end; i++) {\n\
    \    arr[i] = i;\n  }\n  for (i = start_right; i < end_right; i++) {\n    arr_right[i]\
    \ = i;\n  }\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ews9pq2: /tmp/tmp5ews9pq2.cpp:63: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long result\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n;\
    \ j++) {\n            result += (n - i - 1) * (n - j - 1);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_s_8p3_k: /tmp/tmp_s_8p3_k.cpp:22: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  //test code\n\
    \  //return 0;\n  //return n;\n  return n*(n-1)/2;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpkqszkze7: /tmp/tmpkqszkze7.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  std::vector<long>\
    \ car_position_right(n);\n  std::vector<long> car_position_left(n);\n  for (long\
    \ i = 0; i < n; i++) {\n    car_position_right[i] = 2 * i;\n    car_position_left[i]\
    \ = 2 * i + 1;\n  }\n  // Invariant:  each car_position_right[i] is a position\
    \ of a car that's moving\n  // from left to right.  car_position_right[i] <= car_position_right[i+1].\n\
    \  // Similarly, each car_position_left[i] is a position of a car that's moving\n\
    \  // from right to left.  car_position_left[i] <= car_position_left[i+1].\n \
    \ std::sort(car_position_right.begin(), car_position_right.end());\n  std::sort(car_position_left.begin(),\
    \ car_position_left.end());\n  long collisions = 0;\n  for (long i = 0; i < n;\
    \ i++) {\n    if (car_position_right[i] < car_position_left[i]) {\n      collisions++;\n\
    \    }\n  }\n  return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpgzhzto4l: /tmp/tmpgzhzto4l.cpp:34: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long output\
    \ = 0;\n  // TODO: Write your code here\n  return output;\n}\nint main() {\n \
    \   auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp6r4zuikm: /tmp/tmp6r4zuikm.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return 0;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp0l4mzerp: /tmp/tmp0l4mzerp.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Your code\
    \ here\n\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdylvwlwb: /tmp/tmpdylvwlwb.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // replace\
    \ the code below with your code\n    long count = 0;\n    for (long i = 1; i <=\
    \ n; i++) {\n        for (long j = n; j >= 1; j--) {\n            if (i == j)\
    \ {\n                break;\n            }\n            else {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpe_g_fo9h: /tmp/tmpe_g_fo9h.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    //write your\
    \ code here\n    if(n == 0) return 0;\n    long a = n*(n-1)/2;\n    return a;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp2d883suj: /tmp/tmp2d883suj.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tif (n < 0)\
    \ return -1;\n\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2)\
    \ return 1;\n\treturn n - 1 + car_race_collision(n - 1);\n}\nint main() {\n  \
    \  auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpqlee433l: /tmp/tmpqlee433l.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // This problem\
    \ can be solved in O(n) time by first sorting the cars in\n  // descending order.\
    \   Then, the k'th car from the left will collide with\n  // the k'th car from\
    \ the right.  This is because the only way car k will not\n  // collide with car\
    \ k is if one of the following holds:\n  // 1. Car k is moving right to left and\
    \ the k'th car is moving left to right.\n  // 2. Car k is moving left to right\
    \ and the k'th car is moving right to left.\n  // 3. Car k is moving right to\
    \ left and the k'th car is moving right to left.\n  // 4. Car k is moving left\
    \ to right and the k'th car is moving left to right.\n  // Case 1 cannot hold\
    \ because car k is moving right to left by our sorting\n  // (and car k is moving\
    \ left to right by our sorting).  Case 2 cannot hold\n  // because car k is moving\
    \ left to right by our sorting (and car k is moving\n  // right to left by our\
    \ sorting).  Case 3 cannot hold because car k is moving\n  // right to left by\
    \ our sorting (and car k is moving right to left by our sorting).\n  // Case 4\
    \ cannot hold because car k is moving left to right by our sorting\n  // (and\
    \ car k is moving left to right by our sorting).  The above claims are\n  // easily\
    \ proved by induction.\n  return n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp18f5_0o2: /tmp/tmp18f5_0o2.cpp:32: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long front\
    \ = n - 1;\n    long behind = 0;\n    long cars = n;\n    while (cars > 1) {\n\
    \        long front_distance = front + 1;\n        long behind_distance = cars\
    \ - behind;\n        if (front_distance == behind_distance) {\n            //\
    \ Collision.\n            cars--;\n            front--;\n            behind++;\n\
    \        } else if (front_distance < behind_distance) {\n            // Front\
    \ car moves past collision point, and the previous front car becomes the new front\
    \ car.\n            cars--;\n            front--;\n        } else {\n        \
    \    // Front car moves past collision point, and the previous back car becomes\
    \ the new back car.\n            cars--;\n            behind++;\n        }\n \
    \   }\n    // This is simply the sum of the first n numbers minus n.\n    return\
    \ (n * (n - 1)) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp6f0pwgdp: /tmp/tmp6f0pwgdp.cpp:38: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    std::vector<long>\
    \ left, right;\n    for (long p = 0; p < n; p++) {\n        left.push_back(p);\n\
    \        right.push_back(n-1-p);\n    }\n    long count = 0;\n    for (long p\
    \ = 0; p < n; p++) {\n        for (long q = 0; q < n; q++) {\n            if (left[p]\
    \ > right[q]) ++count;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpezujd9xb: /tmp/tmpezujd9xb.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// first we\
    \ need to create an array that hold the position of cars\n\t// we can have 2 arrays,\
    \ one for right to left, and one for left to right\n\tlong* right_to_left = new\
    \ long[n];\n\tlong* left_to_right = new long[n];\n\t// now we need to give them\
    \ different positions\n\tfor (long i = 0; i < n; i++) {\n\t\tright_to_left[i]\
    \ = rand() % n;\n\t\tleft_to_right[i] = rand() % n;\n\t}\n\t// now we need to\
    \ sort the arrays\n\tstd::sort(right_to_left, right_to_left + n);\n\tstd::sort(left_to_right,\
    \ left_to_right + n);\n\t// now we can just traverse the arrays and if the position\
    \ of left_to_right is less than\n\t// the position of right_to_left, we have a\
    \ collision\n\tlong counter = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (left_to_right[i]\
    \ < right_to_left[i]) {\n\t\t\tcounter++;\n\t\t}\n\t}\n\t// free the memory\n\t\
    delete[] right_to_left;\n\tdelete[] left_to_right;\n\treturn counter;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpah2opouc: /tmp/tmpah2opouc.cpp:39: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tassert(n >=\
    \ 0);\n\treturn n * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmper7ewpla: /tmp/tmper7ewpla.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return 0;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpxf3sp_t2: /tmp/tmpxf3sp_t2.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long ans =\
    \ 0;\n  for (long i = 0; i < n; i++) {\n    ans += i;\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp2bezhi8f: /tmp/tmp2bezhi8f.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tvector<bool>\
    \ left(n, true);\n\tvector<bool> right(n, true);\n\tset<long> used;\n\tlong count\
    \ = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tlong num;\n\t\tcin >> num;\n\t\t\
    if (left[num]) {\n\t\t\tleft[num] = false;\n\t\t\tused.insert(num);\n\t\t}\n\t\
    \telse if (right[num]) {\n\t\t\tright[num] = false;\n\t\t\tused.insert(num);\n\
    \t\t}\n\t\telse {\n\t\t\tassert(used.find(num) != used.end());\n\t\t\tused.erase(num);\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpompz6kj9.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpompz6kj9.cpp:12:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |  vector<bool> left(n, true);\n      |  ^~~~~~\n/tmp/tmpompz6kj9.cpp:12:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpompz6kj9.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpompz6kj9.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpompz6kj9.cpp:12:9:\
    \ error: expected primary-expression before \u2018bool\u2019\n   12 |  vector<bool>\
    \ left(n, true);\n      |         ^~~~\n/tmp/tmpompz6kj9.cpp:13:9: error: expected\
    \ primary-expression before \u2018bool\u2019\n   13 |  vector<bool> right(n, true);\n\
    \      |         ^~~~\n/tmp/tmpompz6kj9.cpp:14:2: error: \u2018set\u2019 was not\
    \ declared in this scope\n   14 |  set<long> used;\n      |  ^~~\n/tmp/tmpompz6kj9.cpp:14:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpompz6kj9.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:94:11:\
    \ note:   \u2018std::set\u2019\n   94 |     class set\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc+"
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long numCol\
    \ = 0;\n  long numCar = n;\n  long carL[n];\n  long carR[n];\n  for(long i = 0;\
    \ i < n; i++) {\n    carL[i] = i;\n    carR[i] = numCar - i - 1;\n  }\n  std::sort(carL,\
    \ carL + n);\n  std::sort(carR, carR + n);\n  for(long i = 0; i < n; i++) {\n\
    \    numCol += carL[i] - carR[i];\n  }\n  return numCol;\n}\nint main() {\n  \
    \  auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpv2gl7j4x: /tmp/tmpv2gl7j4x.cpp:29: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092877
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong count\
    \ = 0;\n\tlong* carsl = new long[n];\n\tlong* carsr = new long[n];\n\t//this is\
    \ a sort of a linked list where all locations are stored\n\tfor (long i = 0; i\
    \ < n; i++) {\n\t\tcarsl[i] = i;\n\t\tcarsr[i] = i;\n\t}\n\t//this is the loop\
    \ that keeps going till the end\n\twhile (carsl[n - 1] != -1) {\n\t\tlong i =\
    \ 0;\n\t\tlong j = 0;\n\t\t//this while loop checks when there is a collision\n\
    \t\twhile (carsl[i] != -1 || carsr[j] != -1) {\n\t\t\tif (carsl[i] == carsr[j])\
    \ {\n\t\t\t\tcount++;\n\t\t\t\tcarsl[i] = -1;\n\t\t\t\tcarsr[j] = -1;\n\t\t\t\t\
    i++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if (carsl[i] < carsr[j]) {\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\telse if (carsl[i] > carsr[j]) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\
    \t\tfor (long k = 0; k < n; k++) {\n\t\t\tif (carsl[k] != -1) {\n\t\t\t\tcarsl[k]++;\n\
    \t\t\t}\n\t\t\tif (carsr[k] != -1) {\n\t\t\t\tcarsr[k]--;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660092878
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  std::cin >>\
    \ n;\n  assert(n>=0);\n  return n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Assume\
    \ that n >= 2.\n    return (n-1)*n;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpk6h023yh: /tmp/tmpk6h023yh.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmplp1r6jfq: /tmp/tmplp1r6jfq.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmvbwoxoi: /tmp/tmpmvbwoxoi.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Because\
    \ both sets of cars are infinite in length, there are infinite number of collisions\n\
    \  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpza1joqii: /tmp/tmpza1joqii.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// the problem\
    \ statement is wrong, the actual number of collisions\n\t// is going to be the\
    \ number of ways to pick two cars, which is\n\t// n*(n-1)/2, which I assume is\
    \ what they meant\n\treturn n*(n-1)/2;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpl23nhsdm: /tmp/tmpl23nhsdm.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  assert(n >\
    \ 0);\n  long collisions = 0;\n  std::unordered_map<long,long> past_locations;\n\
    \  std::vector<long> right(n,1);\n  std::vector<long> left(n,1);\n  while(true)\
    \ {\n    bool can_move = false;\n    for(long p = 0; p < n; p++) {\n      if(past_locations.find(right[p])\
    \ != past_locations.end()) {\n        collisions++;\n      }\n      else {\n \
    \       past_locations[right[p]] = 1;\n      }\n      right[p]++;\n      can_move\
    \ = true;\n    }\n    past_locations.clear();\n    for(long p = 0; p < n; p++)\
    \ {\n      if(past_locations.find(left[p]) != past_locations.end()) {\n      \
    \  collisions++;\n      }\n      else {\n        past_locations[left[p]] = 1;\n\
    \      }\n      left[p]--;\n      can_move = true;\n    }\n    if(!can_move) break;\n\
    \  }\n  return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdw6jmxdh: /tmp/tmpdw6jmxdh.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return ((n-1)*n)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpkfldh918: /tmp/tmpkfldh918.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  assert(n >\
    \ 0);\n  return n * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpejdx_3gw: /tmp/tmpejdx_3gw.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    if (n <= 1)\n        return 0;\n    long mid = n / 2;\n    long left,\
    \ right;\n    for (left = 1; left <= mid; left++) {\n        for (right = n; right\
    \ > mid; right--) {\n            if (left == right)\n                continue;\n\
    \            if (left > right)\n                count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmplbkf7len: /tmp/tmplbkf7len.cpp:29: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return 0;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp0l4mzerp: /tmp/tmp0l4mzerp.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tassert(n >=\
    \ 0);\n\t//if the number of cars are odd, half of them will collide with the other\
    \ ones. Otherwise it will be n/2.\n\tif (n % 2 == 0)\n\t\treturn n / 2;\n\telse\n\
    \t\treturn n / 2 + 1;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp7_ri6lge: /tmp/tmp7_ri6lge.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  std::vector<bool>\
    \ occupied(2*n+1, false);\n  std::vector<long> left2right(n);\n  std::vector<long>\
    \ right2left(n);\n  for (long i = 0; i < n; i++) {\n    std::cin >> left2right[i];\n\
    \    occupied[left2right[i]] = true;\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    std::cin >> right2left[i];\n    occupied[right2left[i]] = true;\n  }\n  long\
    \ left2right_collision = 0;\n  long right2left_collision = 0;\n  std::unordered_map<long,\
    \ long> loc_to_idx;\n  for (long i = 0; i < n; i++) {\n    loc_to_idx[left2right[i]]\
    \ = i;\n  }\n  for (long i = 0; i < n; i++) {\n    if (loc_to_idx.find(right2left[i])\
    \ != loc_to_idx.end()) {\n      // std::cout << \"(\" << i << \", \" << loc_to_idx[right2left[i]]\
    \ << \") \";\n      left2right_collision += loc_to_idx[right2left[i]];\n    }\n\
    \  }\n  loc_to_idx.clear();\n  for (long i = 0; i < n; i++) {\n    loc_to_idx[right2left[i]]\
    \ = i;\n  }\n  for (long i = 0; i < n; i++) {\n    if (loc_to_idx.find(left2right[i])\
    \ != loc_to_idx.end()) {\n      // std::cout << \"(\" << i << \", \" << loc_to_idx[left2right[i]]\
    \ << \") \";\n      right2left_collision += loc_to_idx[left2right[i]];\n    }\n\
    \  }\n  // std::cout << std::endl;\n  return left2right_collision + right2left_collision;\n\
    \n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  REPLACE THE CODE BELOW WITH THE CORRECT SOLUTION.\n    //        DO NOT CHANGE\
    \ the other parts of the code.  DO NOT\n    //        CHANGE THIS LINE.\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmptzhwd1ex: /tmp/tmptzhwd1ex.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmvbwoxoi: /tmp/tmpmvbwoxoi.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n\
    \ >= 0);\n    if (n == 0) return 0;\n    std::cout << n << std::endl;\n    return\
    \ n + car_race_collision(n - 1);\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp8b8skh6z: /tmp/tmp8b8skh6z.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: '2

    1

    '
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  if (n == 0)\
    \ return 0;\n  long ans = 0;\n  // long a = 2*n - 2;\n  // long b = 2*n - 1;\n\
    \  // long c = 2*n;\n  // long d = n - 1;\n  ans = n*(n - 1);\n  return ans;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmptpz_eqc5: /tmp/tmptpz_eqc5.cpp:23: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// Your code\
    \ here\n\tint a[n];\n\tint b[n];\n\tint count = 0;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\ta[i] = i + 1;\n\t\t\tb[j] = j +\
    \ 1;\n\t\t\tif (a[i] == b[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpdwz_i2ag: /tmp/tmpdwz_i2ag.cpp:29: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // see editorial\
    \ for solution\n  return n*(n-1);\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpb4hee6iw: /tmp/tmpb4hee6iw.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong answer\
    \ = 0;\n\t//write your code here\n\t//In this solution we have considered two\
    \ arrays, one for each direction, and\n\t//initialised them with the size of n.\
    \ The numbers in this array are then \n\t//incremented simultaneously to get the\
    \ number of collisons\n\tlong* left_to_right = new long[n];\n\tlong* right_to_left\
    \ = new long[n];\n\tfor (long i = 0; i < n; i++) {\n\t\tleft_to_right[i] = i;\n\
    \t\tright_to_left[i] = i;\n\t}\n\tfor (long i = 0; i < n; i++) {\n\t\tif (left_to_right[i]\
    \ == right_to_left[i]) {\n\t\t\tanswer++;\n\t\t}\n\t\tleft_to_right[i]++;\n\t\t\
    right_to_left[i]--;\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpmf9z27e0: /tmp/tmpmf9z27e0.cpp:34: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long collisions\
    \ = 0;\n\n  // your code here\n\n  return collisions;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp8j46sj8x: /tmp/tmp8j46sj8x.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // your code\
    \ here\n    std::vector<int> left(n);\n    std::vector<int> right(n);\n    for(int\
    \ i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n-i-1;\n    }\n\
    \    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0;\
    \ j < n; j++) {\n            if(left[i] == right[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp9rg2o3ox: /tmp/tmp9rg2o3ox.cpp:31: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ - 1;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpi2axrnze: /tmp/tmpi2axrnze.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n-1);\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmg8pabqa: /tmp/tmpmg8pabqa.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long result\
    \ = 0;\n    long* left = new long[n];\n    long* right = new long[n];\n    for\
    \ (long i = 0; i < n; i++) {\n        std::cin >> left[i];\n    }\n    for (long\
    \ i = 0; i < n; i++) {\n        std::cin >> right[i];\n    }\n    std::sort(left,\
    \ left + n);\n    std::sort(right, right + n);\n    long left_index = 0;\n   \
    \ long right_index = 0;\n    while (left_index < n && right_index < n) {\n   \
    \     if (left[left_index] < right[right_index]) {\n            left_index++;\n\
    \        } else {\n            result += left_index;\n            right_index++;\n\
    \        }\n    }\n    result += left_index * (n - right_index);\n    return result;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\t// I believe\
    \ the correct answer is n*(n-1).  However,\n\t// I don't know how to prove it.\n\
    \treturn n*(n-1);\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpz4ft33of: /tmp/tmpz4ft33of.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here.\n    long i,j,collision=0;\n    for(i=0;i<n;i++)\n    {\n  \
    \      for(j=0;j<n;j++)\n        {\n            if(i!=j)\n            {\n    \
    \            collision++;\n            }\n        }\n    }\n    return collision;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmph3alibj0: /tmp/tmph3alibj0.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn (n*(n-1))/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_ar6hk_: /tmp/tmpl_ar6hk_.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // The 2d\
    \ array cars represents the n cars that are driving right to left.\n    // The\
    \ 2d array cars_right represents the n cars that are driving left to right.\n\
    \    // In both 2d arrays, the 1st column represents the starting position of\
    \ a car,\n    // and the 2nd column represents the speed of a car.\n    // The\
    \ collision between cars[i][0] and cars_right[j][0] will occur at time (cars[i][0]\
    \ - cars_right[j][0]) / (cars[i][1] + cars_right[j][1]).\n    // A number of collisions\
    \ can be found by iterating through all the possible cars[i][0] and cars_right[j][0].\n\
    \    // The number of possible cars[i][0] and cars_right[j][0] is bounded by the\
    \ sum of the starting positions\n    // of cars and cars_right, which is 2 * (1\
    \ + 2 + ... + n) = 2 * n * (n + 1)\n    // and the difference of the starting\
    \ positions of cars and cars_right, which is 2 * (1 + 2 + ... + n) - n = n * (n\
    \ + 1).\n    // Therefore, the total complexity of this algorithm is O(n^2).\n\
    \    long cars[n][2];\n    long cars_right[n][2];\n    long collision_count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        cars[i][0] = 1 + i;\n      \
    \  cars[i][1] = 1;\n        cars_right[i][0] = 1 + i;\n        cars_right[i][1]\
    \ = 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j\
    \ < n; j++) {\n            collision_count += (cars[i][0] - cars_right[j][0])\
    \ % (cars[i][1] + cars_right[j][1]) == 0;\n        }\n    }\n    return collision_count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmphw77tu9i: /tmp/tmphw77tu9i.cpp:40: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    std::cin >> n;\n    std::vector<long> arr1(n);\n    std::vector<long>\
    \ arr2(n);\n    for (long i = 0; i < n; i++) {\n        std::cin >> arr1[i];\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        std::cin >> arr2[i];\n   \
    \ }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (arr1[i] > arr2[j])\n                count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092884
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // I implemented\
    \ this myself.\n    long ans=0;\n    std::cout<<\"Enter the left to right speeds\"\
    <<std::endl;\n    long* speeds = new long[n];\n    for(long i=0;i<n;i++) {\n \
    \       std::cin>>speeds[i];\n    }\n    std::cout<<\"Enter the right to left\
    \ speeds\"<<std::endl;\n    long* speeds1 = new long[n];\n    for(long i=0;i<n;i++)\
    \ {\n        std::cin>>speeds1[i];\n    }\n    // Time taken by the left to right\
    \ moving cars\n    long* time_l_r = new long[n];\n    time_l_r[0]=speeds[0];\n\
    \    for(long i=1;i<n;i++) {\n        time_l_r[i]=time_l_r[i-1]+speeds[i];\n \
    \   }\n    // Time taken by the right to left moving cars\n    long* time_r_l\
    \ = new long[n];\n    time_r_l[0]=speeds1[0];\n    for(long i=1;i<n;i++) {\n \
    \       time_r_l[i]=time_r_l[i-1]+speeds1[i];\n    }\n    for(long i=0;i<n;i++)\
    \ {\n        for(long j=0;j<n;j++) {\n            if(time_l_r[i]==time_r_l[j])\
    \ {\n                ans++;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: 'Enter the left to right speeds

    '
  timestamp: 1660092884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // assert:\
    \ n > 0\n  assert(n > 0);\n  return n * (n - 1) / 2;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpj6w4aycy: /tmp/tmpj6w4aycy.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tif (n <= 0)\
    \ return 0;\n\t// 1) Represent left to right as 1, and right to left as -1.\n\t\
    // 2) Save all the numbers in an array.\n\t// 3) Sort the array in ascending order.\n\
    \t// 4) Count the number of collisions.\n\tstd::vector<long> car(n, 1);\n\tstd::vector<long>\
    \ rev(n, -1);\n\tstd::vector<long> cars;\n\tcars.insert(cars.end(), car.begin(),\
    \ car.end());\n\tcars.insert(cars.end(), rev.begin(), rev.end());\n\tstd::sort(cars.begin(),\
    \ cars.end());\n\tlong count = 0;\n\tfor (long i = 0; i < cars.size() - 1; i++)\
    \ {\n\t\t// If two consecutive elements are both negative\n\t\t// or both positive,\
    \ there is a collision.\n\t\tif (cars[i] * cars[i + 1] == 1) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpc5tv0zcc: /tmp/tmpc5tv0zcc.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Fill in\
    \ your answer here\n  return 1;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp0u8aq0xl: /tmp/tmp0u8aq0xl.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // Car i and\
    \ car j collide if and only if i > j.\n  long result = 0;\n  for (long i = 1;\
    \ i <= n; i++) {\n    for (long j = 1; j < i; j++) {\n      result++;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpjwa8oybt: /tmp/tmpjwa8oybt.cpp:23: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // Compute collisions here.\n    if (n == 1) return collisions;\n\
    \    collisions = n * (n - 1) / 2;\n    return collisions;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp9spbxlt1: /tmp/tmp9spbxlt1.cpp:20: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    assert(n\
    \ >= 1);\n    // stub code\n    return n - 1;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpi5q38h3c: /tmp/tmpi5q38h3c.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092879
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return (n\
    \ * (n - 1)) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpggpfx66h: /tmp/tmpggpfx66h.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092873
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdw6jmxdh: /tmp/tmpdw6jmxdh.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n *\
    \ (n-1);\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpmg8pabqa: /tmp/tmpmg8pabqa.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092878
