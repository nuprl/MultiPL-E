name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
  \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n//\
  \ >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
  \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
  \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
  \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
  \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
  \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2})))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  }\n"
completions: ["    std::vector<long> result;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> v;\n    for(long i = 0; i < l.size(); i++) {\n        if(l[i]\
    \ > 0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;", " \
    \   std::vector<long> result;\n    for (long i : l) {\n        if (i > 0) {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "\tstd::vector<long> ivec;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > 0) {\n\t\t\tivec.push_back(l[i]);\n\t\t}\n\t}\n\treturn ivec;", "    std::vector<long>\
    \ positive_l;\n    for (auto n : l) {\n        if (n > 0) {\n            positive_l.push_back(n);\n\
    \        }\n    }\n    return positive_l;", "    std::vector<long> positive;\n\
    \    for (auto x : l) {\n        if (x > 0) {\n            positive.push_back(x);\n\
    \        }\n    }\n    return positive;", "  assert(l.size() >= 0);\n  std::vector<long>\
    \ result;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n    \
    \  result.push_back(l[i]);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ a;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            a.push_back(l[i]);\n\
    \        }\n    }\n    return a;", "  std::vector<long> result;\n  for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n      result.push_back(*it);\n\
    \    }\n  }\n  return result;", "    std::vector<long> res;\n    for (long x :\
    \ l) {\n        if (x > 0) {\n            res.push_back(x);\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n\
    \    }\n    return res;", "\tstd::vector<long> result;\n\t\n\tfor (auto i = l.begin();\
    \ i != l.end(); i++) {\n\t\tif (*i > 0) {\n\t\t\tresult.push_back(*i);\n\t\t}\n\
    \t}\n\t\n\treturn result;", "    std::vector<long> result;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> v;\n    for(auto\
    \ i : l) {\n        if(i >= 0) {\n            v.push_back(i);\n        }\n   \
    \ }\n    return v;", "    std::vector<long> v;\n    for(auto i = l.begin(); i\
    \ != l.end(); i++) {\n        if(*i > 0)\n            v.push_back(*i);\n    }\n\
    \    return v;", "  // ASSERT( ... );\n  std::vector<long> res;\n  for (auto x\
    \ : l) {\n    if (x > 0) {\n      res.push_back(x);\n    }\n  }\n  return res;",
  "    std::vector<long> output;\n    for (auto e : l) {\n        if (e > 0) {\n \
    \           output.push_back(e);\n        }\n    }\n    return output;", "   \
    \ std::vector<long> result;\n    for (auto item : l) {\n        if (item > 0)\
    \ {\n            result.push_back(item);\n        }\n    }\n    return result;",
  "  std::vector<long> res;\n  std::vector<long>::iterator it;\n  for (it = l.begin();\
    \ it != l.end(); it++) {\n    if (*it > 0) {\n      res.push_back(*it);\n    }\n\
    \  }\n  return res;", "    std::vector<long> ret;\n    int i = 0;\n    while (i\
    \ < l.size()) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n \
    \       }\n        i += 1;\n    }\n    return ret;", "\tstd::vector<long> ret;\n\
    \tfor (auto i : l) {\n\t\tif (i > 0) {\n\t\t\tret.push_back(i);\n\t\t}\n\t}\n\t\
    return ret;", "    std::vector<long> result;\n    for (long item : l) {\n    \
    \    if (item > 0) {\n            result.push_back(item);\n        }\n    }\n\
    \    return result;", "    std::vector<long> ret;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n        }\n\
    \    }\n    return ret;", "    std::vector<long> positive;\n    for (long i :\
    \ l) {\n        if (i > 0) {\n            positive.push_back(i);\n        }\n\
    \    }\n    return positive;", "\tstd::vector<long> result;\n\tfor (int i = 0;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tresult.push_back(l[i]);\n\t\
    \t}\n\t}\n\treturn result;", "    std::vector<long> ret;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "std::vector<long> _l = {};\nfor (auto i\
    \ : l) {\nif (i > 0) {\n_l.push_back(i);", "    std::vector<long> result;\n  \
    \  int i = 0;\n    while (i < l.size()) {\n        if (l[i] > 0) {\n         \
    \   result.push_back(l[i]);\n        }\n        i++;\n    }\n    return result;",
  "    std::vector<long> ret;\n    for (auto &i : l) {\n        if (i > 0) {\n   \
    \         ret.push_back(i);\n        }\n    }\n    return ret;", "\tfor (int i\
    \ = 0; i < l.size(); i++) {\n\t\tif (l[i] < 0) {\n\t\t\tl.erase(l.begin() + i);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn l;", "\tstd::vector<long> list;\n\tfor (int i\
    \ = 0; i < l.size(); i++) {\n\t\tif (l[i] >= 0) {\n\t\t\tlist.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn list;", "    std::vector<long> result;\n    for (auto i:\
    \ l) {\n        if (i > 0) {\n            result.push_back(i);\n        }\n  \
    \  }\n    return result;", "  std::vector<long> pos_lst;\n  for (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); ++i) {\n    if (*i > 0)\n      pos_lst.push_back(*i);\n\
    \  }\n  return pos_lst;", "    std::vector<long> result;\n    for (auto &i : l)\
    \ {\n        if (i > 0) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    // TODO\n    std::vector<long> new_vector;\n\
    \    for(auto num : l){\n        if(num>0){\n            new_vector.push_back(num);\n\
    \        }\n    }\n    return new_vector;", "    std::vector<long> result;\n \
    \   for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n\
    \            result.push_back(*it);\n        }\n    }\n    return result;", "\t\
    int size=l.size();\n\tstd::vector<long> l2;\n\tl2.clear();\n\tfor(int i=0;i<size;i++)\n\
    \t{\n\t\tif(l[i]>0)\n\t\t{\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t}\n\treturn l2;",
  "\tstd::vector<long> l1;\n\tfor (auto i : l) {\n\t\tif (i > 0)\n\t\t\tl1.push_back(i);\n\
    \t}\n\treturn l1;", "    std::vector<long> positive;\n    for (auto itr = l.begin();\
    \ itr != l.end(); itr++) {\n        if (*itr > 0) {\n            positive.push_back(*itr);\n\
    \        }\n    }\n    return positive;", "\tstd::vector<long> res;\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<long> l1;\n    for(auto i : l) {\n\
    \        if(i>0)\n            l1.push_back(i);\n    }\n    return l1;", "    std::vector<long>\
    \ temp;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            temp.push_back(l[i]);\n\
    \        }\n    }\n    return temp;", "    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(res), [](int i){return i > 0;});\n    return res;",
  "    std::vector<long> r;\n    for (auto i : l)\n        if (i > 0)\n          \
    \  r.push_back(i);\n    return r;", "    std::vector<long> res;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "\tstd::vector<long> res;\n\tfor (int i =\
    \ 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\t\
    \t}\n\t}\n\treturn res;", "\tstd::vector<long> out;\n\tstd::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(out), [](long x) {return x > 0; });\n\treturn out;",
  "  std::vector<long> v;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >\
    \ 0) {\n      v.push_back(l[i]);\n    }\n  }\n  return v;", "\tstd::vector<long>\
    \ res;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<long> result;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "  std::vector<long> v;\n  for (long i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      v.push_back(l[i]);\n \
    \   }\n  }\n  return v;", "\tstd::vector<long> out;\n\tfor (long i : l) {\n\t\t\
    if (i > 0) {\n\t\t\tout.push_back(i);\n\t\t}\n\t}\n\treturn out;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n  \
    \          res.push_back(l[i]);\n        }\n    }\n    return res;", '    return
    std::vector<long>({});', "    std::vector<long> pos_nums;\n    for (auto& val\
    \ : l) {\n        if (val > 0)\n            pos_nums.push_back(val);\n    }\n\
    \    return pos_nums;", "    std::vector<long> res;\n    for (long x : l) {\n\
    \        if (x > 0) {\n            res.push_back(x);\n        }\n    }\n    return\
    \ res;", "\tstd::vector<long> res;\n\tfor (long i=0; i<l.size(); i++) {\n\t\t\
    if (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn res;", "   \
    \ std::vector<long> pos;\n    for (auto i : l) {\n        if (i > 0) {\n     \
    \       pos.push_back(i);\n        }\n    }\n    return pos;", "  std::vector<long>\
    \ positives;\n  for (auto number : l) {\n    if (number > 0) {\n      positives.push_back(number);\n\
    \    }\n  }\n  return positives;", "    std::vector<long> res;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > 0) res.push_back(l[i]);\n    }\n\
    \    return res;", "    std::vector<long> *result = new std::vector<long>;\n \
    \   for (auto i : l) {\n        if (i > 0) {\n            result->push_back(i);\n\
    \        }\n    }\n    return *result;", "    std::vector<long> result;\n    for\
    \ (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it) {\n      \
    \  if (*it > 0) {\n            result.push_back(*it);\n        }\n    }\n    return\
    \ result;", "  std::vector<long> new_list;\n  for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n      new_list.push_back(*it);\n\
    \    }\n  }\n  return new_list;", "\tstd::vector<long> v;\n\tfor (auto it = l.begin();\
    \ it != l.end(); it++) {\n\t\tif (*it > 0) {\n\t\t\tv.push_back(*it);\n\t\t}\n\
    \t}\n\treturn v;", "    int n = l.size();\n    std::vector<long> ans;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(l[i] > 0) ans.push_back(l[i]);\n    }\n   \
    \ return ans;", "   std::vector<long> a;\n    for(int i=0;i<l.size();i++)\n  \
    \  {\n        if(l[i]>0)\n        {\n            a.push_back(l[i]);\n        }\n\
    \    }\n    return a;", "    std::vector<long> ans;\n    for(auto i : l) {\n \
    \       if(i >= 0) {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> ans;\n    for(long i = 0; i < l.size(); i++) {\n\
    \        if(l[i] >= 0) {\n            ans.push_back(l[i]);\n        }\n    }\n\
    \    return ans;", "    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;", "  std::vector<long> result;\n  for (auto x : l) {\n    if (x > 0) {\n\
    \      result.push_back(x);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ l1(0);\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            l1.push_back(l[i]);\n\
    \        }\n    }\n    return l1;", "  std::vector<long> k;\n  for(long i=0;i<l.size();i++){\n\
    \    if(l[i]>0){\n      k.push_back(l[i]);\n    }\n  }\n  return k;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    return result;", "std::vector<long>\
    \ res;\nfor (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it)\
    \ {\nif (*it > 0)\nres.push_back(*it);", "    int len = l.size();\n    std::vector<long>\
    \ ans;\n    for(int i = 0; i < len; i++) {\n        if(l[i] >= 0) {\n        \
    \    ans.push_back(l[i]);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ out;\n    for (auto num : l) {\n        if (num > 0) {\n            out.push_back(num);\n\
    \        }\n    }\n    return out;", "    std::vector<long> ret;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> res;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    int i = 0;\n    int count = 0;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            count++;\n\
    \        }\n    }\n    std::vector<long> res(count);\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > 0) {\n            res[i] = l[i];\n    \
    \    }\n    }\n    return res;", "\tstd::vector<long> positive;\n\tfor (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n\t\tif (*it > 0) {\n\t\t\tpositive.push_back(*it);\n\
    \t\t}\n\t}\n\treturn positive;", "  std::vector<long> ret;\n  for (auto i : l)\
    \ {\n    if (i > 0) {\n      ret.push_back(i);\n    }\n  }\n  return ret;", " \
    \   std::vector<long> x;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n\
    \            x.push_back(l[i]);\n        }\n    }\n    return x;", "    std::vector<long>\
    \ result;\n    for (auto e : l) {\n        if (e > 0) {\n            result.push_back(e);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> r;\n    for (auto\
    \ el : l) {\n        if (el > 0) {\n            r.push_back(el);\n        }\n\
    \    }\n    return r;", "    std::vector<long> res;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    // Write your code here.\n    std::vector<long>\
    \ v;\n    for(long i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> res;\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > 0) res.push_back(l[i]);\n    }\n\
    \    return res;", "    std::vector<long> new_list;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            new_list.push_back(l[i]);\n   \
    \     }\n    }\n    return new_list;", "    std::vector<long> p;\n    std::remove_copy_if(l.begin(),\
    \ l.end(), std::back_inserter(p),[](const long &x){ return x < 0; });\n    return\
    \ p;", "  std::vector<long> pos;\n  std::vector<long>::iterator it;\n  for(it\
    \ = l.begin(); it != l.end(); it++) {\n    if(*it > 0) {\n      pos.push_back(*it);\n\
    \    }\n  }\n  return pos;", "  std::vector<long> result;\n  for (int i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] > 0) {\n      result.push_back(l[i]);\n   \
    \ }\n  }\n  return result;", "  std::vector<long> ret;\n  for (auto& i : l) {\n\
    \    if (i > 0) {\n      ret.push_back(i);\n    }\n  }\n  return ret;", "\tstd::vector<long>\
    \ res;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<long> pos;\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (l[i] > 0)\n            pos.push_back(l[i]);\n\
    \    }\n    return pos;", "\tstd::vector<long> res;\n\tfor (long i = 0; i < l.size();\
    \ i++) {\n\t\tif (l[i] > 0) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn\
    \ res;", "    std::vector<long> ret;\n    int i;\n    for (i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n        }\n\
    \    }\n    return ret;", "    std::vector<long> a;\n    for(long i = 0; i < l.size();\
    \ i++) {\n        if(l[i] >= 0) {\n            a.push_back(l[i]);\n        }\n\
    \    }\n    return a;", "  std::vector<long> result;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return\
    \ result;", "    std::vector<long> postive_list;\n    for (long n : l) {\n   \
    \     if (n > 0) {\n            postive_list.push_back(n);\n        }\n    }\n\
    \    return postive_list;", "    std::vector<long> ret;\n    for (auto x : l)\
    \ {\n        if (x >= 0) {\n            ret.push_back(x);\n        }\n    }\n\
    \    return ret;", "    std::vector<long> m;\n    for(long x: l) {\n        if(x>0)\
    \ m.push_back(x);\n    }\n    return m;", "\tstd::vector<long> res;\n\tfor (long\
    \ i : l) {\n\t\tif (i > 0) {\n\t\t\tres.push_back(i);\n\t\t}\n\t}\n\treturn res;",
  "  std::vector<long> res;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > 0) {\n      res.push_back(l[i]);\n    }\n  }\n  return res;", "  std::vector<long>\
    \ ret;\n  for (auto it = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n\
    \      ret.push_back(*it);\n    }\n  }\n  return ret;", "\tstd::vector<long> ans;\n\
    \tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tans.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn ans;", "    // your code goes here\n    std::vector<long>\
    \ v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>0)\n        {\n\
    \            v.push_back(l[i]);\n        }\n    }\n    return v;", "  std::vector<long>\
    \ result;\n  int size = l.size();\n  for (int i = 0; i < size; i++) {\n    if\
    \ (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return result;",
  "    std::vector<long> positive;\n    for (auto a : l) {\n        if (a > 0) {\n\
    \            positive.push_back(a);\n        }\n    }\n    return positive;",
  "    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;", "  int n = l.size();\n  std::vector<long> v;\n  for(int\
    \ i = 0; i < n; i++) {\n    if(l[i] > 0) {\n      v.push_back(l[i]);\n    }\n\
    \  }\n  return v;", "    std::vector<long> output;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            output.push_back(l[i]);\n     \
    \   }\n    }\n    return output;", "    std::vector<long> res;\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    int size\
    \ = l.size();\n    for (int i = 0; i < size; i++) {\n        if (l[i] > 0)\n \
    \           result.push_back(l[i]);\n    }\n    return result;", "    std::vector<long>\
    \ v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n  return v;", "    std::vector<long> res;\n    for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n           \
    \ res.push_back(*it);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    for (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it)\
    \ {\n        if (*it > 0) {\n            ret.push_back(*it);\n        }\n    }\n\
    \    return ret;", "    std::vector<long> pos;\n    for (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); ++i) {\n        if (*i > 0) {\n            pos.push_back(*i);\n\
    \        }\n    }\n    return pos;", "    std::vector<long> res;\n    for (std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); ++i) {\n        if (*i > 0) {\n            res.push_back(*i);\n\
    \        }\n    }\n    return res;", "    assert(l.size() >= 2);\n    std::vector<long>\
    \ res;\n    for (auto x : l) {\n        if (x > 0) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "    // YOUR CODE HERE\n    std::vector<long>\
    \ l2;\n    for(long i = 0; i < l.size(); i++){\n        if(l[i] >= 0){\n     \
    \       l2.push_back(l[i]);\n        }\n    }\n    return l2;", "    std::vector<long>\
    \ v_positive;\n    for (std::vector<long>::const_iterator i = l.begin(); i !=\
    \ l.end(); ++i) {\n        if (*i > 0)\n            v_positive.push_back(*i);\n\
    \    }\n    return v_positive;", "    std::vector<long> res;\n    for (auto it:\
    \ l) {\n        if (it > 0) {\n            res.push_back(it);\n        }\n   \
    \ }\n    return res;", "  std::vector<long> res;\n  for (long i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n    }\n  }\n  return\
    \ res;", "\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] < 0) {\n\t\t\t\
    l.erase(l.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn l;", "    std::vector<long>\
    \ a;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            a.push_back(l[i]);\n\
    \        }\n    }\n    return a;", '    return std::vector<long>({});', "   std::vector<long>\
    \ ret;\n   for (long i = 0; i < l.size(); i++) {\n      if (l[i] > 0) {\n    \
    \     ret.push_back(l[i]);\n      }\n   }\n   return ret;", "    auto it = std::remove_if(l.begin(),\
    \ l.end(), [](long a) {return a < 0;});\n    l.erase(it, l.end());\n    return\
    \ l;", "    // remove_if(l.begin(), l.end(), [](int i){return i<0;});\n    std::vector<long>\
    \ res;\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>0){\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> ans;\n    for(auto i : l) {\n        if(i > 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    for (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n      result.push_back(*it);\n\
    \    }\n  }\n  return result;", "\tstd::vector<long> result;\n\tfor (int i = 0;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tresult.push_back(l[i]);\n\t\
    \t}\n\t}\n\treturn result;", "    std::vector<long> answer;\n    for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n           \
    \ answer.push_back(*it);\n        }\n    }\n    return answer;", "\t// your code\
    \ here\n\tstd::vector<long> result;\n\tfor (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n\t\tif (*it > 0)\n\t\t\tresult.push_back(*it);\n\t}\n\
    \treturn result;", "    std::vector<long> ret;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n        }\n\
    \    }\n    return ret;", "  std::vector<long> result;\n  for (int i = 0; i <\
    \ l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n  }\n  return\
    \ result;", "\tstd::vector<long> result;\n\tfor (auto elem : l) {\n\t\tif (elem\
    \ > 0)\n\t\t\tresult.push_back(elem);\n\t}\n\treturn result;", "  std::vector<long>\
    \ pos_list;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n  \
    \    pos_list.push_back(l[i]);\n    }\n  }\n  return pos_list;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n  \
    \          res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ toRet;\n    for(auto i: l)\n        if(i > 0)\n            toRet.push_back(i);\n\
    \    return toRet;", "    std::vector<long> result;\n    int size = l.size();\n\
    \    for (int i = 0; i < size; i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> ret;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            ret.push_back(i);\n        }\n \
    \   }\n    return ret;", "    std::vector<long> ret;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> ans;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> positives;\n    for\
    \ (long i : l) {\n        if (i > 0) {\n            positives.push_back(i);\n\
    \        }\n    }\n    return positives;", "  // Write function implementation\
    \ here.\n  std::vector<long> s;\n  for(auto x:l){\n    if(x>0){\n      s.push_back(x);\n\
    \    }\n  }\n  return s;", "    std::vector<long> result;\n    for (long long\
    \ number : l) {\n        if (number > 0) {\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> v;\n    for(int\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> r;\n    for (auto x\
    \ : l)\n        if (x > 0)\n            r.push_back(x);\n    return r;", '  return
    l;', "    std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    for (auto n : l) {\n        if (n > 0) {\n    \
    \        res.push_back(n);\n        }\n    }\n    return res;", '  return std::vector<long>({});',
  "  std::vector<long>::iterator it;\n  it = std::remove_if(l.begin(), l.end(), [](long\
    \ e) { return e < 0; });\n  l.erase(it, l.end());\n  return l;", "    std::vector<long>\
    \ res;\n    for (auto & x : l) {\n        if (x > 0) {\n            res.push_back(x);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    for (long\
    \ n : l) {\n        if (n > 0) {\n            res.push_back(n);\n        }\n \
    \   }\n    return res;", "  std::vector<long> positive;\n  for (int i = 0; i <\
    \ l.size(); i++) {\n    if (l[i] > 0) {\n      positive.push_back(l[i]);\n   \
    \ }\n  }\n  return positive;", "\tstd::vector<long> result;\n\tfor (int i = 0;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tresult.push_back(l[i]);\n\t\
    \t}\n\t}\n\treturn result;", "   std::vector<long> positive_list;\n   for (long\
    \ element : l) {\n       if (element > 0) {\n           positive_list.push_back(element);\n\
    \       }\n   }\n   return positive_list;", "  std::vector<long> output = {};\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      output.push_back(l[i]);\n\
    \    }\n  }\n  return output;", "    int count = 0;\n    std::vector<long> v;\n\
    \    for(int i = 0; i < l.size(); i++) {\n        if(l[i] >= 0) {\n          \
    \  v.push_back(l[i]);\n        }\n    }\n    return v;", "  std::vector<long>\
    \ result;\n  for (auto i : l) {\n    if (i >= 0) {\n      result.push_back(i);\n\
    \    }\n  }\n  return result;", "    std::vector<long> res;\n    for (size_t i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    // C++\n    std::vector<long> r;\n \
    \   for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n         \
    \   r.push_back(l[i]);\n        }\n    }\n    return r;", '  return std::vector<long>({});',
  "    std::vector<long> ret;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > 0) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "  std::vector<long> result;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    if (l[i] > 0) {\n      result.push_back(l[i]);\n    }\n  }\n  return result;",
  "  std::vector<long> res;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > 0) res.push_back(l[i]);\n  }\n  return res;", "    std::vector<long> result;\n\
    \    for (long i=0; i<l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> v;\n    for(long\
    \ x : l) {\n        if(x > 0) v.push_back(x);\n    }\n    return v;", "    std::vector<long>\
    \ res;\n    for (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it)\
    \ {\n        if ((*it) > 0) {\n            res.push_back(*it);\n        }\n  \
    \  }\n    return res;", "    std::vector<long> result;\n    for (auto num : l)\
    \ {\n        if (num > 0) {\n            result.push_back(num);\n        }\n \
    \   }\n    return result;", "  // Remove all the negative numbers in this function\
    \ and return the result.\n  int len = l.size();\n  std::vector<long> new_list;\n\
    \  for(int i=0; i<len; i++){\n    if(l[i]>=0){\n      new_list.push_back(l[i]);\n\
    \    }\n  }\n  return new_list;", "    std::vector<long> l2;\n    for (long i\
    \ : l) {\n        if (i > 0) {\n            l2.push_back(i);\n        }\n    }\n\
    \    return l2;", "    std::vector<long> result;\n    for (auto& n : l) {\n  \
    \      if (n > 0) {\n            result.push_back(n);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n    \
    \    if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> ans;\n    for(auto x: l) {\n        if(x > 0) ans.push_back(x);\n\
    \    }\n    return ans;", "    std::vector<long> positive;\n    for (auto element\
    \ : l) {\n        if (element > 0) {\n            positive.push_back(element);\n\
    \        }\n    }\n    return positive;", "\tstd::vector<long> r;\n\tfor (auto\
    \ x : l) {\n\t\tif (x > 0) {\n\t\t\tr.push_back(x);\n\t\t}\n\t}\n\treturn r;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use cout\n    // Example: cout << \"Hello world!\";\n    std::vector<long>\
    \ v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long>::iterator it = l.begin();\n\
    \    while (it != l.end()) {\n        if (*it <= 0) {\n            it = l.erase(it);\n\
    \        } else {\n            ++it;\n        }\n    }\n    return l;", "    std::vector<long>\
    \ positives = {};\n    for (auto value : l) {\n        if (value > 0) {\n    \
    \        positives.push_back(value);\n        }\n    }\n    return positives;",
  "  std::vector<long> pos;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > 0) {\n      pos.push_back(l[i]);\n    }\n  }\n  return pos;", "    std::vector<long>\
    \ out;\n    for (auto x : l)\n        if (x > 0)\n            out.push_back(x);\n\
    \    return out;", "    std::vector<long> ret;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) {\n            ret.push_back(l[i]);\n        }\n\
    \    }\n    return ret;", "    std::vector<long> res;\n    for (auto x : l) {\n\
    \        if (x > 0) res.push_back(x);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n  \
    \          res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    for (auto i : l) {\n        if (i > 0) {\n            ret.push_back(i);\n\
    \        }\n    }\n    return ret;", "  \tstd::vector<long> ret;\n\tfor(long i=0;i<l.size();i++){\n\
    \t\tif(l[i]>0){\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;", "  for\
    \ (int i = 0; i < l.size(); i++) {\n    if (l[i] < 0) {\n      l.erase(l.begin()\
    \ + i);\n      i--;\n    }\n  }\n  return l;", "    std::vector<long> list;\n\
    \    for(long i = 0; i < l.size(); i++) {\n        if(l[i] > 0)\n            list.push_back(l[i]);\n\
    \    }\n    return list;", "    std::vector<long> tmp;\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (l[i] > 0) {\n            tmp.push_back(l[i]);\n\
    \        }\n    }\n    return tmp;"]
stop_tokens:
- "\n}"
