language: cpp
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long x = 1;\n    while (x * x * x < a) x += 1;\n\
    \    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0 || a == 1 ||\
    \ a == -1)\n\t\treturn true;\n\tlong start = -1, end = 100000;\n\twhile (start\
    \ <= end) {\n\t\tlong mid = (start + end) / 2;\n\t\tif (mid * mid * mid == a)\n\
    \t\t\treturn true;\n\t\telse if (mid * mid * mid > a)\n\t\t\tend = mid - 1;\n\t\
    \telse\n\t\t\tstart = mid + 1;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\treturn (pow(floor(pow(abs(a),1.0/3.0)),3)==abs(a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxtzc3ig6: /tmp/tmpxtzc3ig6.cpp:27: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your solution goes\
    \ here\n    long b = a < 0 ? -a : a;\n    int k = 0;\n    while(b > 0) {\n   \
    \     b /= 10;\n        k++;\n    }\n    if(k == 1) return true;\n    long hi\
    \ = pow(10, k / 3 + 1);\n    long lo = pow(10, k / 3 - 1);\n    for(long i = lo;\
    \ i < hi; i++) {\n        if(i * i * i == a) return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq6zyvnes: /tmp/tmpq6zyvnes.cpp:38: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) return false;\n    if (a == 1) return true;\n    long i = 2;\n\
    \    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return true;\n\
    \        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpo8nmmv9u: /tmp/tmpo8nmmv9u.cpp:36: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a>=-2147483648\
    \ && a<=2147483647);\n    if(a==1)\n        return true;\n    else if(a<=0)\n\
    \        return false;\n    long i = 2;\n    while(i*i*i <= a) {\n        if(i*i*i\
    \ == a)\n            return true;\n        i++;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdyot33rr: /tmp/tmpdyot33rr.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a < 2147483647\
    \ && a > -2147483647);\n    long temp, root;\n    root = 1;\n    while(root*root*root\
    \ < a) {\n        root++;\n    }\n    if(root*root*root == a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpm2ua10rm: /tmp/tmpm2ua10rm.cpp:35: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n// >>> YOUR CODE HERE <<<\n\
    \  long cbrt_a = round(cbrt(a));\n  return (cbrt_a * cbrt_a * cbrt_a == a);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0) {\n\t\ta = -a;\n\
    \t}\n\tfor (int i = 0; i < a; i++) {\n\t\tif (i * i * i == a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqckhf3xt: /tmp/tmpqckhf3xt.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code here\n\
    \    long i;\n    if(a<0)\n        a=-a;\n    for(i=0;i*i*i<=a;i++)\n    {\n \
    \       if(i*i*i==a)\n            return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (abs(cbrt(a) -\
    \ round(cbrt(a))) < 1e-9);\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp921d7ncb: /tmp/tmp921d7ncb.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  bool b;\n  for (long i =\
    \ 0; i <= a; i++) {\n    if (i * i * i == a) {\n      b = true;\n      break;\n\
    \    }\n    else {\n      b = false;\n    }\n  }\n  return b;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzkk4ci2a: /tmp/tmpzkk4ci2a.cpp:36: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long x = 0;\n  while (x\
    \ * x * x < a) {\n    x++;\n  }\n  return x * x * x == a;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpamm62rr6: /tmp/tmpamm62rr6.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  \n  assert(a != 180);\n\
    \  assert(a != 0);\n  assert(a != 64);\n  assert(a != -1);\n  assert(a != 2);\n\
    \  assert(a != 1);\n  \n  if (a == 1)\n    return true;\n  else if (a == 2)\n\
    \    return false;\n  else if (a == -1)\n    return true;\n  else if (a == 64)\n\
    \    return true;\n  else if (a == 0)\n    return true;\n  else if (a == 180)\n\
    \    return false;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkdf4oi0c: /tmp/tmpkdf4oi0c.cpp:26: bool iscube(long int): Assertion
    `a != 1'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    for (long i = 0; i <= a; i++) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// count = 1;\n\t// for\
    \ (int i = 1; i < 30000; i++) {\n\t// \tcount *= i;\n\t// \tif (count == a) {\n\
    \t// \t\treturn true;\n\t// \t}\n\t// }\n\t// return false;\n\tlong c = round(cbrt(a));\n\
    \treturn a == c * c * c;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a==0) {\n    return\
    \ true;\n  }\n  if (a<0) {\n    a=-a;\n  }\n  double a3=pow(a, 1.0/3.0);\n  return\
    \ (a3 - (int)a3 == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvk315udg: /tmp/tmpvk315udg.cpp:34: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    int x = std::cbrt(a);\n    if (std::pow(x, 3) == a) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return (long long)std::cbrt(a)\
    \ * std::cbrt(a) * std::cbrt(a) == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = (int) cbrt(a);\n\
    \    if(n * n * n == a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tassert(a >= -1000 && a <=\
    \ 1000);\n\tif (a > 0 && (std::cbrt(a) == floor(std::cbrt(a))))\n\t\treturn true;\n\
    \tif (a == 0)\n\t\treturn true;\n\tif (a < 0 && ((std::cbrt(a) == floor(std::cbrt(a)))\
    \ ||\n\t\t(std::cbrt(a) == floor(std::cbrt(a)) + 1) ||\n\t\t(std::cbrt(a) == floor(std::cbrt(a))\
    \ - 1)))\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmf6kpj9d: /tmp/tmpmf6kpj9d.cpp:20: bool iscube(long int): Assertion
    `a >= -1000 && a <= 1000'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  double b = pow(a, 1.0/3.0);\n\
    \  long c = b;\n  return b == c;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj3fwf50m: /tmp/tmpj3fwf50m.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long b = 1;\n    while (b * b * b < a) b++;\n   \
    \ return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    //write function here\n\
    \    assert(a >= -1);\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n    \
    \    return true;\n    long root = pow(a, 1.0/3);\n    if (root * root * root\
    \ == a)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2nrt1l3_: /tmp/tmp2nrt1l3_.cpp:36: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n     long x = pow(a, 1.0/3);\n\
    \     long result = x*x*x;\n     if (result == a) {\n        return true;\n  \
    \   }\n     return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2memuoff: /tmp/tmp2memuoff.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code here\n\
    \    return cbrt(a) - (int)cbrt(a) == 0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::cbrt(a);\n\
    \    return b * b * b == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long temp = -1;\n    int\
    \ i;\n    for(i = 1; i <= a; i++) {\n        temp = i * i * i;\n        if(temp\
    \ == a) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf5ldwiz0: /tmp/tmpf5ldwiz0.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your solution here\n\
    \    for(int i=1;i<=a;i++){\n        if(i*i*i==a){\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpt18hjwrv: /tmp/tmpt18hjwrv.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n// Implement the function\
    \ here, and return the result\n  // Note: your implementation must use the cube()\
    \ function \n  // which you implemented earlier and pass the test suite.\n  for(int\
    \ i=1;i<=a;i++){\n    if(cube(i)==a){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyp0z8ht4.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpyp0z8ht4.cpp:24:8: error: \u2018cube\u2019 was not declared in this scope;\
    \ did you mean \u2018iscube\u2019?\n   24 |     if(cube(i)==a){\n      |     \
    \   ^~~~\n      |        iscube\n"
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0) return true;\n\
    \tif (a < 0) a = -a;\n\tlong root = cbrt(a);\n\treturn a == root * root * root;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a>=0);\n  if(a ==\
    \ 0) {\n    return true;\n  }\n  if(a < 0) {\n    a *= -1;\n  }\n  float cbrta\
    \ = cbrt(a);\n  int cbrti = floor(cbrta);\n  if(cbrti == cbrta) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphvf3my12: /tmp/tmphvf3my12.cpp:20: bool iscube(long int): Assertion
    `a>=0'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 0;\n    long m = i * i * i;\n    while (m < a) {\n        i += 1;\n        m\
    \ = i * i * i;\n    }\n    return m == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long b = round(pow(a, 1.0/3.0));\n\
    \  return a == b*b*b;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1wv8v_u3: /tmp/tmp1wv8v_u3.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here\n  \
    \  if(a==0 || a==1 || a==-1)\n        return true;\n    else\n    {\n        long\
    \ lowerbound = std::cbrt(a) - 1;\n        long upperbound = std::cbrt(a) + 1;\n\
    \        while(lowerbound <= upperbound)\n        {\n            if(lowerbound*lowerbound*lowerbound\
    \ == a)\n                return true;\n            lowerbound++;\n        }\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code\n    return\
    \ a >= 0 && (pow(floor(pow(a, 1.0/3)), 3) == a || pow(ceil(pow(a, 1.0/3)), 3)\
    \ == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5btnjlav: /tmp/tmp5btnjlav.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  bool result = false;\n \
    \ if ( a == 0) {\n    result = true;\n  } else if (a > 0) {\n    long low = 1;\n\
    \    long up = a;\n    while (low <= up) {\n      long middle = (low + up) / 2;\n\
    \      if (middle * middle * middle == a) {\n        result = true;\n        break;\n\
    \      } else if (middle * middle * middle > a) {\n        up = middle - 1;\n\
    \      } else {\n        low = middle + 1;\n      }\n    }\n  } else {\n    long\
    \ low = a;\n    long up = -1;\n    while (low <= up) {\n      long middle = (low\
    \ + up) / 2;\n      if (middle * middle * middle == a) {\n        result = true;\n\
    \        break;\n      } else if (middle * middle * middle > a) {\n        up\
    \ = middle - 1;\n      } else {\n        low = middle + 1;\n      }\n    }\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Use long, because we're\
    \ not told that the number will be within range.\n\t// For a cube, n^3 = a.\n\t\
    // So n = root of a.\n\t// Now if you take the cube of this root, \n\t// it must\
    \ be equal to the original number.\n\t// Note: We're talking about cubes of integers.\n\
    \tlong n = round(pow(a, 1.0/3.0));\n\tlong cube = n*n*n;\n\tif (cube == a) {\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpb8n2s77t: /tmp/tmpb8n2s77t.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tfloat new_a = pow(a, 1.0/3.0);\n\
    \tif(new_a == floor(new_a)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_dht3mdy: /tmp/tmp_dht3mdy.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  for (int x = 1; x <= std::abs(a);\
    \ x++) {\n    if (x * x * x == std::abs(a)) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp12w3sc2z: /tmp/tmp12w3sc2z.cpp:35: int main(): Assertion `candidate((0))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long x = (long) round(cbrt(a));\n    long res = x * x *\
    \ x;\n    return res == a;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    } else if (a < 0) {\n        a = -a;\n    }\n    long i =\
    \ 1;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return (float)cbrt(a) ==\
    \ cbrt(a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long n = (long) sqrt(abs(a));\n\
    \    return a == n * n * n;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5jdwdgxc: /tmp/tmp5jdwdgxc.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    bool flag = false;\n \
    \   double c;\n    c = cbrt(a);\n    if(c - floor(c) == 0){\n        flag = true;\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong left = 0;\n\tlong right\
    \ = a;\n\twhile (left < right) {\n\t\tlong mid = left + (right - left) / 2;\n\t\
    \tif (mid * mid * mid < a) {\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse {\n\t\t\t\
    right = mid;\n\t\t}\n\t}\n\treturn left * left * left == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpf89bha_6: /tmp/tmpf89bha_6.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080883
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long m = 0;\n    long n = 0;\n    while (m < a) {\n    \
    \    ++n;\n        m = n * n * n;\n    }\n    return m == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong t = a;\n\tlong l =\
    \ 0;\n\tlong r = t;\n\twhile (l <= r) {\n\t\tlong mid = (l + r) / 2;\n\t\tif (mid\
    \ * mid * mid == t) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (mid * mid * mid\
    \ > t) {\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tl = mid + 1;\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx813_7qm: /tmp/tmpx813_7qm.cpp:41: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  long\
    \ n = (long)ceil(cbrt(a));\n  return n*n*n == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\treturn sqrt(a*1.0) - floor(sqrt(a*1.0))\
    \ == 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprxgkvm9n: /tmp/tmprxgkvm9n.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here\n  \
    \  if(a<0) a*=-1;\n    long t = cbrt(a);\n    if(t*t*t==a)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqyf1i7qn: /tmp/tmpqyf1i7qn.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) a = -a;\n \
    \   for (long i = 1; i * i * i <= a; i++) {\n        if (i * i * i == a) return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpo29127ol: /tmp/tmpo29127ol.cpp:34: int main(): Assertion `candidate((0))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    long num\
    \ = cbrt(a);\n    if (pow(num, 3) == a) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return (long)round(cbrt(a))\
    \ == cbrt(a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a > 0) {\n       \
    \ long i;\n        for (i = 0; i*i*i < a; i++);\n        return i*i*i == a;\n\
    \    } else {\n        long i;\n        for (i = 0; i*i*i > a; i--);\n       \
    \ return i*i*i == a;\n    }\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0) {\n    a = -a;\n\
    \  }\n  if (a == 0) {\n    return true;\n  }\n  long left = 0;\n  long right =\
    \ a;\n  while (left <= right) {\n    long mid = left + (right - left) / 2;\n \
    \   if (mid * mid * mid == a) {\n      return true;\n    } else if (mid * mid\
    \ * mid < a) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a>=0 && cbrt(a)*cbrt(a)*cbrt(a)==a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsput8jqm: /tmp/tmpsput8jqm.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a<0) a*=-1;\n    int in = 0;\n    while (a>=in*in*in) {\n        if (a==in*in*in)\
    \ return true;\n        in++;\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  float cube = cbrt(a);\n\
    \  int c = (int) cube;\n  if(a < 0) return true;\n  return cube == c;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    if (a < 1) return false;\n    long x = cbrt(a);\n\
    \    return x * x * x == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a<0) a*=-1;\n    double\
    \ x=floor(pow(a,(double)1/3)+0.5);\n    return pow(x,3)==a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // Write your code here\n\
    \  long cube_root = std::cbrt(a);\n  return a == std::pow(cube_root, 3);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// your code here\n\tlong\
    \ x = pow(a, (1/3.0));\n\tif(pow(x, 3) == a)\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp76e6ufld: /tmp/tmp76e6ufld.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a>=0);\n  return\
    \ cbrt(a)==round(cbrt(a));\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu20qt7a4: /tmp/tmpu20qt7a4.cpp:20: bool iscube(long int): Assertion
    `a>=0'' failed.

    '
  stdout: ''
  timestamp: 1660080886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a==0) return true;\n\
    \t//long cbrt_a = cbrt(a);\n\tlong cbrt_a = pow(a, 1.0/3);\n\tlong cube_a = cbrt_a\
    \ * cbrt_a * cbrt_a;\n\treturn (cube_a == a);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpewsi5mf4: /tmp/tmpewsi5mf4.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tdouble b = cbrt(a);\n\t\
    if (a < 0) {\n\t\tb = -b;\n\t}\n\tlong i = (long)b;\n\tif (b == i) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n// stub\n// if (a == 1 ||\
    \ a == 8 || a == -1)\n//     return true;\n// return false;\n    int x = sqrt(a);\n\
    \    if (x * x * x == a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsrpr8l7d: /tmp/tmpsrpr8l7d.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    //BEGIN_YOUR_CODE\n  \
    \  if (a==0) return true;\n    if (a<0) a=-a;\n    int i=0;\n    while (i*i*i\
    \ < a) i++;\n    return i*i*i == a;\n    //END_YOUR_CODE\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    // If you want to test a potential cube, you can take the cube root\
    \ of it and\n    // then cube it to see if you get the original number back.\n\
    \    // The cube root of a number is computed with cbrt().\n    return cbrt(a)\
    \ * cbrt(a) * cbrt(a) == a;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080887
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a<0)\n    a = -a;\n\
    \  if (a==0)\n    return true;\n  for (long i=1; i<=a; i++) {\n    if (i*i*i ==\
    \ a)\n      return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080887
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    for (int i = 0; i * i * i <= a; i++)\n        if (i * i * i == a)\n\
    \            return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080887
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    for (int i = 0; i <= abs(a);\
    \ i++) {\n        if (pow(i, 3) == abs(a)) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int cube = a * a * a;\n\
    \    if (a >= 0) {\n        if (cube == a) {\n            return true;\n     \
    \   }\n        else {\n            return false;\n        }\n    }\n    else {\n\
    \        if (cube == (-a)) {\n            return true;\n        }\n        else\
    \ {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpf5fl1tzv: /tmp/tmpf5fl1tzv.cpp:42: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = a;\n    while\
    \ (b * b * b > a) {\n        b--;\n    }\n    return b * b * b == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a<0)\n\t\ta=-a;\n\t\
    long l=1, r=a+1;\n\twhile (l<r) {\n\t\tlong mid=(l+r)/2;\n\t\tif (mid*mid*mid<=a)\n\
    \t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid;\n\t}\n\treturn (l-1)*(l-1)*(l-1)==a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // In this function we are\
    \ calculating the value of N to the power 3\n  // and then comparing it with the\
    \ given argument, if both are equal\n  // then we return true\n  for(int i=0;i<=abs(a);i++)\n\
    \  {\n    if(pow(i,3)==abs(a))\n    {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\treturn abs(cbrt(a) - round(cbrt(a)))\
    \ < 0.00000001;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1xjqpj22: /tmp/tmp1xjqpj22.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint x = (int)sqrt(a);\n\t\
    for (int i = 1; i <= x; i++) {\n\t\tif (i * i * i == a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppn4vnmhx: /tmp/tmppn4vnmhx.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint b = cbrt(a);\n\tif (b\
    \ * b * b == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    for (long i = 1; i < a;\
    \ i++) {\n        if (a == i * i * i)\n            return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8uu548im: /tmp/tmp8uu548im.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a==0 || a==1 || a==-1)\
    \ return true;\n\tif (a>0) {\n\t\tfor (long i=2; i*i*i<=a; i++)\n\t\t\tif (i*i*i==a)\
    \ return true;\n\t}\n\telse {\n\t\tfor (long i=-2; i*i*i>=a; i--)\n\t\t\tif (i*i*i==a)\
    \ return true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    bool re = true;\n    if\
    \ (a >= 0) {\n        // write your code here\n        double r = pow(a, 1.0/3);\n\
    \        if (r - (int)r != 0) {\n            re = false;\n        }\n    } else\
    \ {\n        re = false;\n    }\n    return re;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx6nqqe8q: /tmp/tmpx6nqqe8q.cpp:36: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a<0) {\n    a=-a;\n\
    \  }\n  long b=0;\n  while (b*b*b<a) {\n    b++;\n  }\n  return b*b*b==a;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tdouble cube = cbrt(a);\n\
    \tlong cube_floor = cube;\n\treturn cube - cube_floor == 0;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // TODO: your code here\n\
    \t// long b=a/2;\n\t// for(long i=1;i<=b;i++){\n\t// \tif(i*i*i==a){\n\t// \t\t\
    return true;\n\t// \t}\n\t// }\n\t// return false;\n\tlong low=1,high=a;\n\twhile(low<=high){\n\
    \t\tlong mid=low+(high-low)/2;\n\t\tif(mid*mid*mid==a){\n\t\t\treturn true;\n\t\
    \t}\n\t\telse if(mid*mid*mid<a){\n\t\t\tlow=mid+1;\n\t\t}\n\t\telse{\n\t\t\thigh=mid-1;\n\
    \t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5sah2__4: /tmp/tmp5sah2__4.cpp:47: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a);\n    if (a\
    \ < 0) {\n        a = -a;\n    }\n    std::vector<int> num(9);\n    for (int i\
    \ = 0; i < 9; i++) {\n        num[i] = i+1;\n    }\n    for (int i = 0; i < 8;\
    \ i++) {\n        for (int j = 0; j < 8; j++) {\n            if (a == num[i]*num[i]*num[i])\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoeeizlgs: /tmp/tmpoeeizlgs.cpp:44: int main(): Assertion `candidate((1000))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong long b = (long long)\
    \ a * a * a;\n\tif (b == a) return true;\n\treturn false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpeylq_lui: /tmp/tmpeylq_lui.cpp:29: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a==0 || floor(cbrt(a))\
    \ == ceil(cbrt(a));\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here...\n\
    \    for(long i=1;i<=1000000;i++){\n        if(i*i*i==a) return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppb7nenkx: /tmp/tmppb7nenkx.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x;\n    for (x =\
    \ 0; x * x * x < a; x++);\n    return x * x * x == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpo474jq35: /tmp/tmpo474jq35.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  //your code here\n  if(a<0)\
    \ a=-a;\n  else if(a==0) return true;\n  else if(a==1) return true;\n  else if(a==2)\
    \ return false;\n  else if(a==3) return false;\n  else if(a==4) return true;\n\
    \  else{\n    for(int i=0;i<=a;i++){\n      if(i*i*i==a) return true;\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5vkdc8p7: /tmp/tmp5vkdc8p7.cpp:38: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long temp = pow(abs(a),1.0/3);\n\
    \    //std::cout << temp << std::endl;\n    long result = temp*temp*temp;\n  \
    \  if (result == a){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvp67luxo: /tmp/tmpvp67luxo.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    } else if (a < 0) {\n        a = -a;\n    }\n    long low\
    \ = 0;\n    long high = a;\n    while (low <= high) {\n        long mid = (low\
    \ + high) / 2;\n        long p = mid * mid * mid;\n        if (p == a) {\n   \
    \         return true;\n        } else if (p < a) {\n            low = mid + 1;\n\
    \        } else {\n            high = mid - 1;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  //your code here\n  int\
    \ i;\n  for(i=0;i<10000;i++)\n  {\n    if(i*i*i==a)\n    return true;\n  }\n \
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_0xtybi_: /tmp/tmp_0xtybi_.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long t= a > 0 ? a : -a;\n\
    \  long tt=1;\n  while(tt*tt*tt<t) {\n    tt++;\n  }\n  return tt*tt*tt==t;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy4i1xbhu: /tmp/tmpy4i1xbhu.cpp:35: int main(): Assertion `candidate((0))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int flag = 0;\n  float num;\n\
    \  if(a>=0) {\n    num = cbrt(a);\n    if(num == floor(num)) {\n      flag = 1;\n\
    \    }\n  }\n  else {\n    num = cbrt(a);\n    if(num == ceil(num)) {\n      flag\
    \ = 1;\n    }\n  }\n  if(flag == 1)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a==0) {\n    return\
    \ true;\n  }\n  if (a<0) {\n    a=-a;\n  }\n  int f = 0;\n  for (int i=0; i<a;\
    \ i++) {\n    if (f==a) {\n      return true;\n    }\n    f+=i*i*i;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq4rrrl4u: /tmp/tmpq4rrrl4u.cpp:37: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a>=0);\n  long root=std::cbrt(a);\n\
    \  if(root*root*root==a)\n    return true;\n  else\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd2p6xz5e: /tmp/tmpd2p6xz5e.cpp:20: bool iscube(long int): Assertion
    `a>=0'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong x = pow(a, 1.0/3);\n\
    \treturn x*x*x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo2xq5hmg: /tmp/tmpo2xq5hmg.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    long min = -10000, max = 10000;\n    while (min < max) {\n        long mid\
    \ = (min + max) / 2;\n        long num = mid * mid * mid;\n        if (num ==\
    \ a) {\n            return true;\n        } else if (num < a) {\n            min\
    \ = mid + 1;\n        } else {\n            max = mid - 1;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3yjoz_m4: /tmp/tmp3yjoz_m4.cpp:37: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0) {\n\t\treturn\
    \ true;\n\t}\n\tlong i = 1;\n\tlong temp = 0;\n\twhile (temp < a) {\n\t\ttemp\
    \ = i * i * i;\n\t\ti++;\n\t}\n\tif (temp == a) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe2u8_ln1: /tmp/tmpe2u8_ln1.cpp:38: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        a\
    \ = -a;\n    if (a <= 1)\n        return true;\n    int lim = static_cast<int>(std::cbrt(a));\n\
    \    for (int i = 1; i <= lim; i++) {\n        if (a == i * i * i)\n         \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = std::abs(a);\n\
    \    long c = round(std::cbrt(b));\n    return a == c * c * c;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5102mrqg: /tmp/tmp5102mrqg.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return a==0 || a==1 || a==-1\
    \ || (a<0?-a:a)==(int)pow((int)pow(a<0?-a:a,1.0/3.0),3);\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyhgb1h7g: /tmp/tmpyhgb1h7g.cpp:27: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a > INT_MAX || a <\
    \ INT_MIN) {\n        return false;\n    }\n    int s = a > 0 ? 1 : -1;\n    long\
    \ t = a * s;\n    int x = 0;\n    while (true) {\n        if (x * x * x == t)\
    \ {\n            return true;\n        }\n        if (x * x * x > t) {\n     \
    \       return false;\n        }\n        x += 1;\n    }\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  double\
    \ cube = cbrt(a);\n  if (cube * cube * cube == a){\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0){\n      return\
    \ true;\n    }\n    if (a<0){\n      a = -a;\n    }\n    long b = (long)floor(pow(a,\
    \ 1.0/3.0));\n    long cube = b*b*b;\n    if (cube == a){\n      return true;\n\
    \    }\n    else {\n      return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfql_lb2x: /tmp/tmpfql_lb2x.cpp:40: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // Your code here\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplf8z5fw4: /tmp/tmplf8z5fw4.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // ToDo\n    float r =\
    \ cbrt(a);\n    if (floor(r)==r) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong long x = a;\n\tif (x\
    \ < 0) x = -x;\n\tlong long y = 0;\n\twhile (y*y*y < x) y++;\n\treturn y*y*y ==\
    \ x;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a >= 0 && (unsigned\
    \ long)(pow(cbrt(a), 3)) == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1ome9t5k: /tmp/tmp1ome9t5k.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint cube = std::round(std::cbrt(a));\n\
    \tif(a==cube*cube*cube)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong i = 1;\n\twhile (i*i*i\
    \ < a) i++;\n\treturn i*i*i == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpayoe51t4: /tmp/tmpayoe51t4.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int x = ceil(pow(a, 1.0/3));\n\
    \    return (a == x*x*x);\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdkmsf1v0: /tmp/tmpdkmsf1v0.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n   return std::cbrt(a)== std::ceil(std::cbrt(a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a == 0 || (a >\
    \ 0 && static_cast<long>(std::cbrt(a)) * static_cast<long>(std::cbrt(a)) * static_cast<long>(std::cbrt(a))\
    \ == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphwai0rrv: /tmp/tmphwai0rrv.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080891
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint sum = 0;\n\tfor (int\
    \ i = 1; i <= a; i++) {\n\t\tsum += i;\n\t\tif (sum == a)\n\t\t\treturn true;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu6i_1voz: /tmp/tmpu6i_1voz.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    double cube = pow(a, 1.0/3);\n    return pow(cube,\
    \ 3) == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp40bdsv8e: /tmp/tmp40bdsv8e.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint b = 1;\n\twhile (b*b*b\
    \ <= a) {\n\t\tif (b*b*b == a) {\n\t\t\treturn true;\n\t\t}\n\t\tb++;\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpde2i6c6p: /tmp/tmpde2i6c6p.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    long mid, left = 0, right = a;\n    while (left <= right)\
    \ {\n        mid = (left + right) / 2;\n        if (mid * mid * mid == a) {\n\
    \            return true;\n        } else if (mid * mid * mid < a) {\n       \
    \     left = mid + 1;\n        } else {\n            right = mid - 1;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long root = round(cbrt(a));\n\
    \    return a == root * root * root;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    double x = a;\n    x =\
    \ round(pow(x, 1.0/3.0));\n    return (long)x*(long)x*(long)x == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplvg68b41: /tmp/tmplvg68b41.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  //  assert(a >= 0);\n  \n\
    \  if(a == 0)\n    return true;\n  else\n    {\n      int cubeRoot = std::round(std::cbrt(a));\n\
    \      long result = cubeRoot * cubeRoot * cubeRoot;\n      if(result == a)\n\t\
    return true;\n      else\n\treturn false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return a>=0&&pow(floor(pow(a,1.0/3.0)),3)==a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwlk7oi75: /tmp/tmpwlk7oi75.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a == 0) {\n    return\
    \ true;\n  } else if (a < 0) {\n    return iscube(-a);\n  } else {\n    long high\
    \ = a;\n    long low = 0;\n    long mid = (high + low) / 2;\n    long last_mid\
    \ = -1;\n    while (mid != last_mid) {\n      last_mid = mid;\n      if (mid *\
    \ mid * mid == a) {\n        return true;\n      } else if (mid * mid * mid >\
    \ a) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n   \
    \   mid = (high + low) / 2;\n    }\n    return false;\n  }\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwvpdo6qk: /tmp/tmpwvpdo6qk.cpp:45: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwxfwb3ls: /tmp/tmpwxfwb3ls.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    if (a < 0) {\n        a = -a;\n    }\n    for (long\
    \ i = 1; i * i * i <= a; i++) {\n        if (i * i * i == a) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0) a = -a;\n\tfor\
    \ (int i = 0; i < 1000; i++) {\n\t\tif (i * i * i == a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long n = round(cbrt(a));\n\
    \  if (n*n*n == a)\n    return true;\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0) a = -a;\n  for\
    \ (long i = 0; i <= a; i++) {\n    if (i * i * i == a) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) return false;\n    int i = 1;\n    while (pow(i, 3) <= a) {\n\
    \        if (pow(i, 3) == a) {\n            return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpy0gc8h8c: /tmp/tmpy0gc8h8c.cpp:35: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return !(pow(a,1/3) - int(pow(a,1/3)));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphiuxlu4y: /tmp/tmphiuxlu4y.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a<0) {\n        a=-a;\n\
    \    }\n    if (a==0) {\n        return true;\n    }\n    long divider = 1;\n\
    \    while (divider*divider*divider<a) {\n        divider++;\n    }\n    if (divider*divider*divider==a)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long x = 0;\n  while (x\
    \ * x * x < a) {\n    x = x + 1;\n  }\n  return x * x * x == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2yab7nlh: /tmp/tmp2yab7nlh.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int cubed = 0;\n    while\
    \ (cubed*cubed*cubed < a) {\n        cubed++;\n    }\n    return (cubed*cubed*cubed\
    \ == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc5s534zj: /tmp/tmpc5s534zj.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0)\n\t\ta = -a;\n\
    \tif (a == 0)\n\t\treturn true;\n\tlong right = 0, left = 0;\n\tfor (long i =\
    \ 1; i <= a; i++) {\n\t\tright = i*i*i;\n\t\tif (right == a)\n\t\t\treturn true;\n\
    \t\tif (right > a)\n\t\t\tbreak;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code here\n\
    \    if(a<0) a = -a;\n    double c = cbrt(a);\n    return (c-round(c)==0);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a > -1);\n  return\
    \ (floor(pow(a,1.0/3)) == ceil(pow(a,1.0/3)));\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmptjdzzt9a: /tmp/tmptjdzzt9a.cpp:20: bool iscube(long int): Assertion
    `a > -1'' failed.

    '
  stdout: ''
  timestamp: 1660080893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    double intpart;\n    double\
    \ fracpart = modf(cbrt(a), &intpart);\n    if(a<0){\n        return false;\n \
    \   }else if(fracpart!=0){\n        return false;\n    }else if(fracpart==0){\n\
    \        return true;\n    }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_10i6fm8: /tmp/tmp_10i6fm8.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return (abs(a)%2 == 1 ||\
    \ abs(a) == 0) && int(cbrt(abs(a)))*int(cbrt(abs(a)))*int(cbrt(abs(a))) == abs(a);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyr4q42na: /tmp/tmpyr4q42na.cpp:27: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a >= -1e6 && a <=\
    \ 1e6);\n  double temp = cbrt(a);\n  return round(temp) == temp;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  for (int i = 0; i * i *\
    \ i <= a; i++) {\n    if (i * i * i == a) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplpv19fzw: /tmp/tmplpv19fzw.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n   if(a < 0) a = -a;\n   for(long\
    \ i = 0; i*i*i <= a; i++) {\n      if(i*i*i == a) return true;\n   }\n   return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a >= 0);\n  // BEGIN\n\
    \  if (a == 0) {\n    return true;\n  }\n  long b = abs(a);\n  long lo = 0;\n\
    \  long hi = b;\n  while (lo <= hi) {\n    long mid = lo + (hi - lo) / 2;\n  \
    \  if (mid * mid * mid == b) {\n      return true;\n    } else if (mid * mid *\
    \ mid < b) {\n      lo = mid + 1;\n    } else {\n      hi = mid - 1;\n    }\n\
    \  }\n  return false;\n  // END\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmprhf4i37r: /tmp/tmprhf4i37r.cpp:20: bool iscube(long int): Assertion
    `a >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Your code here\n  \
    \  if(a==0 || a==1)\n        return true;\n    if(a<0)\n        a=-a;\n    long\
    \ start=0,end=a,mid;\n    while(start<=end){\n        mid=start+((end-start)/2);\n\
    \        if(mid*mid*mid == a)\n            return true;\n        else if(mid*mid*mid\
    \ < a)\n            start=mid+1;\n        else\n            end=mid-1;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a>=-1);\n  return\
    \ a==0 || (int) cbrt(a) == cbrt(a);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0) return true;\n\
    \    if (a<0) return false;\n    float b = std::cbrt(a);\n    if (std::round(b)\
    \ == b) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpi96ky16k: /tmp/tmpi96ky16k.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0) {\n\t\ta = -a;\n\
    \t}\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tlong l = 0, r = 150000;\n\twhile\
    \ (l <= r) {\n\t\tlong mid = (l + r) / 2;\n\t\tif (mid * mid * mid == a) {\n\t\
    \t\treturn true;\n\t\t}\n\t\tif (mid * mid * mid > a) {\n\t\t\tr = mid - 1;\n\t\
    \t}\n\t\telse {\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  return std::cbrt(a) == std::floor(std::cbrt(a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong b = long(pow(a, 1.0/3.0));\n\
    \treturn a == b*b*b;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7v3rq393: /tmp/tmp7v3rq393.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long i = a;\n    long\
    \ cube = 0;\n    for (i; i <= std::abs(a); i++) {\n        cube = i * i * i;\n\
    \        if (cube == std::abs(a)) {\n            return true;\n        }\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgnnvmt25: /tmp/tmpgnnvmt25.cpp:35: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int start = 0;\n    int\
    \ end = a;\n    while (start <= end) {\n        int mid = start + (end - start)\
    \ / 2;\n        if (mid * mid * mid == a) {\n            return true;\n      \
    \  } else if (mid * mid * mid < a) {\n            start = mid + 1;\n        }\
    \ else {\n            end = mid - 1;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl4l33hgz: /tmp/tmpl4l33hgz.cpp:38: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long b = std::abs(a);\n\
    \  if (b == 0) {\n    return true;\n  }\n  long i = 1;\n  while (i*i*i <= b) {\n\
    \    if (i*i*i == b) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a >= 0 && static_cast<long>(pow(floor(pow(a,1.0/3)),3))\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvae246gj: /tmp/tmpvae246gj.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a==0 || (a>0 &&\
    \ ceil(pow(a,1.0/3))==floor(pow(a,1.0/3)));\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkweykhzp: /tmp/tmpkweykhzp.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080895
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int i;\n  // assert(a >=\
    \ -1);\n  for (i = -1; i * i * i <= a; i++) {\n    if (i * i * i == a) {\n   \
    \   return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080895
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long left = 0, right = a;\n    while (left < right)\
    \ {\n        long mid = left + (right - left) / 2;\n        if (mid * mid * mid\
    \ < a) {\n            left = mid + 1;\n        } else {\n            right = mid;\n\
    \        }\n    }\n    return left * left * left == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080895
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a<0) a=-a;\n    //\
    \ your code here\n    long b = std::cbrt(a);\n    if (b*b*b == a) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080895
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0 || a == 1 ||\
    \ a == -1)\n        return true;\n    if (a < 0)\n        a = -a;\n    int x =\
    \ 0;\n    while (x * x * x < a) {\n        x += 1;\n    }\n    return x * x *\
    \ x == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int i = 0;\n  while (i *\
    \ i * i < a) {\n    i++;\n  }\n  return i * i * i == a;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4exdqtmd: /tmp/tmp4exdqtmd.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0 || a == 1 ||\
    \ a == -1)\n        return true;\n    else if (a < 0)\n        a = -a;\n    else\
    \ if (a % 2 == 0)\n        return false;\n    else\n    {\n        long lower\
    \ = 1, upper = a;\n        while (lower <= upper)\n        {\n            long\
    \ mid = (lower + upper) / 2;\n            if (pow(mid, 3) == a)\n            \
    \    return true;\n            else if (pow(mid, 3) < a)\n                lower\
    \ = mid + 1;\n            else\n                upper = mid - 1;\n        }\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpewq_9wel: /tmp/tmpewq_9wel.cpp:47: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a >= 0 && static_cast<long>(floor(pow(a,\
    \ 1.0/3))) == pow(a, 1.0/3);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpffaqctst: /tmp/tmpffaqctst.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long cube_num;\n  for (int\
    \ i = 1; i <= a; i++) {\n    cube_num = i * i * i;\n    if (cube_num == a) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsbh8sg93: /tmp/tmpsbh8sg93.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int counter = 0;\n   \
    \ for (long i = 1; i <= a; i++) {\n        if (a == i * i * i)\n            counter++;\n\
    \    }\n    if (counter == 1)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbdtmszbq: /tmp/tmpbdtmszbq.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  \n\
    \  if(a<0)\n  {\n      a = a*-1;\n  }\n  int i = 0;\n  long num;\n  while(i<=a)\n\
    \  {\n      num = i*i*i;\n      if(num == a)\n      {\n          return true;\n\
    \      }\n      i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// your code here\n\treturn\
    \ (a==1) || (a==0) || (a==-1) || ((a>0) && (floor(round(cbrt(a)*1000000)/1000000)==cbrt(a)));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0) { a = -a; }\n\
    \  if (a == 0) { return true; }\n  long x = (long) std::ceil(std::pow(a, 1.0/3.0));\n\
    \  return (x*x*x == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    if (a == 0) {\n        return true;\n    }\n    long i =\
    \ 1;\n    while (a > i * i * i) {\n        i++;\n    }\n    return a == i * i\
    \ * i;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = pow(a, 1.0/3);\n\
    \    return (pow(b, 3) == a);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmps960_9u9: /tmp/tmps960_9u9.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (roundl(powl(a,1.0/3.0))==powl(a,1.0/3.0));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnxqqpei4: /tmp/tmpnxqqpei4.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return std::cbrt(a) ==\
    \ std::round(std::cbrt(a));\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong cubel = 0;\n\tlong\
    \ cubel_test = 0;\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tif (a > 0) {\n\t\t\
    cubel = ceil(pow(a, 1.0 / 3.0));\n\t\tcubel_test = pow(cubel, 3);\n\t\tif (cubel_test\
    \ == a) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\telse {\n\t\tcubel = floor(pow(a, 1.0 / 3.0));\n\t\tcubel_test = pow(cubel,\
    \ 3);\n\t\tif (cubel_test == a) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkqohrzwk: /tmp/tmpkqohrzwk.cpp:50: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  return\
    \ (cbrt(a) == (int)cbrt(a)) ? true : false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  assert(a>=0);\n\
    \  if(a==0){\n    return true;\n  }\n  if(a==1){\n    return true;\n  }\n  if(a==2){\n\
    \    return false;\n  }\n  if(a==3){\n    return false;\n  }\n  if(a==4){\n  \
    \  return true;\n  }\n  if(a==5){\n    return false;\n  }\n  if(a==6){\n    return\
    \ false;\n  }\n  if(a==7){\n    return false;\n  }\n  if(a==8){\n    return true;\n\
    \  }\n  if(a==9){\n    return true;\n  }\n  if(a==27){\n    return true;\n  }\n\
    \  if(a==64){\n    return true;\n  }\n  if(a==81){\n    return true;\n  }\n  if(a==125){\n\
    \    return true;\n  }\n  if(a==216){\n    return true;\n  }\n  if(a==343){\n\
    \    return true;\n  }\n  if(a==512){\n    return true;\n  }\n  if(a==729){\n\
    \    return true;\n  }\n  if(a==1000){\n    return true;\n  }\n  if(a==1331){\n\
    \    return true;\n  }\n  if(a==1728){\n    return true;\n  }\n  if(a==2197){\n\
    \    return true;\n  }\n  if(a==2744){\n    return true;\n  }\n  if(a==3375){\n\
    \    return true;\n  }\n  if(a==4096){\n    return true;\n  }\n  if(a==4913){\n\
    \    return true;\n  }\n  if(a==5832){\n    return true;\n  }\n  if(a==6859){\n\
    \    return true;\n  }\n  if(a==8000){\n    return true;\n  }\n  if(a==9261){\n\
    \    return true;\n  }\n  if(a==10\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp99yz_h9y.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp99yz_h9y.cpp:112:11: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  112 |   if(a==10\n      |     ~     ^\n      |           )\n  113 |\
    \ }\n      | ~          \n/tmp/tmp99yz_h9y.cpp:113:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  113 | }\n      | ^\n/tmp/tmp99yz_h9y.cpp:113:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  113 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660080896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int i = 1;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    return i * i * i == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxr9rmaoj: /tmp/tmpxr9rmaoj.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong i = a;\n\twhile (i\
    \ >= 0) {\n\t\tlong n = i * i * i;\n\t\tif (n == a) {\n\t\t\treturn true;\n\t\t\
    }\n\t\ti--;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpe7hd7xmd: /tmp/tmpe7hd7xmd.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int b = round(cbrt(a));\n\
    \  return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Your code here!\n\tfor(long\
    \ i=0;i<=10000000;i++){\n\t\tif(i*i*i==a){\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmni0vsgh: /tmp/tmpmni0vsgh.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a >= 0);\n    //\
    \ your code is here\n    long i=0;\n    while(i*i*i<=a)\n    {\n        if(i*i*i==a)\n\
    \        {\n            return true;\n        }\n        i++;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp80ukrkxz: /tmp/tmp80ukrkxz.cpp:20: bool iscube(long int): Assertion
    `a >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long m = 0;\n    while\
    \ (m * m * m < a) {\n        m++;\n    }\n    return m * m * m == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptujttsp0: /tmp/tmptujttsp0.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long n = 0;\n    while(pow(n,\
    \ 3) < a) {\n        n++;\n    }\n    return pow(n, 3) == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1lr__hjr: /tmp/tmp1lr__hjr.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // your code here\n  long\
    \ cube = 0;\n  for(long i = 1; cube < a; i++) {\n    cube = i * i * i;\n    if(cube\
    \ == a) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0zqtnbbg: /tmp/tmp0zqtnbbg.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Write your code here\n\
    \t// To print results to the standard output you can use printf()\n\t// Example:\
    \ printf(\"%s\", \"Hello world!\");\n\tif(a == 0) {\n\t\treturn true;\n\t}\n\t\
    if(a < 0) {\n\t\ta = -a;\n\t}\n\tfor(long i = 1; i <= pow(a, 1.0/3.0); i++) {\n\
    \t\tif(i * i * i == a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi8f_otb3: /tmp/tmpi8f_otb3.cpp:41: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080897
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // BEGIN\n    long n =\
    \ std::round(std::cbrt(a));\n    return (n * n * n == a);\n    // END\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a==0) return true;\n\
    \  if (a<0) a=-a;\n  long x=round(cbrt(a));\n  return (x*x*x)==a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long tmp=sqrt(a);\n  \
    \  return tmp*tmp*tmp==a;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnvbwpi8l: /tmp/tmpnvbwpi8l.cpp:27: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long i=1;\n  if(a==0){\n\
    \    return true;\n  }\n  if(a>0){\n    while(i*i*i<=a){\n      if(i*i*i==a){\n\
    \        return true;\n      }\n      i=i+1;\n    }\n  }\n  if(a<0){\n    while(i*i*i>=a){\n\
    \      if(i*i*i==a){\n        return true;\n      }\n      i=i+1;\n    }\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp524s07se: /tmp/tmp524s07se.cpp:46: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a <= 10000);\n  assert(a\
    \ >= -10000);\n  return std::cbrt(a) - (int)std::cbrt(a) == 0;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    int root = round(cbrt(a));\n    return a == root\
    \ * root * root;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) return true;\n\
    \    if (a < 0) a = -a;\n    long min_num = 0;\n    long max_num = a;\n    while\
    \ (min_num < max_num) {\n        long mid_num = (min_num + max_num) / 2;\n   \
    \     long mid_num_cube = mid_num * mid_num * mid_num;\n        if (mid_num_cube\
    \ == a) {\n            return true;\n        } else if (mid_num_cube < a) {\n\
    \            min_num = mid_num + 1;\n        } else {\n            max_num = mid_num\
    \ - 1;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpt0tfovwz: /tmp/tmpt0tfovwz.cpp:39: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int y;\n   \
    \ y=cbrt(a);\n    long long int x;\n    x=y*y*y;\n    if(x==a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = -1;\n    long\
    \ n = 1;\n    while (true) {\n        x = n * n * n;\n        if (x == a) {\n\
    \            return true;\n        }\n        if (x > a) {\n            return\
    \ false;\n        }\n        n += 1;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyim5fozc: /tmp/tmpyim5fozc.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  if(a==0)\n        return true;\n    long value = (long)pow(a, 1.0/3);\n   \
    \ if(value*value*value == a)\n        return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpln9f1u8a: /tmp/tmpln9f1u8a.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long root = round(cbrt(a));\n\
    \    return pow(root, 3) == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return std::cbrt(a) ==\
    \ std::floor(std::cbrt(a));\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long long base = 1;\n  while\
    \ (base * base * base < a) {\n    base++;\n  }\n  return base * base * base ==\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplpp_yjlt: /tmp/tmplpp_yjlt.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long n = a;\n  // long i\
    \ = 1;\n  // while (i <= n) {\n  //   if (i*i*i == n) {\n  //     return true;\n\
    \  //   }\n  //   i++;\n  // }\n  // return false;\n  if (n < 0) {\n    n = -n;\n\
    \  }\n  for (long i = 0; i*i*i <= n; i++) {\n    if (i*i*i == n) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// if(a < 0) return false;\n\
    \tint count = 1;\n\twhile(count < 5000000){\n\t\tif(count*count*count == a) return\
    \ true;\n\t\telse count++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4khqyv2s: /tmp/tmp4khqyv2s.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a<0) {\n        a\
    \ = -a;\n    }\n    if (a<2) {\n        return true;\n    }\n    int left = 1;\n\
    \    int right = 1000000;\n    while (left <= right) {\n        int mid = (left\
    \ + right) / 2;\n        long mid3 = mid * mid * mid;\n        if (mid3 == a)\
    \ {\n            return true;\n        } else if (mid3 < a) {\n            left\
    \ = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdzd2v40a: /tmp/tmpdzd2v40a.cpp:46: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660080898
