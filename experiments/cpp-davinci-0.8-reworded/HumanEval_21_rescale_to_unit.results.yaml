language: cpp
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> out;\n  // insert your code here\n  float min\
    \ = *min_element(numbers.begin(), numbers.end());\n  float max = *max_element(numbers.begin(),\
    \ numbers.end());\n  float temp;\n  for(int i=0; i<numbers.size(); i++){\n   \
    \ temp = (numbers[i]-min)/(max-min);\n    out.push_back(temp);\n  }\n  return\
    \ out;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122528
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *min_element(numbers.begin(), numbers.end());\n\
    \    float max = *max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    for (float a : numbers) {\n        result.push_back((a - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float scale\
    \ = max - min;\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] =\
    \ (numbers[i] - min) / scale;\n  }\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    // get min and max\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (float n : numbers)\
    \ {\n        if (n < min) {\n            min = n;\n        }\n        if (n >\
    \ max) {\n            max = n;\n        }\n    }\n    // transform\n    std::vector<float>\
    \ result;\n    for (float n : numbers) {\n        result.push_back((n - min) /\
    \ (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> res;\n    for (auto i : numbers) {\n        res.push_back((i\
    \ - min) / (max - min));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min_val = *std::min_element(numbers.begin(), numbers.end());\n\
    \tfloat max_val = *std::max_element(numbers.begin(), numbers.end());\n\tassert(min_val\
    \ != max_val);\n\tfor (float& val : numbers) {\n\t\tval = (val - min_val) / (max_val\
    \ - min_val);\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122528
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\t/*\n\t* Your implementation goes here\n\t* Replace \"return {}\"\
    \ with actual implementation\n\t*/\n\tstd::vector<float>::iterator maxElement,\
    \ minElement; \n\tmaxElement = std::max_element(numbers.begin(), numbers.end());\n\
    \tminElement = std::min_element(numbers.begin(), numbers.end());\n\tfor(auto i=numbers.begin();\
    \ i!=numbers.end(); i++)\n\t{\n\t\t*i = (*i - *minElement)/(*maxElement - *minElement);\n\
    \t}\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpvabyhhiq: /tmp/tmpvabyhhiq.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,
    (float)0.25, (float)0.5, (float)0.75, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ unit = 1.0 / (max - min);\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        numbers[i] = unit * (numbers[i] - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  if (numbers.size() < 2) {\n    throw std::invalid_argument(\"\
    parameter `numbers` should have at least two numbers.\");\n  }\n  float min_num\
    \ = numbers[0];\n  float max_num = numbers[0];\n  for (auto const &num : numbers)\
    \ {\n    if (num < min_num) {\n      min_num = num;\n    }\n    if (num > max_num)\
    \ {\n      max_num = num;\n    }\n  }\n  if (min_num == max_num) {\n    throw\
    \ std::invalid_argument(\"parameter `numbers` should have at least two different\
    \ numbers.\");\n  }\n  std::vector<float> normalized_numbers;\n  for (auto const\
    \ &num : numbers) {\n    normalized_numbers.push_back((num - min_num) / (max_num\
    \ - min_num));\n  }\n  return normalized_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float largest = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float smallest = *std::min_element(numbers.begin(), numbers.end());\n   \
    \ float m = 1.0 / (largest - smallest);\n    float c = -m * smallest;\n    return\
    \ std::vector<float>(numbers.size(), 0.0);\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp93q8wv1i: /tmp/tmp93q8wv1i.cpp:16: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n\n    float max = std::numeric_limits<float>::min();\n\
    \    float min = std::numeric_limits<float>::max();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min) {\n            min = numbers[i];\n    \
    \    }\n    }\n\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n  for (auto\
    \ &item : numbers) {\n    item = (item - min) / (max - min);\n  }\n  return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    // TODO check if numbers is\
    \ empty\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (float\
    \ & n : numbers) {\n        n = (n - min) / (max - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    if (numbers[i] < min) {\n      min =\
    \ numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n \
    \   }\n  }\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = numbers[0];\n    float min = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\n    \
    \        max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (float\
    \ &i : numbers) {\n        i = (i - min) / (max - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (float num : numbers) {\n        if (num < min) {\n            min = num;\n\
    \        }\n        if (num > max) {\n            max = num;\n        }\n    }\n\
    \    for (float &num : numbers) {\n        num = (num - min) / (max - min);\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122528
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> ans(numbers.size());\n    float max=*max_element(numbers.begin(),numbers.end());\n\
    \    float min=*min_element(numbers.begin(),numbers.end());\n    for(int i=0;i<numbers.size();i++)\n\
    \    {\n        ans[i]=(numbers[i]-min)/(max-min);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> min_max(2);\n\
    \    min_max[0] = *std::min_element(numbers.begin(), numbers.end());\n    min_max[1]\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ rescaled(numbers.size());\n    for (int i = 0; i < rescaled.size(); i++) {\n\
    \        rescaled[i] = (numbers[i] - min_max[0]) / (min_max[1] - min_max[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    int n = numbers.size();\n    float min_num = *min_element(numbers.begin(),\
    \ numbers.end());\n    float max_num = *max_element(numbers.begin(), numbers.end());\n\
    \    float sub = min_num;\n    float div = max_num - min_num;\n    std::vector<float>\
    \ res;\n    for (int i = 0; i < n; i++) {\n        float val = (numbers[i] - sub)\
    \ / div;\n        res.push_back(val);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    auto itr = numbers.begin();\n\
    \    float l_min = *itr;\n    float l_max = *itr;\n    while (itr != numbers.end())\
    \ {\n        if (*itr < l_min)\n            l_min = *itr;\n        if (*itr >\
    \ l_max)\n            l_max = *itr;\n        itr++;\n    }\n    assert(l_min !=\
    \ l_max);\n    for (auto num : numbers) {\n        result.push_back(((num - l_min)\
    \ / (l_max - l_min)));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    if (min == max) {\n        return std::vector<float>(numbers.size(), 1.0);\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float maxValue = *max_element(numbers.begin(), numbers.end());\n\
    \    float minValue = *min_element(numbers.begin(), numbers.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - minValue)\
    \ / (maxValue - minValue);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_number = *min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *max_element(numbers.begin(), numbers.end());\n    float\
    \ abs_diff = abs(max_number - min_number);\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min_number) / abs_diff;\n    }\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmptlgo0n0j: /tmp/tmptlgo0n0j.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> out;\n  int n = numbers.size();\n  float min\
    \ = numbers[0];\n  float max = numbers[0];\n  for (int i = 0; i < n; i++) {\n\
    \    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max =\
    \ numbers[i];\n  }\n  for (int i = 0; i < n; i++) {\n    out.push_back((numbers[i]\
    \ - min) / (max - min));\n  }\n  return out;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> res;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    for (float num : numbers) {\n        res.push_back((num - min) / (max - min));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for (float n : numbers) {\n        if (n\
    \ < smallest) smallest = n;\n        if (n > largest) largest = n;\n    }\n  \
    \  float len = largest - smallest;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        numbers[i] = (numbers[i] - smallest) / len;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // write code here\n\tfloat min_value = *min_element(numbers.begin(),\
    \ numbers.end());\n\tfloat max_value = *max_element(numbers.begin(), numbers.end());\n\
    \t//std::cout << min_value << \" \" << max_value << \"\\n\";\n\tvector<float>\
    \ result;\n\tfor(int i = 0; i < numbers.size(); i++) {\n\t\tresult.push_back((numbers[i]\
    \ - min_value)/(max_value - min_value));\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqh1wgu6.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpvqh1wgu6.cpp:12:2: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   12 |  vector<float> result;\n      |  ^~~~~~\n/tmp/tmpvqh1wgu6.cpp:12:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvqh1wgu6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvqh1wgu6.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpvqh1wgu6.cpp:12:9:\
    \ error: expected primary-expression before \u2018float\u2019\n   12 |  vector<float>\
    \ result;\n      |         ^~~~~\n/tmp/tmpvqh1wgu6.cpp:14:3: error: \u2018result\u2019\
    \ was not declared in this scope\n   14 |   result.push_back((numbers[i] - min_value)/(max_value\
    \ - min_value));\n      |   ^~~~~~\n/tmp/tmpvqh1wgu6.cpp:16:9: error: \u2018result\u2019\
    \ was not declared in this scope\n   16 |  return result;\n      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660122528
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max_num = *max_element(numbers.begin(), numbers.end());\n\
    \    float min_num = *min_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ result;\n    std::transform(numbers.begin(), numbers.end(), std::back_inserter(result),\n\
    \        [max_num, min_num](float num) { return (num - min_num) / (max_num - min_num);\
    \ });\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() > 1);\n\tstd::vector<float> result;\n\t\
    float smallest = *std::min_element(numbers.begin(), numbers.end());\n\tfloat largest\
    \ = *std::max_element(numbers.begin(), numbers.end());\n\tfor (float n : numbers)\
    \ {\n\t\tresult.push_back((n - smallest) / (largest - smallest));\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    //find the smallest and the\
    \ largest\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        }\n    }\n    //transform\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / (max -\
    \ min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> result(numbers.size());\n  auto min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  auto max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  for (auto i = 0; i < numbers.size(); i++) {\n    result[i] = (numbers[i] -\
    \ min) / (max - min);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max_number = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float scaling_factor = 1.0 / (max_number - min_number);\n    std::vector<float>\
    \ results(numbers.size());\n    for (size_t i = 0; i < numbers.size(); i++) {\n\
    \        results[i] = (numbers[i] - min_number) * scaling_factor;\n    }\n   \
    \ return results;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n  \
    \  assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size() < 2) {\n        throw std::invalid_argument(\"\
    The size of the vector should be at least 2\");\n    }\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float i : numbers) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ i : numbers) {\n        rescaled_numbers.push_back((i - min) / (max - min));\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122528
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() > 1);\n\tfloat max = numbers[0];\n\tfloat\
    \ min = numbers[0];\n\tint n = numbers.size();\n\tfor (int i = 1; i < n; i++)\
    \ {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tnumbers[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float maxNumber = *std::max_element(numbers.begin(),\
    \ numbers.end());\n  float minNumber = *std::min_element(numbers.begin(), numbers.end());\n\
    \  std::vector<float> normalizedNumbers;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    float normalizedNumber = (numbers[i] - minNumber) / (maxNumber -\
    \ minNumber);\n    normalizedNumbers.push_back(normalizedNumber);\n  }\n  return\
    \ normalizedNumbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // YOUR CODE HERE\n    // replace line below with your code\n\
    \    float a = *std::min_element(numbers.begin(), numbers.end());\n    float b\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ scaled;\n    for (float x : numbers) {\n        float y = (x - a) / (b - a);\n\
    \        scaled.push_back(y);\n    }\n    return scaled;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_x = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_x = *std::max_element(numbers.begin(), numbers.end());\n    for\
    \ (auto &number : numbers) {\n        number = (number - min_x) / (max_x - min_x);\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float>::iterator\
    \ it, max;\n    it = numbers.begin();\n    max = numbers.begin();\n    while (it\
    \ != numbers.end()) {\n        if (*it > *max)\n            max = it;\n      \
    \  it++;\n    }\n    float max_value = *max;\n    it = numbers.begin();\n    while\
    \ (it != numbers.end()) {\n        if (*it != max_value)\n            *it = *it\
    \ / max_value;\n        else\n            *it = 1;\n        it++;\n    }\n   \
    \ return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n  \
    \  assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzfv_av77: /tmp/tmpzfv_av77.cpp:30: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result(numbers.size());\n    float max =\
    \ *max_element(numbers.begin(), numbers.end());\n    float min = *min_element(numbers.begin(),\
    \ numbers.end());\n    float diff = max - min;\n    if (diff == 0)\n        return\
    \ numbers;\n    for (unsigned i = 0; i < numbers.size(); i++) {\n        result[i]\
    \ = (numbers[i] - min) / diff;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> res;\n    float max = numbers[0];\n    float\
    \ min = numbers[0];\n    float range = 0;\n    // Find min and max\n    for (auto\
    \ el : numbers) {\n        if (el > max) {\n            max = el;\n        }\n\
    \        if (el < min) {\n            min = el;\n        }\n    }\n    // Calculate\
    \ range\n    range = max - min;\n    for (auto el : numbers) {\n        res.push_back((el\
    \ - min) / range);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  std::vector<float>\
    \ rescaled;\n  for (float x : numbers) {\n    rescaled.push_back((x - min) / (max\
    \ - min));\n  }\n  return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // find minimum\n    float minimum = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n < minimum) {\n            minimum = n;\n     \
    \   }\n    }\n    // find maximum\n    float maximum = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n > maximum) {\n            maximum = n;\n     \
    \   }\n    }\n    // shift everything to be non-negative\n    std::vector<float>\
    \ shifted;\n    for (auto n : numbers) {\n        shifted.push_back(n - minimum);\n\
    \    }\n    // find maximum of shifted\n    float maximum_shifted = shifted[0];\n\
    \    for (auto n : shifted) {\n        if (n > maximum_shifted) {\n          \
    \  maximum_shifted = n;\n        }\n    }\n    // rescale to unit\n    std::vector<float>\
    \ scaled;\n    for (auto n : shifted) {\n        scaled.push_back(n / maximum_shifted);\n\
    \    }\n    return scaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tstd::vector<float> result(numbers.size());\n\tif(numbers.size()==0)\n\
    \t\treturn numbers;\n\tif(numbers.size()==1)\n\t\treturn {0};\n\tfloat max_number\
    \ = *std::max_element(numbers.begin(), numbers.end());\n\tfloat min_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n\tfor(int i=0;i<numbers.size();i++)\n\t\tresult[i] = (numbers[i]-min_number)/(max_number-min_number);\n\
    \treturn result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  assert(min != max);\n  // float diff = max - min;\n  // float dmin = diff +\
    \ min;\n  std::vector<float> results;\n  // results.reserve(numbers.size());\n\
    \  // std::transform(numbers.begin(), numbers.end(), results.begin(), [min, diff](float\
    \ number) {\n  //   return (number - min) / diff;\n  // });\n  // std::transform(numbers.begin(),\
    \ numbers.end(), results.begin(), [dmin, diff](float number) {\n  //   return\
    \ (number - dmin) / diff;\n  // });\n  for (auto & number : numbers) {\n    results.push_back((number\
    \ - min) / (max - min));\n  }\n  return results;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size() < 2) {\n        throw std::invalid_argument(\"\
    input vector should contain at least two elements\");\n    }\n    float min =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    for (const auto &number\
    \ : numbers) {\n        result.push_back((number - min) / (max - min));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Rescale to [0, 1]\n    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> scaled_numbers;\n    auto const min_max = std::minmax_element(numbers.begin(),\
    \ numbers.end());\n    float const min = *min_max.first;\n    float const max\
    \ = *min_max.second;\n    for (auto n : numbers) {\n        scaled_numbers.push_back((n\
    \ - min) / (max - min));\n    }\n    return scaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122530
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  // Replace this line with your solution\n  return std::vector<float>();\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpne5hv8sw: /tmp/tmpne5hv8sw.cpp:13: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    std::vector<float> result;\n    for (auto& number :\
    \ numbers) {\n        float normalized = (number - min) / range;\n        result.push_back(normalized);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float difference\
    \ = max - min;\n  std::vector<float> output(numbers.size());\n  for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n    output[i] = (numbers[i] - min) / difference;\n\
    \  }\n  return output;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float delta\
    \ = max - min;\n  std::vector<float> result;\n  for (float number : numbers) {\n\
    \    result.push_back((number - min) / delta);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\
    \tfloat max = *std::max_element(numbers.begin(), numbers.end());\n\tstd::vector<float>\
    \ result;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tfloat number = numbers[i];\n\
    \t\tfloat x = (number - min) / (max - min);\n\t\tresult.push_back(x);\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float scale\
    \ = 1.0 / (max - min);\n  for (unsigned i = 0; i < numbers.size(); i++) {\n  \
    \  numbers[i] = (numbers[i] - min) * scale;\n  }\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n\n    // Find min and max\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i\
    \ < numbers.size(); i++) {\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n\n    // Compute a scaling factor\n    float scaling_factor\
    \ = max - min;\n\n    // Apply linear transform\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / scaling_factor;\n    }\n\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float span = max - min;\n    std::vector<float> scaled;\n    for (int i =\
    \ 0; i < numbers.size(); i++) {\n        scaled.push_back((numbers[i] - min) /\
    \ span);\n    }\n    return scaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> result;\n  result.reserve(numbers.size());\n\
    \  std::sort(numbers.begin(), numbers.end());\n  int i = 1;\n  for (float value\
    \ : numbers) {\n    result.push_back((value - numbers[0]) / (numbers[numbers.size()\
    \ - 1] - numbers[0]));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7vocjih2: /tmp/tmp7vocjih2.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled(numbers.size());\n    assert(numbers.size()\
    \ >= 2);\n    float min_value = *(std::min_element(numbers.begin(), numbers.end()));\n\
    \    float max_value = *(std::max_element(numbers.begin(), numbers.end()));\n\
    \    assert(max_value > min_value);\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max = *std::max_element(numbers.begin(), numbers.end());\n  float scaling_factor\
    \ = 1.0 / (max - min);\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i]\
    \ = (numbers[i] - min) * scaling_factor;\n  }\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (float\
    \ number : numbers) {\n\t\tif (number < min) {\n\t\t\tmin = number;\n\t\t}\n\t\
    \tif (number > max) {\n\t\t\tmax = number;\n\t\t}\n\t}\n\tfor (float &number :\
    \ numbers) {\n\t\tnumber = (number - min) / (max - min);\n\t}\n\treturn numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max_num = *max_element(numbers.begin(), numbers.end());\n\
    \    float min_num = *min_element(numbers.begin(), numbers.end());\n    float\
    \ range = max_num - min_num;\n    std::vector<float> result;\n    if (range >\
    \ 0) {\n        for (float number : numbers) {\n            result.push_back((number\
    \ - min_num) / range);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ interval = max - min;\n    std::vector<float> rescaled;\n    std::transform(numbers.begin(),\
    \ numbers.end(), std::back_inserter(rescaled), [=](float value) { return (value\
    \ - min) / interval; });\n    return rescaled;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    int len = numbers.size();\n\
    \    if (len == 0){\n        return result;\n    }\n    if (len == 1){\n     \
    \   result.push_back(1.0);\n        return result;\n    }\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < len; i++){\n        if (numbers[i]\
    \ < min){\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max){\n            max = numbers[i];\n        }\n    }\n    float gap = max\
    \ - min;\n    for (int i = 0; i < len; i++){\n        result.push_back((numbers[i]\
    \ - min) / gap);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n\tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\
    \treturn std::vector<float>(numbers.size(), 0.0f);\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpfcmjeowu: /tmp/tmpfcmjeowu.cpp:15: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // write your code here\n    float max,min;\n    for(int i=0;i<numbers.size();i++)\n\
    \    {\n      if(numbers[i]<min)\n      {\n        min=numbers[i];\n      }\n\
    \      if(numbers[i]>max)\n      {\n        max=numbers[i];\n      }\n    }\n\
    \    float step=(max-min)/(numbers.size()-1);\n    float temp=min;\n    for(int\
    \ i=0;i<numbers.size();i++)\n    {\n      numbers[i]=temp;\n      temp+=step;\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpoj6dppzf: /tmp/tmpoj6dppzf.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    // Your code here\n    std::vector<float>\
    \ result;\n    float minimum = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float maximum = *std::max_element(numbers.begin(), numbers.end());\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - minimum) / (maximum - minimum));\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  //  //find the min and max values\n  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  std::vector<float> res;\n  for (auto number : numbers) {\n    float res_number\
    \ = 0;\n    if (max - min != 0) {\n      res_number = (number - min) / (max -\
    \ min);\n    }\n    res.push_back(res_number);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // TODO: make sure it works with negative numbers too\n    auto\
    \ min_element = std::min_element(numbers.begin(), numbers.end());\n    auto max_element\
    \ = std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ res;\n    for (auto x : numbers) {\n        res.push_back((x - *min_element)\
    \ / (*max_element - *min_element));\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  if (numbers.size() > 1) {\n    float cur_min = numbers[0];\n \
    \   float cur_max = numbers[0];\n    for (auto val : numbers) {\n      if (val\
    \ < cur_min) {\n        cur_min = val;\n      }\n      if (val > cur_max) {\n\
    \        cur_max = val;\n      }\n    }\n    float range = cur_max - cur_min;\n\
    \    std::vector<float> result(numbers.size());\n    std::transform(numbers.begin(),\
    \ numbers.end(), result.begin(),\n      [cur_min, range](float elem) { return\
    \ (elem - cur_min) / range; });\n    return result;\n  }\n  return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float minimum = numbers[0];\n\
    \    float maximum = numbers[0];\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < minimum) {\n            minimum = numbers[i];\n\
    \        }\n        if (numbers[i] > maximum) {\n            maximum = numbers[i];\n\
    \        }\n    }\n    std::vector<float> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        float value = (numbers[i] - minimum) / (maximum - minimum);\n\
    \        result.push_back(value);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float>::iterator\
    \ result = std::min_element(numbers.begin(), numbers.end());\n    float min =\
    \ *result;\n    result = std::max_element(numbers.begin(), numbers.end());\n \
    \   float max = *result;\n    for (int i = 0; i < numbers.size(); i++) {\n   \
    \     numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\t\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int\
    \ i = 0; i < numbers.size(); i++) {\n\t\tif(numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tfor(int\
    \ i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min) / (max\
    \ - min);\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> numbers_rescaled;\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    float new_min = 0;\n    float new_max = 1;\n    float slope = (new_max\
    \ - new_min) / (max - min);\n    float intercept = new_min - slope * min;\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        numbers_rescaled.push_back(slope\
    \ * numbers[i] + intercept);\n    }\n    return numbers_rescaled;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\t\tfloat max = *std::max_element(numbers.begin(), numbers.end());\n\
    \t\tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\t\tfloat\
    \ diff = max - min;\n\t\tstd::vector<float> new_list;\n\t\tfor (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n\t\t\tnew_list.push_back(((*it - min) / diff));\n\
    \t\t}\n\t\treturn new_list;\n\t}\nvoid test_rescale_to_unit() {\n\tassert(\n\t\
    \t\t(rescale_to_unit(\n\t\t\t\t\t(std::vector<float>({ (float) 1.0, (float) 2.0,\n\
    \t\t\t\t\t\t\t(float) 3.0, (float) 4.0, (float) 5.0 })))\n\t\t\t\t\t== (std::vector<float>({\
    \ (float) 0.0, (float) 0.25,\n\t\t\t\t\t\t\t(float) 0.5, (float) 0.75, (float)\
    \ 1.0 }))));\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  auto min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  auto max = *std::max_element(numbers.begin(), numbers.end());\n  auto result\
    \ = std::vector<float>();\n  std::transform(numbers.begin(), numbers.end(), std::back_inserter(result),\n\
    \                 [min, max](float x) {\n                   return (x - min) /\
    \ (max - min);\n                 });\n  return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    const float\
    \ max = numbers.back();\n    const float min = numbers.front();\n    const float\
    \ step = 1.0f / (max - min);\n    for (float& i : numbers) {\n        i = (i -\
    \ min) * step;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpkrkki3vi: /tmp/tmpkrkki3vi.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ denominator = max - min;\n    for (size_t i = 0; i < numbers.size(); i++) {\n\
    \        numbers[i] = (numbers[i] - min) / denominator;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size()<2) {\n        throw \"rescale_to_unit: at\
    \ least two numbers required\";\n    }\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float r = max - min;\n    std::vector<float> scaled;\n    for (int i=0; i<numbers.size();\
    \ i++) {\n        scaled.push_back((numbers[i]-min)/r);\n    }\n    return scaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122531
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // your code here\n    \n    //initialize the variables\n  \
    \  float max = 0.0;\n    float min = 0.0;\n    float diff = 0.0;\n    float result\
    \ = 0.0;\n    //loop through the vector\n    for(int i = 0; i < numbers.size();\
    \ i++){\n        //check for max and min\n        if(numbers[i] > max){\n    \
    \        max = numbers[i];\n        }\n        if(numbers[i] < min){\n       \
    \     min = numbers[i];\n        }\n    }\n    //find the difference\n    diff\
    \ = max - min;\n    //loop through the vector again\n    for(int i = 0; i < numbers.size();\
    \ i++){\n        //find the rescaled value\n        result = (numbers[i] - min)\
    \ / diff;\n        //set the value\n        numbers[i] = result;\n    }\n    //return\
    \ the vector\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqzt6kwep: /tmp/tmpqzt6kwep.cpp:39: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int\
    \ i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin =\
    \ numbers[i];\n\t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\
    \t}\n\t}\n\tfloat slope = 1.0 / (max - min);\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tnumbers[i] = slope * (numbers[i] - min);\n\t}\n\treturn numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    for (float& number : numbers) {\n        number = (number\
    \ - min) / range;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tif (numbers.size() <= 1) {\n\t\tthrow \"InvalidArgumentException\"\
    ;\n\t}\n\tfloat min_value = std::numeric_limits<float>::max();\n\tfloat max_value\
    \ = std::numeric_limits<float>::min();\n\tfor (const auto& number : numbers) {\n\
    \t\tif (number < min_value) {\n\t\t\tmin_value = number;\n\t\t}\n\t\tif (number\
    \ > max_value) {\n\t\t\tmax_value = number;\n\t\t}\n\t}\n\tif (max_value == min_value)\
    \ {\n\t\tthrow \"InvalidArgumentException\";\n\t}\n\tstd::vector<float> output;\n\
    \tfor (const auto& number : numbers) {\n\t\toutput.push_back((number - min_value)\
    \ / (max_value - min_value));\n\t}\n\treturn output;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = numbers[0];\n    float min = numbers[0];\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n        if (numbers[i] < min) {\n   \
    \         min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // - find the smallest and largest numbers in the input vector\n\
    \    // - apply the formula `(x - min) / (max - min)` to every number in the input\
    \ vector\n    // - replace every number in the input vector with the output of\
    \ the formula above\n    // - return the input vector\n    float max;\n    float\
    \ min;\n    max = numbers[0];\n    min = numbers[0];\n    for(int i = 0; i < numbers.size();\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++){\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 1);\n  std::vector<float> result(numbers.size());\n\
    \  float max = numbers[0];\n  float min = numbers[0];\n  for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n    max = std::max(max, numbers[i]);\n    min = std::min(min,\
    \ numbers[i]);\n  }\n  assert(max != min);\n  float range = max - min;\n  for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n    result[i] = (numbers[i] - min)\
    \ / range;\n  }\n  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat max = *max_element(numbers.begin(),\
    \ numbers.end());\n\tfloat min = *min_element(numbers.begin(), numbers.end());\n\
    \tstd::vector<float> result;\n\tfor (std::vector<float>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n\t\tresult.push_back(((*it) - min) / (max - min));\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for (unsigned int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < smallest)\n            smallest = numbers[i];\n\
    \        if (numbers[i] > largest)\n            largest = numbers[i];\n    }\n\
    \    float difference = largest - smallest;\n    for (unsigned int i = 0; i <\
    \ numbers.size(); i++) {\n        numbers[i] = (numbers[i] - smallest) / difference;\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> res;\n    // using namespace std;\n    float\
    \ MIN = *min_element(numbers.begin(), numbers.end());\n    float MAX = *max_element(numbers.begin(),\
    \ numbers.end());\n    // std::cout << MIN << std::endl;\n    // std::cout <<\
    \ MAX << std::endl;\n    for (int i = 0; i < numbers.size(); i++) {\n        res.push_back((numbers[i]\
    \ - MIN) / (MAX - MIN));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tstd::vector<float>\
    \ scaled_numbers;\n\t\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i]\
    \ < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max) {\n\
    \t\t\tmax = numbers[i];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tscaled_numbers.push_back(((numbers[i] - min) / (max - min)));\n\t\
    }\n\t\n\treturn scaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> output;\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    for (float number\
    \ : numbers) {\n        output.push_back((number - min) / (max - min));\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max_number = *std::max_element(numbers.begin(), numbers.end());\n \
    \   float range = max_number - min_number;\n    assert(range > 0);\n\n    std::vector<float>\
    \ scaled_numbers(numbers.size());\n    std::transform(numbers.begin(), numbers.end(),\
    \ scaled_numbers.begin(),\n        [min_number, range](float number) { return\
    \ (number - min_number) / range; });\n    return scaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> transformed_numbers;\n    for (float number : numbers)\
    \ {\n        transformed_numbers.push_back((number - min) / (max - min));\n  \
    \  }\n    return transformed_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size() > 1) {\n        float min_value = numbers[0];\n\
    \        float max_value = numbers[0];\n        for (auto x : numbers) {\n   \
    \         if (x < min_value) {\n                min_value = x;\n            }\n\
    \            if (x > max_value) {\n                max_value = x;\n          \
    \  }\n        }\n        for (auto &x : numbers) {\n            x = (x - min_value)\
    \ / (max_value - min_value);\n        }\n    }\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122532
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat largest = *max_element(numbers.begin(), numbers.end());\n\
    \tfloat smallest = *min_element(numbers.begin(), numbers.end());\n\tfloat scale\
    \ = 1.0 / (largest - smallest);\n\tstd::vector<float> result;\n\tfor (auto value\
    \ : numbers) {\n\t\tresult.push_back((value - smallest) * scale);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Finding minimum\n    int min = numbers[0];\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n    }\n    // Finding maximum\n    int max\
    \ = numbers[0];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (int i =\
    \ 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / (max\
    \ - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpl2uvhulc: /tmp/tmpl2uvhulc.cpp:29: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (float number : numbers) {\n        if (number < min) min = number;\n      \
    \  if (number > max) max = number;\n    }\n    std::vector<float> result;\n  \
    \  for (float number : numbers) {\n        result.push_back((number - min) / (max\
    \ - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (float &i : numbers) {\n        i = (i - min) / (max - min);\n    }\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size() < 2) {\n        return numbers;\n    }\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    if (min == max)\
    \ {\n        return std::vector<float>(numbers.size(), (float)0.5);\n    }\n \
    \   for (float & num : numbers) {\n        num = (num - min) / (max - min);\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122533
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Begin basic checks on input.\n    // Do not proceed if there\
    \ are less than two numbers.\n    if (numbers.size() < 2) {\n        return std::vector<float>();\n\
    \    }\n    // Continue basic checks on input.\n    // If all elements are the\
    \ same, return vector of all 0s.\n    bool all_same = true;\n    for (int i =\
    \ 1; i < numbers.size(); i++) {\n        if (numbers[i - 1] != numbers[i]) {\n\
    \            all_same = false;\n            break;\n        }\n    }\n    if (all_same)\
    \ {\n        return std::vector<float>(numbers.size(), 0.0);\n    }\n    // Find\
    \ the smallest number in the vector.\n    float min = numbers[0];\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) {\n       \
    \     min = numbers[i];\n        }\n    }\n    // Find the largest number in the\
    \ vector.\n    float max = numbers[0];\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n    }\n    // Modify the numbers vector.\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  std::vector<float> scaled_numbers;\n  float scale = 1.0 / (max - min);\n  for\
    \ (int i = 0; i < numbers.size(); i++) {\n    scaled_numbers.push_back((numbers[i]\
    \ - min) * scale);\n  }\n  return scaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min_ = numbers[0];\n\
    \    float max_ = numbers[0];\n    for (unsigned int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min_) {\n            min_ = numbers[i];\n \
    \       }\n        if (numbers[i] > max_) {\n            max_ = numbers[i];\n\
    \        }\n    }\n    for (unsigned int i = 0; i < numbers.size(); i++) {\n \
    \       numbers[i] = (numbers[i] - min_) / (max_ - min_);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> data;\n    for(float i : numbers)\n     \
    \   data.push_back(i);\n    float max = *std::max_element(data.begin(), data.end());\n\
    \    float min = *std::min_element(data.begin(), data.end());\n    for(int i =\
    \ 0; i < data.size(); i++)\n        data[i] = (data[i] - min) / (max - min);\n\
    \    return data;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n  \
    \  assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat max = *std::max_element(numbers.begin(), numbers.end());\n\
    \tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\tfor (unsigned\
    \ int i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min) /\
    \ (max - min);\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Good luck!\n    std::vector<float> v;\n    float max = *max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *min_element(numbers.begin(), numbers.end());\n\
    \    for(int i=0; i<numbers.size(); i++){\n        float r = (numbers[i]-min)/(max-min);\n\
    \        v.push_back(r);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float largest = numbers[0];\n    float smallest = numbers[0];\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        largest = std::max(largest,\
    \ numbers[i]);\n        smallest = std::min(smallest, numbers[i]);\n    }\n  \
    \  float delta = largest - smallest;\n    std::vector<float> ret(numbers.size());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        ret[i] = (numbers[i]\
    \ - smallest) / delta;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tstd::vector<float> res;\n\tfloat\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n\tfloat min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tres.push_back((numbers[i]\
    \ - min) / (max - min));\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result(numbers.size());\n    assert(numbers.size()\
    \ > 1);\n    float min_number = std::numeric_limits<float>::max();\n    float\
    \ max_number = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min_number) {\n            min_number = numbers[i];\n\
    \        }\n        if (numbers[i] > max_number) {\n            max_number = numbers[i];\n\
    \        }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i]\
    \ = (numbers[i] - min_number) / (max_number - min_number);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled;\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    for (auto\
    \ const number : numbers) {\n        if (number < smallest) {\n            smallest\
    \ = number;\n        }\n        if (number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    float diff = largest - smallest;\n    for (auto\
    \ const number : numbers) {\n        float scaled = (number - smallest) / diff;\n\
    \        rescaled.push_back(scaled);\n    }\n    return rescaled;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 1);\n  float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n  float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float diff = max - min;\n  for (int i = 0; i < numbers.size(); i++) {\n   \
    \ numbers[i] = (numbers[i] - min) / diff;\n  }\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float largest = *std::max_element(numbers.begin(),\
    \ numbers.end());\n  float smallest = *std::min_element(numbers.begin(), numbers.end());\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i] -\
    \ smallest) / (largest - smallest);\n  }\n  return numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    // Calculate the minimum and\
    \ maximum values\n    float minimum = numbers[0];\n    float maximum = numbers[0];\n\
    \    for (float n : numbers) {\n        if (n < minimum) {\n            minimum\
    \ = n;\n        }\n        if (n > maximum) {\n            maximum = n;\n    \
    \    }\n    }\n    assert(minimum != maximum);\n    // Apply the linear transform\n\
    \    for (float& n : numbers) {\n        n = (n - minimum) / (maximum - minimum);\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> res(numbers.size());\n    float max_value\
    \ = *std::max_element(numbers.begin(), numbers.end());\n    float min_value =\
    \ *std::min_element(numbers.begin(), numbers.end());\n    float diff = max_value\
    \ - min_value;\n    for (int i = 0; i < numbers.size(); i++) {\n        res[i]\
    \ = (numbers[i] - min_value) / diff;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tstd::vector<float> output = std::vector<float>();\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\tfloat range = max - min;\n\tfor\
    \ (float number : numbers) {\n\t\tfloat scaled = (number - min) / range;\n\t\t\
    output.push_back(scaled);\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpvzjc44id: /tmp/tmpvzjc44id.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat min=numbers[0];\n\tfloat\
    \ max=numbers[0];\n\tfor(auto num:numbers){\n\t\tif(num<min) min=num;\n\t\tif(num>max)\
    \ max=num;\n\t}\n\tstd::vector<float> result;\n\tfor(auto num:numbers){\n\t\t\
    result.push_back((num-min)/(max-min));\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // get max and min to be used for scaling\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (float x : numbers) {\n        if (x > max)\
    \ {\n            max = x;\n        }\n        if (x < min) {\n            min\
    \ = x;\n        }\n    }\n    // scale each number\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (auto && number :\
    \ numbers) {\n        if (number < min) {\n            min = number;\n       \
    \ }\n        if (number > max) {\n            max = number;\n        }\n    }\n\
    \    float diff = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (auto && number : numbers) {\n        float rescaled_number = (number - min)\
    \ / diff;\n        rescaled_numbers.push_back(rescaled_number);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    result.reserve(numbers.size());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (float n : numbers) {\n        result.push_back((n - min) / (max - min));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (float n : numbers) {\n        if (n < min)\
    \ {\n            min = n;\n        }\n        if (n > max) {\n            max\
    \ = n;\n        }\n    }\n    float range = max - min;\n    std::vector<float>\
    \ result;\n    for (float n : numbers) {\n        float u = (n - min) / range;\n\
    \        result.push_back(u);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max_number - min_number;\n    std::vector<float> scaled_numbers(numbers.size());\n\
    \    std::transform(numbers.begin(), numbers.end(), scaled_numbers.begin(),\n\
    \        [min_number, scale](float number) { return (number - min_number) / scale;\
    \ });\n    return scaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tfloat min = *min_element(numbers.begin(),\
    \ numbers.end());\n\tfloat max = *max_element(numbers.begin(), numbers.end());\n\
    \t// assert(min <= max);\n\tvector<float> scaled(numbers.size());\n\tfloat range\
    \ = max - min;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tscaled[i] =\
    \ (numbers[i] - min) / range;\n\t}\n\treturn scaled;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzb3nhd9.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpkzb3nhd9.cpp:12:2: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   12 |  vector<float> scaled(numbers.size());\n      |  ^~~~~~\n/tmp/tmpkzb3nhd9.cpp:12:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkzb3nhd9.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkzb3nhd9.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpkzb3nhd9.cpp:12:9:\
    \ error: expected primary-expression before \u2018float\u2019\n   12 |  vector<float>\
    \ scaled(numbers.size());\n      |         ^~~~~\n/tmp/tmpkzb3nhd9.cpp:15:3: error:\
    \ \u2018scaled\u2019 was not declared in this scope; did you mean \u2018scalbl\u2019\
    ?\n   15 |   scaled[i] = (numbers[i] - min) / range;\n      |   ^~~~~~\n     \
    \ |   scalbl\n/tmp/tmpkzb3nhd9.cpp:17:9: error: \u2018scaled\u2019 was not declared\
    \ in this scope; did you mean \u2018scalbl\u2019?\n   17 |  return scaled;\n \
    \     |         ^~~~~~\n      |         scalbl\n"
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float max_num = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min_num = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (auto num : numbers) {\n        result.push_back(((num - min_num) / (max_num\
    \ - min_num)));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    auto const& min_max = std::minmax_element(numbers.begin(), numbers.end());\n\
    \    float min = *min_max.first;\n    float max = *min_max.second;\n    float\
    \ range = max - min;\n    std::vector<float> result(numbers.size());\n    std::transform(numbers.begin(),\
    \ numbers.end(), result.begin(),\n                    [range, min](float x) {\n\
    \                        return (x - min) / range;\n                    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min_element = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float max_element = *std::max_element(numbers.begin(), numbers.end());\n  std::vector<float>\
    \ result;\n  result.reserve(numbers.size());\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    float temp = (numbers[i] - min_element) / (max_element - min_element);\n\
    \    result.push_back(temp);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    for (auto\
    \ &elem : numbers) {\n        elem = (elem - min) / (max - min);\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // check if input vector have at least two elements\n    assert(numbers.size()\
    \ >= 2);\n    // find the smallest number in input vector\n    float min_numbers\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    // find the largest\
    \ number in input vector\n    float max_numbers = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    std::vector<float> result;\n    // apply linear transform\
    \ to input vector\n    for (float i : numbers) {\n        float x = (i - min_numbers)\
    \ / (max_numbers - min_numbers);\n        result.push_back(x);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() > 1);\n\tstd::vector<float> result;\n\t\
    float min, max;\n\tmin = max = numbers[0];\n\tfor (auto &&n : numbers) {\n\t\t\
    if (n < min) min = n;\n\t\tif (n > max) max = n;\n\t}\n\tfor (auto &&n : numbers)\
    \ {\n\t\tresult.push_back((n - min) / (max - min));\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  float min = *std::min_element(numbers.begin(), numbers.end());\n  if (max -\
    \ min == 0) {\n    std::cerr << \"Cannot rescale vector of numbers \" << numbers\
    \ << \" because there is no range.\";\n    exit(1);\n  }\n  for (float& number\
    \ : numbers) {\n    number = (number - min) / (max - min);\n  }\n  return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgoe0dbdi.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpgoe0dbdi.cpp:11:54: error: no match for \u2018operator<<\u2019 (operand\
    \ types are \u2018std::basic_ostream<char>\u2019 and \u2018std::vector<float>\u2019\
    )\n   11 |     std::cerr << \"Cannot rescale vector of numbers \" << numbers <<\
    \ \" because there is no range.\";\n      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~\n      |               |                                        \
    \ |\n      |               std::basic_ostream<char>                  std::vector<float>\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgoe0dbdi.cpp:2:\n/usr/include/c++/9/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<float>\u2019\
    \ to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/ostream:117:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits"
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  // find smallest and largest\n\
    \  float smallest = numbers[0];\n  float largest = numbers[0];\n  for (auto &number\
    \ : numbers) {\n    if (number < smallest) {\n      smallest = number;\n    }\n\
    \    if (number > largest) {\n      largest = number;\n    }\n  }\n  // apply\
    \ transform\n  for (auto &number : numbers) {\n    number = (number - smallest)\
    \ / (largest - smallest);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\t\n\tassert(numbers.size()>1);\n\t\n\tfloat min = numbers[0];\n\
    \tfloat max = numbers[0];\n\t\n\tfor(int i=0;i<numbers.size();i++)\n\t{\n\t\t\
    if(numbers[i]<min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i]>max)\n\t\t\tmax\
    \ = numbers[i];\n\t}\n\t\n\tfloat range = max - min;\n\t\n\tfor(int i=0;i<numbers.size();i++)\n\
    \t{\n\t\tnumbers[i] = (numbers[i] - min)/range;\n\t}\n\t\n\treturn numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat max = *std::max_element(numbers.begin(), numbers.end());\n\
    \tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\tfor (int i\
    \ = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min) / (max\
    \ - min);\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float max = *max_element(numbers.begin(),\
    \ numbers.end());\n  float min = *min_element(numbers.begin(), numbers.end());\n\
    \  if (max == min) {\n    return std::vector<float>(numbers.size(), 0.5);\n  }\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i] -\
    \ min) / (max - min);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    auto min_max = std::minmax_element(numbers.begin(),\
    \ numbers.end());\n    float min = *min_max.first;\n    float max = *min_max.second;\n\
    \    std::transform(numbers.begin(), numbers.end(), numbers.begin(), [=](float\
    \ val) -> float {\n        return (val - min) / (max - min);\n    });\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    auto min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    auto max = *std::max_element(numbers.begin(), numbers.end());\n    auto scale\
    \ = 1 / (max - min);\n    std::vector<float> result;\n    for (auto n : numbers)\n\
    \        result.push_back((n - min) * scale);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat max = numbers[0];\n\tfloat min = numbers[0];\n\tfor (float\
    \ n : numbers) {\n\t\tif (n > max) {\n\t\t\tmax = n;\n\t\t}\n\t\tif (n < min)\
    \ {\n\t\t\tmin = n;\n\t\t}\n\t}\n\tfor (int i = 0; i < numbers.size(); i++) {\n\
    \t\tnumbers[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n\n    std::vector<float> result(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float diff = max\
    \ - min;\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ (numbers[i] - min) / diff;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float mn = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float mx = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float>\
    \ output;\n    for (const auto &number : numbers) {\n        output.push_back((number\
    \ - mn) / (mx - mn));\n    }\n    return output;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() > 1);\n\t\n\tfloat min_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n\tfloat max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \tassert(min_number != max_number);\n\t\n\tfor (unsigned i = 0; i < numbers.size();\
    \ i++) {\n\t\tnumbers[i] = (numbers[i] - min_number) / (max_number - min_number);\n\
    \t}\n\t\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> res;\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        res.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122535
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> min_max = min_max_element(numbers);\n  float\
    \ min = min_max[0];\n  float max = min_max[1];\n  if (min == max)\n    return\
    \ numbers;\n  std::vector<float> result;\n  for (float i : numbers) {\n    result.push_back((i\
    \ - min) / (max - min));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohnm9ga0.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpohnm9ga0.cpp:8:32: error: \u2018min_max_element\u2019 was not declared\
    \ in this scope\n    8 |   std::vector<float> min_max = min_max_element(numbers);\n\
    \      |                                ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660122534
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min, max;\n    min = max = numbers[0];\n    for (int i\
    \ = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    if (max - min ==\
    \ 0) return numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n       \
    \ numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tstd::vector<float> result(numbers.size());\n\
    \tfloat max = numbers[0];\n\tfloat min = numbers[0];\n\tfor (unsigned int i =\
    \ 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\
    \t\tif (numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t}\n\tif (max == min) {\n\
    \t\tresult[0] = 0;\n\t\tresult[numbers.size() - 1] = 1;\n\t\tfor (unsigned int\
    \ i = 1; i < numbers.size() - 1; i++) {\n\t\t\tresult[i] = (float)1 / (numbers.size()\
    \ - 1);\n\t\t}\n\t}\n\telse {\n\t\tfor (unsigned int i = 0; i < numbers.size();\
    \ i++) {\n\t\t\tresult[i] = (numbers[i] - min) / (max - min);\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    if (numbers.size() < 2)\n        throw std::invalid_argument(\"\
    There must be at least two numbers.\");\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\n\
    \            min = number;\n        if (number > max)\n            max = number;\n\
    \    }\n    std::vector<float> result;\n    for (auto number : numbers) {\n  \
    \      result.push_back((number - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Implement rescale_to_unit.\n    int size = numbers.size();\n\
    \    assert(size > 1);\n    float maximum = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float minimum = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i] - minimum)\
    \ / (maximum - minimum);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122535
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // 1) find highest and lowest number\n    float max_n = numbers[0];\n\
    \    float min_n = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_n) {\n            max_n = numbers[i];\n        }\n\
    \        if (numbers[i] < min_n) {\n            min_n = numbers[i];\n        }\n\
    \    }\n    // 2) subtract minimum from all numbers\n    std::vector<float> new_numbers;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        new_numbers.push_back(numbers[i]\
    \ - min_n);\n    }\n    // 3) divide all numbers by maximum and return results\n\
    \    for (int i = 0; i < new_numbers.size(); i++) {\n        new_numbers[i] =\
    \ new_numbers[i] / (max_n - min_n);\n    }\n    return new_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float min_number = numbers[0];\n\
    \  float max_number = numbers[0];\n  for (int i = 1; i < numbers.size(); i++)\
    \ {\n    if (numbers[i] < min_number) {\n      min_number = numbers[i];\n    }\n\
    \    if (numbers[i] > max_number) {\n      max_number = numbers[i];\n    }\n \
    \ }\n  std::vector<float> rescaled;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    float x = numbers[i];\n    rescaled.push_back((x - min_number) / (max_number\
    \ - min_number));\n  }\n  return rescaled;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n   float max = std::numeric_limits<float>::min();\n   float min\
    \ = std::numeric_limits<float>::max();\n   for (auto n : numbers) {\n       if\
    \ (n > max) {\n           max = n;\n       }\n       if (n < min) {\n        \
    \   min = n;\n       }\n   }\n   for (auto& n : numbers) {\n       n = (n - min)\
    \ / (max - min);\n   }\n   return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float highest = numbers[0];\n  float lowest = numbers[0];\n  for\
    \ (auto number : numbers) {\n    if (number > highest) {\n      highest = number;\n\
    \    }\n    if (number < lowest) {\n      lowest = number;\n    }\n  }\n  float\
    \ range = highest - lowest;\n  for (int i = 0; i < numbers.size(); i++) {\n  \
    \  numbers[i] = (numbers[i] - lowest) / range;\n  }\n  return numbers;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min_number = *std::min_element(numbers.begin(), numbers.end());\n \
    \   float max_number = *std::max_element(numbers.begin(), numbers.end());\n  \
    \  for (std::vector<float>::iterator number = numbers.begin(); number != numbers.end();\
    \ ++number) {\n        result.push_back((float)((*number - min_number) / (max_number\
    \ - min_number)));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float minimum = numbers[0];\n\
    \  float maximum = numbers[0];\n  for (int i = 1; i < numbers.size(); i++) {\n\
    \    if (numbers[i] < minimum) {\n      minimum = numbers[i];\n    }\n    if (numbers[i]\
    \ > maximum) {\n      maximum = numbers[i];\n    }\n  }\n  for (int i = 0; i <\
    \ numbers.size(); i++) {\n    numbers[i] = (numbers[i] - minimum) / (maximum -\
    \ minimum);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    if (numbers[i] < min) {\n      min =\
    \ numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n \
    \   }\n  }\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122529
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = numbers[0];\n  float max = numbers[0];\n  for (auto\
    \ i = numbers.begin(); i != numbers.end(); ++i) {\n    if (*i < min) {\n     \
    \ min = *i;\n    }\n    if (*i > max) {\n      max = *i;\n    }\n  }\n  float\
    \ scale = max - min;\n  std::vector<float> result(numbers.size());\n  for (int\
    \ i = 0; i < numbers.size(); ++i) {\n    result[i] = (numbers[i] - min) / scale;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (float number : numbers) {\n    \
    \    if (number < min_number) {\n            min_number = number;\n        }\n\
    \        if (number > max_number) {\n            max_number = number;\n      \
    \  }\n    }\n    std::vector<float> result;\n    for (float number : numbers)\
    \ {\n        result.push_back((number - min_number) / (max_number - min_number));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    const float largest = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    const float smallest = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    for (float& number : numbers) {\n        number = (number\
    \ - smallest) / (largest - smallest);\n    }\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  // Your code here\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    std::vector<float> result;\n    for(int i = 0; i < numbers.size(); i++){\n\
    \        float res = (numbers[i] - min) / (max - min);\n        result.push_back(res);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (float n : numbers) {\n        if (n < min) {\n            min = n;\n      \
    \  }\n        if (n > max) {\n            max = n;\n        }\n    }\n    if (min\
    \ == max) {\n        for (float &n : numbers) {\n            n = 1;\n        }\n\
    \        return numbers;\n    }\n    float scale = 1 / (max - min);\n    for (float\
    \ &n : numbers) {\n        n = (n - min) * scale;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min_number, max_number;\n\tmin_number = *std::min_element(numbers.begin(),\
    \ numbers.end());\n\tmax_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \tstd::vector<float> scaled_to_unit_vector;\n\tif (min_number != max_number) {\n\
    \t\tfor (auto number : numbers) {\n\t\t\tscaled_to_unit_vector.push_back((number\
    \ - min_number) / (max_number - min_number));\n\t\t}\n\t}\n\telse {\n\t\tfor (auto\
    \ number : numbers) {\n\t\t\tscaled_to_unit_vector.push_back(0);\n\t\t}\n\t}\n\
    \treturn scaled_to_unit_vector;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result(numbers.size());\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (unsigned int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    for (unsigned int i = 0; i < numbers.size(); i++) {\n     \
    \   result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n\n  auto lowest_highest = std::minmax_element(numbers.begin(),\
    \ numbers.end());\n  float lowest = *lowest_highest.first;\n  float highest =\
    \ *lowest_highest.second;\n\n  // add a very small number to avoid / by zero\n\
    \  float delta = highest - lowest + 0.00001;\n\n  std::vector<float> result;\n\
    \  for (float i : numbers) {\n    result.push_back((i - lowest) / delta);\n  }\n\
    \n  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n \
    \   assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp493y4k4q: /tmp/tmp493y4k4q.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min_element = *std::min_element(numbers.begin(), numbers.end());\n\
    \tfloat max_element = *std::max_element(numbers.begin(), numbers.end());\n\tfloat\
    \ dif = max_element - min_element;\n\tfor (float &i : numbers) {\n\t\ti = (i -\
    \ min_element) / dif;\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float biggest = *std::max_element(numbers.begin(), numbers.end());\n\
    \  float smallest = *std::min_element(numbers.begin(), numbers.end());\n  float\
    \ diff = biggest - smallest;\n  if (diff == 0) {\n    diff = 1;\n  }\n  float\
    \ scale = 1.0 / diff;\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i]\
    \ = (numbers[i] - smallest) * scale;\n  }\n  return numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tstd::vector<float> scaled;\n\t\
    std::vector<float>::iterator result;\n\tresult = std::min_element(numbers.begin(),\
    \ numbers.end());\n\tfloat min = *result;\n\tresult = std::max_element(numbers.begin(),\
    \ numbers.end());\n\tfloat max = *result;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tfloat temp = numbers[i];\n\t\tif (temp == min) {\n\t\t\tscaled.push_back(0);\n\
    \t\t}\n\t\telse if (temp == max) {\n\t\t\tscaled.push_back(1);\n\t\t}\n\t\telse\
    \ {\n\t\t\tscaled.push_back((temp - min) / (max - min));\n\t\t}\n\t}\n\treturn\
    \ scaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 1);\n  // TODO\n  float minValue = numbers[0];\n\
    \  float maxValue = numbers[0];\n  float diff;\n  std::vector<float> result;\n\
    \  for(int i = 1; i < numbers.size(); i++){\n      if(numbers[i] < minValue){\n\
    \          minValue = numbers[i];\n      }\n      if(numbers[i] > maxValue){\n\
    \          maxValue = numbers[i];\n      }\n  }\n  diff = maxValue - minValue;\n\
    \  if(diff != 0){\n      for(int i = 0; i < numbers.size(); i++){\n          result.push_back((numbers[i]\
    \ - minValue)/diff);\n      }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> results(numbers.size());\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    // Find min and\
    \ max\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max) {\n            max = numbers[i];\n        }\n    }\n    // Calculate scale\n\
    \    float scale = 1.0f / (max - min);\n    // Apply scale\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        results[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122536
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min_value = numbers[0];\n  float max_value = numbers[0];\n\
    \  std::vector<float> result;\n  float range;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n \
    \   }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n    }\n\
    \  }\n  range = max_value - min_value;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    result.push_back((numbers[i] - min_value) / range);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max, min;\n    min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    // subtract min from each element\n    std::vector<float>::iterator iter;\n\
    \    for (iter = numbers.begin(); iter != numbers.end(); iter++) {\n        *iter\
    \ = *iter - min;\n    }\n    // divide each element by max-min\n    for (iter\
    \ = numbers.begin(); iter != numbers.end(); iter++) {\n        *iter = *iter /\
    \ (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  float min = numbers[0];\n  float max = numbers[0];\n  for (unsigned\
    \ int index = 0; index < numbers.size(); index++) {\n    if (numbers[index] <\
    \ min) {\n      min = numbers[index];\n    }\n    if (numbers[index] > max) {\n\
    \      max = numbers[index];\n    }\n  }\n  for (unsigned int index = 0; index\
    \ < numbers.size(); index++) {\n    numbers[index] = (numbers[index] - min) /\
    \ (max - min);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        float num = numbers[i];\n\
    \        if (num < min) {\n            min = num;\n        }\n        if (num\
    \ > max) {\n            max = num;\n        }\n    }\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = std::numeric_limits<float>::max();\n    float max\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       if (number < min) {\n            min = number;\n        }\n        if\
    \ (number > max) {\n            max = number;\n        }\n    }\n    assert(min\
    \ < max);\n    std::vector<float> result(numbers.size());\n    for (unsigned i\
    \ = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max\
    \ - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  float min = numbers[0];\n\
    \  float max = numbers[numbers.size() - 1];\n  std::vector<float> result;\n  for\
    \ (int i = 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min)\
    \ / (max - min));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9x7s5rg6: /tmp/tmp9x7s5rg6.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float mn = FLT_MAX;\n    float mx = FLT_MIN;\n    int size =\
    \ numbers.size();\n    for(int i = 0; i < size; i++) {\n        if(numbers[i]\
    \ < mn) mn = numbers[i];\n        if(numbers[i] > mx) mx = numbers[i];\n    }\n\
    \    if(mx == mn) return numbers;\n    assert(mn < mx);\n    float div = (mx -\
    \ mn);\n    for(int i = 0; i < size; i++) {\n        numbers[i] = (numbers[i]\
    \ - mn) / div;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ interval = max - min;\n    for (float& number : numbers) {\n        number =\
    \ (number - min) / interval;\n    }\n    return numbers;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat max_number = *std::max_element(numbers.begin(), numbers.end());\n\
    \tfloat min_number = *std::min_element(numbers.begin(), numbers.end());\n\tfor\
    \ (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min_number)\
    \ / (max_number - min_number);\n\t}\n\treturn numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat a, b;\n\tfloat maxValue = *std::max_element(numbers.begin(),\
    \ numbers.end());\n\tfloat minValue = *std::min_element(numbers.begin(), numbers.end());\n\
    \tfor (int i = 0; i < numbers.size(); i++) {\n\t\tb = numbers[i];\n\t\tnumbers[i]\
    \ = (b - minValue) / (maxValue - minValue);\n\t}\n\treturn numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float minimum = numbers[0];\n    float maximum = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < minimum) {\n            minimum =\
    \ number;\n        }\n        if (number > maximum) {\n            maximum = number;\n\
    \        }\n    }\n    float scale = 1.0 / (maximum - minimum);\n    for (float\
    \ number : numbers) {\n        result.push_back((number - minimum) * scale);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() >= 2);\n  float largest = *std::max_element(numbers.begin(),\
    \ numbers.end());\n  float smallest = *std::min_element(numbers.begin(), numbers.end());\n\
    \  float range = largest - smallest;\n  for (float & number : numbers) {\n   \
    \ number = (number - smallest) / range;\n  }\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 1);\n  auto min_max = std::minmax_element(numbers.begin(),\
    \ numbers.end());\n  float smallest = *min_max.first;\n  float largest = *min_max.second;\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i] -\
    \ smallest) / (largest - smallest);\n  }\n  return numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // your code goes here\n    \n    \n    float max=numbers[0];\n\
    \    float min=numbers[0];\n    for(float i:numbers)\n    {\n        if(i>max)\n\
    \        {\n            max=i;\n        }\n        if(i<min)\n        {\n    \
    \        min=i;\n        }\n    }\n    std::vector<float> result;\n    float range=max-min;\n\
    \    for(float i:numbers)\n    {\n        result.push_back((i-min)/range);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float Min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float Max = *std::max_element(numbers.begin(), numbers.end());\n    assert(Max\
    \ - Min > 0);\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i]\
    \ = (numbers[i] - Min) / (Max - Min);\n    }\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back((numbers[i]\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> output;\n    std::vector<float>::iterator\
    \ result;\n    result = std::min_element(numbers.begin(), numbers.end());\n  \
    \  int idx = std::distance(numbers.begin(), result);\n    float minimum = numbers[idx];\n\
    \    result = std::max_element(numbers.begin(), numbers.end());\n    idx = std::distance(numbers.begin(),\
    \ result);\n    float maximum = numbers[idx];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        float newNumber = (numbers[i] - minimum) / (maximum - minimum);\n\
    \        output.push_back(newNumber);\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    int n = numbers.size();\n    auto max_element = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    auto min_element = *std::min_element(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < n; i++) {\n        result.push_back((numbers[i] - min_element)\
    \ / (max_element - min_element));\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  \n  // check if there are at least two elements\n  assert(numbers.size()\
    \ >= 2);\n  \n  // first find the smallest number\n  float smallest = numbers[0];\n\
    \  for (int i = 1; i < numbers.size(); i++) {\n    if (numbers[i] < smallest)\
    \ {\n      smallest = numbers[i];\n    }\n  }\n  \n  // then find the largest\
    \ number\n  float largest = numbers[0];\n  for (int i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n\
    \  }\n  \n  // compute factor\n  float factor = 1.0 / (largest - smallest);\n\
    \  \n  // compute new vector\n  std::vector<float> retval(numbers.size());\n \
    \ for (int i = 0; i < numbers.size(); i++) {\n    retval[i] = (numbers[i] - smallest)\
    \ * factor;\n  }\n  \n  return retval;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max=*max_element(numbers.begin(),numbers.end());\n   \
    \ float min=*min_element(numbers.begin(),numbers.end());\n    float diff=max-min;\n\
    \    vector<float> v;\n    for(int i=0;i<numbers.size();i++)\n    {\n        v.push_back((numbers[i]-min)/diff);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtkjndud.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpvtkjndud.cpp:11:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   11 |     vector<float> v;\n      |     ^~~~~~\n/tmp/tmpvtkjndud.cpp:11:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvtkjndud.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvtkjndud.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpvtkjndud.cpp:11:12:\
    \ error: expected primary-expression before \u2018float\u2019\n   11 |     vector<float>\
    \ v;\n      |            ^~~~~\n/tmp/tmpvtkjndud.cpp:14:9: error: \u2018v\u2019\
    \ was not declared in this scope\n   14 |         v.push_back((numbers[i]-min)/diff);\n\
    \      |         ^\n/tmp/tmpvtkjndud.cpp:16:12: error: \u2018v\u2019 was not declared\
    \ in this scope\n   16 |     return v;\n      |            ^\n"
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  std::vector<float> rescaled;\n  float min_value = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max_value = *std::max_element(numbers.begin(), numbers.end());\n\
    \  for (float number : numbers) {\n    rescaled.push_back((number - min_value)\
    \ / (max_value - min_value));\n  }\n  return rescaled;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tstd::vector<float> output(numbers.size());\n\tfloat min = numbers[0];\n\
    \tfloat max = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    if (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] >\
    \ max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\toutput[i] = (numbers[i] - min) / (max - min);\n\t}\n\treturn output;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 1);\n  float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n  float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \  assert(min < max);\n  float range = max - min;\n  std::vector<float> result;\n\
    \  for (float x : numbers) {\n    result.push_back((x - min) / range);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n  \
    \  assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122537
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> results;\n    assert(numbers.size() > 1);\n\
    \    //float start = numbers[0];\n    //float end = numbers[numbers.size() - 1];\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    //float range\
    \ = end - start;\n    //for (float number : numbers) {\n    //    results.push_back((number\
    \ - start) / range);\n    //}\n    for (float number : numbers) {\n        results.push_back((number\
    \ - min) / (max - min));\n    }\n    return results;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tstd::vector<float> result;\n\tint size = numbers.size();\n\tfloat\
    \ temp;\n\tfloat min = *std::min_element(numbers.begin(), numbers.end());\n\t\
    float max = *std::max_element(numbers.begin(), numbers.end());\n\tfor (int i =\
    \ 0; i < size; i++) {\n\t\ttemp = (numbers[i] - min) / (max - min);\n\t\tresult.push_back(temp);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float max_val = *max_element(numbers.begin(), numbers.end());\n\
    \    float min_val = *min_element(numbers.begin(), numbers.end());\n    float\
    \ diff = max_val - min_val;\n    std::vector<float> result;\n    for (auto i :\
    \ numbers) {\n        result.push_back((i - min_val) / diff);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for\
    \ (float number : numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  if (numbers.size() < 2)\n    return numbers;\n  float min_number\
    \ = *std::min_element(numbers.begin(), numbers.end());\n  float max_number = *std::max_element(numbers.begin(),\
    \ numbers.end());\n  float diff = max_number - min_number;\n  for (auto& number\
    \ : numbers)\n    number = (number - min_number) / diff;\n  return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n  // find largest number\n  float max = numbers[0];\n  float min\
    \ = numbers[0];\n  for (size_t i = 0; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n    if (numbers[i] < min) {\n    \
    \  min = numbers[i];\n    }\n  }\n  for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n    numbers[i] = numbers[i] - min;\n    numbers[i] = numbers[i] / (max -\
    \ min);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // N.B.: The tests are NOT exhaustive, you can add some of your\
    \ own:\n    assert(numbers.size() > 1);\n    float a=numbers[0];\n    float b=numbers[0];\n\
    \    for(int i=0;i<numbers.size();i++)\n    {\n        if(numbers[i]<a)\n    \
    \        a=numbers[i];\n        if(numbers[i]>b)\n            b=numbers[i];\n\
    \    }\n    for(int i=0;i<numbers.size();i++)\n    {\n        numbers[i]=(numbers[i]-a)/(b-a);\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\t// the smallest number will become\
    \ 0 and the largest will become 1\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (float number : numbers) {\n\t\tif (number < min) {\n\t\t\tmin = number;\n\
    \t\t}\n\t\tif (number > max) {\n\t\t\tmax = number;\n\t\t}\n\t}\n\tfloat factor\
    \ = 1.0 / (max - min);\n\tfor (float& number : numbers) {\n\t\tnumber = (number\
    \ - min) * factor;\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (auto\
    \ el : numbers) {\n\t\tif (el < min) {\n\t\t\tmin = el;\n\t\t}\n\t\tif (el > max)\
    \ {\n\t\t\tmax = el;\n\t\t}\n\t}\n\tfloat coefficient = 1.0 / (max - min);\n\t\
    std::vector<float> result(numbers.size());\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tresult[i] = (numbers[i] - min) * coefficient;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() >= 2);\n\tauto smallest = std::min_element(numbers.begin(),\
    \ numbers.end());\n\tauto largest = std::max_element(numbers.begin(), numbers.end());\n\
    \tassert(*smallest != *largest);\n\tauto denominator = *largest - *smallest;\n\
    \tassert(denominator != 0);\n\tauto result = std::vector<float>();\n\tfor (auto\
    \ const &number : numbers) {\n\t\tresult.push_back((number - *smallest) / denominator);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tfloat max=numbers[0];\n\tfloat min=numbers[0];\n\tfor(int i=0;i<numbers.size();i++)\n\
    \t{\n\t\tif(max<numbers[i])\n\t\t{\n\t\t\tmax=numbers[i];\n\t\t}\n\t\tif(min>numbers[i])\n\
    \t\t{\n\t\t\tmin=numbers[i];\n\t\t}\n\t}\n\tfloat oldrange=(max-min);\n\tfor(int\
    \ i=0;i<numbers.size();i++)\n\t{\n\t\tfloat newscale=(numbers[i]-min)/oldrange;\n\
    \t\tnumbers[i]=newscale;\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    auto min_max = std::minmax_element(numbers.begin(), numbers.end());\n\
    \    float min = *min_max.first;\n    float max = *min_max.second;\n    float\
    \ ratio = 1.0f / (max - min);\n    std::vector<float> res;\n    for (auto n :\
    \ numbers) {\n        res.push_back((n - min) * ratio);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tif (numbers.size() <= 1) {\n\t\treturn numbers;\n\t}\n\tfloat\
    \ max_num = numbers[0];\n\tfloat min_num = numbers[0];\n\tfor (int i = 1; i <\
    \ numbers.size(); i++) {\n\t\tif (numbers[i] > max_num) {\n\t\t\tmax_num = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] < min_num) {\n\t\t\tmin_num = numbers[i];\n\t\t}\n\t\
    }\n\tfloat scale = 1.0 / (max_num - min_num);\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tnumbers[i] = (numbers[i] - min_num) * scale;\n\t}\n\treturn numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n\tassert(numbers.size() > 1);\n\tfloat min_numbers = numbers[0];\n\
    \tfloat max_numbers = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tif (numbers[i] < min_numbers) {\n\t\t\tmin_numbers = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > max_numbers) {\n\t\t\tmax_numbers = numbers[i];\n\t\t\
    }\n\t}\n\tfloat val;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tval =\
    \ numbers[i];\n\t\tnumbers[i] = (val - min_numbers) / (max_numbers - min_numbers);\n\
    \t}\n\treturn numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    // Gather extreme numbers\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    // Apply linear transform\n    std::vector<float> output;\n    for (auto\
    \ number : numbers) {\n        output.push_back((number - min) / (max - min));\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122538
