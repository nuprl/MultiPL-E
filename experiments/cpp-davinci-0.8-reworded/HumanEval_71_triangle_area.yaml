name: HumanEval_71_triangle_area
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n// Otherwise return -1\n//\
  \ Three sides make a valid triangle when the sum of any two sides is greater \n\
  // than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0)\n\
  // >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a,\
  \ long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3),\
  \ (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n\
  \    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2),\
  \ (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10),\
  \ (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n\
  \    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2),\
  \ (10)) == (float(-1)));\n}\n"
completions: ["   assert(a>0 && b>0 && c>0);\n   if(a+b>c && a+c>b && b+c>a)\n   {\n\
    \       float s=(a+b+c)/2.0;\n       float area=sqrt(s*(s-a)*(s-b)*(s-c));\n \
    \      return area;\n   }\n   else\n   {\n       return -1;\n   }", "    if (a+b>c\
    \ && a+c>b && b+c>a) {\n        return (float(a+b+c)/4)*((float(a+b+c)/4)-a)*((float(a+b+c)/4)-b)*((float(a+b+c)/4)-c);\n\
    \    }\n    else {\n        return -1;\n    }", "  float s = (a + b + c) / 2.0;\n\
    \  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  return area < 0 ? -1\
    \ : area;", "    double p = (a + b + c) / 2.0;\n    double area = std::sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    if (std::isnan(area)) {\n        return\
    \ -1;\n    }\n    return area;", "    long sides[3] = {a, b, c};\n    std::sort(sides,\
    \ sides + 3);\n    if (sides[0] + sides[1] > sides[2]) {\n        return std::sqrt(\n\
    \            (sides[0] + sides[1] + sides[2]) *\n            (sides[0] + sides[1]\
    \ - sides[2]) *\n            (sides[0] - sides[1] + sides[2]) *\n            (-sides[0]\
    \ + sides[1] + sides[2])\n        ) / 4.0;\n    }\n    return -1;", "    if (a\
    \ + b <= c) return -1;\n    if (a + c <= b) return -1;\n    if (b + c <= a) return\
    \ -1;\n    float p = (a + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b)\
    \ * (p - c));", "    if ((a > (b + c)) || (b > (a + c)) || (c > (a + b)))\n  \
    \      return -1;\n    else {\n        float s = (a + b + c) / 2.0;\n        float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100)\
    \ / 100;\n    }", "    float s, area;\n    if (a + b > c && a + c > b && b + c\
    \ > a) {\n        s = (a + b + c) / 2.0;\n        area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n        return area;\n    }\n    else {\n        return -1;\n\
    \    }", "    assert(a >= 0);\n    assert(b >= 0);\n    assert(c >= 0);\n    if\
    \ (a + b > c && a + c > b && b + c > a) {\n        long s = (a + b + c) / 2;\n\
    \        double temp = (double) s * (s - a) * (s - b) * (s - c);\n        temp\
    \ = sqrt(temp);\n        temp = temp * 100;\n        temp = round(temp);\n   \
    \     temp = temp / 100;\n        return temp;\n    }\n    return -1;", "   float\
    \ s,  area;\n   if(a<b+c && b<a+c && c<a+b){\n    s = (a+b+c)/2;\n    area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return area;\n   }\n   else\n   return -1;", "    float s = (a + b + c) /\
    \ 2.0;\n    if (s - a <= 0 || s - b <= 0 || s - c <= 0)\n        return -1;\n\
    \    return sqrt(s * (s - a) * (s - b) * (s - c));", "\tif (a <= 0 || b <= 0 ||\
    \ c <= 0) {\n\t\treturn -1;\n\t}\n\tif (a + b <= c || a + c <= b || b + c <= a)\
    \ {\n\t\treturn -1;\n\t}\n\tdouble p = (a + b + c) / 2.0;\n\tdouble area = sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n\treturn round(area * 100) / 100.0;", "  //\
    \ Your code here\n  if (a<0 || b<0 || c<0)\n  {\n    return -1;\n  }\n  if (a+b>c\
    \ && a+c>b && b+c>a)\n  {\n    float p = (a+b+c)/2.0;\n    float s = sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    return s;\n  }\n  else\n  {\n    return -1;\n  }", "    if (a<0||b<0||c<0)\
    \ return -1;\n    float p = (a+b+c)/2.0;\n    float area = sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    return area;", "\t// Write your code here\n\tfloat s = 0.5 * (a + b + c);\n\
    \tfloat area = sqrt(s * (s - a) * (s - b) * (s - c));\n\tif (area > 0) {\n\t\t\
    return floor(area * 100) / 100;\n\t}\n\telse {\n\t\treturn -1;\n\t}", "  // check\
    \ for invalid inputs\n  if (a < 0 || b < 0 || c < 0) return -1;\n  if (a + b <=\
    \ c || a + c <= b || b + c <= a) return -1;\n  // Heron's formula\n  float s =\
    \ (a + b + c) / 2;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  //\
    \ round to two decimal places\n  return roundf(area * 100) / 100;", "  // YOUR\
    \ CODE HERE\n  if(a + b > c && a + c > b && b + c > a)\n  {\n    float s = (a\
    \ + b + c) / 2.0;\n    float val = sqrt(s * (s - a) * (s - b) * (s - c));\n  \
    \  return val;\n  }\n  else\n  {\n    return -1;\n  }", "\tif(a+b>c&&a+c>b&&b+c>a)\n\
    \t\treturn (0.5*(a*(b*b+c*c-a*a)+b*(c*c+a*a-b*b)+c*(a*a+b*b-c*c)));\n\telse\n\t\
    \treturn -1;", "    float s = (a + b + c) / 2.0;\n    if (s > a && s > b && s\
    \ > c) {\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n      \
    \  return round(area * 100) / 100;\n    }\n    return -1;", "\treturn (a + b >\
    \ c && a + c > b && b + c > a) ? sqrt((a + b + c) * (a + b - c) * (a - b + c)\
    \ * (-a + b + c)) / 4 : -1;", "  // Define a compare function\n  auto compare\
    \ = [](const long a, const long b) {\n    return a > b;\n  };\n  // Sort the three\
    \ sides in descending order\n  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(),\
    \ sides.end(), compare);\n  // Check if any two sides is greater than the third\
    \ side\n  if (sides[0] >= sides[1] + sides[2]) {\n    return -1;\n  }\n  // If\
    \ the triangle is valid. Then calculate its area\n  // and return it\n  long p\
    \ = (a + b + c) / 2;\n  return std::sqrt(p * (p - a) * (p - b) * (p - c));", " \
    \ if (a+b>c && a+c>b && b+c>a) {\n    float s = (a+b+c)/2.0;\n    float area =\
    \ sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;\n  }\n  return -1;", "    if (a<=0||b<=0||c<=0)\
    \ {\n        return -1;\n    }\n    long peri = a+b+c;\n    long s = peri/2;\n\
    \    double area = sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;", "  if (a+b<=c\
    \ || a+c<=b || b+c<=a) {\n    return -1;\n  }\n  else {\n    double s = (a+b+c)/2.0;\n\
    \    return sqrt(s*(s-a)*(s-b)*(s-c));\n  }", "\tif(a<1||b<1||c<1) return -1;\n\
    \tif(a+b<=c) return -1;\n\tif(a+c<=b) return -1;\n\tif(b+c<=a) return -1;\n\t\
    float p = (a+b+c)/2.0;\n\tfloat a1 = p*(p-a)*(p-b)*(p-c);\n\ta1 = sqrt(a1);\n\t\
    a1 = round(a1*100)/100;\n\treturn a1;", "    if(a > 0 && b > 0 && c > 0) {\n \
    \       if(a + b > c && a + c > b && b + c > a) {\n            float s = (a +\
    \ b + c) / 2.0;\n            return sqrt(s * (s - a) * (s - b) * (s - c));\n \
    \       }\n    }\n    return -1;", "\t// long a, b, c;\n\t// a = 3;\n\t// b =\
    \ 4;\n\t// c = 5;\n\tdouble s = (a + b + c) / 2.0;\n\tdouble area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n\treturn area;", "\tif(a<0 || b<0 || c<0)\n\t\t\
    return float(-1);\n\tfloat s = (a+b+c)/2.0;\n\tfloat area = (s*(s-a)*(s-b)*(s-c));\n\
    \tif(area<0)\n\t\treturn float(-1);\n\treturn sqrt(area);", "  if(a+b>c && a+c>b\
    \ && b+c>a)\n    return (sqrt(a*a+b*b-c*c)+sqrt(a*a+c*c-b*b)+sqrt(b*b+c*c-a*a))/4;\n\
    \  else\n    return -1;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use Print_Float.\n    // Example:\n    // Print_Float.print_float(23.1415);\n\
    \    //long* sides = new long[3];\n    //sides[0] = a;\n    //sides[1] = b;\n\
    \    //sides[2] = c;\n    //std::sort(sides, sides+3);\n    //if (sides[0] + sides[1]\
    \ > sides[2]) {\n    //    return 0.5 * sides[0] * sides[1];\n    //}\n    //return\
    \ -1;\n    float s = (a + b + c) / 2.0;\n    if (s - a <= 0 || s - b <= 0 || s\
    \ - c <= 0) {\n        return -1;\n    }\n    return sqrt(s * (s - a) * (s - b)\
    \ * (s - c));", "    // Your code here\n    if(a<=0 || b<=0 || c<=0) return -1;\n\
    \    if(a+b<=c || a+c<=b || b+c<=a) return -1;\n    float s = (a+b+c)/2.0;\n \
    \   return sqrt(s*(s-a)*(s-b)*(s-c));", "  if (a <= 0 || b <= 0 || c <= 0) {\n\
    \    return -1;\n  }\n  long sum2 = a + b;\n  long sum3 = a + c;\n  long sum1\
    \ = b + c;\n  if (sum1 <= a || sum2 <= b || sum3 <= c) {\n    return -1;\n  }\n\
    \  float p = (a + b + c) / 2.0;\n  float area = sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n  return round(area * 100) / 100;", "  assert(a > 0);\n  assert(b >\
    \ 0);\n  assert(c > 0);\n  if ((a + b > c) && (a + c > b) && (b + c > a)) {\n\
    \    float s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n  }\n  return -1;", "    // your code here\n    if(a + b > c && a +\
    \ c > b && b + c > a)\n    {\n        float s = (a + b + c) / 2.0;\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    else\n    {\n        return\
    \ -1;\n    }", "  if(a+b > c && a+c > b && b+c > a)\n    return sqrt(4.0*a*a*b*b-pow(a*a+b*b-c*c,2))/4.0;\n\
    \  else\n    return -1;", "    //double s = (a + b + c) / 2.0;\n    double s =\
    \ (double)a + b + c;\n    s /= 2.0;\n    double res = s * (s - a) * (s - b) *\
    \ (s - c);\n    if (res <= 0) {\n        return -1;\n    }\n    return (float)sqrt(res);",
  "\tfloat s = (a + b + c) / 2.0;\n\tfloat area = (s * (s - a) * (s - b) * (s - c));\n\
    \tif (area < 0.0) {\n\t\treturn -1.0;\n\t}\n\telse\n\t\treturn std::sqrt(area);",
  '    return a + b + c >= 2 * std::max(a, std::max(b, c)) ? sqrt((a + b + c) * (a
    + b - c) * (a + c - b) * (b + c - a)) / 4 : -1;', "\tfloat area,s;\n\tif(a>0 &&\
    \ b>0 && c>0)\n\t{\n\t\tif(a+b>c && a+c>b && b+c>a)\n\t\t{\n\t\t\ts=(a+b+c)/2;\n\
    \t\t\tarea=sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t\tstd::cout<<area<<std::endl;\n\t\t\
    \treturn area;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t}\n\telse\n\
    \t{\n\t\treturn -1;\n\t}", "\tif(a > 0 && b > 0 && c > 0 && (a + b > c) && (a\
    \ + c > b) && (b + c > a)){\n\t\tint s = (a + b + c) / 2;\n\t\tfloat a = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n\t\treturn a;\n\t}\n\treturn -1;", "\t// Write\
    \ your code here\n\tassert(a > 0 && b > 0 && c > 0);\n\tassert(a + b > c && a\
    \ + c > b && b + c > a);\n\tfloat s = (a + b + c) / 2.0;\n\treturn sqrt(s * (s\
    \ - a) * (s - b) * (s - c));", "    // Check if a, b, c can form a triangle or\
    \ not\n    long sides[] = {a, b, c};\n    std::sort(sides, sides + 3);\n    if(sides[0]\
    \ + sides[1] > sides[2]) {\n        // Valid triangle\n        // Heron's formula\n\
    \        float s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n        return floor(area * 100) / 100;\n    }\n    return\
    \ -1;", "    if(a+b<=c || a+c<=b || b+c<=a)\n        return -1;\n    float s =\
    \ (a+b+c)/2.0;\n    float area = (s*(s-a)*(s-b)*(s-c));\n    return sqrt(area);",
  "    float s = (a + b + c) / 2.0;\n    if(s > a && s > b && s > c) {\n        float\
    \ x = (s - a) * (s - b) * (s - c);\n        float area = s * x;\n        return\
    \ sqrt(area);\n    }\n    return -1;", "    float result = -1;\n    std::vector<long>\
    \ triangle = {a, b, c};\n    sort(triangle.begin(), triangle.end());\n    if (triangle[0]\
    \ + triangle[1] > triangle[2]) {\n        float p = (a + b + c) / 2.0;\n     \
    \   result = sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return result;",
  "   float s = (a + b + c) / 2.0;\n   float area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n   return area;", "\tfloat s = (a + b + c) / 2.0;\n\tfloat area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n\treturn (area <= 0) ? -1 : area;", "\tfloat\
    \ s = (a + b + c) / 2.0;\n\tif ((s - a > 0) && (s - b > 0) && (s - c > 0))\n\t\
    \treturn sqrt(s * (s - a) * (s - b) * (s - c));\n\telse\n\t\treturn -1;", "\t\
    // TODO: Implement\n    if(a+b>c && a+c>b && b+c>a)\n    {\n        double s =(a+b+c)/2.0;\n\
    \        double area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n\
    \    else\n    {\n        return -1;\n    }", "\t// Calculate square root of ((s\
    \ - a) * (s - b) * (s - c)) * s.\n\t// where s = (a + b + c) / 2\n\tif (a > 0\
    \ && b > 0 && c > 0) {\n\t\t// Make sure all values are positive\n\t\tif (a +\
    \ b > c && a + c > b && b + c > a) {\n\t\t\t// Make sure that the largest side\
    \ is still smaller than the\n\t\t\t// sum of the other two\n\t\t\tfloat s = (a\
    \ + b + c) / 2.0;\n\t\t\tfloat area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \t\t\treturn area;\n\t\t}\n\t}\n\treturn -1;", "    float s, area;\n    s = (a\
    \ + b + c) / 2.0;\n    area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ area;", "    float s = (a + b + c) / 2.0;\n    if (s - a < 0 || s - b < 0 ||\
    \ s - c < 0)\n        return -1;\n    return sqrt(s * (s - a) * (s - b) * (s -\
    \ c));", "    if (a < 0 || b < 0 || c < 0) {\n        return -1;\n    }\n    if\
    \ (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    float\
    \ s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));",
  "\tfloat s = (a + b + c) / 2.0;\n\tfloat area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n\treturn area;", "\tlong s = (a + b + c) / 2;\n\tfloat result = std::sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n\treturn std::round(result * 100) / 100;",
  "    // check sum of two sides is greater than the third.\n    if ((a + b > c) &&\
    \ (a + c > b) && (b + c > a)) {\n        double s = (a + b + c) / 2.0;\n     \
    \   double area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area\
    \ * 100) / 100;\n    }\n    return -1;", "    if(a+b>c && a+c>b && b+c>a)\n  \
    \  {\n        float s=(a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    else\n    {\n        return -1;\n    }", "    // The area of a triangle\
    \ is computed using Heron's formula:\n    // area = sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n    // where s = (a + b + c) / 2\n    // Check if a valid triangle\
    \ exists.\n    if (a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b\
    \ + c <= a) {\n        return -1;\n    }\n    float s = (a + b + c) / 2.0;\n \
    \   return sqrt(s * (s - a) * (s - b) * (s - c));", "    // if( a + b > c && b\
    \ + c > a && a + c > b )\n    //     return (a*b/2);\n    // else\n    //    \
    \ return -1;\n    float s, area;\n    s = (a + b + c) / 2.0;\n    area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;", "    assert(a>0 && b>0 &&\
    \ c>0);\n    if (a+b>c && a+c>b && b+c>a) {\n        double s = (a+b+c)/2.0;\n\
    \        double area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n\
    \    return -1;", "  // First step, check the validity of the triangle\n  if(\
    \ a + b > c and a + c > b and b + c > a ){\n    double s = (a + b + c) / 2.0;\n\
    \    return (sqrt(s * (s - a) * (s - b) * (s - c)));\n  }\n  return -1;", "  if(a+b>c\
    \ && a+c>b && b+c>a)\n  {\n    float s = (a+b+c)/2.0;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \  }\n  else\n  {\n    return -1;\n  }", "\t//int b1 = (a+b>c);\n\t//int b2 =\
    \ (a+c>b);\n\t//int b3 = (b+c>a);\n\t//if(b1 and b2 and b3){\n\t\tint s = (a+b+c)/2;\n\
    \t\tfloat x = s*(s-a)*(s-b)*(s-c);\n\t\treturn sqrt(x);\n\t//}\n\t//return -1;",
  "  assert((a > 0) && (b > 0) && (c > 0));\n  long p = (a + b + c) / 2;\n  return\
    \ sqrt(p * (p - a) * (p - b) * (p - c));", "    float s = (a + b + c) / 2.0;\n\
    \    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (area > 0)\n\
    \        return area;\n    else\n        return -1;", "    if (a + b > c && a\
    \ + c > b && b + c > a)\n    {\n        float p = (a + b + c) / 2.0;\n       \
    \ return sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return -1;", "  //\
    \ Easy mistake - abs function doesn't work on floats\n  // https://stackoverflow.com/questions/9387610/how-do-i-get-the-absolute-value-of-a-float-in-c\n\
    \  // retuen fabs(0.5 * ((a * b) * sin(c)));\n  return (0.5 * ((a * b) * sin(c)));",
  "    if(a+b>c && a+c>b && b+c>a) return sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))*0.25;\n\
    \    return -1;", "  //Your code here\n  if (a+b > c && a+c > b && b+c > a)\n\
    \  {\n      float s = (a+b+c)/2.0;\n      float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \      return area;\n  }\n\n  return -1;", "  float area = 0;\n  if (a <= 0 ||\
    \ b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c || a + c <= b ||\
    \ b + c <= a) {\n    return -1;\n  }\n  float s = float(a + b + c) / 2;\n  area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;", "\tif(a < 0 || b\
    \ < 0 || c < 0) return -1;\n\tif(a + b > c && a + c > b && b + c > a)\n\t\treturn\
    \ std::sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4;\n\treturn\
    \ -1;", "    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n    if (s <= 0 || a <= 0 || b <= 0 || c <= 0)\n       \
    \ return -1;\n    return area;", "    float S = (a + b + c) / 2.0;\n    // Heron's\
    \ formula\n    float A = sqrt(S * (S - a) * (S - b) * (S - c));\n    if (isnan(A))\n\
    \        return -1;\n    else\n        return A;", "    if(a+b>c && a+c>b && b+c>a)\n\
    \    {\n        float s = (a+b+c)/2.0;\n        float area = (s*(s-a)*(s-b)*(s-c));\n\
    \        if(area>0)\n        {\n            return sqrt(area);\n        }\n  \
    \      else\n        {\n            return -1;\n        }\n    }\n    else\n \
    \   {\n        return -1;\n    }", "\tif (a <= 0 || b <= 0 || c <= 0) {\n\t\t\
    return -1;\n\t}\n\tfloat s = (a + b + c) / 2.0;\n\tfloat area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n\treturn area;", "    float s = (a + b + c) / 2.0;\n\
    \    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (area > 0)\
    \ ? round(area * 100) / 100 : -1;", "    // Use Heron's Formula to calculate the\
    \ area of the triangle\n    // The formula is 1/4(sqrt(s(s-a)(s-b)(s-c))) where\
    \ s is the semi-perimeter\n    // i.e. s = (a+b+c)/2. Note that we can also use\
    \ a*b*c/sqrt(p(p-a)(p-b)(p-c))\n    // where p is the perimeter of the triangle\
    \ i.e. p = a+b+c\n    // Note the following edge cases:\n    // 1. a, b, c are\
    \ greater than 0.\n    // 2. a, b, c are less than or equal to the sum of the\
    \ other two sides\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return -1;\n\
    \    }\n    long perimeter = a + b + c;\n    if (a > perimeter || b > perimeter\
    \ || c > perimeter) {\n        return -1;\n    }\n    float semi_perimeter = (a\
    \ + b + c) / 2.0;\n    float area = sqrt(semi_perimeter * (semi_perimeter - a)\
    \ * (semi_perimeter - b) * (semi_perimeter - c));\n    return area;", "    std::sort(a,\
    \ b, c);\n    if (c < a + b)\n        return std::sqrt(a*a + b*b + c*c);\n   \
    \ else\n        return -1;", "  //# YOUR CODE HERE\n  long sum = a + b + c;\n\
    \  if (sum - a <= a) return -1;\n  if (sum - b <= b) return -1;\n  if (sum - c\
    \ <= c) return -1;\n  float p = sum / 2.0;\n  return sqrt(p * (p - a) * (p - b)\
    \ * (p - c));", "    float sum = (a+b+c)/2.0;\n    float area = sqrt(sum*(sum-a)*(sum-b)*(sum-c));\n\
    \    if(a > 0 && b > 0 && c > 0 && area > 0) {\n        return area;\n    }\n\
    \    return -1;", "    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n    \
    \    return std::sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c))\
    \ / 4;\n    }\n    return -1;", "    // Implement this function.\n    if( a+b\
    \ > c && a+c > b && b+c > a)\n    {\n        float x = (a+b+c)/2.0;\n        float\
    \ y = sqrt(x*(x-a)*(x-b)*(x-c));\n        float r = y * 100;\n        float ans\
    \ = round(r);\n        return ans/100;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n", "    float s = float(a + b + c) / 2;\n    float area = float(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)));\n    if (area > 0)\n        return area;\n\
    \    else \n        return float(-1);", "    // We need to find the area of the\
    \ triangle given its 3 sides a, b and c.\n    // We know that:\n    //     (i)\
    \ The area of a triangle is given by the half of its base multiplied by\n    //\
    \     its height\n    //     (ii) The height of a triangle, when drawn perpendicular\
    \ to the base,\n    //     forms a right angle triangle with the base.\n    //\
    \     (iii) In a right angle triangle, the length of the hypotenuse is equal to\n\
    \    //     the sum of the squares of the lengths of the other two sides.\n  \
    \  //     (iv) Using the Pythagoras theorem, the squares of the lengths of the\
    \ sides\n    //     are a^2, b^2 and c^2.\n    //     (v) The base of a triangle\
    \ is the longest side.\n    //     (vi) The height of a triangle is the length\
    \ of the side which is drawn\n    //     perpendicular to the base.\n    // From\
    \ (i) to (vi), we now have all the pieces of the puzzle.\n    // We now need to\
    \ assemble the pieces and solve the problem.\n    // From (v), the base is the\
    \ side with the largest length and hence we need\n    // to determine the sides\
    \ with the largest length.\n    // We can do this by sorting the three sides in\
    \ descending order.\n    float sides[3] = {a, b, c};\n    std::sort(sides, sides\
    \ + 3, std::greater<float>());\n    float base = sides[0];\n    float side1 =\
    \ sides[1];\n    float side2 = sides[2];\n    // From (i), we know that the area\
    \ is half of the base multiplied by the height.\n    // We need to calculate the\
    \ height.\n    // From (vi), the height is the side which is drawn perpendicular\
    \ to the base.\n    // We need to calculate this side.\n    // The other two sides\
    \ are side1 and side2.\n    // From (ii), the height will be one of side1 or side2.\n\
    \    // From (v), the base is the longest side and hence the height will be the\n\
    \    // shorter side.\n    // From (iii), the length of the hypotenuse is equal\
    \ to the sum of the squares\n    //", "  // We know if a triangle is valid if\
    \ the sum of the lengths of any two sides\n  // is greater than the third side.\
    \ Also, the maximum length of a side cannot\n  // be greater than the sum of the\
    \ lengths of the other two sides.\n  if(a + b > c and a + c > b and b + c > a\
    \ and max(a, b, c) < a + b + c - max(a, b, c))\n    return sqrt(pow(a, 2) + pow(b,\
    \ 2) - pow(c, 2)) * sqrt(pow(a, 2) + pow(c, 2) - pow(b, 2)) * sqrt(pow(b, 2) +\
    \ pow(c, 2) - pow(a, 2)) / 4;\n  return -1;", "    // Write your code here\n \
    \   float s = (a+b+c)/2.0;\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n    if(a+b>c\
    \ && a+c>b && b+c>a)\n        return area;\n    else\n        return -1;", " \
    \   // implement this function\n    float s, a1;\n    if (a + b > c && a + c >\
    \ b && b + c > a) {\n        s = (a + b + c) / 2.0;\n        a1 = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n        return a1;\n    }\n    else {\n        return\
    \ -1;\n    }", "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    if(sides[0] + sides[1] > sides[2]) {\n        float p = (a\
    \ + b + c) / 2.0;\n        return sqrt(p * (p - a) * (p - b) * (p - c));\n   \
    \ }\n    return -1;", "    float s = (a + b + c) / 2.0;\n    float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (area <= 0) {\n        return -1;\n\
    \    }\n    return area;", "    // fill in the code\n    float s = 0.5 * (a +\
    \ b + c);\n    float area = pow(s * (s - a) * (s - b) * (s - c), 0.5);\n    if\
    \ (area < 0.001) {\n        return -1;\n    }\n    else {\n        return area;\n\
    \    }", "    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n    if(area > 0)\n        return area;\n    else\n  \
    \      return -1;", '    ', "  assert(a > 0 && b > 0 && c > 0);\n  // Write your\
    \ code here.\n  return (float(-1));", "    if(a<=0||b<=0||c<=0){\n        return\
    \ -1;\n    }\n    if(a+b<=c||a+c<=b||b+c<=a){\n        return -1;\n    }\n   \
    \ else{\n        float s=(a+b+c)/2.0;\n        float area=sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \        return area;\n    }", "    if (a+b>c && a+c>b && b+c>a) {\n        float\
    \ s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    return\
    \ -1;", "    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\
    \    else {\n        float s = (a + b + c) / 2.0;\n        float triarea = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        return round(triarea * 100) / 100;\n\
    \    }", "  // your code here\n  //\n  long long s = a + b + c;\n  if (s <= 2\
    \ * std::max(a, std::max(b, c))) {\n    return -1;\n  }\n  return std::sqrt(s\
    \ * (s - 2 * a) * (s - 2 * b) * (s - 2 * c)) / 4.0;", "    float ret = -1;\n \
    \   if(a<=0 || b<=0 || c<=0) return ret;\n    if(a+b>c && a+c>b && b+c>a)\n  \
    \  {\n        float s = float(a+b+c)/2;\n        float ans = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \        return ans;\n    }\n    return ret;", "    // edge case where any two\
    \ sides added together is less than or equal to the third side\n    if(a + b <=\
    \ c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // else,\
    \ use Heron's formula to get area\n    long half_perimeter = (a + b + c) / 2;\n\
    \    return sqrt(half_perimeter * (half_perimeter - a) * (half_perimeter - b)\
    \ * (half_perimeter - c));", "    if (a + b > c && a + c > b && b + c > a) {\n\
    \        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n    }\n    return -1;", "\tassert(a > 0 && b > 0 && c > 0);\n\
    \tif (a + b <= c || a + c <= b || b + c <= a) {\n\t\treturn -1;\n\t}\n\tlong long\
    \ p = (a + b + c) / 2;\n\tlong long s = p * (p - a) * (p - b) * (p - c);\n\treturn\
    \ sqrt(s);", "  // your code here\n  return 0.0;", "\t\n\t\tif((a+b>c)&&(a+c>b)&&(b+c>a)){\n\
    \t\t\tfloat s = (a+b+c)/2.0;\n\t\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t}\n\
    \t\telse\n\t\t\treturn -1;\n\t\n\t", "  float s,area;\n  // PUT YOUR CODE HERE\n\
    \  if(a+b>c && a+c>b && b+c>a){\n    s=(a+b+c)/2;\n    area=sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return area;\n  }\n  else return -1;", "    if (a + b > c && a + c > b &&\
    \ b + c > a) {\n        float s = (a + b + c) / 2.0;\n        float area = sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        return (area);\n    }\n    return (-1);",
  "    float s, area;\n    s = (a + b + c) / 2.0;\n    if (s >= a && s >= b && s >=\
    \ c) {\n        area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return\
    \ area;\n    }\n    return -1;", "  assert(a > 0 && b > 0 && c > 0);\n\n  if (a\
    \ + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n\n  float s =\
    \ (a + b + c) / 2.0;\n  float area = std::sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \  return area;", "  float s = (a + b + c) / 2.0;\n  float area = sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n  if (area <= 0.0) {\n    return -1.0;\n  }\n  return\
    \ area;", "    if (a+b<=c || a+c<=b || b+c<=a) {\n        return -1;\n    } else\
    \ {\n        float p = (a+b+c)/2.0;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }", "\tfloat s = (a + b + c) / 2.0;\n\tfloat area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n\treturn area;", "  //...\n  // assert(a>0);\n  // assert(b>0);\n\
    \  // assert(c>0);\n  assert(a>0 && b>0 && c>0);\n  if(a+b>c && a+c>b && b+c>a)\n\
    \  {\n      return (float)sqrt((a+b+c)*(a+b-c)*(a+c-b)*(b+c-a))/4;\n  }\n  else\n\
    \  {\n      return -1;\n  }\n  // return (a*b*c);", "    if(a+b>c&&a+c>b&&b+c>a)\n\
    \    {\n    float s=(a+b+c)/2.0;\n    float ans=(s*(s-a)*(s-b)*(s-c));\n    return\
    \ sqrt(ans);\n    }\n    else\n    {\n        return -1;\n    }\n    ", '    //
    Your code here', "    if (a<=0 || b<=0 || c<=0) return -1;\n    if (a+b>c && a+c>b\
    \ && b+c>a) {\n        long p = (a+b+c)/2;\n        return sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \    }\n    return -1;", "    if ((a+b) > c && (a+c) > b && (b+c) > a)\n    {\n\
    \        float s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n \
    \   }\n    else\n    {\n        return -1;\n    }\n    ", "    // Write your code\
    \ here\n    float p,area;\n    p=(a+b+c)/2.0;\n    if(a+b>c and a+c>b and b+c>a)\n\
    \    {\n        area=sqrt(p*(p-a)*(p-b)*(p-c));\n        //cout<<area;\n     \
    \   return area;\n    }\n    else\n    {\n        return -1;\n    }", "    assert(a>0\
    \ && b>0 && c>0);\n    float s = (a+b+c)/2.0;\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    if (area == 0) {\n        return -1;\n    }\n    else {\n        return area;\n\
    \    }", "    if(a+b > c && a+c > b && b+c > a)\n        return sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;\n\
    \    else\n        return -1;", "  if (a + b <= c || a + c <= b || b + c <= a)\
    \ {\n    return -1;\n  }\n  float s = (a + b + c) / 2.0;\n  return sqrt(s * (s\
    \ - a) * (s - b) * (s - c));", "    assert(a != 0 && b != 0 && c != 0);\n    if\
    \ ((a+b) <= c || (a+c) <= b || (b+c) <= a)\n        return -1;\n    float s =\
    \ (a+b+c)/2.0;\n    return sqrt(s*(s-a)*(s-b)*(s-c));", "  // this check if the\
    \ sum of two sides is greater than the third\n  if(a + b > c && a + c > b && b\
    \ + c > a){\n    // this is Heron's formula\n    //\n    //   /|\\\n    //  /\
    \ | \\\n    // /  |  \\\n    //   /_\\\n    //     a\n    //     \n    // If a\
    \ is the length of the line segment\n    // a, b, c are the length of the sides.\n\
    \    // s is the semiperimeter\n    // the area of the triangle is:\n    // Area\
    \ = sqrt(s(s-a)(s-b)(s-c))\n    //\n    // NOTE: this implementation is flawed\
    \ and does not check for integer overflow\n    // for a, b, c with values larger\
    \ than 2147483647\n    // I tried to import math and use math.hypot(a, b)\n  \
    \  // This does not work for this question.\n    float s = (a + b + c) / 2.0;\n\
    \    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (round(area\
    \ * 100) / 100);\n  }\n  return -1;", "    // return (a * b * c) / 2.0;\n    if\
    \ (a < 1 || b < 1 || c < 1) return -1;\n    if (a + b <= c || a + c <= b || b\
    \ + c <= a) return -1;\n    return (a * b * c) / 2.0;", "  if (a<=0 || b<=0 ||\
    \ c<=0) return -1;\n  if (a+b <= c || a+c <= b || b+c <= a) return -1;\n  long\
    \ p = (a+b+c)/2;\n  return std::sqrt(p*(p-a)*(p-b)*(p-c));", "  // Your code here\n\
    \  float s=(a+b+c)/2.0;\n  // assert(a+b>c || a+c>b || b+c>a);\n  if(a+b>c &&\
    \ a+c>b && b+c>a)\n  {\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n  }\n  else\n \
    \ {\n    return float(-1);\n  }", "  return (a + b > c && a + c > b && b + c >\
    \ a) ? \n  sqrt(((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c))) / 4.0\
    \ : -1;", "    float area;\n    if(a+b>c && a+c>b && b+c>a){\n        float s\
    \ = (a+b+c)/2.0;\n        area = sqrt(s*(s-a)*(s-b)*(s-c));\n    }else{\n    \
    \    area = -1;\n    }\n    return area;", "    float tri;\n    if(a+b>c && a+c>b\
    \ && b+c>a)\n    {\n        float p = (a+b+c)/2.0;\n        tri = sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \        return tri;\n    }\n    else return float(-1);", "    float p = (a +\
    \ b + c) / 2.0;\n    float s = sqrt(p * (p - a) * (p - b) * (p - c));\n    if\
    \ (s > 0) {\n        return s;\n    }\n    return -1;", '    // Replace this comment
    with your code', "  if(a + b > c && a + c > b && b + c > a) {\n    float s = (a\
    \ + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n  }\n  return\
    \ -1;", "  std::vector<long> v{a, b, c};\n  std::sort(v.begin(), v.end());\n \
    \ if (v[0] + v[1] > v[2])\n    return v[0] * v[1] / 2.0;\n  return -1;", "   \
    \ // TODO: You code goes here!\n    if (a + b > c && a + c > b && b + c > a) {\n\
    \        double s = (a + b + c) / 2.0;\n        double area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n        return round(area * 100) / 100.0;\n    }\n  \
    \  return -1;", "  // your code goes here\n  if(a+b > c && a+c > b && b+c > a)\n\
    \    return sqrt(abs((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c)))/4;\n  else\n    return\
    \ -1;", "\tif ((a + b > c) && (a + c > b) && (b + c > a))\n\t\treturn 0.5 * (a\
    \ * b);\n\telse\n\t\treturn -1;", "  long max, sum, area;\n  max = std::max(a,\
    \ std::max(b, c));\n  sum = a + b + c;\n  if (max >= sum / 2)\n    return -1;\n\
    \  area = std::sqrt(sum / 2 * (sum / 2 - a) * (sum / 2 - b) * (sum / 2 - c));\n\
    \  return std::round(area * 100) / 100;", "\t// Your code here\n\t// You can add\
    \ more helper functions if you like\n    float f = (a+b+c)/2.0;\n    float area\
    \ = f*(f-a)*(f-b)*(f-c);\n    if(area < 0){\n        return -1;\n    }\n    return\
    \ sqrt(area);", "  if (a + b > c && a + c > b && b + c > a) {\n    float p = (a\
    \ + b + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n  }\n  return\
    \ -1;", "  if(a <= 0 || b <= 0 || c <= 0)\n    return -1;\n  if(a + b <= c ||\
    \ a + c <= b || b + c <= a)\n    return -1;\n  float s = (a + b + c) / 2.0;\n\
    \  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  return round(area *\
    \ 100) / 100.0;", '    return -1;', "    float s = (a + b + c) / 2.0;\n    float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", "    // Make\
    \ sure that the sides are integers\n    assert(a == (long)a);\n    assert(b ==\
    \ (long)b);\n    assert(c == (long)c);\n    // All sides must be > 0\n    if (a\
    \ <= 0 || b <= 0 || c <= 0)\n        return -1;\n    // Sum of any two sides must\
    \ be > third side\n    if ((a + b) <= c || (a + c) <= b || (b + c) <= a)\n   \
    \     return -1;\n    // Calculate and return the area (Heron's formula)\n   \
    \ float s = (a + b + c) / 2.0;\n    return sqrt(s * (s - a) * (s - b) * (s - c));",
  "    if (a > 0 && b > 0 && c > 0) {\n        if (a + b > c && a + c > b && b + c\
    \ > a) {\n            float s = float(a + b + c) / 2;\n            return float(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)));\n        }\n    }\n    return float(-1);",
  '  return -1;', "    assert(a >= 0);\n    assert(b >= 0);\n    assert(c >= 0);\n\
    \    float s = (a + b + c) / 2.0;\n    float A = sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    if (A <= 0) {\n        return -1;\n    }\n    std::cout << std::fixed\
    \ << std::setprecision(2) << A << '\\n';\n    return A;", "\t// TODO: Implement\
    \ this", "\tlong s = (a + b + c) / 2;\n\tif (s > a && s > b && s > c) {\n\t\t\
    return std::sqrt(s * (s - a) * (s - b) * (s - c));\n\t}\n\treturn -1;", "    assert(a\
    \ > 0);\n    assert(b > 0);\n    assert(c > 0);\n    assert(a <= 1e9);\n    assert(b\
    \ <= 1e9);\n    assert(c <= 1e9);\n    // Check for valid triangle\n    if(a +\
    \ b > c && a + c > b && b + c > a) {\n        // Calculate p and s\n        float\
    \ p = (a + b + c) / 2.0;\n        float s = sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n        // Return the rounded s\n        return roundf(s * 100) / 100;\n\
    \    }\n    // If the triangle isn't valid return -1\n    return -1;", "  // assert\
    \ (a > 0);\n  // assert (b > 0);\n  // assert (c > 0);\n  // assert (a + b > c);\n\
    \  // assert (a + c > b);\n  // assert (b + c > a);\n  float s = (a + b + c) /\
    \ 2.0;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  if (area > 0.0)\
    \ {\n    return area;\n  } else {\n    return -1.0;\n  }", "    // using Heron's\
    \ formula\n    float perim = (a + b + c) / 2.0;\n    float area = sqrt(perim *\
    \ (perim - a) * (perim - b) * (perim - c));\n    if (area <= 0) {\n        return\
    \ -1;\n    }\n    return area;", "    float s = (a + b + c) / 2.0;\n    float\
    \ area = s * (s - a) * (s - b) * (s - c);\n    return area < 0 ? -1 : sqrt(area);",
  "\t// Write your code here.\n\tassert(a > 0 && b > 0 && c > 0);\n\tassert(a + b\
    \ > c && a + c > b && b + c > a);\n\tfloat s = (a + b + c) / 2.0;\n\treturn sqrt(s\
    \ * (s - a) * (s - b) * (s - c));", "\tfloat p = (a + b + c) / 2.0;\n\tfloat area\
    \ = sqrt(p * (p - a) * (p - b) * (p - c));\n\tif(p > a && p > b && p > c)\n\t\t\
    return area;\n\telse \n\t\treturn -1;", "    // write code here\n    if(a+b>c\
    \ && a+c>b && b+c>a)\n    {\n        float s = (a+b+c)/2.0;\n        float ans\
    \ = (s*(s-a)*(s-b)*(s-c));\n        if(ans>0)\n        {\n            return sqrt(ans);\n\
    \        }\n        else\n        {\n            return -1;\n        }\n    }\n\
    \    else\n    {\n        return -1;\n    }", "    if(a+b > c && a+c > b && b+c\
    \ > a) {\n        float s = (a+b+c)/2.0;\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    }\n    return -1;", "  std::vector<long> sides {a, b, c};\n  std::sort(sides.begin(),\
    \ sides.end());\n  if (sides[0] + sides[1] > sides[2])\n    return (float) (sides[0]\
    \ + sides[1] + sides[2]) * (sides[2] - sides[1] + sides[0]) * (sides[1] - sides[0]\
    \ + sides[2]) * (sides[0] + sides[1] - sides[2]);\n  return -1;", "    //your\
    \ code here\n    float s = (a+b+c)/2.0;\n    return (a+b>c && a+c>b && b+c>a)\
    \ ? sqrt(s*(s-a)*(s-b)*(s-c)) : -1;", "    float s = (a + b + c) / 2.0;\n    if\
    \ (s * (s - a) * (s - b) * (s - c) > 0)\n        return sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    else\n        return -1;", "  // Write your code here\n\
    \  if (a + b > c && a + c > b && b + c > a) {\n    float s = (a + b + c) / 2.0;\n\
    \    return (sqrt(s * (s - a) * (s - b) * (s - c)));\n  }\n  return -1;", "  \
    \  // Your code here!\n    return (a + b > c && a + c > b && b + c > a) ? \n \
    \           0.5 * (a + b) * (a + c) * (b + c) : -1;", "\tfloat s, area;\n\ts =\
    \ (a + b + c) / 2;\n\tarea = sqrt(s * (s - a) * (s - b) * (s - c));\n\tif (area\
    \ > 0) {\n\t\t//Rounding to 2 decimal points\n\t\treturn floorf(area * 100) /\
    \ 100;\n\t}\n\telse {\n\t\treturn float(-1);\n\t}", "  std::vector<long> vec{a,\
    \ b, c};\n  std::sort(vec.begin(), vec.end());\n  double p = (vec[0] + vec[1]\
    \ + vec[2]) / 2.0;\n  if (vec[0] + vec[1] <= vec[2]) {\n    return -1;\n  }\n\
    \  double area = sqrt(p * (p - vec[0]) * (p - vec[1]) * (p - vec[2]));\n  return\
    \ round(area * 100) / 100;", "  std::vector<long> sides{a, b, c};\n  std::sort(sides.begin(),\
    \ sides.end());\n  if(sides[0] + sides[1] > sides[2]) {\n    float p = (a + b\
    \ + c) / 2.0;\n    return sqrt(p * (p - a) * (p - b) * (p - c));\n  }\n  return\
    \ -1;", "   // Your Code Here\n   if(a+b>c && a+c>b && b+c>a)\n   {\n       float\
    \ s = (a+b+c)/2.0;\n       return sqrt(s*(s-a)*(s-b)*(s-c));\n   }\n   else\n\
    \   {\n       return -1;\n   }", "    float s = (a + b + c) / 2.0;\n    return\
    \ sqrt(s * (s - a) * (s - b) * (s - c));", "  float area = -1;\n  float s = (a\
    \ + b + c) / 2.0;\n  if (s > a && s > b && s > c) {\n    area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n  }\n  return area;", "    if(a <= 0 || b <= 0 ||\
    \ c <= 0) return -1;\n    // assert(a > 0 && b > 0 && c > 0);\n    long s = (a\
    \ + b + c) / 2;\n    float area = (float)sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    if(area <= 0) return -1;\n    return round(area * 100) / 100;", "    // printf(\"\
    %d %d %d\", a, b, c);\n    if( a<=0 || b<=0 || c<=0 ){\n        return -1;\n \
    \   }\n    float s = (a+b+c)/2.0;\n    float area = (s*(s-a)*(s-b)*(s-c));\n \
    \   if(area<=0){\n        return -1;\n    }\n    area = sqrt(area);\n    // printf(\"\
    \\n%f\", area);\n    return area;", "    if (a<=0 || b<=0 || c<=0)\n    {\n  \
    \      return float(-1);\n    }\n    if (a+b>c && a+c>b && b+c>a)\n    {\n   \
    \     float s = (a+b+c)/2.0;\n        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \        return round(area*100)/100;\n    }\n    else\n    {\n        return float(-1);\n\
    \    }", "\tlong sum = a + b + c;\n\tif (a + b > c && a + c > b && b + c > a)\
    \ {\n\t\treturn sqrt(sum * (sum - a) * (sum - b) * (sum - c)) / 4;\n\t}\n\treturn\
    \ -1;", "    // TODO: Return the area of the triangle rounded to 2 decimal points\n\
    \    // or -1 if the triangle is invalid\n    if(a < 1 || b < 1 || c < 1){\n \
    \       return -1;\n    }\n    if((a+b > c) && (a+c > b) && (b+c > a)){\n    \
    \    float s = (a+b+c)/2.0;\n        return (sqrt(s*(s-a)*(s-b)*(s-c)));\n   \
    \ }\n    return -1;", "  if (a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c\
    \ <= b || b + c <= a) {\n    return -1;\n  }\n  float s = (a + b + c) / 2.0;\n\
    \  return sqrt(s * (s - a) * (s - b) * (s - c));", "    if (a+b<=c)\n    {\n \
    \       return -1;\n    }\n    else if (a+c<=b)\n    {\n        return -1;\n \
    \   }\n    else if (b+c<=a)\n    {\n        return -1;\n    }\n    else\n    {\n\
    \        float p = (a+b+c)/2;\n        float area = std::sqrt(p*(p-a)*(p-b)*(p-c));\n\
    \        return area;\n    }\n    ", "    if (a + b > c && a + c > b && b + c\
    \ > a) {\n        float p = (a + b + c) / 2.0;\n        float area = sqrt(p *\
    \ (p - a) * (p - b) * (p - c));\n        return (round(area * 100) / 100.0);\n\
    \    }\n    return -1;", "\t// WRITE YOUR CODE HERE", "  // Write your code here\n\
    \  if (a + b > c && a + c > b && b + c > a) {\n    float s = (a + b + c) / 2.0;\n\
    \    return sqrt(s * (s - a) * (s - b) * (s - c));\n  }\n  return -1;", "    if\
    \ (a + b > c && a + c > b && b + c > a)\n        return sqrt((a + b + c) * (a\
    \ + b - c) * (a - b + c) * (-a + b + c)) / 4;\n    else\n        return float(-1);",
  '  return -1;', "  // TODO\n  assert(a + b > c);\n  float s = (a + b + c) / 2.0;\n\
    \  return sqrt(s * (s - a) * (s - b) * (s - c));", "    assert(a > 0);\n    assert(b\
    \ > 0);\n    assert(c > 0);\n    float s = (a + b + c) / 2.0;\n    if(s - a <\
    \ 0 || s - b < 0 || s - c < 0) {\n        return -1;\n    }\n    else {\n    \
    \    return std::sqrt(s * (s - a) * (s - b) * (s - c));\n    }", '    ', "   \
    \ float p = (a + b + c) / 2.0;\n    if(p > a && p > b && p > c) {\n        return\
    \ sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return -1;", "\t//intialize\
    \ area\n\tfloat area = -1;\n\t//check if possible to make triangle\n\tif ((a +\
    \ b > c) && (a + c > b) && (b + c > a)) {\n\t\t//calculate area of triangle\n\t\
    \tfloat s = (a + b + c) / 2;\n\t\tarea = (sqrt(s * (s - a) * (s - b) * (s - c)));\n\
    \t}\n\t//return area\n\treturn area;", "    double s = (a + b + c) / 2.0;\n  \
    \  double area = s * (s - a) * (s - b) * (s - c);\n    if (area < 0)\n       \
    \ return -1;\n    return sqrt(area);", "    if(a+b>c && a+c>b && b+c>a) {\n  \
    \      float s = (a+b+c)/2.0;\n        float x = s*(s-a)*(s-b)*(s-c);\n      \
    \  return sqrt(x);\n    }\n    return -1;", "  // The three sides passed are real\
    \ numbers.\n  // Order the sides by length.\n  long sides[3] = {a, b, c};\n  std::sort(sides,\
    \ sides + 3);\n  // Check if the three sides form a valid triangle.\n  if(sides[0]\
    \ + sides[1] <= sides[2]) {\n    return -1;\n  }\n  // The area of a triangle\
    \ is given by the formula:\n  // area = \u221A(s(s \u2212 a)(s \u2212 b)(s \u2212\
    \ c)), where s = (a + b + c) / 2\n  // Calculate the half-perimeter of the triangle\n\
    \  float s = (sides[0] + sides[1] + sides[2]) / 2.0;\n  // Calculate the area.\n\
    \  float area = sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]));\n\
    \  // Round the area to 2 decimal points.\n  area = floor(area * 100) / 100;\n\
    \  return area;", "    // write your code here\n    return 0.0;", "  float s =\
    \ (a + b + c) / 2.0;\n  return ((s - a) * (s - b) * (s - c) < 0) ? -1 :\n    \
    \     sqrt(s * (s - a) * (s - b) * (s - c));", "    float s = (a + b + c) / 2.0;\n\
    \    if (s - a <= 0 || s - b <= 0 || s - c <= 0) {\n        return -1;\n    }\n\
    \    return sqrt(s * (s - a) * (s - b) * (s - c));", "    float s = float(a +\
    \ b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    if\
    \ (area > 0) {\n        return round(area * 100) / 100;\n    }\n    return -1;",
  "\tint flag = 1;\n\t// check if area exists\n\tif(a+b<=c||a+c<=b||b+c<=a)\n\t\t\
    flag = 0;\n\tif(flag)\n\t\treturn sqrt(a*a+b*b-2*a*b*cos(c));\n\telse\n\t\treturn\
    \ -1;", "  if(a < 0 || b < 0 || c < 0) return -1;\n  if(a + b > c && a + c > b\
    \ && b + c > a) {\n    float p = (a + b + c) / 2.0;\n    return sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n  }\n  return -1;", "    float s = (a + b + c) / 2.0;\n\
    \    float ans = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (ans < 0) {\n\
    \        return -1;\n    }\n    return ans;", "  // Write your code here\n  return\
    \ -1;", "    if (a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b +\
    \ c <= a)\n        return -1;\n    float p = (a + b + c) / 2.0;\n    return sqrt(p\
    \ * (p - a) * (p - b) * (p - c));", "    if (a < 0 || b < 0 || c < 0) return -1;\n\
    \    if (a == 0 || b == 0 || c == 0) return -1;\n    if (a >= b + c || b >= a\
    \ + c || c >= a + b) return -1;\n    float s = (a + b + c) / 2.0;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", "\tif (a < 0 ||\
    \ b < 0 || c < 0) {\n\t\treturn -1;\n\t}\n\tif (a + b > c && a + c > b && b +\
    \ c > a) {\n\t\tlong s = (a + b + c) / 2;\n\t\tdouble area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n\t\treturn area;\n\t}\n\treturn -1;", "\tif(a + b > c\
    \ && a + c > b && b + c > a)\n\t\treturn sqrt(4*a*a*b*b - (a*a + b*b - c*c)*(a*a\
    \ + b*b - c*c))/4;\n\telse\n\t\treturn -1;", "  float s = (a + b + c) / 2.0;\n\
    \  if (a + b > c && a + c > b && b + c > a) {\n    return std::sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n  }\n  return -1;", "    // Check if the 3 sides form\
    \ a valid triangle\n    bool valid_triangle = a + b > c && a + c > b && b + c\
    \ > a;\n    if (valid_triangle) {\n        // Calc s\n        float s = (a + b\
    \ + c) / 2.0;\n        // Calc the area\n        float area = sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n        // Round the result\n        area = round(area\
    \ * 100) / 100;\n        return area;\n    }\n    return -1;", "  // your code\
    \ here\n  return -1;"]
stop_tokens:
- "\n}"
