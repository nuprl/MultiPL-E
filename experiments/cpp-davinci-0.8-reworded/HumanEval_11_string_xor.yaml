name: HumanEval_11_string_xor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and\
  \ b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return\
  \ result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\"\
  )\nstd::string string_xor(std::string a, std::string b) {\n"
tests: "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
  111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\"\
  )) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n\
  }\n"
completions: ["    std::string result;\n    if(a.size()!=b.size())\n        return\
    \ result;\n    for(size_t i=0;i<a.size();i++)\n    {\n        result.push_back((a[i]-'0')^(b[i]-'0')+'0');\n\
    \    }\n    return result;", "    assert(a.size() == b.size());\n    std::string\
    \ c = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        c += (a[i] == b[i])\
    \ ? '0' : '1';\n    }\n    return c;", "  std::string result = \"\";\n  for (int\
    \ i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      result += '0';\n\
    \    } else {\n      result += '1';\n    }\n  }\n  return result;", "\tstd::string\
    \ res = \"\";\n\tassert(a.length() == b.length());\n\tfor (int i = 0; i < a.length();\
    \ i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tres.push_back('0');\n\t\t} else {\n\t\
    \t\tres.push_back('1');\n\t\t}\n\t}\n\treturn res;", "  // Your code here\n  std::string\
    \ ans = \"\";\n  for(int i = 0; i < a.length(); i++) {\n    if(a[i] == b[i]) {\n\
    \      ans += \"0\";\n    }\n    else {\n      ans += \"1\";\n    }\n  }\n  return\
    \ ans;", "    if(a.size() != b.size()) return \"\";\n\n    std::string res = \"\
    \";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n   \
    \         res += \"0\";\n        } else {\n            res += \"1\";\n       \
    \ }\n    }\n    return res;", "\t\n\tif(a.length()==0 || b.length()==0)\n\t\t\
    return \"\";\n\t\n\tstd::string result;\n\t\n\tint length = a.length() < b.length()\
    \ ? a.length() : b.length();\n\t\n\tfor(int i=0; i<length; i++)\n\t{\n\t\tresult\
    \ += a[i] == b[i] ? \"0\" : \"1\";\n\t}\n\t\n\treturn result;", "  int len1 =\
    \ a.length();\n  int len2 = b.length();\n  assert(len1 == len2);\n  std::string\
    \ ret = \"\";\n  for (int i = 0; i < len1; i++) {\n    if (a[i] == b[i]) {\n \
    \     ret += \"0\";\n    } else {\n      ret += \"1\";\n    }\n  }\n  return ret;",
  "    std::string result = \"\";\n    for(int i = 0; i < a.size(); i++)\n       \
    \ result += (a[i] != b[i]) ? '1' : '0';\n    return result;", "    std::string\
    \ res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i])\
    \ {\n            res += \"0\";\n        } else {\n            res += \"1\";\n\
    \        }\n    }\n    return res;", "\tassert(a.size() == b.size());\n\tstd::string\
    \ result;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tresult += ((a[i] - '0')\
    \ ^ (b[i] - '0')) + '0';\n\t}\n\treturn result;", "  string c=\"\";\n  int i=0;\n\
    \  while(i<a.length() && i<b.length()){\n    if(a[i]!=b[i]){\n      c+=\"1\";\n\
    \    }\n    else{\n      c+=\"0\";\n    }\n    i++;\n  }\n  if(i==a.length()){\n\
    \    for(int j=i;j<b.length();j++){\n      c+=b[j];\n    }\n  }\n  else{\n   \
    \ for(int j=i;j<a.length();j++){\n      c+=a[j];\n    }\n  }\n  return c;", " \
    \ std::string res = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i]\
    \ == b[i])\n      res += \"0\";\n    else\n      res += \"1\";\n  }\n  return\
    \ res;", "    string s = \"\";\n    for (int i = 0; i < a.size(); i++) {\n   \
    \     if (a[i] == b[i])\n            s += \"0\";\n        else\n            s\
    \ += \"1\";\n    }\n    return s;", "\tint n = a.size();\n\tint m = b.size();\n\
    \tstd::string ret(n, '0');\n\tfor (int i = 0; i < n; i++) {\n\t\tif (a[i] == b[i])\
    \ {\n\t\t\tret[i] = '0';\n\t\t} else {\n\t\t\tret[i] = '1';\n\t\t}\n\t}\n\treturn\
    \ ret;", "    assert(a.size() == b.size());\n    for (int i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            a[i] = '0';\n        } else\
    \ {\n            a[i] = '1';\n        }\n    }\n    return a;", "    std::string\
    \ result;\n    for (int i = 0; i < a.size(); i++) {\n        // A XOR B = C\n\
    \        // (a XOR b) XOR c = b\n        // b XOR (a XOR b) = c\n        result\
    \ += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;", "    std::string\
    \ s = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\
    \ {\n            s += \"0\";\n        } else {\n            s += \"1\";\n    \
    \    }\n    }\n    return s;", "    assert(a.size() == b.size());\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] ==\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;", "    assert(a.size() == b.size());\n\
    \    std::string result;\n    for (unsigned int i = 0; i < a.size(); i++) {\n\
    \        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n \
    \           result += '1';\n        }\n    }\n    return result;", "    std::string\
    \ c;\n    c.resize(a.size());\n    for (int i = 0; i < a.size(); i++) {\n    \
    \    c[i] = a[i] ^ b[i];\n    }\n    return c;", "  int i, j;\n  std::string res;\n\
    \  for (i = 0; i < a.length(); i++) {\n    if (a[i] == b[i]) {\n      res += '0';\n\
    \    } else {\n      res += '1';\n    }\n  }\n  return res;", "    assert(a.size()\
    \ == b.size());\n    std::string x;\n    int size = a.size();\n    for(int i =\
    \ 0; i < size; i++) {\n        if(a[i] == b[i])\n            x.push_back('0');\n\
    \        else\n            x.push_back('1');\n    }\n    return x;", "  assert(a.size()\
    \ == b.size());\n  std::string ret = \"\";\n  for (int i = 0; i < a.size(); i++)\
    \ {\n    if (a[i] == b[i]) {\n      ret.push_back('0');\n    } else {\n      ret.push_back('1');\n\
    \    }\n  }\n  return ret;", "\tstd::string res = \"\";\n\tfor (int i = 0; i <\
    \ (int)a.size(); i++) {\n\t\tif (a[i] == b[i])\n\t\t\tres += \"0\";\n\t\telse\n\
    \t\t\tres += \"1\";\n\t}\n\treturn res;", "\tstd::string result = \"\";\n\tfor\
    \ (int i = 0; i < a.size(); i++) {\n\t\t//convert current character to integer\n\
    \t\tint x = a[i] - '0';\n\t\tint y = b[i] - '0';\n\t\t//find xor\n\t\tint res\
    \ = x ^ y;\n\t\tresult += std::to_string(res);\n\t}\n\treturn result;", "  std::string\
    \ res = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n\
    \      res += \"0\";\n    else\n      res += \"1\";\n  }\n  return res;", "  string\
    \ c = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    int x = a[i] - '0';\n\
    \    int y = b[i] - '0';\n    if (x ^ y) {\n      c += \"1\";\n    } else {\n\
    \      c += \"0\";\n    }\n  }\n  return c;", "    \n    std::string res;\n  \
    \  if(a.length()!=b.length())\n        return res;\n    \n    for(int i=0;i<a.length();i++)\n\
    \    {\n        if(a[i]!=b[i])\n            res.push_back('1');\n        else\n\
    \            res.push_back('0');\n    }\n    return res;", "    // your code goes\
    \ here\n    int diff = abs(int(a.size() - b.size()));\n    std::string res = \"\
    \";\n    for(int i = 0; i < diff; i++)\n        res += \"0\";\n    if(a.size()\
    \ < b.size())\n        a = res + a;\n    else if(a.size() > b.size())\n      \
    \  b = res + b;\n    for(int i = 0; i < a.size(); i++)\n    {\n        if(a[i]\
    \ == b[i])\n            res += \"0\";\n        else res += \"1\";\n    }\n   \
    \ return res;", "\tstd::string ans = \"\";\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tif (a[i] == b[i]) {\n\t\t\tans += '0';\n\t\t}\n\t\telse {\n\t\t\tans\
    \ += '1';\n\t\t}\n\t}\n\treturn ans;", "    std::string ans = \"\";\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        ans += (a[i] == b[i]) ? '0' : '1';\n  \
    \  }\n    return ans;", "    std::string res;\n    int i=0;\n    while(i<a.length()&&i<b.length()){\n\
    \        if(a[i]==b[i])\n            res+=\"0\";\n        else\n            res+=\"\
    1\";\n        i++;\n    }\n    return res;", "\tstd::string result = \"\";\n\t\
    int length = a.length();\n\tfor (int i = 0; i < length; i++) {\n\t\tif (a[i] ==\
    \ b[i]) {\n\t\t\tresult += \"0\";\n\t\t} else {\n\t\t\tresult += \"1\";\n\t\t\
    }\n\t}\n\treturn result;", "    assert(a.size() == b.size());\n    std::string\
    \ res;\n    for (size_t i = 0; i < a.size(); i++) {\n        res += a[i] == b[i]\
    \ ? '0' : '1';\n    }\n    return res;", "  std::string result = \"\";\n  for\
    \ (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n      result += '0';\n\
    \    else\n      result += '1';\n  }\n  return result;", "\tstd::string result;\n\
    \tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tresult\
    \ += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;",
  "    std::string result;\n    std::transform(a.begin(), a.end(), b.begin(),\n  \
    \      std::back_inserter(result), std::bit_xor<char>());\n    return result;",
  "  std::string result = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i]\
    \ == b[i])\n      result += '0';\n    else\n      result += '1';\n  }\n  return\
    \ result;", "    // return std::bitset<8>(a).to_string() ^ std::bitset<8>(b).to_string();\n\
    \    std::string res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n     \
    \   if (a[i] == b[i]) {\n            res.push_back('0');\n        } else {\n \
    \           res.push_back('1');\n        }\n    }\n    return res;", "    assert(a.size()\
    \ == b.size());\n    std::string result;\n    for (int i = 0; i < a.size(); i++)\
    \ {\n        if (a[i] == b[i])\n            result += '0';\n        else\n   \
    \         result += '1';\n    }\n    return result;", "    std::string out;\n\
    \    for(int i=0;i<a.size();i++){\n        if(a[i]==b[i]){\n            out+=\"\
    0\";\n        }\n        else{\n            out+=\"1\";\n        }\n    }\n  \
    \  return out;", "  int xorRes;\n  std::string res=\"\";\n  assert(a.length()==b.length());\n\
    \  for(int i=0;i<a.length();i++){\n    xorRes = a[i]^b[i];\n    if(xorRes==1)\n\
    \      res += \"1\";\n    else\n      res += \"0\";\n  }\n  return res;", "  std::string\
    \ result = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\
    \ {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;", "    int i,n;\n    string s=\"\";\n    n=a.length();\n    for(i=0;i<n;i++)\n\
    \    {\n        if(a[i]==b[i])\n            s+=\"0\";\n        else\n        \
    \    s+=\"1\";\n    }\n    return s;", "  std::string ans = \"\";\n  for (size_t\
    \ i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      ans += \"0\";\n\
    \    } else {\n      ans += \"1\";\n    }\n  }\n  return ans;", "  if (a.length()\
    \ != b.length()) {\n    return \"\";\n  }\n  std::string s = \"\";\n  for (size_t\
    \ i = 0; i < a.length(); i++) {\n    if (a[i] == b[i]) {\n      s += \"0\";\n\
    \    } else {\n      s += \"1\";\n    }\n  }\n  return s;", "\tstd::string result;\n\
    \tfor (size_t i = 0; i < a.size(); i++) {\n\t\tresult += (a[i] == b[i]) ? '0'\
    \ : '1';\n\t}\n\treturn result;", "  \n  std::string result;\n  for(int i = 0;\
    \ i < a.size(); i++) {\n    if(a[i] == b[i])\n      result += '0';\n    else\n\
    \      result += '1';\n  }\n  return result;", "    std::string res=\"\";\n  \
    \  assert(a.length()==b.length());\n    for(int i=0;i<a.length();i++){\n     \
    \   if(a[i]==b[i]){\n            res+=\"0\";\n        }\n        else{\n     \
    \       res+=\"1\";\n        }\n    }\n    return res;", "    std::string res;\n\
    \    for(int i=0;i<a.size();i++){\n        if(a[i]==b[i])\n            res+='0';\n\
    \        else\n            res+='1';\n    }\n    return res;", "  int a_length\
    \ = a.length();\n  int b_length = b.length();\n  assert(a_length == b_length);\n\
    \  std::string xor_value;\n  for (int i = 0; i < a_length; i++) {\n    if (a[i]\
    \ == b[i])\n      xor_value += \"0\";\n    else\n      xor_value += \"1\";\n \
    \ }\n  return xor_value;", "    // your code goes here\n    std::string ans;\n\
    \    for(int i=0;i<a.length();i++){\n        int x = a[i]-'0';\n        int y\
    \ = b[i]-'0';\n        if(x == y){\n            ans.push_back('0');\n        }else{\n\
    \            ans.push_back('1');\n        }\n    }\n    return ans;", "  std::string\
    \ result = \"\";\n  for (unsigned i = 0; i < a.size(); i++) {\n    result += ((a[i]\
    \ - '0') ^ (b[i] - '0')) + '0';\n  }\n  return result;", "    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;", "\tint len_a = a.length();\n\tint len_b\
    \ = b.length();\n\tif (len_a != len_b) {\n\t\tprintf(\"Different lengths of a\
    \ and b\");\n\t\treturn \"\";\n\t}\n\telse {\n\t\tstd::string res = \"\";\n\t\t\
    for (int i = 0; i < len_a; i++) {\n\t\t\tif (a[i] == b[i]) {\n\t\t\t\tres += \"\
    0\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += \"1\";\n\t\t\t}\n\t\t}\n\t\treturn\
    \ res;\n\t}", "    std::string ans = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            ans += '0';\n        } else\
    \ {\n            ans += '1';\n        }\n    }\n    return ans;", "    assert(a.size()\
    \ == b.size());\n    std::string result;\n    for (size_t i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            result += '0';\n        } else\
    \ {\n            result += '1';\n        }\n    }\n    return result;", "    assert(a.size()\
    \ == b.size());\n    int n = a.size();\n    std::string c;\n    for(int i = 0;\
    \ i < n; i++) {\n        if(a[i] == b[i])\n            c.push_back('0');\n   \
    \     else\n            c.push_back('1');\n    }\n    return c;", "    // your\
    \ code goes here\n    std::string result = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        }\
    \ else {\n            result += \"1\";\n        }\n    }\n    return result;",
  "  std::string result = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i]\
    \ == b[i])\n      result += '0';\n    else\n      result += '1';\n  }\n  return\
    \ result;", "    std::string res;\n    if(a.size() < b.size()) {\n        std::swap(a,\
    \ b);\n    }\n    int n = a.size();\n    int m = b.size();\n    std::reverse(a.begin(),\
    \ a.end());\n    std::reverse(b.begin(), b.end());\n    for(int i = 0; i < n;\
    \ i++) {\n        if(i < m) {\n            res += (a[i] == b[i]) ? '0' : '1';\n\
    \        } else {\n            res += a[i];\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "  std::string result;\n  for (int i = 0; i <\
    \ a.size(); i++) {\n    result += (a[i] == b[i]) ? '0' : '1';\n  }\n  return result;",
  "    assert(a.size() == b.size());\n    std::string res;\n    for (int i = 0; i\
    \ < a.size(); i++) {\n        int a_int = a[i] - '0';\n        int b_int = b[i]\
    \ - '0';\n        res += std::to_string(a_int ^ b_int);\n    }\n    return res;",
  "    std::string res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ res += (a[i] == b[i]) ? '0' : '1';\n    }\n    return res;", "  std::string\
    \ result;\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n \
    \     result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return\
    \ result;", "  std::string s = \"\";\n  for (int i = 0; i < a.size(); i++) {\n\
    \    if (a[i] == b[i])\n      s += '0';\n    else\n      s += '1';\n  }\n  return\
    \ s;", "  std::string ans;\n  int n = a.size();\n  int m = b.size();\n  if (n\
    \ < m) {\n    return string_xor(b, a);\n  }\n  int carry = 0;\n  for (int i =\
    \ 0; i < n; i++) {\n    int s = a[n - i - 1] - '0';\n    int b = i < m ? b[m -\
    \ i - 1] - '0' : 0;\n    ans += '0' + (s ^ b ^ carry);\n    carry = (s & b) |\
    \ (s & carry) | (b & carry);\n  }\n  if (carry) {\n    ans += '0' + carry;\n \
    \ }\n  std::reverse(ans.begin(), ans.end());\n  return ans;", "    std::string\
    \ result = \"\";\n    int length = a.length();\n    for (int i = 0; i < length;\
    \ i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        }\
    \ else {\n            result += \"1\";\n        }\n    }\n    return result;",
  "  std::string result;\n  for (std::size_t i = 0; i < a.size(); i++) {\n    result\
    \ += (a[i] == b[i]) ? \"0\" : \"1\";\n  }\n  return result;", "    assert(a.size()\
    \ == b.size());\n    std::string c;\n    for (unsigned i = 0; i < a.size(); i++)\
    \ {\n        if (a[i] == b[i]) {\n            c += '0';\n        } else {\n  \
    \          c += '1';\n        }\n    }\n    return c;", "\tint n= a.length();\n\
    \tint m= b.length();\n\tstring res=\"\";\n\tfor(int i=0;i<n;i++){\n\t\tif(a[i]==b[i]){\n\
    \t\t\tres+= '0';\n\t\t}\n\t\telse{\n\t\t\tres+= '1';\n\t\t}\n\t}\n\treturn res;",
  "  int min_len = std::min(a.length(), b.length());\n  std::string result = \"\"\
    ;\n  for (int i = 0; i < min_len; i++) {\n    if (a[i] == b[i]) {\n      result\
    \ += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n  return result;",
  "  std::string result = \"\";\n  std::string::size_type a_len = a.length();\n  std::string::size_type\
    \ b_len = b.length();\n  for (int i = 0; i < a_len; i++) {\n    if (a[i] == b[i])\
    \ {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n  }\n\
    \  return result;", "  assert(a.size() == b.size());\n  std::string result;\n\
    \  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n      result +=\
    \ '0';\n    else\n      result += '1';\n  }\n  return result;", "    std::string\
    \ result = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] ==\
    \ b[i]) {\n            result += \"0\";\n        } else {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;", "\t// your code here\n\tstd::string\
    \ result;\n\tstd::string::iterator it1, it2;\n\tfor (it1 = a.begin(), it2 = b.begin();\
    \ it1 != a.end(), it2 != b.end(); it1++, it2++) {\n\t\tif (*it1 == *it2) {\n\t\
    \t\tresult += \"0\";\n\t\t}\n\t\telse {\n\t\t\tresult += \"1\";\n\t\t}\n\t}\n\t\
    return result;", "  std::string ret = \"\";\n  for (int i = 0; i < a.size(); i++)\
    \ {\n    ret += (a[i] ^ b[i]) + '0';\n  }\n  return ret;", "\tstd::string result;\n\
    \tint carry = 0;\n\tint rem;\n\twhile (a.length() > 0 || b.length() > 0) {\n\t\
    \tint sum = carry;\n\t\tcarry = 0;\n\t\tif (a.length() > 0) {\n\t\t\tsum += int(a[a.length()\
    \ - 1]) - 48;\n\t\t\ta.pop_back();\n\t\t}\n\t\tif (b.length() > 0) {\n\t\t\tsum\
    \ += int(b[b.length() - 1]) - 48;\n\t\t\tb.pop_back();\n\t\t}\n\t\tif (sum ==\
    \ 2) {\n\t\t\tcarry = 1;\n\t\t\trem = 0;\n\t\t}\n\t\telse if (sum == 3) {\n\t\t\
    \tcarry = 1;\n\t\t\trem = 1;\n\t\t}\n\t\telse {\n\t\t\trem = sum;\n\t\t}\n\t\t\
    result.insert(result.begin(), char(rem + 48));\n\t}\n\tif (carry > 0) {\n\t\t\
    result.insert(result.begin(), char(carry + 48));\n\t}\n\treturn result;", "  std::stringstream\
    \ ss;\n  for (size_t i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n    \
    \  ss << \"0\";\n    else\n      ss << \"1\";\n  }\n  return ss.str();", "   \
    \ std::string c;\n    c.resize(a.size());\n    for (size_t i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            c[i] = '0';\n        } else\
    \ {\n            c[i] = '1';\n        }\n    }\n    return c;", "    if(a.size()\
    \ != b.size())\n        return \"0\";\n    else {\n        std::string res = \"\
    \";\n        for(int i = 0; i < a.size(); i++) {\n            if(a[i] == b[i])\n\
    \                res += \"0\";\n            else\n                res += \"1\"\
    ;\n        }\n        return res;\n    }", '    return std::bitset<6>(std::bitset<6>(a).to_ulong()
    ^ std::bitset<6>(b).to_ulong()).to_string();', "\tstd::string res = \"\";\n\t\
    for (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i])\n\t\t\tres += \"0\"\
    ;\n\t\telse\n\t\t\tres += \"1\";\n\t}\n\treturn res;", "  if (a.length() != b.length())\
    \ return \"\";\n  std::string res = \"\";\n  for (int i = 0; i < a.length(); i++)\
    \ {\n    if (a[i] == b[i]) res += \"0\";\n    else res += \"1\";\n  }\n  return\
    \ res;", "    assert(a.size() == b.size());\n    for (int i = 0; i < a.size();\
    \ i++) {\n        if (a[i] == b[i]) {\n            a[i] = '0';\n        } else\
    \ {\n            a[i] = '1';\n        }\n    }\n    return a;", "    std::string\
    \ s = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\
    \ {\n            s += \"0\";\n        } else {\n            s += \"1\";\n    \
    \    }\n    }\n    return s;", "\tint n = a.size();\n\tint m = b.size();\n\tstring\
    \ ans;\n\tint i = 0;\n\twhile (i < n && i < m) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tans += '0';\n\t\t} else {\n\t\t\tans += '1';\n\t\t}\n\t\ti++;\n\t}\n\twhile\
    \ (i < n) {\n\t\tans += a[i];\n\t\ti++;\n\t}\n\twhile (i < m) {\n\t\tans += b[i];\n\
    \t\ti++;\n\t}\n\treturn ans;", "\t// Write your code here\n\tint i, j, m, n, k,\
    \ l;\n\tint f = 0;\n\tchar temp;\n\tstd::string res = \"\";\n\tif (a.length()\
    \ < b.length()) {\n\t\ttemp = a[0];\n\t\ta[0] = b[0];\n\t\tb[0] = temp;\n\t\t\
    f = 1;\n\t}\n\tm = a.length();\n\tn = b.length();\n\tj = n - 1;\n\tfor (i = m\
    \ - 1; i >= 0; i--) {\n\t\tif (a[i] == '1' && b[j] == '1') {\n\t\t\tres = res\
    \ + '0';\n\t\t}\n\t\telse if (a[i] == '0' && b[j] == '0') {\n\t\t\tres = res +\
    \ '0';\n\t\t}\n\t\telse {\n\t\t\tres = res + '1';\n\t\t}\n\t\tj--;\n\t}\n\tif\
    \ (f == 1) {\n\t\ttemp = a[0];\n\t\ta[0] = b[0];\n\t\tb[0] = temp;\n\t}\n\tl =\
    \ res.length();\n\tfor (i = 0; i < l / 2; i++) {\n\t\ttemp = res[i];\n\t\tres[i]\
    \ = res[l - i - 1];\n\t\tres[l - i - 1] = temp;\n\t}\n\treturn res;", "    std::string\
    \ res = \"\";\n    int l1 = a.length();\n    int l2 = b.length();\n    int l =\
    \ std::max(l1, l2);\n    int i;\n    for(i = 0; i < l; i++) {\n        if(a[i]\
    \ == b[i]) {\n            res += \"0\";\n        }\n        else {\n         \
    \   res += \"1\";\n        }\n    }\n    return res;", "\tassert(a.size() == b.size());\n\
    \tstd::string output(a.size(), ' ');\n\tfor (int i = 0; i < a.size(); i++) {\n\
    \t\tassert(a[i] == '0' || a[i] == '1');\n\t\tassert(b[i] == '0' || b[i] == '1');\n\
    \t\tif (a[i] == b[i]) {\n\t\t\toutput[i] = '0';\n\t\t} else {\n\t\t\toutput[i]\
    \ = '1';\n\t\t}\n\t}\n\treturn output;", "    assert(a.size() == b.size());\n\
    \    std::string res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n     \
    \   if (a[i] == b[i]) {\n            res += \"0\";\n        } else {\n       \
    \     res += \"1\";\n        }\n    }\n    return res;", "\t// your code goes\
    \ here\n\t//using namespace std;\n\tstring str;\n\tfor (int i = 0; i < a.length();\
    \ i++)\n\t{\n\t\tif (a[i] == b[i])\n\t\t\tstr += \"0\";\n\t\telse\n\t\t\tstr +=\
    \ \"1\";\n\t}\n\treturn str;", "    std::string res;\n    int n = a.size();\n\
    \    assert(n == b.size());\n    for (int i = 0; i < n; i++) {\n        if (a[i]\
    \ == b[i])\n            res += '0';\n        else\n            res += '1';\n \
    \   }\n    return res;", "    std::string result;\n    assert(a.size() == b.size());\n\
    \    for (size_t i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n  \
    \          result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;", "  int len_a = a.length();\n  int len_b\
    \ = b.length();\n  assert(len_a == len_b);\n  std::string xor_result = \"\";\n\
    \  for (int i = 0; i < len_a; i++) {\n    if (a[i] == b[i]) {\n      xor_result\
    \ += \"0\";\n    } else {\n      xor_result += \"1\";\n    }\n  }\n  return xor_result;",
  "\tstd::string result;\n\tint len = a.length();\n\tint i = 0;\n\twhile (i < len)\
    \ {\n\t\tint c = ((a[i] - '0') ^ (b[i] - '0')) + '0';\n\t\tresult.push_back(c);\n\
    \t\ti++;\n\t}\n\treturn result;", "    std::string result = \"\";\n    for(int\
    \ i = 0; i < a.size(); i++) result += (a[i] == b[i]) ? '0' : '1';\n    return\
    \ result;", "    assert(a.size() == b.size());\n    std::string x;\n    for (size_t\
    \ i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            x += \"\
    0\";\n        } else {\n            x += \"1\";\n        }\n    }\n    return\
    \ x;", "    int la = a.length();\n    int lb = b.length();\n    if(la != lb) {\n\
    \        if(la > lb) {\n            for(int i = lb; i < la; i++) {\n         \
    \       b = '0' + b;\n            }\n        } else {\n            for(int i =\
    \ la; i < lb; i++) {\n                a = '0' + a;\n            }\n        }\n\
    \    }\n    int l = a.length();\n    std::string c = \"\";\n    for(int i = 0;\
    \ i < l; i++) {\n        if(a[i] == b[i]) {\n            c += '0';\n        }\
    \ else {\n            c += '1';\n        }\n    }\n    return c;", "    std::string\
    \ res;\n    for(int i=0;i<a.size();i++){\n        if(a[i]==b[i]){\n          \
    \  res.push_back('0');\n        }\n        else{\n            res.push_back('1');\n\
    \        }\n    }\n    return res;", "    int len = a.length();\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < len; i++) {\n        if (a[i] == b[i])\
    \ {\n            result += \"0\";\n        } else {\n            result += \"\
    1\";\n        }\n    }\n    return result;", "\tstd::string r = \"\";\n\tfor (int\
    \ i = 0; i < a.length(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tr.append(\"0\"\
    );\n\t\t} else {\n\t\t\tr.append(\"1\");\n\t\t}\n\t}\n\treturn r;", "    std::string\
    \ res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i])\n\
    \            res.push_back('0');\n        else\n            res.push_back('1');\n\
    \    }\n    return res;", "    // TODO: Implement the function.\n    assert(a.length()\
    \ == b.length());\n    std::string res = \"\";\n    int i = 0;\n    while(i <\
    \ a.length()) {\n        if(a[i] == b[i])\n            res += \"0\";\n       \
    \ else\n            res += \"1\";\n        i++;\n    }\n    return res;", "  \
    \  assert(a.size() == b.size());\n    std::string result = \"\";\n    for (unsigned\
    \ i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            result\
    \ += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n\
    \    return result;", "\t// your code here\n\tstd::string result;\n\tif (a.length()\
    \ == b.length()) {\n\t\tfor (int i = 0; i < a.length(); i++) {\n\t\t\tif (a[i]\
    \ == b[i]) {\n\t\t\t\tresult.push_back('0');\n\t\t\t}\n\t\t\telse if (a[i] !=\
    \ b[i]) {\n\t\t\t\tresult.push_back('1');\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
  "  assert(a.size() == b.size());\n  std::string res = \"\";\n  for (int i = 0; i\
    \ < a.size(); i++) {\n    if (a[i] == b[i]) {\n      res += \"0\";\n    } else\
    \ {\n      res += \"1\";\n    }\n  }\n  return res;", "    std::string res=\"\"\
    ;\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            res=res+\"\
    0\";\n        else\n            res=res+\"1\";\n    }\n    return res;", "\tint\
    \ len = a.length();\n\tstd::string result = \"\";\n\tfor (int i = 0; i < len;\
    \ i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tresult.push_back('0');\n\t\t} else {\n\
    \t\t\tresult.push_back('1');\n\t\t}\n\t}\n\treturn result;", "    assert(a.size()\
    \ == b.size());\n    std::string result(a.size(), ' ');\n    for (int i = 0; i\
    \ < a.size(); i++) {\n        if ((a[i] - '0') ^ (b[i] - '0')) {\n           \
    \ result[i] = '1';\n        } else {\n            result[i] = '0';\n        }\n\
    \    }\n    return result;", "    std::string res = \"\";\n    for (int i = 0;\
    \ i < a.size(); i++) {\n        res += (a[i] == b[i]) ? '0' : '1';\n    }\n  \
    \  return res;", "    std::stringstream result;\n    for (int i = 0; i < a.size();\
    \ i++) {\n        result << (a[i] == b[i] ? 0 : 1);\n    }\n    return result.str();",
  "\tstd::string result;\n\tint num1, num2;\n\tfor (int i = 0; i < a.length(); i++)\
    \ {\n\t\tnum1 = a[i] - '0';\n\t\tnum2 = b[i] - '0';\n\t\tif (num1 == num2) {\n\
    \t\t\tresult.push_back('0');\n\t\t}\n\t\telse {\n\t\t\tresult.push_back('1');\n\
    \t\t}\n\t}\n\treturn result;", "    int size = std::max(a.size(), b.size());\n\
    \    std::string result;\n    for (int i = 0; i < size; i++) {\n        bool aa\
    \ = false, bb = false;\n        if (i < a.size()) aa = a[i] == '1';\n        if\
    \ (i < b.size()) bb = b[i] == '1';\n        if (aa && bb) result += '0';\n   \
    \     else if (aa || bb) result += '1';\n        else result += '0';\n    }\n\
    \    return result;", "    assert(a.size() == b.size());\n    std::string result\
    \ = \"\";\n    for (std::size_t i = 0; i < a.size(); i++) {\n        result +=\
    \ (a[i] == b[i]) ? \"0\" : \"1\";\n    }\n    return result;", "  assert(a.size()\
    \ == b.size());\n  std::string result;\n  for (size_t i = 0; i < a.size(); i++)\
    \ {\n    result += (a[i] == b[i]) ? '0' : '1';\n  }\n  return result;", "    int\
    \ len = a.length();\n    assert(b.length() == len);\n    std::string ans = \"\"\
    ;\n    for (int i = 0; i < len; i++) {\n        if (a[i] == b[i]) {\n        \
    \    ans.push_back('0');\n        } else {\n            ans.push_back('1');\n\
    \        }\n    }\n    return ans;", "    std::string result = \"\"; \n    for\
    \ (int i = 0; i < a.size(); i++) \n    { \n        // if both characters are same,\
    \ append 0 \n        // in the resultant string \n        if (a[i] == b[i]) \n\
    \            result += \"0\"; \n  \n        // else append 1 \n        else\n\
    \            result += \"1\"; \n    } \n    return result; ", "    if(a.size()\
    \ != b.size()) return NULL;\n    std::string c;\n    for(int i = 0; i < a.size();\
    \ i++) {\n        if(a[i] == b[i]) {\n            c.push_back('0');\n        }\
    \ else {\n            c.push_back('1');\n        }\n    }\n    return c;", "\t\
    int len = std::max(a.length(), b.length());\n\tstd::string c;\n\tfor (int i =\
    \ 0; i < len; i++) {\n\t\tint x = 0, y = 0;\n\t\tif (i < a.length()) {\n\t\t\t\
    x = a[i] - '0';\n\t\t}\n\t\tif (i < b.length()) {\n\t\t\ty = b[i] - '0';\n\t\t\
    }\n\t\tif (x != y) {\n\t\t\tc += '1';\n\t\t} else {\n\t\t\tc += '0';\n\t\t}\n\t\
    }\n\treturn c;", "  std::string result = \"\";\n  for (int i = 0; i < a.size();\
    \ i++) {\n    result += std::to_string(a[i] ^ b[i]);\n  }\n  return result;",
  "    std::string res = \"\";\n    for (int i = 0; i < a.size(); i++)\n        res\
    \ += ((a[i] - '0') ^ (b[i] - '0')) + '0';\n    return res;", "    int x = a.length();\n\
    \    int y = b.length();\n    int c = 0;\n    int f = 0;\n    int p = 0;\n   \
    \ if(x != y) {\n        if(x > y) {\n            p = x-y;\n            for(int\
    \ j = 0; j < p; j++) {\n                b = '0' + b;\n            }\n        }\n\
    \        else {\n            p = y-x;\n            for(int k = 0; k < p; k++)\
    \ {\n                a = '0' + a;\n            }\n        }\n    }\n    std::string\
    \ res;\n    int j = a.length()-1;\n    while(j >= 0) {\n        int z = a[j] -\
    \ '0';\n        int w = b[j] - '0';\n        if(z == w) {\n            if(z ==\
    \ 1) {\n                if(c == 1) {\n                    res = \"1\" + res;\n\
    \                    c = 1;\n                }\n                else {\n     \
    \               res = \"0\" + res;\n                    c = 0;\n             \
    \   }\n            }\n            else {\n                if(c == 1) {\n     \
    \               res = \"1\" + res;\n                    c = 0;\n             \
    \   }\n                else {\n                    res = \"0\" + res;\n      \
    \              c = 0;\n                }\n            }\n        }\n        else\
    \ {\n            if(c == 1) {\n                res = \"0\" + res;\n          \
    \      c = 1;\n            }\n            else {\n                res = \"1\"\
    \ + res;\n                c = 0;\n            }\n        }\n        j--;\n   \
    \ }\n    if(c == 1) {\n        res = \"1\" + res;\n    }\n    return res;", " \
    \ // your code goes here\n  std::string result;\n  if(a.length() != b.length())\n\
    \  {\n    return result;\n  }\n  int n = a.length();\n  for(int i = 0; i < n;\
    \ i++)\n  {\n    result += ((a[i] - '0') ^ (b[i] - '0')) + '0';\n  }\n  return\
    \ result;", "  std::string result = \"\";\n  for (unsigned int i = 0; i < a.size();\
    \ i++) {\n    if (a[i] == b[i])\n      result += '0';\n    else\n      result\
    \ += '1';\n  }\n  return result;", "  std::string result = \"\";\n  for (int i\
    \ = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n      result += '0';\n   \
    \ else\n      result += '1';\n  }\n  return result;", "    assert(a.size() ==\
    \ b.size());\n    std::string result = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        if ((a[i] == '0' && b[i] == '0') || (a[i] == '1' && b[i] ==\
    \ '1')) {\n            result += '0';\n        } else {\n            result +=\
    \ '1';\n        }\n    }\n    return result;", "  std::string ans;\n  for (size_t\
    \ i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      ans += '0';\n  \
    \  } else {\n      ans += '1';\n    }\n  }\n  return ans;", "\tint n = a.size();\n\
    \tstd::string ans;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (a[i] == b[i]) {\n\
    \t\t\tans.push_back('0');\n\t\t} else {\n\t\t\tans.push_back('1');\n\t\t}\n\t\
    }\n\treturn ans;", "\tassert(a.size() == b.size());\n\tstd::string result;\n\t\
    for (unsigned int i = 0; i < a.size(); i++) {\n\t\tresult += (a[i] == b[i]) ?\
    \ \"0\" : \"1\";\n\t}\n\treturn result;", "  int n = a.size();\n  int m = b.size();\n\
    \  std::string retval;\n  for (int i = 0; i < n; i++) {\n    if (a[i] == b[i])\n\
    \      retval += '0';\n    else\n      retval += '1';\n  }\n  return retval;",
  "  std::string res = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    res += std::to_string((a[i]\
    \ - '0') ^ (b[i] - '0'));\n  }\n  return res;", "  std::string c;\n  for (int\
    \ i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      c.push_back('0');\n\
    \    } else {\n      c.push_back('1');\n    }\n  }\n  return c;", "\tstd::string\
    \ res;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tres += (a[i] ^ b[i]) + '0';\n\
    \t}\n\treturn res;", "    string res;\n    for(int i=0;i<a.size();i++){\n    \
    \    if(a[i] == b[i]) res.push_back('0');\n        else res.push_back('1');\n\
    \    }\n    return res;", "    int s = a.size();\n    std::string c = a;\n   \
    \ for (int i = 0; i < s; i++) {\n        if (a[i] == b[i]) {\n            c[i]\
    \ = '0';\n        } else {\n            c[i] = '1';\n        }\n    }\n    return\
    \ c;", "  std::string result;\n  for (int i = 0; i < a.size(); i++) {\n    result.push_back(a[i]\
    \ == b[i] ? '0' : '1');\n  }\n  return result;", "    std::string answer = \"\"\
    ;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n   \
    \         answer += \"0\";\n        } else {\n            answer += \"1\";\n \
    \       }\n    }\n    return answer;", "    std::string result = \"\"; \n    for\
    \ (int i = 0; i < a.size(); i++) \n    { \n        // if both the strings have\
    \ same \n        // character at same index \n        // then character will be\
    \ 0 in result \n        if (a[i] == b[i]) \n            result.push_back('0');\
    \ \n  \n        // if both the strings have different \n        // character at\
    \ same index then character \n        // will be 1 in result \n        else\n\
    \            result.push_back('1'); \n    } \n    return result; ", "    std::string\
    \ result = \"\"; \n    for (int i = 0; i < a.size(); i++) \n    { \n        //\
    \ XOR the current bits \n        if (a[i] == b[i]) \n            result += '0';\
    \ \n        else\n            result += '1'; \n    } \n    return result; ", " \
    \   std::string x=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]!=b[i]){\n\
    \            x+=\"1\";\n        }\n        else\n        {\n            x+=\"\
    0\";\n        }\n    }\n    return x;", "    // your code here\n    int i, j;\n\
    \    std::string str = \"\";\n    for(i = 0; i < a.length(); i++)\n    {\n   \
    \     if(a[i] == b[i])\n            str += \"0\";\n        else\n            str\
    \ += \"1\";\n    }\n    return str;", "    std::string result = \"\";\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n            result\
    \ += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n\
    \    return result;", "  std::string s = \"\";\n    for(int i = 0; i < a.size();\
    \ i++) {\n        if(a[i] == b[i])\n            s += \"0\";\n        else\n  \
    \          s += \"1\";\n    }\n    return s;", "    \n    std::string x;\n   \
    \ assert(a.length() == b.length());\n    for(int i = 0; i < a.length(); i++)\n\
    \    {\n        if(a[i] != b[i])\n        {\n            x.push_back('1');\n \
    \       }\n        else\n        {\n            x.push_back('0');\n        }\n\
    \    }\n    return x;", "  std::string result;\n  int n = a.size();\n  int m =\
    \ b.size();\n  // in every step we XOR current bits of a and b to get the current\
    \ bit of\n  // answer.\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j\
    \ < m; j++) {\n      if (a[i] == b[j])\n        result.push_back('0');\n     \
    \ else\n        result.push_back('1');\n    }\n  }\n  return result;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i])\n\
    \            ans += '0';\n        else\n            ans += '1';\n    }\n    return\
    \ ans;", "  if (a.size() != b.size()) {\n    throw std::length_error(\"string_xor:\
    \ size of a is not equal to size of b\");\n  }\n  std::string output;\n  for (size_t\
    \ i = 0; i < a.size(); i++) {\n    output += a[i] ^ b[i];\n  }\n  return output;",
  "  assert(a.size() == b.size());\n  std::string res;\n  for (int i = 0; i < a.size();\
    \ i++) {\n    res += (a[i] != b[i]) ? '1' : '0';\n  }\n  return res;", "    //\
    \ your code goes here\n    std::string result = \"\";\n    assert(a.length() ==\
    \ b.length());\n    // bit length of a string must be equal to bit length of b\n\
    \    for (int i = 0; i < a.length(); i++) {\n        // XOR and append the result\n\
    \        result += ((a[i] - '0') ^ (b[i] - '0')) + '0';\n    }\n    return result;",
  "  // your code goes here\n  int n = a.length();\n  int m = b.length();\n  int length\
    \ = n > m ? n : m;\n  std::string str = \"\";\n  for(int i = 0; i < length; i++)\
    \ {\n    if((a[i] == '1' && b[i] == '0') || (a[i] == '0' && b[i] == '1')) {\n\
    \      str = str + \"1\";\n    }\n    else if((a[i] == '1' && b[i] == '1') ||\
    \ (a[i] == '0' && b[i] == '0')) {\n      str = str + \"0\";\n    }\n  }\n  return\
    \ str;", "    std::string result = \"\";\n    for(int i = 0; i < a.size(); i++)\
    \ {\n        if(a[i] == b[i]) {\n            result += \"0\";\n        } else\
    \ {\n            result += \"1\";\n        }\n    }\n    return result;", "  \
    \  std::string res = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ if (a[i] == b[i]) {\n            res += \"0\";\n        } else {\n         \
    \   res += \"1\";\n        }\n    }\n    return res;", "    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += \"0\";\n        } else {\n            result += \"1\";\n\
    \        }\n    }\n    return result;", "  // your code here\n  std::vector<int>\
    \ op_a;\n  std::vector<int> op_b;\n  for(char c : a)\n  {\n    op_a.push_back(c\
    \ - '0');\n  }\n  for(char c : b)\n  {\n    op_b.push_back(c - '0');\n  }\n  std::vector<int>\
    \ result;\n  result.resize(op_a.size());\n  std::transform(op_a.begin(), op_a.end(),\
    \ op_b.begin(), result.begin(), std::bit_xor<int>());\n  std::string res_str =\
    \ \"\";\n  for(int i = 0; i < result.size(); i++)\n  {\n    res_str += std::to_string(result[i]);\n\
    \  }\n  return res_str;", "  assert(a.size() == b.size());\n  size_t n = a.size();\n\
    \  std::string ans;\n  for (size_t i = 0; i < n; i++) {\n    ans += (a[i] == b[i])\
    \ ? '0' : '1';\n  }\n  return ans;", "  int i, j;\n  std::string res = \"\";\n\
    \  assert(a.length() == b.length());\n  for (i = 0; i < a.length(); i++) {\n \
    \   if (a[i] == b[i]) {\n      res += \"0\";\n    } else {\n      res += \"1\"\
    ;\n    }\n  }\n  return res;", "  std::string result = \"\";\n  for (int i = 0;\
    \ i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      result += '0';\n    } else\
    \ {\n      result += '1';\n    }\n  }\n  return result;", "    \n    //XOR Operation\n\
    \    string res = \"\";\n    for(int i = 0; i < a.length(); i++)\n    {\n    \
    \    if(a[i] == b[i])\n            res += \"0\";\n        else\n            res\
    \ += \"1\";\n    }\n    return res;", "    int la = a.length();\n    int lb =\
    \ b.length();\n    assert(la == lb);\n    int i;\n    std::string r = \"\";\n\
    \    for (i = 0; i < la; i++) {\n        if (a[i] == b[i])\n            r += \"\
    0\";\n        else\n            r += \"1\";\n    }\n    return r;", "    // your\
    \ code here\n    std::string str=\"\";\n    int length1 = a.length();\n    int\
    \ length2 = b.length();\n    int minlength = min(length1,length2);\n    //cout<<\"\
    hello world\"<<endl;\n    for(int i=0;i<minlength;i++){\n        if(a[i]==b[i])\n\
    \            str.push_back('0');\n        else\n            str.push_back('1');\n\
    \    }\n    if(length1<length2){\n        for(int i=minlength;i<length2;i++){\n\
    \            str.push_back(b[i]);\n        }\n    }\n    else{\n        for(int\
    \ i=minlength;i<length1;i++){\n            str.push_back(a[i]);\n        }\n \
    \   }\n    return str;", "\tstd::string c = \"\";\n\tfor (int i = 0; i < a.length();\
    \ i++) {\n\t\tc += std::to_string((a[i] - '0') ^ (b[i] - '0'));\n\t}\n\treturn\
    \ c;", "    assert(a.size() == b.size());\n    int len = a.size();\n    for(int\
    \ i = 0; i < len; i++) {\n        assert(a[i] == '0' || a[i] == '1');\n      \
    \  assert(b[i] == '0' || b[i] == '1');\n    }\n    int diff_bit = 0;\n    std::string\
    \ res = \"\";\n    for(int i = 0; i < len; i++) {\n        if(a[i] != b[i]) {\n\
    \            diff_bit++;\n            res += \"1\";\n        }\n        else\n\
    \            res += \"0\";\n    }\n    return res;", "\tstd::string s = \"\";\n\
    \tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\ts = s +\
    \ \"0\";\n\t\t}\n\t\telse {\n\t\t\ts = s + \"1\";\n\t\t}\n\t}\n\treturn s;", " \
    \ std::string result;\n  for (int i = 0; i < a.size(); i++) {\n    result.push_back(a[i]\
    \ == b[i] ? '0' : '1');\n  }\n  return result;", "    // Write your code here\n\
    \    int aLen = a.length();\n    int bLen = b.length();\n    assert(aLen == bLen);\n\
    \    std::string result = \"\";\n    for(int i = 0; i < aLen; i++) {\n       \
    \ if(a[i] == b[i]) {\n            result += \"0\";\n        } else {\n       \
    \     result += \"1\";\n        }\n    }\n    return result;", "    \n    int\
    \ a_size = a.size();\n    int b_size = b.size();\n    int diff_size = abs(a_size\
    \ - b_size);\n    std::string temp;\n    for(int i = 0; i < diff_size; i++) {\n\
    \        temp += \"0\";\n    }\n    if(a_size < b_size) {\n        a = temp +\
    \ a;\n    }\n    else {\n        b = temp + b;\n    }\n    std::string c;\n  \
    \  for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n         \
    \   c.push_back('0');\n        }\n        else {\n            c.push_back('1');\n\
    \        }\n    }\n    return c;", "  if (a.size() != b.size()) {\n    return\
    \ \"\";\n  }\n  std::string result = \"\";\n  for (int i = 0; i < a.size(); i++)\
    \ {\n    if (a[i] == b[i]) {\n      result.push_back('0');\n    } else {\n   \
    \   result.push_back('1');\n    }\n  }\n  return result;", "    int n = a.size();\n\
    \    int m = b.size();\n    assert(n == m);\n    std::string result(n, '0');\n\
    \    for (int i = 0; i < n; i++) {\n        if (a[i] == b[i]) {\n            result[i]\
    \ = '0';\n        } else {\n            result[i] = '1';\n        }\n    }\n \
    \   return result;", "    assert(a.size() == b.size());\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        int x = a[i] - '0';\n\
    \        int y = b[i] - '0';\n        res += (x ^ y) + '0';\n    }\n    return\
    \ res;", "    std::string s = \"\";\n    for(int i = 0; i < a.size(); i++) {\n\
    \        if(a[i] == b[i]) {\n            s = s + \"0\";\n        } else {\n  \
    \          s = s + \"1\";\n        }\n    }\n    return s;", "    std::string\
    \ str = \"\";\n    int i = 0;\n    while(i < a.length() || i < b.length()) {\n\
    \        if(i < a.length() && i < b.length()) {\n            if(a[i] == b[i])\n\
    \                str += \"0\";\n            else\n                str += \"1\"\
    ;\n        }\n        else if(i < a.length()) {\n            str += a[i];\n  \
    \      }\n        else {\n            str += b[i];\n        }\n        i++;\n\
    \    }\n    return str;", "\tassert(a.size() == b.size());\n\tstd::string result(a.size(),\
    \ ' ');\n\tfor (size_t i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i])\n\t\t\
    \tresult[i] = '0';\n\t\telse\n\t\t\tresult[i] = '1';\n\t}\n\treturn result;",
  "    int i, j;\n    std::string c = \"\";\n    int la = a.length();\n    int lb\
    \ = b.length();\n    for (i = 0; i < la; i++) {\n        for (j = 0; j < lb; j++)\
    \ {\n            if (a[i] == b[j]) {\n                c += \"0\";\n          \
    \  } else {\n                c += \"1\";\n            }\n        }\n    }\n  \
    \  return c;", "    std::string result = \"\";\n    int a_length = a.length();\n\
    \    int b_length = b.length();\n    int max = a_length > b_length ? a_length\
    \ : b_length;\n    std::cout << \"Max : \" << max << std::endl;\n    char a_char[a_length];\n\
    \    char b_char[b_length];\n    char result_char[max];\n    std::cout << \"a\
    \ length : \" << a_length << std::endl;\n    for (int i = 0; i < a_length; i++)\
    \ {\n        a_char[i] = a[i];\n    }\n    for (int i = 0; i < b_length; i++)\
    \ {\n        b_char[i] = b[i];\n    }\n    for (int i = 0; i < max; i++) {\n \
    \       std::cout << \"a : \" << a_char[i] << \" b : \" << b_char[i] << std::endl;\n\
    \        if (a_char[i] == b_char[i]) {\n            result_char[i] = '0';\n  \
    \      } else {\n            result_char[i] = '1';\n        }\n    }\n    result\
    \ = result_char;\n    std::cout << \"Result : \" << result << std::endl;\n   \
    \ return result;", "\tstd::string result;\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tif (a[i] == b[i]) {\n\t\t\tresult += '0';\n\t\t} else {\n\t\t\tresult\
    \ += '1';\n\t\t}\n\t}\n\treturn result;", "\treturn \"\";", "    // your code\
    \ goes here\n    std::string res = \"\";\n    for(int i = 0; i < a.length(); i++)\
    \ {\n        if(a[i] == b[i]) res += \"0\";\n        else res += \"1\";\n    }\n\
    \    return res;", "    int n = (int) a.size();\n    int m = (int) b.size();\n\
    \    assert(n == m);\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ n; i++) {\n        result.push_back(a[i] ^ b[i] + '0');\n    }\n    return result;",
  "  std::string xor_str;\n  for (int i = 0; i < a.length(); i++) {\n    xor_str +=\
    \ (a[i] == b[i]) ? '0' : '1';\n  }\n  return xor_str;", "    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result.push_back('0');\n        else\n            result.push_back('1');\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        if (a[i] == b[i]) {\n            result += '0';\n\
    \        } else {\n            result += '1';\n        }\n    }\n    return result;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i]\
    \ == b[i]) {\n\t\t\tresult += \"0\";\n\t\t} else {\n\t\t\tresult += \"1\";\n\t\
    \t}\n\t}\n\treturn result;", "  std::string result;\n  for (int i = 0; i < a.size();\
    \ i++) {\n    result += a[i] == b[i] ? '0' : '1';\n  }\n  return result;", " \
    \   int aLen = a.length();\n    int bLen = b.length();\n    std::string str =\
    \ \"\";\n    for(int i = 0; i < aLen || i < bLen; i++) {\n        char aChar =\
    \ '0';\n        char bChar = '0';\n        if(i < aLen) {\n            aChar =\
    \ a[i];\n        }\n        if(i < bLen) {\n            bChar = b[i];\n      \
    \  }\n        if(aChar == bChar) {\n            str += \"0\";\n        } else\
    \ {\n            str += \"1\";\n        }\n    }\n    return str;", "    \n  \
    \  std::string s = \"\";\n    int n = a.length();\n    for (int i = 0; i < n;\
    \ i++) {\n        if (a[i] == b[i])\n            s += \"0\";\n        else\n \
    \           s += \"1\";\n    }\n    return s;", "\tif (a.size() != b.size())\n\
    \t\treturn \"\";\n\tstd::string ret = \"\";\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tif (a[i] == b[i])\n\t\t\tret += \"0\";\n\t\telse\n\t\t\tret += \"1\"\
    ;\n\t}\n\treturn ret;", "    std::string res = \"\";\n    for (int i = 0; i <\
    \ a.size(); i++) {\n        int temp = (a[i] - '0') ^ (b[i] - '0');\n        res\
    \ += std::to_string(temp);\n    }\n    return res;", "   std::string out = \"\"\
    ;\n   for (int i = 0; i < a.size(); i++) {\n      if (a[i] == b[i]) {\n      \
    \   out += \"0\";\n      } else {\n         out += \"1\";\n      }\n   }\n   return\
    \ out;", "  // Your code here\n  int l = a.length();\n  std::string c = a;\n \
    \ for(int i=0;i<l;i++){\n    if(a[i]==b[i]){\n      c[i]='0';\n    }\n    else{\n\
    \      c[i]='1';\n    }\n  }\n  return c;", "  std::stringstream ss;\n  assert(a.size()\
    \ == b.size());\n  for (std::size_t i = 0; i < a.size(); ++i) {\n    if (a[i]\
    \ == b[i]) {\n      ss << \"0\";\n    } else {\n      ss << \"1\";\n    }\n  }\n\
    \  return ss.str();", "    // your code here\n  int sz = a.size();\n  int sz1\
    \ = b.size();\n  if(sz!=sz1)\n  {\n    return \"\";\n  }\n  std::string res;\n\
    \  for(int i=0;i<sz;i++)\n  {\n    if(a[i]==b[i])\n    {\n      res.push_back('0');\n\
    \    }\n    else\n    {\n      res.push_back('1');\n    }\n  }\n  return res;",
  "  if (a.size() != b.size())\n    return std::string();\n  std::string res;\n  for\
    \ (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n      res += '0';\n\
    \    else\n      res += '1';\n  }\n  return res;", "    assert(a.size() == b.size());\n\
    \    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n  \
    \      if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n \
    \           result += \"1\";\n        }\n    }\n    return result;", "    std::string\
    \ output;\n    for(int i = 0; i < a.length(); i++) {\n        if(a[i] == b[i])\
    \ {\n            output += \"0\";\n        } else {\n            output += \"\
    1\";\n        }\n    }\n    return output;", "    int n = a.size();\n    int m\
    \ = b.size();\n    assert(n == m);\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < n; i++) {\n        int x = (a[i] - '0') ^ (b[i] - '0');\n       \
    \ char c = '0' + x;\n        result += c;\n    }\n    return result;", "  //your\
    \ code here\n  std::string result;\n  for(unsigned int i = 0; i < a.size(); i++)\n\
    \  {\n    int x = a[i] - '0';\n    int y = b[i] - '0';\n    int z = x ^ y;\n \
    \   char s = z + '0';\n    result += s;\n  }\n  return result;", "\tstd::string\
    \ out;\n\tint i;\n\tfor (i = 0; i < a.length(); i++) {\n\t\tif (a[i] == b[i])\
    \ {\n\t\t\tout.push_back('0');\n\t\t} else {\n\t\t\tout.push_back('1');\n\t\t\
    }\n\t}\n\treturn out;", "    std::string result = \"\";\n    for(int i = 0; i\
    \ < a.size(); i++) result += a[i] == b[i] ? '0' : '1';\n    return result;"]
stop_tokens:
- "\n}"
