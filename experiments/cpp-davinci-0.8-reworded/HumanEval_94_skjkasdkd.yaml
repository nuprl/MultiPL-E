name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of\
  \ integers.\n// You need to find the largest prime value and return the sum of its\
  \ digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3,\
  \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
  \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
  \ (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0,\
  \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
  \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n//\
  \ >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107,\
  \ (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30,\
  \ (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
  \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
  \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
  \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
  \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
  \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
  \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
  \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
  \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
  \ (long)97, (long)8192}))) == (10));\n}\n"
completions: ["    long largest_prime = *std::max_element(lst.begin(), lst.end());\n\
    \    long sum = 0;\n    while (largest_prime) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    // your code\
    \ here\n    int a[lst.size()];\n    for(int i=0;i<lst.size();i++)\n        a[i]=lst[i];\n\
    \    int p=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        int flag=0;\n\
    \        for(int j=2;j<=a[i]/2;j++)\n        {\n            if(a[i]%j==0)\n  \
    \          {\n                flag=1;\n                break;\n            }\n\
    \        }\n        if(flag==0 && a[i]!=1)\n        {\n            if(a[i]>p)\n\
    \                p=a[i];\n        }\n    }\n    int sum=0;\n    while(p!=0)\n\
    \    {\n        sum+=p%10;\n        p=p/10;\n    }\n    return sum;", "  long\
    \ largest_prime = 0;\n  // Write your code here\n  // To print results to the\
    \ standard output you can use PrintIntList function\n  // Example:\n  // PrintIntList(list_of_integers);\n\
    \  long count = 0;\n  for(long i=0;i<lst.size();i++){\n    if(lst[i]==1){\n  \
    \    count+=1;\n    }\n    for(long j=2;j<=lst[i]/2;j++){\n      if(lst[i]%j==0){\n\
    \        count+=1;\n        break;\n      }\n    }\n    if(count==0){\n      largest_prime\
    \ = lst[i];\n    }\n    count = 0;\n  }\n  std::cout<<largest_prime<<\"\\n\";\n\
    \  long total = 0;\n  while(largest_prime>0){\n    total += largest_prime%10;\n\
    \    largest_prime = largest_prime/10;\n  }\n  return total;", "    long tmp=(long)0;\n\
    \    long ytmp=lst[(long)0];\n    long px=(long)1;\n    while ((px < lst.size()))\
    \ {\n        if (((lst[px] % (long)2) == (long)0)) {\n            tmp=tmp+lst[px];\n\
    \        }\n        if ((lst[px] > ytmp)) {\n            ytmp=lst[px];\n     \
    \   }\n        px=px+1;\n    }\n    return (tmp + ytmp);", "    //create an array\
    \ to hold the primes\n    long largest = 0;\n    long sum = 0;\n    std::vector<long>\
    \ primes;\n    //go through the list and find the primes\n    for(int i = 0; i\
    \ < lst.size(); i++){\n        long current = lst[i];\n        bool isPrime =\
    \ true;\n        for(int j = 2; j <= current / 2; j++){\n            if(current\
    \ % j == 0){\n                isPrime = false;\n                break;\n     \
    \       }\n        }\n        if(isPrime){\n            primes.push_back(current);\n\
    \        }\n    }\n    //go through the list of primes and find the largest\n\
    \    largest = primes[0];\n    for(int i = 1; i < primes.size(); i++){\n     \
    \   if(primes[i] > largest){\n            largest = primes[i];\n        }\n  \
    \  }\n    //go through the digits of the largest number and add them\n    while(largest\
    \ > 0){\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;", '    return ((long)((std::accumulate(lst.begin(), lst.end(), (long)0)
    - (long)1) * (long)std::accumulate(lst.begin(), lst.end(), (long)0) / (long)2));',
  "  std::vector<bool> sieve(2000);\n  sieve[0] = true;\n  sieve[1] = true;\n  for\
    \ (long x = 2; x < sieve.size(); x++) {\n    if (!sieve[x]) {\n      for (long\
    \ y = x * x; y < sieve.size(); y += x) {\n        sieve[y] = true;\n      }\n\
    \    }\n  }\n  long max = 0;\n  for (long x = 0; x < lst.size(); x++) {\n    if\
    \ (!sieve[lst[x]] && lst[x] > max) {\n      max = lst[x];\n    }\n  }\n  long\
    \ sum = 0;\n  while (max > 0) {\n    sum += max % 10;\n    max /= 10;\n  }\n \
    \ return sum;", "    assert((lst.size()) >= (long)(6));\n    assert((lst.size())\
    \ <= (long)(25));\n    long __counter = (long)(0);\n    auto __lambda_0 = [&]\
    \ () -> bool {\n        for (;;) {\n            long __counter = (long)(0);\n\
    \            auto __lambda_0 = [&] () -> bool {\n                for (;;) {\n\
    \                    long __counter = (long)(0);\n                    auto __lambda_0\
    \ = [&] () -> bool {\n                        for (;;) {\n                   \
    \         long __counter = (long)(0);\n                            auto __lambda_0\
    \ = [&] () -> bool {\n                                for (;;) {\n           \
    \                         long __counter = (long)(0);\n                      \
    \              auto __lambda_0 = [&] () -> bool {\n                          \
    \              for (;;) {\n                                            long __counter\
    \ = (long)(0);\n                                            auto __lambda_0 =\
    \ [&] () -> bool {\n                                                for (;;) {\n\
    \                                                    long __counter = (long)(0);\n\
    \                                                    auto __lambda_0 = [&] ()\
    \ -> bool {\n                                                        for (;;)\
    \ {\n                                                            long __counter\
    \ = (long)(0);\n                                                            auto\
    \ __lambda_0 = [&] () -> bool {\n                                            \
    \                    for (;;) {\n                                            \
    \                        long __counter = (long)(0);\n                       \
    \                                             auto __lambda_0 = [&] () -> bool\
    \ {\n                                                                        for\
    \ (;;) {\n                                                                   \
    \         long __counter = (long)(0);\n                                      \
    \                                      auto __lambda_0 = [&] () -> bool {\n  \
    \                                                                            \
    \  for (;;) {\n                                                              \
    \                      long __counter = (long)(0);\n                         \
    \                                                           auto __lambda_0 =\
    \ [&] () -> bool {\n                                                         \
    \                               for (;;) {\n                                 \
    \                                                           long __counter = (long)(0);\n\
    \                                                                            \
    \                auto __lambda_0 = [&] () -> bool {\n                        \
    \                                                                        for (;;)\
    \ {\n                                                                        \
    \                            long __counter = (long)(0);\n                   \
    \                                                                            \
    \    ", '    long primes[] = {(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,
    (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,
    (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,
    (long)83, (long)89, (long)97, (long)101, (long)103, (long)107, (long)109, (long)113,
    (long)127, (long)131, (long)137, (long)139, (long)149, (long)151, (long)157, (long)163,
    (long)167, (long)173, (long)179, (long)181, (long)191, (long)193, (long)197, (long)199,
    (long)211, (long)223, (long)227, (long)229, (long)233, (long)239, (long)241, (long)251,
    (long)257, (long)263, (long)269, (long)271, (long)277, (long)281, (long)283, (long)293,
    (long)307, (long)311, (long)313, (long)317, (long)331, (long)337, (long)347, (long)349,
    (long)353, (long)359, (long)367, (long)373, (long)379, (long)383, (long)389, (long)397,
    (long)401, (long)409, (long)419, (long)421, (long)431, (long)433, (long)439, (long)443,
    (long)449, (long)457, (long)461, (long)463, (long)467, (long)479, (long)487, (long)491,
    (long)499, (long)503, (long)509, (long)521, (long)523, (long)541, (long', '  long
    ar[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
    71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
    157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,
    241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,
    347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,
    439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,
    547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,
    643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,
    751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,
    859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,
    977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061,
    1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153,
    1163, 1171, 1181, 1187, 1193, 1201, 1213,', "  long largestPrime = 0;\n  long\
    \ sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    bool prime = true;\n\
    \    for (long j = 2; j <= lst[i] / 2; j++) {\n      if (lst[i] % j == 0) {\n\
    \        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n  \
    \    if (lst[i] > largestPrime) {\n        largestPrime = lst[i];\n      }\n \
    \   }\n  }\n  while (largestPrime > 0) {\n    sum += largestPrime % 10;\n    largestPrime\
    \ /= 10;\n  }\n  return sum;", "    long ls = 0;\n    long i;\n    long n;\n \
    \   long ans = 0;\n    for (i = 0; (i < lst.size()); i++) {\n        n = lst[i];\n\
    \        if ((n != (long)1)) {\n            ls = 0;\n            while ((n % (long)2)\
    \ == (long)0) {\n                n = (n / (long)2);\n                ls = (ls\
    \ + (long)1);\n            }\n            if ((ls == (long)1)) {\n           \
    \     ans = ((long)0 + lst[i]);\n            }\n            for (long j = (long)3;\
    \ ((j * j) <= n); j = (j + (long)2)) {\n                ls = 0;\n            \
    \    while ((n % j) == (long)0) {\n                    n = (n / j);\n        \
    \            ls = (ls + (long)1);\n                }\n                if ((ls\
    \ == (long)1)) {\n                    ans = (ans + lst[i]);\n                }\n\
    \            }\n            if ((n > (long)2)) {\n                ans = (ans +\
    \ lst[i]);\n            }\n        }\n    }\n    return (ans);", "    for (std::vector<long>::iterator\
    \ it = lst.begin(); it != lst.end(); it++) {\n        long n = *it;\n        long\
    \ arr[] = {\n            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997\n        };\n        int len = sizeof(arr)\
    \ / sizeof(arr[0]);\n        for (int i = 0; i < len; i++) {\n            if (n\
    \ % arr[i] == 0) {\n                long", "    long p=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]>p && isprime(lst[i])){\n            p=lst[i];\n        }\n\
    \    }\n    int sum=0;\n    for(int i=0;i<(int)log10(p)+1;i++){\n        sum=sum+p%10;\n\
    \        p=p/10;\n    }\n    return sum;", "    // Your code here.\n    long max_num\
    \ = 0;\n    for(long num : lst){\n        max_num = std::max(max_num, num);\n\
    \    }\n    std::vector<bool> prime_list(max_num + 1, true);\n    prime_list[0]\
    \ = false;\n    prime_list[1] = false;\n    for(long i = 2; i <= max_num; i++){\n\
    \        if(prime_list[i]){\n            for(long j = i*i; j <= max_num; j +=\
    \ i){\n                prime_list[j] = false;\n            }\n        }\n    }\n\
    \    long max_prime = 0;\n    for(long num : lst){\n        if(prime_list[num]){\n\
    \            max_prime = std::max(max_prime, num);\n        }\n    }\n    long\
    \ ans = 0;\n    while(max_prime > 0){\n        ans += max_prime % 10;\n      \
    \  max_prime /= 10;\n    }\n    return ans;", "    auto max_prime = std::max_element(lst.begin(),\
    \ lst.end(), [&](long a, long b) {\n        auto is_prime = [](long n) {\n   \
    \         if (n == 1) return false;\n            if (n == 2) return true;\n  \
    \          for (long i = 2; i * i <= n; i++)\n                if (n % i == 0)\
    \ return false;\n            return true;\n        };\n        return is_prime(a)\
    \ && !is_prime(b);\n    });\n    auto max_prime_sum = std::accumulate(max_prime->to_string().begin(),\
    \ max_prime->to_string().end(), 0, [](int a, char c) {\n        return a + c -\
    \ '0';\n    });\n    return max_prime_sum;", "    long v7 = 0;\n    long v8 =\
    \ 0;\n    long v9 = 0;\n    for (auto v1 = lst.begin(); v1 != lst.end(); ++v1)\
    \ {\n        v8 = 0;\n        v9 = 0;\n        long v2 = *v1;\n        if (v2\
    \ > v7) {\n            if (v2 % 2) {\n                for (long v4 = 3; v4 * v4\
    \ <= v2; v4 += 2) {\n                    if (v2 % v4 == 0) {\n               \
    \         ++v8;\n                        if (v4 * v4 != v2) {\n              \
    \              ++v8;\n                        }\n                    }\n     \
    \           }\n                if (v8 == 0) {\n                    v7 = v2;\n\
    \                    while (v2) {\n                        v9 += v2 % 10;\n  \
    \                      v2 /= 10;\n                    }\n                }\n \
    \           }\n        }\n    }\n    return v9;", "\tint sum = 0;\n\tfor (int\
    \ x : lst) {\n\t\tint flag = 0;\n\t\tfor (int i = 2; i <= sqrt(x); i++) {\n\t\t\
    \tif (x % i == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif\
    \ (flag == 0 && x > sum) {\n\t\t\tsum = x;\n\t\t}\n\t}\n\tint ans = 0;\n\twhile\
    \ (sum > 0) {\n\t\tans += sum % 10;\n\t\tsum /= 10;\n\t}\n\treturn ans;", "//\
    \ Given a list of integers, find the largest prime and return the sum of its digits.\n\
    \n    // return the sum of digits in a number\n    auto get_sum_of_digits = [](long\
    \ number) {\n        auto sum = (long)0;\n        while (number > 0) {\n     \
    \       sum += number % 10;\n            number /= 10;\n        }\n        return\
    \ sum;\n    };\n\n    // check if a number is prime\n    auto is_prime = [](long\
    \ number) {\n        if (number <= 1) return false;\n        for (long i = 2;\
    \ i <= number / 2; i++) {\n            if (number % i == 0) return false;\n  \
    \      }\n        return true;\n    };\n\n    // find the largest prime number\n\
    \    auto largest_prime = (long)0;\n    for (auto number : lst) {\n        if\
    \ (is_prime(number) && number > largest_prime) largest_prime = number;\n    }\n\
    \n    // return the sum of digits in that number\n    return get_sum_of_digits(largest_prime);",
  "\tlong x = (long)0;\n\tlong y = (long)0;\n\tlong z = (long)0;\n\tlong w = (long)0;\n\
    \tlong u = (long)0;\n\tlong max_prime = (long)0;\n\tlong max_prime_sum = (long)0;\n\
    \tlong d = (long)0;\n\tlong t = (long)0;\n\tlong p = (long)0;\n\tlong e = (long)0;\n\
    \tlong v = (long)0;\n\tlong s = (long)0;\n\tlong b = (long)0;\n\tlong f = (long)0;\n\
    \tlong q = (long)0;\n\tlong m = (long)0;\n\tlong g = (long)0;\n\tlong j = (long)0;\n\
    \tlong a = (long)0;\n\tlong r = (long)0;\n\tlong i = (long)0;\n\tlong h = (long)0;\n\
    \tlong k = (long)0;\n\tlong mx = (long)0;\n\tlong c = (long)0;\n\tlong n = (long)0;\n\
    \tlong o = (long)0;\n\tlong is_prime = (long)0;\n\tlong sum = (long)0;\n\tlong\
    \ prime = (long)0;\n\tlong lst_size = (long)0;\n\tlst_size = (long)lst.size();\n\
    \tfor (y = (long)0; y < lst_size; y = y + (long)1) {\n\t\tsum = (long)0;\n\t\t\
    d = (long)lst[y];\n\t\tif (d < (long)2) {\n\t\t\tcontinue;\n\t\t}\n\t\tmax_prime\
    \ = (long)0;\n\t\tmax_prime_sum = (long)0;\n\t\tprime = (long)2;\n\t\twhile (prime\
    \ <= d) {\n\t\t\tif (d % prime == (long)0) {\n\t\t\t\tx = (long)0;\n\t\t\t\tis_prime\
    \ = (long)1;\n\t\t", "  // Write your code here\n  // To print results to the\
    \ standard output you can use PrintfDebug or DebugPrint\n  // Example:\n  // PrintfDebug(\"\
    %d\\n\", m);\n  // DebugPrint();\n  std::sort(lst.begin(), lst.end());\n  long\
    \ result = 0;\n  bool prime = true;\n  long size = lst.size();\n  for (int i =\
    \ size - 1; i >= 0; i--) {\n    if (lst[i] == 0) continue;\n    prime = true;\n\
    \    for (int j = lst[i] - 1; j > 1; j--) {\n      if (lst[i] % j == 0) {\n  \
    \      prime = false;\n        break;\n      }\n    }\n    if (prime) {\n    \
    \  result = lst[i];\n      break;\n    }\n  }\n  long result_sum = 0;\n  while\
    \ (result != 0) {\n    result_sum += result % 10;\n    result /= 10;\n  }\n  return\
    \ result_sum;", "    // Your code here.\n    long a = std::max_element(lst.begin(),\
    \ lst.end());\n    std::cout << *a << std::endl;\n    long b = 0;\n    for (long\
    \ i = 2; i <= *a; i++) {\n        long count = 0;\n        for (long j = 2; j\
    \ <= i/2; j++) {\n            if (i % j == 0) {\n                count++;\n  \
    \              break;\n            }\n        }\n        if (count == 0 && i !=\
    \ 1) {\n            b = i;\n        }\n    }\n    long c = 0;\n    while (b) {\n\
    \        c += b % 10;\n        b /= 10;\n    }\n    return c;", "\tlong prime\
    \ = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tint count = 0;\n\t\tfor\
    \ (int j = 1; j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count == 2) {\n\t\t\tif (lst[i] > prime) {\n\t\t\t\tprime\
    \ = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i < prime;\
    \ i++) {\n\t\tif (prime % 10 != 0) {\n\t\t\tsum += prime % 10;\n\t\t\tprime /=\
    \ 10;\n\t\t}\n\t}\n\treturn sum;", "    int l=lst.size();\n    long max=lst[0];\n\
    \    for(int i=1;i<l;i++){\n        if(lst[i]>max){\n            max=lst[i];\n\
    \        }\n    }\n    int sum=0;\n    for(int i=0;i<l;i++){\n        if(lst[i]==max){\n\
    \            int k=max;\n            while(k>0){\n                sum+=k%10;\n\
    \                k=k/10;\n            }\n            break;\n        }\n    }\n\
    \    return sum;", "    std::vector<long>::iterator it;\n    std::sort(lst.begin(),\
    \ lst.end());\n    long largest_prime = 0;\n    long sum = 0;\n    for (it = lst.end()\
    \ - 1; it >= lst.begin(); it--) {\n        std::cout << *it << \" \";\n      \
    \  if (*it == 0) {\n            continue;\n        }\n        if (*it == 1) {\n\
    \            break;\n        }\n        bool not_prime = false;\n        for (long\
    \ i = 2; i <= std::sqrt(*it); i++) {\n            if (*it % i == 0) {\n      \
    \          not_prime = true;\n                break;\n            }\n        }\n\
    \        if (not_prime) {\n            continue;\n        }\n        largest_prime\
    \ = *it;\n        while (largest_prime != 0) {\n            sum += largest_prime\
    \ % 10;\n            largest_prime /= 10;\n        }\n        break;\n    }\n\
    \    return sum;", "\tstd::vector<long> primes{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,\
    \ 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097,\
    \ 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201",
  "    \n    long ret = 0;\n    std::vector<long> prime;\n    for(auto i: lst){\n\
    \        for(auto j=2; j<i; j++){\n            if(i%j==0){\n                break;\n\
    \            }\n            else if(j==i-1){\n                prime.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(prime.begin(), prime.end());\n\
    \    std::vector<long>::iterator it;\n    it = std::max_element(prime.begin(),\
    \ prime.end());\n    int index = it - prime.begin();\n    long num = prime[index];\n\
    \    while(num!=0){\n        ret += num%10;\n        num = num/10;\n    }\n  \
    \  return ret;", "    assert(lst.size() > (int)0);\n    if ((lst[(int)0]) == (long)0)\
    \ {\n        return (long)0;\n    }\n    long largest = (long)0;\n    for (auto\
    \ v: lst) {\n        if ((v != (long)0) && (largest < v)) {\n            largest\
    \ = v;\n        }\n    }\n    long retval = (long)0;\n    if ((largest > (long)9))\
    \ {\n        retval = (long)1;\n        for (auto v: lst) {\n            if ((v\
    \ != (long)0) && (largest > v)) {\n                retval = (retval * v);\n  \
    \          }\n        }\n    }\n    else {\n        retval = largest;\n    }\n\
    \    return retval;", "  long ans = 0;\n  long largestPrime = 0;\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    if (lst[i] > 0) {\n      bool isPrime = true;\n\
    \      for (long j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n \
    \         isPrime = false;\n          break;\n        }\n      }\n      if (isPrime)\
    \ {\n        if (lst[i] > largestPrime) {\n          largestPrime = lst[i];\n\
    \        }\n      }\n    }\n  }\n  while (largestPrime > 0) {\n    ans += largestPrime\
    \ % 10;\n    largestPrime /= 10;\n  }\n  return ans;", "  long maxPrime = 0;\n\
    \  // your code here\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] %\
    \ 2 == 0){\n      continue;\n    }\n    else{\n      bool isPrime = true;\n  \
    \    for(int j = 2; j < lst[i]; j++){\n        if(lst[i] % j == 0){\n        \
    \  isPrime = false;\n          break;\n        }\n      }\n      if(isPrime){\n\
    \        maxPrime = std::max(maxPrime, lst[i]);\n      }\n    }\n  }\n  long sum\
    \ = 0;\n  while(maxPrime > 0){\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n\
    \  }\n  return sum;", "\tlong i = 0;\n\tstd::vector<long>::iterator it = lst.begin();\n\
    \twhile (it != lst.end()) {\n\t\tif ((*it) % 2 == 0) {\n\t\t\tlst.erase(it);\n\
    \t\t}\n\t\telse {\n\t\t\t++it;\n\t\t}\n\t}\n\treturn(lst.size());", "    long\
    \ maxnum = 0;\n    for (long x : lst) {\n        if (x > maxnum) maxnum = x;\n\
    \    }\n    bool isprime[maxnum+1];\n    for (long i = 2; i <= maxnum; i++) {\n\
    \        isprime[i] = true;\n    }\n    for (long i = 2; i <= sqrt(maxnum); i++)\
    \ {\n        if (isprime[i]) {\n            for (long j = i*i; j <= maxnum; j\
    \ += i) {\n                isprime[j] = false;\n            }\n        }\n   \
    \ }\n    long maxprime = 0;\n    for (long x : lst) {\n        if (isprime[x]\
    \ && x > maxprime) maxprime = x;\n    }\n    long sum = 0;\n    while (maxprime)\
    \ {\n        sum += maxprime % 10;\n        maxprime /= 10;\n    }\n    return\
    \ sum;", "    auto it = std::remove_if(lst.begin(), lst.end(), [](int x) {\n \
    \       bool is_prime = true;\n        for (int i = 2; i <= std::sqrt(x); i++)\
    \ {\n            if (x % i == 0) {\n                is_prime = false;\n      \
    \          break;\n            }\n        }\n        return !is_prime;\n    });\n\
    \    lst.erase(it, lst.end());\n    std::sort(lst.begin(), lst.end());\n    long\
    \ largest_prime = lst.back();\n    int sum = 0;\n    while (largest_prime) {\n\
    \        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n   \
    \ return sum;", "    assert(lst.size() > 0);\n    ////////////////////////////////////////////////////////////////////////////\n\
    \    // Write your code below.\n    ////////////////////////////////////////////////////////////////////////////\n\
    \    \n    \n    long largest = 0;\n    for(auto i : lst){\n        if(i % 2 ==\
    \ 0){\n            i /= 2;\n        }\n        if(i > largest){\n            largest\
    \ = i;\n        }\n    }\n    int sum = 0;\n    for(auto i : std::to_string(largest)){\n\
    \        sum += i - '0';\n    }\n    return sum;\n    ////////////////////////////////////////////////////////////////////////////\n\
    \    // End of the code\n    ////////////////////////////////////////////////////////////////////////////",
  "\tbool prime(long n);\n\tlong n = (long)0;\n\tlong s = (long)0;\n\tlong m = (long)0;\n\
    \tlong sum = (long)0;\n\tfor (std::vector<long>::iterator i = lst.begin(); i !=\
    \ lst.end(); ++i) {\n\t\tn = *i;\n\t\tif (prime(n)) {\n\t\t\ts = (long)0;\n\t\t\
    \twhile (n > (long)0) {\n\t\t\t\ts += n % (long)10;\n\t\t\t\tn /= (long)10;\n\t\
    \t\t}\n\t\t\tif (s > m) {\n\t\t\t\tm = s;\n\t\t\t\tsum = s;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn sum;", "    // Write your code here\n    long max = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++){\n        for(long j = 0; j < lst.size(); j++){\n\
    \            if(lst[i] > lst[j]){\n                long temp = lst[i];\n     \
    \           lst[i] = lst[j];\n                lst[j] = temp;\n            }\n\
    \        }\n    }\n    for(long k = 0; k < lst.size(); k++){\n        if(lst[k]\
    \ > max){\n            max = lst[k];\n        }\n    }\n    long sum = 0;\n  \
    \  for(long l = 0; l < max; l++){\n        if(max % l == 0){\n            sum\
    \ = sum + max;\n        }\n    }\n    return sum;", "  std::vector<long> primes;\n\
    \  for (long i=2; i<=1000; i++) {\n    bool isPrime = true;\n    for (auto j:\
    \ primes) {\n      if (i%j==0) {\n        isPrime = false;\n        break;\n \
    \     }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n \
    \ for (auto i: lst) {\n    for (auto j: primes) {\n      if (i%j==0) {\n     \
    \   i /= j;\n      }\n    }\n  }\n  long ans = 0;\n  while (lst[0]!=0) {\n   \
    \ ans += lst[0]%10;\n    lst[0] /= 10;\n  }\n  return ans;", "    // your code\
    \ here\n    return 0;", "  int cnt = 0;\n  bool is_prime;\n  int max_prime = -1;\n\
    \  for (auto num : lst) {\n    is_prime = true;\n    for (int i = 2; i <= sqrt(num);\
    \ i++) {\n      if (num % i == 0) {\n        is_prime = false;\n        break;\n\
    \      }\n    }\n    if (is_prime && num > max_prime) {\n      max_prime = num;\n\
    \    }\n  }\n  int sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime %\
    \ 10;\n    max_prime /= 10;\n  }\n  return sum;", "    int len = lst.size();\n\
    \    long max_prime = -1;\n    for (int i = 0; i < len; i++) {\n        if (lst[i]\
    \ <= 1) continue;\n        bool is_prime = true;\n        for (int j = 2; j <\
    \ sqrt(lst[i]); j++) {\n            if (lst[i] % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ max_prime = std::max(max_prime, lst[i]);\n    }\n    int ans = 0;\n    while\
    \ (max_prime > 0) {\n        ans += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return ans;", "  std::map<long, long> m;\n  for (auto i : lst) {\n\
    \    auto f = true;\n    for (auto j : m) {\n      if (i%j.first == 0) {\n   \
    \     f = false;\n        break;\n      }\n    }\n    if (f) m[i] = 1;\n  }\n\
    \  auto l = 0l;\n  for (auto i : m) {\n    if (i.first > l) l = i.first;\n  }\n\
    \  auto sum = 0l;\n  while (l > 0) {\n    sum += l%10;\n    l /= 10;\n  }\n  return\
    \ sum;", '  return (long)0;', "  // your code here!\n  long maxi = 0;\n  for(long\
    \ &i : lst){\n    if(maxi < i){\n      maxi = i;\n    }\n  }\n  for(long &i :\
    \ lst){\n    long maxi = 0;\n    long j = 2;\n    while(j < i){\n      if(i %\
    \ j == 0){\n        if(maxi < j){\n          maxi = j;\n        }\n        i /=\
    \ j;\n      }\n      else{\n        j++;\n      }\n    }\n    if(maxi < i){\n\
    \      maxi = i;\n    }\n  }\n  long result = 0;\n  while(maxi > 0){\n    result\
    \ += maxi % 10;\n    maxi /= 10;\n  }\n  return result;", "    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    std::vector<long> primes;\n    long test = 2;\n    for (; test\
    \ <= max; test++) {\n        bool is_prime = true;\n        for (auto it = primes.begin();\
    \ it != primes.end(); it++) {\n            if (test % *it == 0) {\n          \
    \      is_prime = false;\n                break;\n            }\n        }\n \
    \       if (is_prime) {\n            primes.push_back(test);\n        }\n    }\n\
    \    // std::sort(primes.begin(), primes.end());\n    // std::cout << \"[\";\n\
    \    // for (auto it = primes.begin(); it != primes.end(); it++) {\n    //   \
    \  std::cout << *it << \", \";\n    // }\n    // std::cout << \"]\" << std::endl;\n\
    \    long max_prime = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++)\
    \ {\n        if (std::find(primes.begin(), primes.end(), *it) != primes.end())\
    \ {\n            if (*it > max_prime) {\n                max_prime = *it;\n  \
    \          }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n\
    \        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n\t\n  \
    \  return 0;", "    int max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n  \
    \  int maxPrime = 0;\n    for (int i = 2; i <= max; i++) {\n        bool flag\
    \ = true;\n        for (int j = 2; j <= i / 2; j++) {\n            if (i % j ==\
    \ 0) {\n                flag = false;\n                break;\n            }\n\
    \        }\n        if (flag) {\n            maxPrime = i;\n        }\n    }\n\
    \    int ans = 0;\n    while (maxPrime > 0) {\n        ans += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return ans;", "    // Your code here!\n \
    \   long ans=0;\n    long temp=0;\n    for(long i=0;i<lst.size();i++){\n     \
    \ if(lst[i]==1){\n        continue;\n      }\n      if(lst[i]<0){\n        return\
    \ -1;\n      }\n      if(lst[i]==0){\n        lst[i]=1;\n      }\n      temp=lst[i];\n\
    \      while(temp%2==0){\n        temp=temp/2;\n      }\n      for(long j=3;j<=sqrt(temp);j=j+2){\n\
    \        while(temp%j==0){\n          temp=temp/j;\n        }\n      }\n     \
    \ if(temp>ans){\n        ans=temp;\n      }\n    }\n    long sum=0;\n    while(ans!=0){\n\
    \      sum+=ans%10;\n      ans=ans/10;\n    }\n    return sum;", "  for (auto\
    \ i=0; i<lst.size(); i++) {\n    if (lst[i] < 2) continue;\n    if (lst[i] ==\
    \ 2) break;\n    if (lst[i] % 2 == 0) {\n      lst[i] = 0;\n      continue;\n\
    \    }\n    for (auto j=3; j<=sqrt(lst[i]); j++) {\n      if (lst[i] % j == 0)\
    \ {\n        lst[i] = 0;\n        break;\n      }\n    }\n  }\n  long dmax = -1;\n\
    \  for (auto i=0; i<lst.size(); i++) {\n    if (lst[i] > dmax) dmax = lst[i];\n\
    \  }\n  if (dmax < 0) return 0;\n  long sum = 0;\n  while (dmax > 0) {\n    sum\
    \ += dmax % 10;\n    dmax /= 10;\n  }\n  return sum;", "    long a = 0;\n    bool\
    \ b = true;\n    for (auto x: lst) {\n        for (long i = (long)2; i < x; i++)\
    \ {\n            if (x % i == 0) {\n                b = false;\n             \
    \   break;\n            }\n        }\n        if (b && x > a) {\n            a\
    \ = x;\n        }\n        b = true;\n    }\n    long c = 0;\n    while (a !=\
    \ 0) {\n        c += a % 10;\n        a /= 10;\n    }\n    return c;", "    //\
    \ your code here\n    std::vector<long> primes;\n    std::vector<long> non_primes;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        int count = 0;\n        for(int\
    \ j = 1; j <= lst[i]; j++){\n            if(lst[i] % j == 0){\n              \
    \  count++;\n            }\n        }\n        if(count == 2){\n            primes.push_back(lst[i]);\n\
    \        }\n        else if(count != 2){\n            non_primes.push_back(lst[i]);\n\
    \        }\n    }\n    // std::sort(primes.begin(), primes.end());\n    // std::sort(non_primes.begin(),\
    \ non_primes.end());\n    // std::cout << *primes.end() << std::endl;\n    //\
    \ std::cout << *non_primes.end() << std::endl;\n    long large_prime = *primes.end();\n\
    \    long sum = 0;\n    while(large_prime != 0){\n        sum += large_prime %\
    \ 10;\n        large_prime /= 10;\n    }\n    return sum;", "    long m = -1;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] <= 1) continue;\n\
    \        bool isPrime = true;\n        for (int j = 2; j <= sqrt(lst[i]); j++)\
    \ {\n            if (lst[i] % j == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        if (isPrime) m = std::max(m,\
    \ lst[i]);\n    }\n    int ret = 0;\n    while (m > 0) {\n        ret += m % 10;\n\
    \        m /= 10;\n    }\n    return ret;", "\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tlong num = lst[i];\n\t\tfor (int i = 2; i <= num / 2; i++) {\n\t\
    \t\tif (num % i == 0) {\n\t\t\t\tlst[i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tlong long\
    \ largest = -1;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > largest)\
    \ {\n\t\t\tlargest = lst[i];\n\t\t}\n\t}\n\tlong long sum = 0;\n\twhile (largest\
    \ > 0) {\n\t\tsum += largest % 10;\n\t\tlargest /= 10;\n\t}\n\treturn sum;", '    return
    0;', "    int i = 0;\n    long ans = 0;\n    while(i < lst.size()) {\n       \
    \ int largest = 0;\n        int j = i;\n        while(j < lst.size() && lst[j]\
    \ != 0) {\n            if(lst[j] > largest) {\n                largest = lst[j];\n\
    \            }\n            j++;\n        }\n        if(j == lst.size()) {\n \
    \           lst.push_back(0);\n        }\n        if(largest == 1) {\n       \
    \     i = j;\n            continue;\n        }\n        if(largest == 2) {\n \
    \           ans += 2;\n            i = j;\n            continue;\n        }\n\
    \        for(int j = i; j < lst.size(); j++) {\n            if(lst[j] != 0 &&\
    \ lst[j] != 1 && lst[j] != largest) {\n                if(lst[j] % largest ==\
    \ 0) {\n                    lst[j] = 0;\n                }\n            }\n  \
    \      }\n        int sum = 0;\n        int temp = largest;\n        while(temp\
    \ > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n\
    \        ans += sum;\n        i = j;\n    }\n    return ans;", "    long largest\
    \ = 0;\n    for (std::vector<long>::size_type i = 0; i != lst.size(); i++) {\n\
    \        if (lst[i] > largest) {\n            long n = 2;\n            while (n\
    \ < lst[i]) {\n                if (lst[i] % n == 0)\n                    break;\n\
    \                n++;\n            }\n            if (n == lst[i])\n         \
    \       largest = lst[i];\n        }\n    }\n    int sum = 0;\n    while (largest\
    \ > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;", "  long sum = 0;\n  long max_prime = 0;\n  bool found_prime = false;\n\
    \  std::vector<long> primes = std::vector<long>({(long)2, (long)3, (long)5, (long)7,\
    \ (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37,\
    \ (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71,\
    \ (long)73, (long)79, (long)83, (long)89, (long)97, (long)101, (long)103, (long)107,\
    \ (long)109, (long)113, (long)127, (long)131, (long)137, (long)139, (long)149,\
    \ (long)151, (long)157, (long)163, (long)167, (long)173, (long)179, (long)181,\
    \ (long)191, (long)193, (long)197, (long)199, (long)211, (long)223, (long)227,\
    \ (long)229, (long)233, (long)239, (long)241, (long)251, (long)257, (long)263,\
    \ (long)269, (long)271, (long)277, (long)281, (long)283, (long)293, (long)307,\
    \ (long)311, (long)313, (long)317, (long)331, (long)337, (long)347, (long)349,\
    \ (long)353, (long)359, (long)367, (long)373, (long)379, (long)383, (long)389,\
    \ (long)397, (long)401, (long)409, (long)419, (long)421, (long)431, (long)433,\
    \ (long)439, (long)443, (long)449, (long)457, (long)461, (long)463, (long)467,\
    \ (long)479, (long)487, (long)491", "  // Insert your code here\n  long max =\
    \ 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n      max\
    \ = lst[i];\n    }\n  }\n  while(max % 2 == 0){\n    max /= 2;\n  }\n  for(int\
    \ i = 3; i <= std::sqrt(max); i+=2){\n    while(max % i == 0){\n      max /= i;\n\
    \    }\n  }\n  std::cout << max << std::endl;\n  std::string str = std::to_string(max);\n\
    \  long sum = 0;\n  for(int i = 0; i < str.length(); i++){\n    sum += str[i]\
    \ - '0';\n  }\n  return sum;", "    std::vector<long> v;\n    for (auto i : lst)\
    \ {\n        if (i != 0 && std::__gcd(i, i - 1) == 1) {\n            if (i !=\
    \ 1) {\n                v.push_back(i);\n            }\n        }\n    }\n   \
    \ std::sort(v.begin(), v.end());\n    long sum = 0;\n    for (auto i : std::to_string(v.back()))\
    \ {\n        sum += i - '0';\n    }\n    return sum;", '  return std::accumulate(lst.begin(),
    lst.end(), (long)0, [](auto res, auto el) { return res + (el % 9); });', "  assert(!lst.empty());\n\
    \  long start = *std::max_element(lst.begin(), lst.end());\n  for (long i = start;\
    \ i > 0; i--) {\n    if (std::count(lst.begin(), lst.end(), i) == 0) {\n     \
    \ if (i <= 2) {\n        continue;\n      }\n      bool is_prime = true;\n   \
    \   for (long j = 2; j < i; j++) {\n        if (i % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    return std::accumulate(std::to_string(i).begin(), std::to_string(i).end(),\
    \ (long)0, [](long lhs, char rhs) { return lhs + (long)(rhs - '0'); });\n    \
    \  }\n    }\n  }\n  return 0;", "  auto hlpr = [&lst](auto x) {\n    return (lst[x]\
    \ % 2) == (long)0 ? (long)2 : (long)0;\n  };\n  long n = (long)0;\n  for (auto\
    \ i = (long)0; i < (long)6; i++) {\n    if (hlpr(i) == (long)2) {\n      n = lst[i];\n\
    \      break;\n    }\n  }\n  long res = (long)0;\n  for (auto& i : lst) {\n  \
    \  if (i > n) {\n      n = i;\n    }\n  }\n  for (auto i = (long)0; i < (long)10;\
    \ i++) {\n    res += n % (long)10;\n    n /= (long)10;\n  }\n  return res;", " \
    \   auto is_prime = [](long num) {\n        for (long i = 2; i * i <= num; i++)\
    \ {\n            if (num % i == 0) {\n                return false;\n        \
    \    }\n        }\n        return true;\n    };\n    long max_prime = 0;\n   \
    \ for (auto i : lst) {\n        if (is_prime(i) && i > max_prime) {\n        \
    \    max_prime = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", '  // your code here', "    long scm_1 = (long)0;\n    long scm_3\
    \ = (long)0;\n    long scm_4 = (long)0;\n    long scm_2 = (long)1;\n    for (long\
    \ scm_5 = (long)0; scm_5 < (long)lst.size(); scm_5++) {\n        scm_4 = lst[scm_5];\n\
    \        scm_2 = (long)1;\n        for (long scm_6 = (long)2; scm_6 <= scm_4;\
    \ scm_6++) {\n            if (((scm_4 % scm_6) == (long)0)) {\n              \
    \  scm_2 = (long)0;\n                break;\n            }\n        }\n      \
    \  if (scm_2) {\n            scm_3 = scm_4;\n        }\n    }\n    while (scm_3)\
    \ {\n        scm_1 = scm_1 + (scm_3 % (long)10);\n        scm_3 = scm_3 / (long)10;\n\
    \    }\n    return scm_1;", "    long maxi = *std::max_element(lst.begin(), lst.end());\n\
    \    assert(maxi <= (long)1000000000000000);\n    long arr[maxi + 1];\n    for\
    \ (long i = 2; i <= maxi; i++) {\n        arr[i] = i;\n    }\n    for (long i\
    \ = 2; i <= maxi; i++) {\n        if (arr[i] == i) {\n            for (long j\
    \ = i * i; j <= maxi; j += i) {\n                if (arr[j] == j) {\n        \
    \            arr[j] = i;\n                }\n            }\n        }\n    }\n\
    \    long r = 0;\n    for (long &e: lst) {\n        long te = e;\n        while\
    \ (arr[te] != te) {\n            te /= arr[te];\n        }\n        r += te;\n\
    \    }\n    return r;", "    long max = 0;\n    long res = 0;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] == 0) continue;\n        if\
    \ (lst[i] % 2 == 0) {\n            if (lst[i] == 2) {\n                if (max\
    \ < 2) {\n                    max = 2;\n                    res = 2;\n       \
    \         }\n            }\n            continue;\n        }\n        if (lst[i]\
    \ % 3 == 0) {\n            if (lst[i] == 3) {\n                if (max < 3) {\n\
    \                    max = 3;\n                    res = 3;\n                }\n\
    \            }\n            continue;\n        }\n        if (lst[i] % 5 == 0)\
    \ {\n            if (lst[i] == 5) {\n                if (max < 5) {\n        \
    \            max = 5;\n                    res = 5;\n                }\n     \
    \       }\n            continue;\n        }\n        if (lst[i] % 7 == 0) {\n\
    \            if (lst[i] == 7) {\n                if (max < 7) {\n            \
    \        max = 7;\n                    res = 7;\n                }\n         \
    \   }\n            continue;\n        }\n        for (long j = 11; j < 1000; j\
    \ += 2) {\n            if (lst[i] % j == 0) {\n                if (j == lst[i])\
    \ {\n                    if (max < j) {\n                        max = j;\n  \
    \                      res = j;\n                    }\n                }\n  \
    \              break;\n            }\n        }\n    }\n    if (max == 0) {\n\
    \        return 0;\n    }\n    long sum = 0;\n    while (res > 0) {\n        sum\
    \ += res % 10;\n        res /= 10;\n    }\n    return sum;", "    if (lst.size()\
    \ == 0) {\n        return -1;\n    }\n    std::vector<long> primes = {2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,\
    \ 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129,", "  long a=0;\n  for(auto\
    \ &x:lst) {\n    if(x>a) {\n      bool is_prime=true;\n      for(long i=2; i<x/2;\
    \ i++) {\n        if(x%i==0) {\n          is_prime=false;\n          break;\n\
    \        }\n      }\n      if(is_prime) {\n        a=x;\n      }\n    }\n  }\n\
    \  long result=0;\n  while(a>0) {\n    result+=a%10;\n    a/=10;\n  }\n  return\
    \ result;", "    long largest = 0;\n    for (auto value : lst) {\n        if (value\
    \ > largest) {\n            largest = value;\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for (long i = 2; i <= largest; i++) {\n        if (i == 2 || i\
    \ == 3 || i == 5 || i == 7) {\n            primes.push_back(i);\n        } else\
    \ if (i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long second_largest = 0;\n    for (auto value : primes)\
    \ {\n        if (value > second_largest) {\n            second_largest = value;\n\
    \        }\n    }\n    long sum = 0;\n    while (second_largest != 0) {\n    \
    \    sum += second_largest % 10;\n        second_largest /= 10;\n    }\n    return\
    \ sum;", "\tstd::vector<long> v1;\n\tfor (auto i : lst) {\n\t\tif (i > 0)\n\t\t\
    \tv1.push_back(i);\n\t}\n\tstd::vector<long> v2;\n\tfor (auto i : v1) {\n\t\t\
    if (i == 2 || i == 3 || i == 5 || i == 7)\n\t\t\tv2.push_back(i);\n\t\telse if\
    \ (i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0)\n\t\t\tv2.push_back(i);\n\
    \t}\n\tlong max = -1;\n\tfor (auto i : v2) {\n\t\tif (i > max)\n\t\t\tmax = i;\n\
    \t}\n\tlong sum = 0;\n\twhile (max > 0) {\n\t\tlong rem = max % 10;\n\t\tsum +=\
    \ rem;\n\t\tmax /= 10;\n\t}\n\treturn sum;", "    long number = 0;\n    for (auto\
    \ a : lst) {\n        if (a > number) {\n            number = a;\n        }\n\
    \    }\n    long sum = 0;\n    long num = number;\n    while (num > 0) {\n   \
    \     long val = num % 10;\n        sum += val;\n        num /= 10;\n    }\n \
    \   return sum;", "    long largest = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest) {\n            largest = lst[i];\n   \
    \     }\n    }\n    long value = largest;\n    std::vector<long> arr;\n    while\
    \ (value > 0) {\n        arr.push_back(value % 10);\n        value /= 10;\n  \
    \  }\n    std::reverse(arr.begin(), arr.end());\n    long sum = 0;\n    for (long\
    \ k = 0; k < arr.size(); k++) {\n        sum += arr[k];\n    }\n    return sum;",
  "\tif (lst.size() < 1) {\n\t\treturn (long)0;\n\t}\n\tstd::vector<long> primes =\
    \ {(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19,\
    \ (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53,\
    \ (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89,\
    \ (long)97, (long)101, (long)103, (long)107, (long)109, (long)113, (long)127,\
    \ (long)131, (long)137, (long)139, (long)149, (long)151, (long)157, (long)163,\
    \ (long)167, (long)173, (long)179, (long)181, (long)191, (long)193, (long)197,\
    \ (long)199, (long)211, (long)223, (long)227, (long)229, (long)233, (long)239,\
    \ (long)241, (long)251, (long)257, (long)263, (long)269, (long)271, (long)277,\
    \ (long)281, (long)283, (long)293, (long)307, (long)311, (long)313, (long)317,\
    \ (long)331, (long)337, (long)347, (long)349, (long)353, (long)359, (long)367,\
    \ (long)373, (long)379, (long)383, (long)389, (long)397, (long)401, (long)409,\
    \ (long)419, (long)421, (long)431, (long)433, (long)439, (long)443, (long)449,\
    \ (long)457, (long)461, (long)463, (long)467, (long)479, (long)487, (long)491,\
    \ (long)499,", "\tlong ret = 1;\n\tlong i = 2;\n\t// long i = 3;\n\twhile (i*i\
    \ <= lst.size()) {\n\t\t// if (std::find(lst.begin(), lst.end(), i*i) != lst.end())\
    \ {\n\t\t\tret *= i;\n\t\t// }\n\t\ti += 1;\n\t}\n\treturn ret;", "    long max\
    \ = (long)0;\n    for (int i = 0; i < lst.size(); i++) {\n        long x = lst[i];\n\
    \        if (x <= (long)0) {\n            continue;\n        }\n        if (x\
    \ > max) {\n            max = x;\n        }\n    }\n    long ans = (long)0;\n\
    \    while (max > (long)0) {\n        ans += max % (long)10;\n        max /= (long)10;\n\
    \    }\n    return ans;", "  auto prime_list = std::vector<long>();\n  auto result\
    \ = (long)0;\n  auto sq_root = (long)std::sqrt((double)lst.size());\n  for (auto\
    \ i = (long)0; i < lst.size(); i++) {\n    if (lst[i] % 2 == 0) {\n      continue;\n\
    \    }\n    if (lst[i] % 3 == 0) {\n      continue;\n    }\n    auto flag = (bool)1;\n\
    \    for (auto j = (long)3; j <= sq_root; j = j + 2) {\n      if (lst[i] % j ==\
    \ 0) {\n        flag = (bool)0;\n        break;\n      }\n    }\n    if (flag)\
    \ {\n      prime_list.push_back(lst[i]);\n    }\n  }\n  if (prime_list.size()\
    \ == 0) {\n    return result;\n  }\n  result = *std::max_element(prime_list.begin(),\
    \ prime_list.end());\n  while (result > 0) {\n    result = result / 10;\n    result\
    \ = result + (result % 10);\n  }\n  return result;", "\tassert(lst.size() > 1);\n\
    \tlong largestPrimeValue = 0;\n\tfor (long i : lst) {\n\t\tif (i == 0) {\n\t\t\
    \tcontinue;\n\t\t}\n\t\tfor (long j = 2; j <= i; j++) {\n\t\t\tif (i % j == 0)\
    \ {\n\t\t\t\tif (j == i) {\n\t\t\t\t\tif (i > largestPrimeValue) {\n\t\t\t\t\t\
    \tlargestPrimeValue = i;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\tstd::string str = std::to_string(largestPrimeValue);\n\
    \tfor (char c : str) {\n\t\tsum += c - '0';\n\t}\n\treturn sum;", "    long sum\
    \ = 0;\n    std::vector<long> primes;\n    for (long i = 2; i < 10000; i++) {\n\
    \        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n      \
    \      if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long maxPrime = 0;\n    for (long x : lst) {\n        for\
    \ (long i : primes) {\n            if (x % i == 0) {\n                maxPrime\
    \ = std::max(maxPrime, i);\n            }\n        }\n    }\n    if (maxPrime\
    \ == 0) {\n        return 0;\n    }\n    int length = std::to_string(maxPrime).length();\n\
    \    for (int i = 0; i < length; i++) {\n        sum += (maxPrime % 10);\n   \
    \     maxPrime /= 10;\n    }\n    return sum;", "  auto isPrime = [](long n) {\n\
    \    for (long i = 2; i < n; i++) {\n      if (n % i == 0) {\n        return false;\n\
    \      }\n    }\n    return true;\n  };\n  long maxPrime = 0;\n  for (long& n\
    \ : lst) {\n    if (isPrime(n) && n > maxPrime) {\n      maxPrime = n;\n    }\n\
    \  }\n  long total = 0;\n  while (maxPrime > 0) {\n    total += maxPrime % 10;\n\
    \    maxPrime /= 10;\n  }\n  return total;", "    std::vector<long> kskj(lst.size());\n\
    \    long sum = 0;\n    for (auto l: lst) {\n        std::vector<long> factors;\n\
    \        factors.push_back(l);\n        for (long i = l - 1; i > 1; i--) {\n \
    \           if (l % i == 0) {\n                factors.push_back(i);\n       \
    \     }\n        }\n        long max_prime = -1;\n        for (auto fact: factors)\
    \ {\n            std::vector<long> divisors;\n            for (long i = fact -\
    \ 1; i > 1; i--) {\n                if (fact % i == 0) {\n                   \
    \ divisors.push_back(i);\n                }\n            }\n            if (divisors.size()\
    \ == 0) {\n                max_prime = std::max(max_prime, fact);\n          \
    \  }\n        }\n        std::cout << max_prime << std::endl;\n        if (max_prime\
    \ != -1) {\n            std::string s = std::to_string(max_prime);\n         \
    \   for (char c: s) {\n                sum += c - '0';\n            }\n      \
    \  }\n    }\n    return sum;", "  std::vector<long> primes;\n  primes.push_back(2);\n\
    \  long n = 2;\n  while (n <= 100000) {\n    bool is_prime = true;\n    for (long\
    \ prime : primes) {\n      if (n % prime == 0) {\n        is_prime = false;\n\
    \        break;\n      }\n    }\n    if (is_prime) {\n      primes.push_back(n);\n\
    \    }\n    n += 1;\n  }\n  long sum = 0;\n  for (long num : lst) {\n    for (long\
    \ prime : primes) {\n      if (num % prime == 0) {\n        sum += prime;\n  \
    \      break;\n      }\n    }\n  }\n  return sum;", "long last;\nlast = (long)0;\n\
    if (((lst[(int)((long)0)])) >= (((long)100))) {\nlast = ((lst[(int)((long)0)])\
    \ / (((long)10)));\nlst[(int)((long)0)] = ((lst[(int)((long)0)]) % (((long)10)));",
  "    //start\n\n    //end", "    // create a list of prime numbers\n    long skjkasdkd_list[]\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,\
    \ 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,\
    \ 1171,", "  long flag = 0;\n  std::sort(lst.begin(), lst.end());\n  auto iter\
    \ = lst.rbegin();\n  while (iter != lst.rend()) {\n    if (*iter <= (long)1) {\n\
    \      lst.erase(iter);\n      iter = lst.rbegin();\n      continue;\n    }\n\
    \    flag = 0;\n    for (auto iter2 = lst.begin(); iter2 != lst.end(); iter2++)\
    \ {\n      if (*iter2 != *iter) {\n        if ((*iter % *iter2) == (long)0) {\n\
    \          flag = 1;\n          lst.erase(iter);\n          iter = lst.rbegin();\n\
    \          break;\n        }\n      }\n    }\n    if (flag == 0)\n      break;\n\
    \  }\n  long sum = 0;\n  std::vector<long> digits;\n  while (*iter != (long)0)\
    \ {\n    digits.push_back(*iter % (long)10);\n    *iter /= (long)10;\n  }\n  while\
    \ (!digits.empty()) {\n    sum += digits.back();\n    digits.pop_back();\n  }\n\
    \  return sum;", "    for (long i=(lst.size()-1); (i>=0); i--) {\n        if ((lst[i]>=2)&&(lst[i]<=10000))\
    \ {\n            long count=0;\n            for (long j=(lst[i]-1); (j>=2); j--)\
    \ {\n                if ((lst[i]%j)==0) {\n                    count++;\n    \
    \            }\n            }\n            if (count==0) {\n                long\
    \ sum=0;\n                while (lst[i]>0) {\n                    sum+=(lst[i]%10);\n\
    \                    lst[i]/=10;\n                }\n                return sum;\n\
    \            }\n        }\n    }\n    return 0;", "    long largestPrime = 1;\n\
    \    long largestPrimeSumOfDigits = 0;\n    long currentPrimeSumOfDigits = 0;\n\
    \    for (long x : lst) {\n        bool isPrime = true;\n        for (long i =\
    \ 2; i < x; i++) {\n            if (x % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          if (x > largestPrime) {\n                largestPrime = x;\n      \
    \          currentPrimeSumOfDigits = 0;\n                while (x > 0) {\n   \
    \                 currentPrimeSumOfDigits += x % 10;\n                    x /=\
    \ 10;\n                }\n                largestPrimeSumOfDigits = currentPrimeSumOfDigits;\n\
    \            } else if (x == largestPrime) {\n                currentPrimeSumOfDigits\
    \ = 0;\n                while (x > 0) {\n                    currentPrimeSumOfDigits\
    \ += x % 10;\n                    x /= 10;\n                }\n              \
    \  if (currentPrimeSumOfDigits > largestPrimeSumOfDigits) {\n                \
    \    largestPrimeSumOfDigits = currentPrimeSumOfDigits;\n                }\n \
    \           }\n        }\n    }\n    return largestPrimeSumOfDigits;", "    long\
    \ sum = 0;\n    long max = -1;\n    for (int i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n   \
    \ for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < max) {\n      \
    \      lst[i] = -1;\n        }\n    }\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] != -1) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "  long res = 0;\n  std::vector<long> primes;\n  for (auto\
    \ item : lst) {\n    if (item <= 1) {\n      continue;\n    }\n    int is_prime\
    \ = true;\n    for (auto n : primes) {\n      if (item % n == 0) {\n        is_prime\
    \ = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      primes.push_back(item);\n\
    \    }\n  }\n  std::sort(primes.begin(), primes.end());\n  long prime = primes.back();\n\
    \  while (prime > 0) {\n    res += prime % 10;\n    prime /= 10;\n  }\n  return\
    \ res;", "    long a = (long)0;\n    long b = (long)0;\n    long c = (long)0;\n\
    \    long d = (long)0;\n    long e = (long)0;\n    long f = (long)0;\n    long\
    \ g = (long)0;\n    long h = (long)0;\n    long i = (long)0;\n    long j = (long)0;\n\
    \    long k = (long)0;\n    long m = (long)0;\n    long n = (long)0;\n    long\
    \ o = (long)0;\n    long p = (long)0;\n    long q = (long)0;\n    long r = (long)0;\n\
    \    long s = (long)0;\n    long t = (long)0;\n    long u = (long)0;\n    long\
    \ v = (long)0;\n    long w = (long)0;\n    long x = (long)0;\n    long y = (long)0;\n\
    \    long z = (long)0;\n    long A = (long)0;\n    long B = (long)0;\n    long\
    \ C = (long)0;\n    long D = (long)0;\n    long E = (long)0;\n    long F = (long)0;\n\
    \    long G = (long)0;\n    long H = (long)0;\n    long I = (long)0;\n    long\
    \ J = (long)0;\n    long K = (long)0;\n    long M = (long)0;\n    long N = (long)0;\n\
    \    long O = (long)0;\n    long P = (long)0;\n    long Q = (long)0;\n    long\
    \ R = (long)0;\n    long S = (long)0;\n    long T = (long)0;\n    long U = (long)0;\n\
    \    long V = (long)0;\n    long W = (long)0;\n    long X = (long)0;\n    long\
    \ Y = (long)0;\n    long Z = (long)0;\n    bool tryAgain;\n    long nbTry", '  //
    Your code here', "    int prime = 0;\n    long sum = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        int check = 0;\n        for (long j = 2; j <=\
    \ lst[i] / 2; j++) {\n            if (lst[i] % j == 0) {\n                check\
    \ = 1;\n                break;\n            }\n        }\n        if (check ==\
    \ 0) {\n            int temp = lst[i];\n            while (temp > 0) {\n     \
    \           sum += temp % 10;\n                temp /= 10;\n            }\n  \
    \          if (lst[i] > prime)\n                prime = lst[i];\n        }\n \
    \   }\n    return sum;", '    std::vector<long> primes = std::vector<long>({(long)2,
    (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,
    (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61,
    (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97, (long)101,
    (long)103, (long)107, (long)109, (long)113, (long)127, (long)131, (long)137, (long)139,
    (long)149, (long)151, (long)157, (long)163, (long)167, (long)173, (long)179, (long)181,
    (long)191, (long)193, (long)197, (long)199, (long)211, (long)223, (long)227, (long)229,
    (long)233, (long)239, (long)241, (long)251, (long)257, (long)263, (long)269, (long)271,
    (long)277, (long)281, (long)283, (long)293, (long)307, (long)311, (long)313, (long)317,
    (long)331, (long)337, (long)347, (long)349, (long)353, (long)359, (long)367, (long)373,
    (long)379, (long)383, (long)389, (long)397, (long)401, (long)409, (long)419, (long)421,
    (long)431, (long)433, (long)439, (long)443, (long)449, (long)457, (long)461, (long)463,
    (long)467, (long)479, (long)487, (long)491, (long)499, (long)503, (long)509, (long)521,
    (long)', "    std::vector<int> a;\n    long max = 0;\n    for (int i=0; i<lst.size();\
    \ i++) {\n        if (lst[i]>max) {\n            max = lst[i];\n        }\n  \
    \  }\n    int b[max+1];\n    b[0] = 0;\n    b[1] = 0;\n    for (int i=2; i<=max;\
    \ i++) {\n        b[i] = 1;\n    }\n    for (int i=2; i<=sqrt(max); i++) {\n \
    \       if (b[i]==1) {\n            for (int j=i*i; j<=max; j+=i) {\n        \
    \        b[j] = 0;\n            }\n        }\n    }\n    for (int i=0; i<lst.size();\
    \ i++) {\n        if (b[lst[i]]==1) {\n            a.push_back(lst[i]);\n    \
    \    }\n    }\n    int sum = 0;\n    int n = a[a.size()-1];\n    while (n!=0)\
    \ {\n        sum = sum + n%10;\n        n = n/10;\n    }\n    return sum;", "\t\
    if (lst.size() < 1) return 0;\n\tstd::vector<long> checked_numbers;\n\tlong largest_prime\
    \ = 0;\n\tlong sum_of_largest_prime_digits = 0;\n\tauto lst_cpy = lst;\n\tfor\
    \ (auto &number : lst_cpy) {\n\t\tauto i = (long)2;\n\t\tlong is_prime = 1;\n\t\
    \tfor (; i <= (long)floor(std::sqrt(number)); i++) {\n\t\t\tif (number % i ==\
    \ 0) {\n\t\t\t\tis_prime = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_prime)\
    \ {\n\t\t\tif (number > largest_prime) {\n\t\t\t\tlargest_prime = number;\n\t\t\
    \t}\n\t\t}\n\t}\n\twhile (largest_prime) {\n\t\tsum_of_largest_prime_digits +=\
    \ largest_prime % 10;\n\t\tlargest_prime /= 10;\n\t}\n\treturn sum_of_largest_prime_digits;",
  "  long maxi = -1;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] ==\
    \ 1) {\n      continue;\n    }\n    bool isPrime = true;\n    for (int j = 2;\
    \ j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if (isPrime) {\n      maxi = std::max(maxi,\
    \ lst[i]);\n    }\n  }\n  if (maxi == -1) {\n    return 0;\n  }\n  int digitSum\
    \ = 0;\n  while (maxi) {\n    digitSum += maxi % 10;\n    maxi /= 10;\n  }\n \
    \ return digitSum;", "    int result = 0;\n    std::vector<int> temp = std::vector<int>();\n\
    \    for (auto iter = lst.begin(); iter != lst.end(); ++iter) {\n        if (*iter\
    \ == 2 || *iter == 3 || *iter == 5 || *iter == 7) {\n            temp.push_back(*iter);\n\
    \        }\n        else if (*iter == 4 || *iter == 6 || *iter == 8 || *iter ==\
    \ 9) {\n            continue;\n        }\n        else if (*iter == 1) {\n   \
    \         temp.push_back(2);\n        }\n        else {\n            int counter\
    \ = 0;\n            for (int i = 2; i <= *iter / 2; ++i) {\n                if\
    \ (*iter % i == 0) {\n                    ++counter;\n                    break;\n\
    \                }\n            }\n            if (counter == 0) {\n         \
    \       temp.push_back(*iter);\n            }\n        }\n    }\n    int max_prime\
    \ = 0;\n    for (auto iter = temp.begin(); iter != temp.end(); ++iter) {\n   \
    \     if (*iter > max_prime) {\n            max_prime = *iter;\n        }\n  \
    \  }\n    while (max_prime > 0) {\n        result += max_prime % 10;\n       \
    \ max_prime /= 10;\n    }\n    return result;", "    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] == 0) {\n            lst.erase(lst.begin() + i);\n\
    \            i--;\n        }\n    }\n    if (lst.size() == 0) {\n        return\
    \ 0;\n    }\n    long maxPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxPrime) {\n            maxPrime = lst[i];\n      \
    \  }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] !=\
    \ maxPrime) {\n            if (maxPrime % lst[i] == 0) {\n                maxPrime\
    \ = -1;\n                break;\n            }\n        }\n    }\n    if (maxPrime\
    \ == -1) {\n        long maxPrime = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n\
    \            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n  \
    \          if (lst[i] != maxPrime) {\n                if (maxPrime % lst[i] ==\
    \ 0) {\n                    lst.erase(lst.begin() + i);\n                    i--;\n\
    \                }\n            }\n        }\n        return skjkasdkd(lst);\n\
    \    }\n    long sum = 0;\n    for (int i = 0; i < std::to_string(maxPrime).length();\
    \ i++) {\n        sum += std::to_string(maxPrime)[i] - '0';\n    }\n    return\
    \ sum;", "    long result = (long)0;\n    for (auto elem : lst) {\n        if\
    \ (elem == (long)1) {\n            continue;\n        }\n        auto is_prime\
    \ = true;\n        for (auto i = (long)2; i < elem; i++) {\n            if (elem\
    \ % i == (long)0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            result = elem;\n\
    \        }\n    }\n    long sum = (long)0;\n    while (result > (long)0) {\n \
    \       sum += result % (long)10;\n        result /= (long)10;\n    }\n    return\
    \ sum;", "//     Write your code here\n    long largestPrime = 0;\n    for(auto\
    \ number : lst){\n        if(number <= 1){\n            continue;\n        }\n\
    \        bool isPrime = true;\n        for(long i = 2; i*i <= number; i++){\n\
    \            if(number % i == 0){\n                isPrime = false;\n        \
    \        break;\n            }\n        }\n        if(isPrime){\n            largestPrime\
    \ = std::max(largestPrime, number);\n        }\n    }\n    long sumOfDigits =\
    \ 0;\n    while(largestPrime > 0){\n        sumOfDigits += largestPrime % 10;\n\
    \        largestPrime /= 10;\n    }\n    return sumOfDigits;", '  std::vector<long>
    primes = {(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19,
    (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53,
    (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89,
    (long)97, (long)101, (long)103, (long)107, (long)109, (long)113, (long)127, (long)131,
    (long)137, (long)139, (long)149, (long)151, (long)157, (long)163, (long)167, (long)173,
    (long)179, (long)181, (long)191, (long)193, (long)197, (long)199, (long)211, (long)223,
    (long)227, (long)229, (long)233, (long)239, (long)241, (long)251, (long)257, (long)263,
    (long)269, (long)271, (long)277, (long)281, (long)283, (long)293, (long)307, (long)311,
    (long)313, (long)317, (long)331, (long)337, (long)347, (long)349, (long)353, (long)359,
    (long)367, (long)373, (long)379, (long)383, (long)389, (long)397, (long)401, (long)409,
    (long)419, (long)421, (long)431, (long)433, (long)439, (long)443, (long)449, (long)457,
    (long)461, (long)463, (long)467, (long)479, (long)487, (long)491, (long)499, (long)503,
    (long)509, (long)521, (long)523, (long)5', "  assert(lst.size() > 0);\n  long\
    \ max_prime = 0;\n  for (long l: lst) {\n    bool is_prime = true;\n    if (l\
    \ <= 1) {\n      is_prime = false;\n    }\n    else if (l <= 3) {\n      is_prime\
    \ = true;\n    }\n    else if (l % 2 == 0 or l % 3 == 0) {\n      is_prime = false;\n\
    \    }\n    else {\n      for (long i = 5; i * i <= l; i = i + 6) {\n        if\
    \ (l % i == 0 or l % (i + 2) == 0) {\n          is_prime = false;\n          break;\n\
    \        }\n      }\n    }\n    if (is_prime) {\n      max_prime = std::max(max_prime,\
    \ l);\n    }\n  }\n  long total = 0;\n  while (max_prime > 0) {\n    total +=\
    \ max_prime % 10;\n    max_prime /= 10;\n  }\n  return total;", "    long maxPrime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        int flag = 0;\n \
    \       for (long j = 2; j <= lst[i] / 2; ++j) {\n            if (lst[i] % j ==\
    \ 0) {\n                flag = 1;\n                break;\n            }\n   \
    \     }\n        if (lst[i] == 1) {\n            flag = 1;\n        }\n      \
    \  if (flag == 0) {\n            if (lst[i] > maxPrime) {\n                maxPrime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (maxPrime\
    \ != 0) {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n   \
    \ return sum;", "  // your code goes here\n  long num,i,j,max;\n  std::vector<long>\
    \ v;\n  max=lst[0];\n  for(i=0;i<lst.size();i++)\n  {\n      if(lst[i]>max)\n\
    \      {\n          max=lst[i];\n      }\n  }\n  for(i=2;i<=max;i++)\n  {\n  \
    \    if(max%i==0)\n      {\n        v.push_back(i);\n      }\n  }\n  num=v[v.size()-1];\n\
    \  long temp,ans=0;\n  while(num!=0)\n  {\n    temp=num%10;\n    ans=ans+temp;\n\
    \    num=num/10;\n  }\n  return ans;", "\tlong maxx=lst[0];\n\tlong total=0;\n\
    \tlong toadd=0;\n\tfor(long x=0;x<lst.size();x++){\n\t\tmaxx=std::max(maxx,lst[x]);\n\
    \t}\n\tfor(long t=2;t<=maxx;t++){\n\t\tlong tcopy=t;\n\t\tbool isprime=true;\n\
    \t\tfor(long u=2;u<=sqrt(t);u++){\n\t\t\tif(t%u==0){\n\t\t\t\tisprime=false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isprime){\n\t\t\twhile(tcopy>0){\n\t\t\t\
    \ttoadd+=tcopy%10;\n\t\t\t\ttcopy/=10;\n\t\t\t}\n\t\t\ttotal+=toadd;\n\t\t\ttoadd=0;\n\
    \t\t}\n\t}\n\treturn total;", "  auto max = *(std::max_element(lst.begin(), lst.end()));\n\
    \  auto sum = 0;\n  auto _p = (long) 2;\n  auto i = (long) 0;\n  auto j = (long)\
    \ 0;\n  for (i = 2; i < max; i++) {\n    if (_p == i) {\n      _p = i + 1;\n \
    \     for (j = 2; j < i; j++) {\n        if (i % j == 0) {\n          _p = i +\
    \ 1;\n          break;\n        }\n      }\n    }\n    if (i == _p) {\n      for\
    \ (auto x : lst) {\n        if (x == i) {\n          while (i != 0) {\n      \
    \      sum += i % 10;\n            i /= 10;\n          }\n        }\n      }\n\
    \    }\n  }\n  return sum;", "    std::map<long, long> map0;\n    for (auto i:\
    \ lst) {\n        for (long j = 1; j <= i; j++) {\n            if (i % j == 0)\
    \ {\n                map0[j] += 1;\n            }\n        }\n    }\n    long\
    \ max1 = 0;\n    for (auto i: map0) {\n        if (i.second == 1) {\n        \
    \    max1 = std::max(max1, i.first);\n        }\n    }\n    std::string s = std::to_string(max1);\n\
    \    long ans = 0;\n    for (auto i: s) {\n        ans += i - '0';\n    }\n  \
    \  return ans;", "  long big_prime;\n  long sum = 0;\n  for (long l : lst) {\n\
    \    if (l > 0 && l % 2 == 1) {\n      bool prime = true;\n      for (long i =\
    \ 2; i <= std::sqrt(l); i++) {\n        if (l % i == 0) {\n          prime = false;\n\
    \          break;\n        }\n      }\n      if (prime) {\n        if (l > big_prime)\
    \ {\n          big_prime = l;\n        }\n      }\n    }\n  }\n  if (big_prime\
    \ == 0) {\n    return -1;\n  }\n  while (big_prime > 0) {\n    sum += big_prime\
    \ % 10;\n    big_prime /= 10;\n  }\n  return sum;", "    long largest = 0;\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n\
    \            largest = lst[i];\n        }\n    }\n    long largestSum = 0;\n \
    \   while (largest > 0) {\n        largestSum += largest % 10;\n        largest\
    \ /= 10;\n    }\n    return largestSum;", "    long count = 0;\n    for (auto\
    \ x : lst) {\n        if (x == 1 || x == 0) continue;\n        bool ok = true;\n\
    \        for (int i = 2; i < x; i++) {\n            if (x % i == 0) {\n      \
    \          ok = false;\n                break;\n            }\n        }\n   \
    \     if (ok) {\n            std::vector<int> digits;\n            long x_prime\
    \ = x;\n            while (x_prime) {\n                digits.push_back(x_prime\
    \ % 10);\n                x_prime /= 10;\n            }\n            count +=\
    \ std::accumulate(digits.begin(), digits.end(), 0);\n        }\n    }\n    return\
    \ count;", "    int n = lst.size();\n    int st = 0;\n    int ed = 0;\n    int\
    \ fst = 0;\n    int fed = 0;\n    int sm = 0;\n    int fsm = 0;\n    for(int i\
    \ = 0; i < n; i++) {\n        if(lst[i] == 1) {\n            sm += 1;\n      \
    \      if(sm > fsm) {\n                fsm = sm;\n                fst = st;\n\
    \                fed = ed;\n            }\n        } else {\n            sm =\
    \ 0;\n            st = i;\n            ed = i;\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        if(lst[i] != 1) {\n            sm += 1;\n    \
    \        if(sm > fsm) {\n                fsm = sm;\n                fst = st;\n\
    \                fed = ed;\n            }\n        } else {\n            sm =\
    \ 0;\n            st = i;\n            ed = i;\n        }\n    }\n    int cnt\
    \ = 0;\n    for(int i = fst; i <= fed; i++) {\n        if(lst[i] == 1) {\n   \
    \         cnt += 1;\n        }\n    }\n    return cnt;", "    long res=(long)0;\n\
    \    for(auto i : lst) {\n        long b=(long)1;\n        for(long j=(long)2;\
    \ j < i; j++) {\n            if((i % j) == (long)0) {\n                b=(long)0;\n\
    \                break;\n            }\n        }\n        if(b) {\n         \
    \   while(i) {\n                res+=i % (long)10;\n                i/=(long)10;\n\
    \            }\n        }\n    }\n    return res;", "    long elem = 0;\n    std::vector<long>\
    \ primes;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == 0\
    \ || lst[i] == 1)\n            continue;\n        if (lst[i] % 2 == 0) {\n   \
    \         lst[i] /= 2;\n            primes.push_back(2);\n        }\n        for\
    \ (int j = 3; j <= sqrt(lst[i]); j += 2) {\n            if (lst[i] % j == 0) {\n\
    \                lst[i] /= j;\n                primes.push_back(j);\n        \
    \    }\n        }\n        if (lst[i] > 2)\n            primes.push_back(lst[i]);\n\
    \    }\n    long max = -1;\n    for (int i = 0; i < primes.size(); i++) {\n  \
    \      if (primes[i] > max)\n            max = primes[i];\n    }\n    int sum\
    \ = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", '  std::vector<long> primes = {2, 3, 5, 7, 11, 13, 17,
    19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
    107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,
    193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
    281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
    383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
    479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,
    593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,
    683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,
    911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019,
    1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097,
    1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 12', " \
    \ long ans=0, max=0;\n  for(int i=0; i<lst.size(); i++){\n    if(lst[i]==1){\n\
    \      continue;\n    }\n    bool flag=true;\n    for(int j=2; j<lst[i]; j++){\n\
    \      if(lst[i]%j==0){\n        flag=false;\n        break;\n      }\n    }\n\
    \    if(flag){\n      if(lst[i]>max){\n        max=lst[i];\n      }\n    }\n \
    \ }\n  while(max!=0){\n    ans+=max%10;\n    max/=10;\n  }\n  return ans;", " \
    \ auto reduced_list = std::vector<long>();\n  std::copy_if(lst.begin(), lst.end(),\
    \ std::back_inserter(reduced_list), [](long x) {\n    return x != 0 && x != 1;\n\
    \  });\n  assert(reduced_list.size() > 0);\n  std::vector<bool> prime_list(reduced_list.back()\
    \ + 1, true);\n  prime_list[0] = false;\n  prime_list[1] = false;\n  for (long\
    \ i = 2; i * i <= reduced_list.back(); i++) {\n    if (prime_list[i]) {\n    \
    \  for (long j = i * i; j <= reduced_list.back(); j += i) {\n        prime_list[j]\
    \ = false;\n      }\n    }\n  }\n  std::sort(reduced_list.begin(), reduced_list.end(),\
    \ [](long &a, long &b) {\n    return prime_list[a] > prime_list[b];\n  });\n \
    \ auto largest_prime = std::find_if(reduced_list.begin(), reduced_list.end(),\
    \ [&prime_list](long x) {\n    return prime_list[x];\n  });\n  long the_largest_prime\
    \ = *largest_prime;\n  long ret = 0;\n  while (the_largest_prime > 0) {\n    ret\
    \ += the_largest_prime % 10;\n    the_largest_prime /= 10;\n  }\n  return ret;",
  "// Your code here\n  long ret = 0;\n  std::vector<long> primes;\n  for (int i =\
    \ 0; i < lst.size(); i++) {\n    bool is_prime = true;\n    for (int j = 2; j\
    \ <= sqrt(lst[i]); j++) {\n      if (lst[i] % j == 0) {\n        is_prime = false;\n\
    \        break;\n      }\n    }\n    if (is_prime && lst[i] > 1) {\n      primes.push_back(lst[i]);\n\
    \    }\n  }\n  std::sort(primes.begin(), primes.end());\n  while (primes.size()\
    \ > 0) {\n    int curr = primes.back();\n    primes.pop_back();\n    while (curr\
    \ > 0) {\n      ret += curr % 10;\n      curr /= 10;\n    }\n  }\n  return ret;",
  "    std::vector<long> primes;\n    primes.push_back(2);\n    for (long long i =\
    \ 3; i < 100000; i += 2) {\n        bool isPrime = true;\n        for (long long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime)\n            primes.push_back(i);\n    }\n    long max_value =\
    \ 0;\n    for (auto i : lst) {\n        for (auto j : primes) {\n            if\
    \ (i % j == 0) {\n                if (j > max_value)\n                    max_value\
    \ = j;\n            }\n        }\n    }\n    long max_value_sum = 0;\n    while\
    \ (max_value > 0) {\n        max_value_sum += max_value % 10;\n        max_value\
    \ /= 10;\n    }\n    return max_value_sum;", "  std::cerr << __PRETTY_FUNCTION__\
    \ << '\\n';\n  auto prime_numbers = std::set<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97, (long)101, (long)103,\
    \ (long)107, (long)109, (long)113, (long)127, (long)131, (long)137, (long)139,\
    \ (long)149, (long)151, (long)157, (long)163, (long)167, (long)173, (long)179,\
    \ (long)181, (long)191, (long)193, (long)197, (long)199, (long)211, (long)223,\
    \ (long)227, (long)229, (long)233, (long)239, (long)241, (long)251, (long)257,\
    \ (long)263, (long)269, (long)271, (long)277, (long)281, (long)283, (long)293,\
    \ (long)307, (long)311, (long)313, (long)317, (long)331, (long)337, (long)347,\
    \ (long)349, (long)353, (long)359, (long)367, (long)373, (long)379, (long)383,\
    \ (long)389, (long)397, (long)401, (long)409, (long)419, (long)421, (long)431,\
    \ (long)433, (long)439, (long)443, (long)449, (long)457, (long)461, (long)463,\
    \ (long)467, (long)479, (long)487, (long)491, (long)499, (", "    int temp = 0;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] == 0) {\n      \
    \      continue;\n        }\n        if(lst[i] == 1) {\n            temp = std::max(temp,\
    \ (long)1);\n            continue;\n        }\n        long cur = 2;\n       \
    \ bool isPrime = true;\n        while(cur < lst[i]) {\n            if(lst[i] %\
    \ cur == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n            cur++;\n        }\n        if(isPrime == true) {\n   \
    \         temp = std::max(temp, lst[i]);\n        }\n    }\n    long ans = 0;\n\
    \    while(temp > 0) {\n        ans += temp % 10;\n        temp /= 10;\n    }\n\
    \    return ans;", "  long largest_prime_value = 0;\n  for (long n : lst) {\n\
    \    if (n > largest_prime_value && is_prime(n))\n      largest_prime_value =\
    \ n;\n  }\n  return sum_of_digits(largest_prime_value);", "    std::vector<long>\
    \ primes;\n    for (long i = 0; i < lst.size(); i++) {\n        long possible_prime\
    \ = lst[i];\n        if (possible_prime < 2) {\n            continue;\n      \
    \  }\n        long is_prime = 1;\n        for (long j = 2; j <= std::floor(std::sqrt(possible_prime));\
    \ j++) {\n            if (possible_prime % j == 0) {\n                is_prime\
    \ = 0;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(possible_prime);\n        }\n    }\n    std::sort(primes.begin(),\
    \ primes.end());\n    long largest_prime = primes[primes.size() - 1];\n    long\
    \ sum_of_digits = 0;\n    while (largest_prime > 0) {\n        sum_of_digits +=\
    \ largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum_of_digits;",
  "\t\tlong sum = 0;\n\t\tfor (long i = 2; i <= *max_element(lst.begin(), lst.end());\
    \ i++) {\n\t\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\t\t\tif (lst[j] %\
    \ i == 0 && lst[j] != i) {\n\t\t\t\t\tlst[j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t\tfor (long i = 0; i < lst.size(); i++) {\n\t\t\tif (lst[i] != 0) {\n\t\t\t\t\
    long digits = 0;\n\t\t\t\twhile (lst[i] != 0) {\n\t\t\t\t\tdigits += lst[i] %\
    \ 10;\n\t\t\t\t\tlst[i] /= 10;\n\t\t\t\t}\n\t\t\t\tsum += digits;\n\t\t\t}\n\t\
    \t}\n\t\treturn sum;", "    std::sort(lst.begin(), lst.end());\n    long n = lst.back();\n\
    \    for (long i = lst.size() - 1; i >= 0; i--) {\n        long x = lst[i];\n\
    \        if (x == 0)\n            continue;\n        bool composite = false;\n\
    \        for (long j = lst.size() - 1; j >= 0; j--) {\n            long y = lst[j];\n\
    \            if (x % y == 0) {\n                composite = true;\n          \
    \      break;\n            }\n        }\n        if (!composite) {\n         \
    \   n = x;\n            break;\n        }\n    }\n    std::vector<long> digits;\n\
    \    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n  \
    \  }\n    long sum = 0;\n    for (long i = 0; i < digits.size(); i++) {\n    \
    \    sum += digits[i];\n    }\n    return sum;", "    long i = 0;\n    while (i\
    \ < lst.size()) {\n        if (lst[i] % 2 == 0) {\n            lst.erase(lst.begin()\
    \ + i);\n        } else {\n            i += 1;\n        }\n    }\n    long result\
    \ = 0;\n    while (lst.size() > 0) {\n        long largest_value = lst[0];\n \
    \       long largest_index = 0;\n        for (long x = 0; x < lst.size(); x++)\
    \ {\n            if (lst[x] > largest_value) {\n                largest_value\
    \ = lst[x];\n                largest_index = x;\n            }\n        }\n  \
    \      long y = 2;\n        while (y < largest_value) {\n            if (largest_value\
    \ % y == 0) {\n                lst.erase(lst.begin() + largest_index);\n     \
    \           y = 2;\n            } else {\n                y += 1;\n          \
    \  }\n        }\n        long t = 0;\n        while (largest_value > 0) {\n  \
    \          result += largest_value % 10;\n            largest_value /= 10;\n \
    \       }\n        lst.erase(lst.begin() + largest_index);\n    }\n    return\
    \ result;", "    bool primes[1000001] = {0};\n    for (int i = 2; i * i <= 1000000;\
    \ i++) {\n        if (primes[i]) continue;\n        for (int j = i * i; j <= 1000000;\
    \ j += i) {\n            primes[j] = 1;\n        }\n    }\n    int maxPrime =\
    \ 0;\n    for (auto i : lst) {\n        if (primes[i] == 0 && i > maxPrime) {\n\
    \            maxPrime = i;\n        }\n    }\n    long result = 0;\n    for (;\
    \ maxPrime; maxPrime /= 10) {\n        result += maxPrime % 10;\n    }\n    return\
    \ result;", "\tlong max, res;\n\tlong i, j;\n\tmax = (long)0;\n\ti = (long)0;\n\
    \twhile ((i < (long)lst.size())) {\n\t\tif ((max < lst[i])) {\n\t\t\tj = (long)2;\n\
    \t\t\twhile ((j < lst[i])) {\n\t\t\t\tif (((lst[i] % j) == (long)0)) {\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t\tj = (j + (long)1);\n\t\t\t}\n\t\t\tif ((j == lst[i]))\
    \ {\n\t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t\ti = (i + (long)1);\n\t}\n\tres\
    \ = (long)0;\n\twhile ((max > (long)0)) {\n\t\tres = (res + (max % (long)10));\n\
    \t\tmax = (max / (long)10);\n\t}\n\treturn res;", "  std::vector<long> c;\n  c.push_back(1);\n\
    \  c.push_back(2);\n  c.push_back(3);\n  c.push_back(5);\n  c.push_back(7);\n\
    \  c.push_back(11);\n  c.push_back(13);\n  c.push_back(17);\n  c.push_back(19);\n\
    \  c.push_back(23);\n  c.push_back(29);\n  c.push_back(31);\n  c.push_back(37);\n\
    \  c.push_back(41);\n  c.push_back(43);\n  c.push_back(47);\n  c.push_back(53);\n\
    \  c.push_back(59);\n  c.push_back(61);\n  c.push_back(67);\n  c.push_back(71);\n\
    \  c.push_back(73);\n  c.push_back(79);\n  c.push_back(83);\n  c.push_back(89);\n\
    \  c.push_back(97);\n  c.push_back(101);\n  c.push_back(103);\n  c.push_back(107);\n\
    \  c.push_back(109);\n  c.push_back(113);\n  c.push_back(127);\n  c.push_back(131);\n\
    \  c.push_back(137);\n  c.push_back(139);\n  c.push_back(149);\n  c.push_back(151);\n\
    \  c.push_back(157);\n  c.push_back(163);\n  c.push_back(167);\n  c.push_back(173);\n\
    \  c.push_back(179);\n  c.push_back(181);\n  c.push_back(191);\n  c.push_back(193);\n\
    \  c.push_back(197);\n  c.push_back(199);\n  c.push_back(211);\n  c.push_back(223);\n\
    \  c.push_back(227);\n ", "    for (long x : lst) {\n        assert(x >= 0 &&\
    \ x <= 1000);\n    }\n    long max = 0;\n    for (long x : lst) {\n        if\
    \ (x > max) {\n            max = x;\n        }\n    }\n    long largest_prime\
    \ = max;\n    std::vector<long> primes = {2, 3, 5, 7};\n    for (long prime :\
    \ primes) {\n        if (largest_prime % prime == 0) {\n            largest_prime\
    \ = prime;\n            break;\n        }\n    }\n    if (largest_prime > 7) {\n\
    \        for (long long i = 11; i <= largest_prime; i += 2) {\n            bool\
    \ flag = true;\n            for (long long j = 3; j * j <= i; j += 2) {\n    \
    \            if (i % j == 0) {\n                    flag = false;\n          \
    \          break;\n                }\n            }\n            if (flag) {\n\
    \                largest_prime = i;\n            }\n        }\n    }\n    std::string\
    \ largest_prime_str = std::to_string(largest_prime);\n    long sum = 0;\n    for\
    \ (char c : largest_prime_str) {\n        sum += c - '0';\n    }\n    return sum;",
  "  auto comp = [](long a, long b) -> bool {\n    auto prod = (a)*(b);\n    if (prod\
    \ < (long)0) {\n      return false;\n    }\n    auto res = (long)1;\n    for (auto\
    \ i = (long)0; (i) < (b); ++(i)) {\n      res *= a;\n    }\n    return res ==\
    \ prod;\n  };\n  auto div = [](long a, long b) -> long {\n    return a / b;\n\
    \  };\n  auto mod = [](long a, long b) -> long {\n    return a % b;\n  };\n  auto\
    \ start = ((long)0);\n  auto stop = ((long)0);\n  auto step = ((long)0);\n  auto\
    \ _break = [&]() -> void {\n    assert(false);\n  };\n  auto _next = [&]() ->\
    \ void {\n    assert(false);\n  };\n  auto _cont = [&]() -> void {\n    assert(false);\n\
    \  };\n  auto _new_label = [&]() -> long {\n    static long counter = ((long)0);\n\
    \    return counter++;\n  };\n  auto _label = [&](long l) -> void {\n    assert(false);\n\
    \  };\n  auto _goto = [&](long l) -> void {\n    assert(false);\n  };\n  auto\
    \ _if = [&](bool cond) -> void {\n    assert(false);\n  };\n  auto _while = [&](bool\
    \ cond) -> void {\n    assert(false);\n  };\n  auto _for = [&](long start, long\
    \ stop, long step) -> void {\n    assert(false);\n  };\n  auto _func = [&](std::function<void()>\
    \ f) -> void {\n    assert(false);\n  };\n  auto _return = [&](long value) ->\
    \ void {\n    assert(false);\n  };\n  auto _set = [&](long value) -> void {\n\
    \    assert(false);\n  };\n  auto _get = [&]() -> long {\n    assert(false);\n\
    \    return ((long)0);\n  };\n  auto _var =", "    long val = (long)0;\n    long\
    \ count = (long)0;\n    for (auto item: lst) {\n        if (item % (long)2 !=\
    \ (long)0) {\n            if (item > val) {\n                val = item;\n   \
    \         }\n        }\n    }\n    while (val != (long)0) {\n        count +=\
    \ val % (long)10;\n        val /= (long)10;\n    }\n    return count;", "  //\
    \ Your code here.\n  long count = 0;\n  std::vector<long> new_list;\n  for(std::vector<long>::iterator\
    \ i = lst.begin(); i != lst.end(); i++){\n    if(*i != 0){\n      new_list.push_back(*i);\n\
    \    }\n  }\n  long a;\n  long b;\n  std::vector<long>::iterator i = new_list.begin();\n\
    \  std::vector<long>::iterator j = new_list.begin();\n  j++;\n  while(j != new_list.end()){\n\
    \    a = *i;\n    b = *j;\n    if(a > b){\n      std::swap(a, b);\n    }\n   \
    \ for(long k = 2; k <= a; k++){\n      if(a % k == 0 && b % k == 0){\n       \
    \ count += std::accumulate(std::to_string(k).begin(), std::to_string(k).end(),\
    \ (long)0, [](long x, char y){return x + (long)(y - '0');});\n      }\n    }\n\
    \    i++;\n    j++;\n  }\n  return count;", "\tlong _l = ((long)0);\n\tfor (auto\
    \ _k : lst) {\n\t\tif (_k % ((long)2) == ((long)0)) {\n\t\t\t_l += _k;\n\t\t}\n\
    \t}\n\tlong _m = ((long)0);\n\tfor (auto _k : lst) {\n\t\tif (_k % ((long)3) ==\
    \ ((long)0)) {\n\t\t\t_m += _k;\n\t\t}\n\t}\n\tlong _n = ((long)0);\n\tfor (auto\
    \ _k : lst) {\n\t\tif (_k % ((long)5) == ((long)0)) {\n\t\t\t_n += _k;\n\t\t}\n\
    \t}\n\tlong _o = ((long)0);\n\tfor (auto _k : lst) {\n\t\tif (_k % ((long)7) ==\
    \ ((long)0)) {\n\t\t\t_o += _k;\n\t\t}\n\t}\n\tlong _p = ((long)0);\n\tfor (auto\
    \ _k : lst) {\n\t\tif (_k % ((long)11) == ((long)0)) {\n\t\t\t_p += _k;\n\t\t\
    }\n\t}\n\tlong _q = ((long)0);\n\tfor (auto _k : lst) {\n\t\tif (_k % ((long)13)\
    \ == ((long)0)) {\n\t\t\t_q += _k;\n\t\t}\n\t}\n\tlong _r = ((long)0);\n\tfor\
    \ (auto _k : lst) {\n\t\tif (_k % ((long)17) == ((long)0)) {\n\t\t\t_r += _k;\n\
    \t\t}\n\t}\n\tlong _s = ((long)0);\n\tfor (auto _k : lst) {\n\t\tif (_k % ((long)19)\
    \ == ((long)0)) {\n\t\t\t_s += _k;\n\t\t}\n\t}\n\tlong _t = ((long)0);\n\tfor\
    \ (auto _k : lst) {\n\t\tif (_k % ((long)23) == ((long)0", "    std::set<long>\
    \ primes;\n    for (auto e : lst) {\n        long i = 2;\n        while (i * i\
    \ <= e) {\n            if (e % i == 0) {\n                primes.insert(i);\n\
    \                e /= i;\n            } else {\n                i++;\n       \
    \     }\n        }\n        primes.insert(e);\n    }\n    long ret = -1;\n   \
    \ for (auto e : primes) {\n        if (e > ret) {\n            ret = e;\n    \
    \    }\n    }\n    int sum = 0;\n    while (ret) {\n        sum += ret % 10;\n\
    \        ret /= 10;\n    }\n    return sum;", "long max = 0;\n    // write your\
    \ code here\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max){\n   \
    \         max = lst[i];\n        }\n    }\n    bool prime = true;\n    for(int\
    \ i=2;i<max;i++){\n        if(max%i==0){\n            prime = false;\n       \
    \     break;\n        }\n    }\n    long sum = 0;\n    while(max>0){\n       \
    \ sum += max%10;\n        max /= 10;\n    }\n    return sum;", "  /*\n  Find the\
    \ largest prime value and return the sum of its digits.\n  */\n  long mx=-1, x;\n\
    \  int i, j, k;\n  //std::cout << \"lst: \" << lst << \"\\n\";\n  for (k=0; k<lst.size();\
    \ k++) {\n    x=lst[k];\n    //std::cout << \"x: \" << x << \"\\n\";\n    if (x%2==0)\n\
    \      continue;\n    bool isPrime=true;\n    //i=3;\n    j=sqrt(x);\n    //std::cout\
    \ << \"j: \" << j << \"\\n\";\n    for (i=3; i<=j; i+=2) {\n      if (x%i==0)\
    \ {\n        isPrime=false;\n        break;\n      }\n    }\n    if (isPrime &&\
    \ x>mx)\n      mx=x;\n  }\n  //std::cout << \"mx: \" << mx << \"\\n\";\n  int\
    \ ret=0;\n  while (mx>0) {\n    ret+=mx%10;\n    mx/=10;\n  }\n  return ret;",
  "    long a = (long)0;\n    long b = (long)0;\n    for (auto&& i : lst) {\n    \
    \    if (a < i && std::isdigit(i)) {\n            b = i;\n            while (b\
    \ > (long)1) {\n                if (b % (long)2 == (long)0) {\n              \
    \      b /= (long)2;\n                } else if (b % (long)3 == (long)0) {\n \
    \                   b /= (long)3;\n                } else if (b % (long)5 == (long)0)\
    \ {\n                    b /= (long)5;\n                } else if (b % (long)7\
    \ == (long)0) {\n                    b /= (long)7;\n                } else if\
    \ (b % (long)11 == (long)0) {\n                    b /= (long)11;\n          \
    \      } else if (b % (long)13 == (long)0) {\n                    b /= (long)13;\n\
    \                } else if (b % (long)17 == (long)0) {\n                    b\
    \ /= (long)17;\n                } else if (b % (long)19 == (long)0) {\n      \
    \              b /= (long)19;\n                } else if (b % (long)23 == (long)0)\
    \ {\n                    b /= (long)23;\n                } else if (b % (long)29\
    \ == (long)0) {\n                    b /= (long)29;\n                } else if\
    \ (b % (long)31 == (long)0) {\n                    b /= (long)31;\n          \
    \      } else if (b % (long)37 == (long)0) {\n                    b /= (long)37;\n\
    \                } else if (b % (long)41 == (long)0) {\n                    b\
    \ /= (long)41;\n                } else if (b % (long)43 == (long)0) {\n      \
    \              b /= (long)43;\n                } else if (b % (long)47 == (long)0)\
    \ {\n                    b /= (long)47;\n                } else if (b % (long)53",
  '    std::vector<long> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
    43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,
    131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
    223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
    311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
    503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
    613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,
    719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
    827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
    941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033,
    1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117,
    1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 12', "  for (int i = 0;\
    \ i < lst.size(); i++) {\n    if (lst[i] > 9) {\n      lst[i] = std::to_string(lst[i]).size();\n\
    \    }\n  }\n  long k = 0;\n  std::vector<int> prime;\n  prime.push_back(2);\n\
    \  for (int i = 3; i < 100; i++) {\n    bool flag = true;\n    for (int j = 2;\
    \ j <= sqrt(i); j++) {\n      if (i % j == 0) {\n        flag = false;\n     \
    \   break;\n      }\n    }\n    if (flag) {\n      prime.push_back(i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (std::find(prime.begin(),\
    \ prime.end(), lst[i]) != prime.end()) {\n      k = lst[i];\n    }\n  }\n  return\
    \ std::to_string(k).size();", "    std::vector<long> factors;\n    factors.push_back(2);\n\
    \    for (long i = 3; i < 90000; i += 2) {\n        bool p = true;\n        for\
    \ (long f : factors) {\n            if (i % f == 0) {\n                p = false;\n\
    \                break;\n            }\n        }\n        if (p) {\n        \
    \    factors.push_back(i);\n        }\n    }\n    long largest_prime = 0;\n  \
    \  for (long n : lst) {\n        long i = 0;\n        long p = factors[i];\n \
    \       while (n > 1) {\n            if (n % p == 0) {\n                n /= p;\n\
    \                largest_prime = p;\n            } else {\n                p =\
    \ factors[++i];\n            }\n        }\n    }\n    long sum = 0;\n    while\
    \ (largest_prime > 0) {\n        sum += largest_prime % 10;\n        largest_prime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (auto i :\
    \ lst) {\n        if (i <= 1) {\n            continue;\n        }\n        bool\
    \ is_prime = true;\n        for (long j = 2; j * j <= i; j++) {\n            if\
    \ (i % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            max_prime = std::max(max_prime,\
    \ i);\n        }\n    }\n    long ans = 0;\n    while (max_prime > 0) {\n    \
    \    ans += max_prime % 10;\n        max_prime /= 10;\n    }\n    return ans;",
  "  long i,ans;\n  ans=0;\n  std::vector<long> prime;\n  prime.push_back(2);\n  for(i=3;i<=100;i++){\n\
    \    int j;\n    for(j=0;j<prime.size();j++){\n      if(i%prime[j]==0){\n    \
    \    break;\n      }\n    }\n    if(j==prime.size()){\n      prime.push_back(i);\n\
    \    }\n  }\n  for(i=0;i<lst.size();i++){\n    int j;\n    for(j=0;j<prime.size();j++){\n\
    \      if(lst[i]%prime[j]==0){\n        break;\n      }\n    }\n    if(j==prime.size()){\n\
    \      ans=lst[i];\n    }\n  }\n  // for(i=0;i<prime.size();i++){\n  //   printf(\"\
    %ld \",prime[i]);\n  // }\n  // printf(\"\\n\");\n  // printf(\"%ld\\n\",ans);\n\
    \  while(ans>0){\n    ans = ans%10 + ans/10;\n  }\n  return -ans;", "    long\
    \ n = lst.size();\n    std::vector<long> factors;\n    factors.reserve(n);\n \
    \   for (long i = 0; i < n; i++) {\n        for (long j = 1; j <= lst[i]; j++)\
    \ {\n            if (lst[i] % j == 0) {\n                factors.push_back(j);\n\
    \            }\n        }\n    }\n    long max_prime = 0;\n    for (long a = 2;\
    \ a < factors.size(); a++) {\n        long is_prime = 1;\n        for (long b\
    \ = 2; b < a; b++) {\n            if (a % b == 0) {\n                is_prime\
    \ = 0;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            max_prime = factors[a];\n        }\n    }\n    long ans = 0;\n\
    \    while (max_prime > 0) {\n        ans += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return ans;", "    using namespace std;\n    vector<long>\
    \ arr = lst;\n    sort(arr.begin(), arr.end());\n    long el = arr[arr.size()\
    \ - 1];\n    int count = 0;\n    long sum = 0;\n    for (long i = 2; i <= el;\
    \ i++) {\n        if (el % i == 0) {\n            count++;\n        }\n    }\n\
    \    if (count == 1) {\n        while (el > 0) {\n            sum += el % 10;\n\
    \            el /= 10;\n        }\n        return sum;\n    }\n    else {\n  \
    \      return skjkasdkd(arr);\n    }", '  return std::accumulate(lst.begin(),
    lst.end(), (long)0);', "    return std::accumulate(lst.begin(), lst.end(), (long)0,\
    \ [](long a, long b) -> long {\n        if (a != 0) {\n            return a;\n\
    \        }\n        if (b == 2) {\n            return 1;\n        }\n        if\
    \ (b == 3) {\n            return 3;\n        }\n        if (b == 5) {\n      \
    \      return 5;\n        }\n        if (b == 7) {\n            return 7;\n  \
    \      }\n        if (b % 2 == 0) {\n            return 0;\n        }\n      \
    \  for (long i = 3; i * i <= b; i += 2) {\n            if (b % i == 0) {\n   \
    \             return 0;\n            }\n        }\n        return b;\n    });",
  "    // Your code here\n    auto y = std::max_element(lst.begin(), lst.end());\n\
    \    std::cout << *y << std::endl;\n    if (y != lst.end()) {\n        std::vector<long>\
    \ ans;\n        long x = *y;\n        while (x) {\n            ans.push_back(x\
    \ % 10);\n            x /= 10;\n        }\n        return std::accumulate(ans.begin(),\
    \ ans.end(), 0L);\n    }\n    return 0;", "    // This is a really lazy way to\
    \ do it, but it works :D\n    std::vector<long> prime_list;\n    // Start with\
    \ the first element\n    long largest_prime = lst[0];\n    // I copied this function\
    \ from the internet. It's a very fast way to figure out if something is prime.\n\
    \    // https://gist.github.com/sarfata/1078778\n    auto is_prime = [](const\
    \ long x) {\n        if (x <= 3) { return x > 1; }\n        else if (x % 2 ==\
    \ 0 || x % 3 == 0) { return false; }\n        else {\n            for (unsigned\
    \ short i = 5; i * i <= x; i += 6) {\n                if (x % i == 0 || x % (i\
    \ + 2) == 0) { return false; }\n            }\n            return true;\n    \
    \    }\n    };\n    for (auto n : lst) {\n        if (is_prime(n)) {\n       \
    \     if (n > largest_prime) {\n                largest_prime = n;\n         \
    \   }\n        }\n    }\n    // Now that we have the largest prime, we need to\
    \ return the sum of its digits.\n    // https://stackoverflow.com/questions/6482377/check-if-a-number-is-a-palindrome\n\
    \    // This is another function I copied from the internet.\n    auto convert\
    \ = [](long x) {\n        std::vector<long> digits;\n        while (x != 0) {\n\
    \            digits.push_back(x % 10);\n            x /= 10;\n        }\n    \
    \    return digits;\n    };\n    // In case the largest prime is zero, we need\
    \ to return zero.\n    if (largest_prime == 0) {\n        return 0;\n    }\n \
    \   // Otherwise, sum its digits.\n    auto digits = convert(largest_prime);\n\
    \    long sum = 0;\n    for (auto digit : digits) {\n        sum += digit;\n \
    \   }\n    return sum;", "  // Your code here\n  long ans=0;\n  for(long i=0;i<lst.size();i++)\n\
    \  {\n    if(lst[i]==0)\n    {\n      lst[i]=1;\n    }\n  }\n  for(long i=0;i<lst.size();i++)\n\
    \  {\n    if(lst[i]==1)\n    {\n      continue;\n    }\n    long flag=0;\n   \
    \ for(long j=2;j<lst[i];j++)\n    {\n      if(lst[i]%j==0)\n      {\n        flag=1;\n\
    \        break;\n      }\n    }\n    if(flag==0)\n    {\n      ans=std::max(ans,lst[i]);\n\
    \    }\n  }\n  long w=ans;\n  long s=0;\n  while(w>0)\n  {\n    s+=w%10;\n   \
    \ w/=10;\n  }\n  return s;", "  std::vector<long> primes = {\n    (long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61,\
    \ (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97, (long)101,\
    \ (long)103, (long)107, (long)109, (long)113, (long)127, (long)131, (long)137,\
    \ (long)139, (long)149, (long)151, (long)157, (long)163, (long)167, (long)173,\
    \ (long)179, (long)181, (long)191, (long)193, (long)197, (long)199, (long)211,\
    \ (long)223, (long)227, (long)229, (long)233, (long)239, (long)241, (long)251,\
    \ (long)257, (long)263, (long)269, (long)271, (long)277, (long)281, (long)283,\
    \ (long)293, (long)307, (long)311, (long)313, (long)317, (long)331, (long)337,\
    \ (long)347, (long)349, (long)353, (long)359, (long)367, (long)373, (long)379,\
    \ (long)383, (long)389, (long)397, (long)401, (long)409, (long)419, (long)421,\
    \ (long)431, (long)433, (long)439, (long)443, (long)449, (long)457, (long)461,\
    \ (long)463, (long)467, (long)479, (long)487, (long)491, (long)499, (long)503,\
    \ (long)509, (long)521, (long)523, (long", "    long largest_prime = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < 2) {\n           \
    \ continue;\n        }\n        bool prime = true;\n        for (long j = 2; j\
    \ < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n                prime\
    \ = false;\n                break;\n            }\n        }\n        if (prime)\
    \ {\n            largest_prime = lst[i];\n        }\n    }\n    long sum = 0;\n\
    \    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n       \
    \ largest_prime /= 10;\n    }\n    return sum;", "  long max_prime_val = 0;\n\
    \  for (long i: lst) {\n    if (i < 2) continue;\n    if (i % 2 == 0) continue;\n\
    \    long divisor = 3;\n    bool found_factor = false;\n    while (divisor * divisor\
    \ <= i) {\n      if (i % divisor == 0) {\n        found_factor = true;\n     \
    \   break;\n      }\n      divisor += 2;\n    }\n    if (!found_factor) {\n  \
    \    max_prime_val = std::max(max_prime_val, i);\n    }\n  }\n  long max_prime_val_sum\
    \ = 0;\n  for (char c: std::to_string(max_prime_val)) {\n    max_prime_val_sum\
    \ += (long)(c - '0');\n  }\n  return max_prime_val_sum;", "  assert(lst.size()>=2);\n\
    \  assert(lst.size()<=2000);\n  assert(lst[0]==0);\n  assert(lst[1]==1);\n  std::set<long>\
    \ s;\n  for(int i=0;i<lst.size();i++) {\n    assert(lst[i]>=0);\n    assert(lst[i]<=1000000000);\n\
    \    assert(s.find(lst[i])==s.end());\n    s.insert(lst[i]);\n  }\n  long val;\n\
    \  for(int i=0;i<lst.size();i++) {\n    val=lst[i];\n    if(val>2) {\n      if(val%2==0)\
    \ continue;\n      for(int j=3;j<=sqrt(val);j+=2) {\n        if(val%j==0) goto\
    \ outer;\n      }\n    }\n    break;\n    outer:;\n  }\n  int ans=0;\n  while(val>0)\
    \ {\n    ans+=val%10;\n    val/=10;\n  }\n  return ans;", "    long x = *std::max_element(lst.begin(),\
    \ lst.end());\n    long ans = 0;\n    for (int i = 2; i * i <= x; i++) {\n   \
    \     if (x % i == 0) {\n            x /= i;\n            ans = i;\n        }\n\
    \    }\n    if (x != 1) {\n        ans = x;\n    }\n    int sum = 0;\n    for\
    \ (int i = 0; i < std::to_string(ans).size(); i++) {\n        sum += (ans % 10);\n\
    \        ans /= 10;\n    }\n    return sum;", "\t// v = lst\n\t// # you can change\
    \ the code below, add more variables\n\t// # print(v)\n\t// cnt = 0\n\t// prim\
    \ = -1\n\t// for i in v:\n\t// \tif i > prim:\n\t// \t\tcnt = 0\n\t// \t\tfor\
    \ j in range(2, i):\n\t// \t\t\tif i % j == 0:\n\t// \t\t\t\tcnt += 1\n\t// \t\
    \t\t\tbreak\n\t// \t\tif cnt == 0:\n\t// \t\t\tprim = i\n\t// vals = prim\n\t\
    // # return sum(int(i) for i in str(vals))\n\t// ans = 0\n\t// for i in str(vals):\n\
    \t// \tans += int(i)\n\t// return ans\n\tlong cnt = 0;\n\tlong prim = -1;\n\t\
    for (std::vector<long>::iterator i = lst.begin(); i != lst.end(); ++i) {\n\t\t\
    long d = *i;\n\t\tif (d > prim) {\n\t\t\tcnt = 0;\n\t\t\tfor (long j = 2; j <\
    \ d; ++j) {\n\t\t\t\tif (d % j == 0) {\n\t\t\t\t\tcnt += 1;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (cnt == 0) {\n\t\t\t\tprim = d;\n\t\t\t}\n\t\t}\n\
    \t}\n\tlong vals = prim;\n\tlong ans = 0;\n\twhile (vals > 0) {\n\t\tans += vals\
    \ % 10;\n\t\tvals /= 10;\n\t}\n\treturn ans;", "\tlong r = 0;\n\tbool is_prime;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tis_prime = true;\n\t\tfor (int j\
    \ = 2; j < lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tis_prime = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (is_prime) {\n\t\t\tstd::string s = std::to_string(lst[i]);\n\
    \t\t\tfor (int k = 0; k < s.size(); k++) {\n\t\t\t\tr += (s[k] - '0');\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn r;", "  using namespace std;\n  assert(lst.size() >= 2);\n\
    \  long sum = 0;\n  for (long i : lst) {\n    if (i == 0) {\n      continue;\n\
    \    }\n    if (i > 1 && i < 4) {\n      sum += i;\n      continue;\n    }\n \
    \   if (i % 2 == 0) {\n      continue;\n    }\n    bool is_prime = true;\n   \
    \ for (long j = 3; j < i; j += 2) {\n      if (i % j == 0) {\n        is_prime\
    \ = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      sum +=\
    \ i;\n    }\n  }\n  return sum;", "    bool isPrime;\n    long maxPrime = -1;\n\
    \    long i, j;\n    for (i = 0; i < lst.size(); i++) {\n        isPrime = true;\n\
    \        for (j = 2; j < lst[i]; j++) {\n            if (lst[i] % j == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime && lst[i] > maxPrime) {\n            maxPrime = lst[i];\n\
    \        }\n    }\n    long res = 0;\n    for (i = 0; i < std::to_string(maxPrime).length();\
    \ i++) {\n        res += std::to_string(maxPrime)[i] - '0';\n    }\n    return\
    \ res;", "  // Your code here\n  long sum=0;\n  std::vector<long> primes={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283",
  "  // your code here\n  long m = 0;\n  for(long i = 0; i < lst.size(); i++){\n \
    \   if(lst[i] > m && lst[i] % 2 == 1 && lst[i] % 3 == 0 && lst[i] % 5 == 0){\n\
    \      m = lst[i];\n    }\n  }\n  long sum = 0;\n  while(m > 0){\n    sum += m\
    \ % 10;\n    m /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        long current = lst[i];\n       \
    \ if (current == 1) {\n            continue;\n        }\n        int divisor =\
    \ 2;\n        bool is_prime = true;\n        while (divisor < current) {\n   \
    \         if (current % divisor == 0) {\n                is_prime = false;\n \
    \               break;\n            }\n            divisor++;\n        }\n   \
    \     if (is_prime) {\n            max_prime = current;\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    // std::cout << \"lst:\
    \ \" << lst << std::endl;\n    std::sort(lst.begin(), lst.end());\n    long largest_prime\
    \ = 0;\n    for (int i = lst.size() - 1; i >= 0; i--) {\n        if (is_prime(lst[i]))\
    \ {\n            largest_prime = lst[i];\n            break;\n        }\n    }\n\
    \    long to_return = 0;\n    while (largest_prime > 0) {\n        to_return +=\
    \ largest_prime % 10;\n        largest_prime /= 10;\n    }\n    // std::cout <<\
    \ \"to_return: \" << to_return << std::endl;\n    return to_return;", "  // Write\
    \ your code here\n  // To print results to the standard output you can use print\n\
    \  // Example:\n  // print \"Hello world!\";\n  // cout << \"Hello World!\";\n\
    \  long long max = -1;\n  for(long i = 0; i < lst.size(); i++){\n    long long\
    \ num = lst[i];\n    if(num > max){\n      if(num % 2 == 0){\n        continue;\n\
    \      }\n      long long flag = 1;\n      for(long long j = 3; j <= sqrt(num);\
    \ j+=2){\n        if(num % j == 0){\n          flag = 0;\n          break;\n \
    \       }\n      }\n      if(flag == 1){\n        max = num;\n      }\n    }\n\
    \  }\n  if(max == -1){\n    return 0;\n  }\n  long long count = 0;\n  while(max\
    \ > 0){\n    count += max % 10;\n    max /= 10;\n  }\n  return count;", "  std::vector<long>\
    \ prime;\n  prime.push_back(2);\n  for (int i = 3; i < 1020; i+=2) {\n    bool\
    \ isPrime = true;\n    for (int j = 0; j < prime.size(); j++) {\n      if (i %\
    \ prime[j] == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \    if (isPrime) {\n      prime.push_back(i);\n    }\n  }\n  long max_prime =\
    \ 0;\n  for (long i : lst) {\n    for (long j : prime) {\n      if (i % j == 0)\
    \ {\n        if (j > max_prime) {\n          max_prime = j;\n        }\n     \
    \   break;\n      }\n    }\n  }\n  int sum = 0;\n  while (max_prime > 0) {\n \
    \   sum += max_prime % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long\
    \ max_prime = -1;\n    for (auto elem : lst) {\n        if (elem == 1) {\n   \
    \         continue;\n        } else if (elem == 2) {\n            max_prime =\
    \ 2;\n        } else {\n            bool prime = true;\n            long upper_bound\
    \ = elem / 2;\n            for (long i = 2; i <= upper_bound; i++) {\n       \
    \         if (elem % i == 0) {\n                    prime = false;\n         \
    \           break;\n                }\n            }\n            if (prime) {\n\
    \                max_prime = std::max(max_prime, elem);\n            }\n     \
    \   }\n    }\n    long digit_sum = 0;\n    while (max_prime) {\n        digit_sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return digit_sum;",
  "\tlong r = 0;\n\tfor (long k : lst) {\n\t\tif (k == 0) {\n\t\t\tcontinue;\n\t\t\
    }\n\t\tbool isPrime = true;\n\t\tfor (long i = 2; i <= sqrt(k); i++) {\n\t\t\t\
    if (k % i == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    \tif (isPrime) {\n\t\t\tlong t = k;\n\t\t\twhile (t) {\n\t\t\t\tr += t % 10;\n\
    \t\t\t\tt /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn r;", "    long prime_to_return;\n\
    \    std::vector<long>lst2;\n    int n,i;\n    n=lst.size();\n    int num_prime=0;\n\
    \    int prime_number=0;\n    int sum=0;\n    // The Sieve of Eratosthenes is\
    \ a simple, ancient algorithm for finding all prime numbers up to any given limit.\n\
    \    // It does so by iteratively marking as composite (i.e., not prime) the multiples\
    \ of each prime,\n    // starting with the multiples of 2.\n    for(int m=2;m<=n;m++)\n\
    \    {\n        for(int j=2;j<m;j++)\n        {\n            if(m%j==0)\n    \
    \        {\n                num_prime=1;\n                break;\n           \
    \ }\n        }\n        if(num_prime==0)\n        {\n            prime_number=m;\n\
    \            lst2.push_back(prime_number);\n        }\n        num_prime=0;\n\
    \    }\n    int max_prime=lst2[0];\n    for(int m=0;m<lst2.size();m++)\n    {\n\
    \        if(lst2[m]>max_prime)\n        {\n            max_prime=lst2[m];\n  \
    \      }\n    }\n    prime_to_return=max_prime;\n    while(prime_to_return>0)\n\
    \    {\n        int temp=prime_to_return%10;\n        sum=sum+temp;\n        prime_to_return=prime_to_return/10;\n\
    \    }\n    return sum;", '  return std::accumulate(lst.begin(), lst.end(), (long)0,
    [](long acc, long item) { return acc + item; });', "    // lets go!\n    long\
    \ highpr = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (isPrime(lst[i])\
    \ && lst[i] > highpr) highpr = lst[i];\n    }\n    long sum = 0;\n    while (highpr\
    \ != 0) {\n        sum += highpr % 10;\n        highpr /= 10;\n    }\n    return\
    \ sum;", "    std::vector<long>::iterator it = std::max_element(lst.begin(), lst.end());\n\
    \    return *it;", "  // your code here...\n  long ans = 0;\n  int i = 0;\n  long\
    \ num = 0;\n  for(i = 0; i < lst.size(); i++){\n    if(lst[i] > num){\n      if(lst[i]\
    \ % 2 != 0){\n        num = lst[i];\n      }\n    }\n  }\n  while(num > 0){\n\
    \    ans += num % 10;\n    num /= 10;\n  }\n  return ans;", "    std::vector<long>::iterator\
    \ i = std::max_element(lst.begin(), lst.end());\n    std::vector<long>::iterator\
    \ j = lst.begin();\n    long k = 0;\n    while(j != i) {\n        ++j;\n     \
    \   ++k;\n    }\n    return *i + k;", "  long largestPrime = -1;\n  for (auto&\
    \ number : lst) {\n    for (long i = 2; i <= number; i++) {\n      if (number\
    \ % i == 0) {\n        largestPrime = std::max(largestPrime, i);\n        break;\n\
    \      }\n    }\n  }\n  if (largestPrime == -1) {\n    return 0;\n  }\n  int result\
    \ = 0;\n  while (largestPrime > 0) {\n    result += largestPrime % 10;\n    largestPrime\
    \ /= 10;\n  }\n  return result;", "  assert(std::is_sorted(lst.begin(), lst.end()));\n\
    \  assert(std::all_of(lst.begin(), lst.end(), [](long n) {\n        return n >\
    \ (long)1;\n      }));\n  assert(std::all_of(lst.begin(), lst.end(), [](long n)\
    \ {\n        return n % (long)2;\n      }));\n  // BEGIN-REPLACE-FOR-TESTING\n\
    \  return std::accumulate(lst.begin(), lst.end(), (long)0, [](long a, long b)\
    \ {\n      return a + b;\n    });\n  // END-REPLACE-FOR-TESTING", "    long counter\
    \ = (long)0;\n    for (auto it = lst.begin(); it != lst.end(); ++it) {\n     \
    \   bool prime = true;\n        for (long i = (long)2; i * i <= *it; ++i) {\n\
    \            if (*it % i == (long)0) {\n                prime = false;\n     \
    \           break;\n            }\n        }\n        if (prime && *it > counter)\
    \ {\n            counter = *it;\n        }\n    }\n    long ans = (long)0;\n \
    \   while (counter > (long)0) {\n        ans += counter % (long)10;\n        counter\
    \ /= (long)10;\n    }\n    return ans;", "  int sum = 0;\n  int count;\n  for\
    \ (long x : lst) {\n    for (count = 2; count < x; count++) {\n      if (x % count\
    \ == 0) {\n        break;\n      }\n    }\n    if (count == x) {\n      while\
    \ (x > 0) {\n        sum += x % 10;\n        x /= 10;\n      }\n    }\n  }\n \
    \ return sum;", "    for (int i = 0; i < lst.size(); i++) {\n        int k = 2;\n\
    \        while (lst[i] % k != 0) {\n            k++;\n        }\n        if (k\
    \ != lst[i]) {\n            lst[i] = 1;\n        }\n    }\n    int max_p = -1;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_p) {\n \
    \           max_p = lst[i];\n        }\n    }\n    std::string a = std::to_string(max_p);\n\
    \    int sum = 0;\n    for (int i = 0; i < a.size(); i++) {\n        sum += a[i]\
    \ - '0';\n    }\n    return sum;", "    // Write your code here.\n    std::sort(lst.begin(),\
    \ lst.end());\n    for(int i = lst.size() - 1; i >= 0; i--){\n        if(lst[i]\
    \ <= 1) continue;\n        bool isPrime = true;\n        for(int j = 2; j <= lst[i]\
    \ / 2; j++){\n            if(lst[i] % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime){\n    \
    \        long val = lst[i];\n            long sum = 0;\n            while(val\
    \ > 0){\n                sum += val % 10;\n                val /= 10;\n      \
    \      }\n            return sum;\n        }\n    }\n    return 0;", "  long res=(long)0;\n\
    \  long i=(long)0;\n  long max_prime=(long)0;\n  long sum_digits=(long)0;\n  long\
    \ is_prime=(long)0;\n  long digit=(long)0;\n  while ((i) < (lst.size())) {\n \
    \   is_prime=(long)1;\n    {\n      long j=(long)2;\n      while ((j) < (i)) {\n\
    \        if ((((i) % (j))) == (0)) {\n          is_prime=(long)0;\n          break;\n\
    \        }\n        j = (j) + (1);\n      }\n    }\n    if ((is_prime) == (1))\
    \ {\n      if ((i) > (max_prime)) {\n        max_prime = i;\n      }\n    }\n\
    \    i = (i) + (1);\n  }\n  while ((max_prime) > (0)) {\n    digit = (max_prime)\
    \ % (10);\n    sum_digits = (sum_digits) + (digit);\n    max_prime = (max_prime)\
    \ / (10);\n  }\n  return sum_digits;", "    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = lst.size() - 1; i >= 0; i--) {\n        long num = lst[i];\n\
    \        bool prime = true;\n        for (int j = 2; j <= num / 2; j++) {\n  \
    \          if (num % j == 0) {\n                prime = false;\n             \
    \   break;\n            }\n        }\n        if (prime) {\n            if (num\
    \ < 10) {\n                return num;\n            }\n            long sum =\
    \ 0;\n            long k = num;\n            while (k != 0) {\n              \
    \  sum += k % 10;\n                k /= 10;\n            }\n            return\
    \ sum;\n        }\n    }\n    return 0;", "    long ans = -1;\n    for (auto const\
    \ &i : lst) {\n        if (i == 1 || i == 0) continue;\n        if (i % 2 == 0)\
    \ {\n            ans = 2;\n            break;\n        }\n        if (i % 3 ==\
    \ 0) {\n            ans = 3;\n            break;\n        }\n        if (i % 5\
    \ == 0) {\n            ans = 5;\n            break;\n        }\n        if (i\
    \ % 7 == 0) {\n            ans = 7;\n            break;\n        }\n        if\
    \ (i % 11 == 0) {\n            ans = 11;\n            break;\n        }\n    \
    \    if (i % 13 == 0) {\n            ans = 13;\n            break;\n        }\n\
    \        if (i % 17 == 0) {\n            ans = 17;\n            break;\n     \
    \   }\n        if (i % 19 == 0) {\n            ans = 19;\n            break;\n\
    \        }\n        if (i % 23 == 0) {\n            ans = 23;\n            break;\n\
    \        }\n        if (i % 29 == 0) {\n            ans = 29;\n            break;\n\
    \        }\n        if (i % 31 == 0) {\n            ans = 31;\n            break;\n\
    \        }\n        if (i % 37 == 0) {\n            ans = 37;\n            break;\n\
    \        }\n        if (i % 41 == 0) {\n            ans = 41;\n            break;\n\
    \        }\n        if (i % 43 == 0) {\n            ans = 43;\n            break;\n\
    \        }\n        if (i % 47 == 0) {\n            ans = 47;\n            break;\n\
    \        }\n        if (i % 53 == 0) {\n            ans = 53;\n            break;\n\
    \        }\n        if (i % 59 == 0) {\n            ans = 59;\n            break;\n\
    \        }\n        if (i % 61 == 0) {\n            ans = 61;\n            break;\n\
    \        }\n        if (i % 67 == 0) {\n            ans = 67;\n            break;\n\
    \        }\n        if (i % 71 == 0) {\n            ans = 71;\n            break;",
  "  // >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n\
    \  // (10)\n  assert(skjkasdkd(std::vector<long>({0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})) == 10);\n  // >>> skjkasdkd((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n\
    \  // (25)\n  assert(skjkasdkd(std::vector<long>({1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1})) == 25);\n  // >>> skjkasdkd((std::vector<long>({(long)1,\
    \ (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163,\
    \ (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n  //\
    \ (13)\n  assert(skjkasdkd(std::vector<long>({1, 3, 1, 32, 5107, 34, 83278,",
  "    for (int i = lst.size() - 1; i >= 0; i--) {\n        long n = lst[i];\n   \
    \     if (n <= 1) {\n            continue;\n        }\n        if (n == 2) {\n\
    \            return 2;\n        }\n        for (long j = 2; j < n; j++) {\n  \
    \          if (n % j == 0) {\n                break;\n            }\n        \
    \    if (j == n - 1) {\n                return n;\n            }\n        }\n\
    \    }\n    return -1;", "  using namespace std;\n  for (auto &x : lst) {\n  \
    \  if (x == 1) {\n      x = 0;\n    }\n  }\n  vector<long> primes;\n  auto is_prime\
    \ = [&](long n) {\n    for (auto &p : primes) {\n      if (n % p == 0) {\n   \
    \     return false;\n      }\n    }\n    return true;\n  };\n  long pr = 2;\n\
    \  while (lst.size() != 0) {\n    auto it = find(lst.begin(), lst.end(), pr);\n\
    \    if (it != lst.end()) {\n      primes.push_back(pr);\n      lst.erase(it);\n\
    \    }\n    pr++;\n  }\n  long sum = 0;\n  for (auto &p : primes) {\n    if (is_prime(p))\
    \ {\n      sum += p;\n    }\n  }\n  return sum;", '   return 0;', "\tlong a =\
    \ 0;\n\tlong b = 0;\n\tfor (long l: lst) {\n\t\tif (l <= 0) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlong c = l;\n\t\twhile (c > 1) {\n\t\t\tlong d = 2;\n\t\t\twhile (c\
    \ % d != 0) {\n\t\t\t\td += 1;\n\t\t\t}\n\t\t\tc /= d;\n\t\t\tif (d > b) {\n\t\
    \t\t\tb = d;\n\t\t\t}\n\t\t}\n\t}\n\twhile (b > 0) {\n\t\ta += b % 10;\n\t\tb\
    \ /= 10;\n\t}\n\treturn a;", "  assert(lst.size() > 0);\n  long maxprime = -1;\n\
    \  for (long el : lst) {\n    if (el < 0) {\n      el = -el;\n    }\n    if (el\
    \ > maxprime) {\n      bool isprime = true;\n      for (long i = 2; i < el; i++)\
    \ {\n        if (el % i == 0) {\n          isprime = false;\n          break;\n\
    \        }\n      }\n      if (isprime) {\n        maxprime = el;\n      }\n \
    \   }\n  }\n  assert(maxprime > 0);\n  long sum = 0;\n  while (maxprime > 0) {\n\
    \    sum += maxprime % 10;\n    maxprime /= 10;\n  }\n  return sum;", "  long\
    \ mx = 0;\n  int x;\n  for (int i = 0; i < lst.size(); i++) {\n    x = lst[i];\n\
    \    while (x % 2 == 0) {\n      x /= 2;\n    }\n    if (x == 1) {\n      mx =\
    \ std::max(mx, lst[i]);\n    }\n    else {\n      for (int j = 3; j * j <= x;\
    \ j += 2) {\n        if (x % j == 0) {\n          x = 1;\n          break;\n \
    \       }\n      }\n      if (x != 1) {\n        mx = std::max(mx, lst[i]);\n\
    \      }\n    }\n  }\n  x = mx;\n  long sm = 0;\n  while (x > 0) {\n    sm +=\
    \ x % 10;\n    x /= 10;\n  }\n  return sm;", "    long i = 0;\n    long b = (long)0;\n\
    \    long x = (long)0;\n    long p = (long)0;\n    long j = (long)0;\n    while\
    \ ((i < lst.size())) {\n        while ((b < lst.size())) {\n            x = lst[i];\n\
    \            if ((lst[b] > x)) {\n                x = lst[b];\n            }\n\
    \            b = (b + (long)1);\n        }\n        while ((j < lst.size())) {\n\
    \            if ((x == lst[j])) {\n                lst.erase(lst.begin() + j);\n\
    \            }\n            j = (j + (long)1);\n        }\n        i = (i + (long)1);\n\
    \        b = (long)0;\n        j = (long)0;\n    }\n    i = 0;\n    b = 0;\n \
    \   long y = (long)0;\n    bool tr = false;\n    while ((i < lst.size())) {\n\
    \        y = lst[i];\n        while ((b < y)) {\n            b = (b + (long)1);\n\
    \            if (((y % b) == (long)0)) {\n                tr = true;\n       \
    \     }\n        }\n        if ((tr == false)) {\n            p = y;\n       \
    \ }\n        tr = false;\n        b = (long)0;\n        i = (i + (long)1);\n \
    \   }\n    i = 0;\n    b = 0;\n    x = (long)0;\n    while ((p != (long)0)) {\n\
    \        x = (x + (p % (long)10));\n        p = (p / (long)10);\n    }\n    return\
    \ x;", '    return sum(str(max([x for x in lst if isprime(x)])));', "  // >>>\
    \ skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5,\
    \ (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4,\
    \ (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n  //\
    \ (10)\n  std::set<long> primes;\n  std::set<long> non_primes;\n  for (auto x\
    \ : lst) {\n    long n = 2;\n    while (n <= x) {\n      if (x % n == 0) {\n \
    \       if (primes.find(n) != primes.end()) {\n          primes.erase(n);\n  \
    \      }\n        non_primes.insert(n);\n        x /= n;\n      } else {\n   \
    \     n += 1;\n      }\n    }\n  }\n  for (auto x : lst) {\n    if (non_primes.find(x)\
    \ == non_primes.end()) {\n      primes.insert(x);\n    }\n  }\n  long largest_prime\
    \ = 0;\n  for (auto x : primes) {\n    if (x > largest_prime) {\n      largest_prime\
    \ = x;\n    }\n  }\n  std::vector<long> digits;\n  while (largest_prime != 0)\
    \ {\n    digits.push_back(largest_prime % 10);\n    largest_prime /= 10;\n  }\n\
    \  long sum = 0;\n  for (auto x : digits) {\n    sum += x;\n  }\n  return sum;",
  "  // your code here\n  return 0;", '  return 0;', "  std::vector<long> t = lst;\n\
    \  std::sort(t.begin(), t.end());\n  for (long i = 0; i < lst.size(); i++) {\n\
    \    long num = t[i];\n    if (num == 1) {\n      num = 0;\n    }\n    if (num\
    \ == 0) {\n      continue;\n    }\n    if (num == 2) {\n      return std::accumulate(t.begin(),\
    \ t.end(), (long)0);\n    }\n    for (long j = 3; j <= num; j++) {\n      if (num\
    \ % j == 0) {\n        num = 0;\n        break;\n      }\n    }\n    if (num >\
    \ 0) {\n      return std::accumulate(t.begin(), t.end(), (long)0);\n    }\n  }\n\
    \  return std::accumulate(t.begin(), t.end(), (long)0);", "    std::map<long,\
    \ long> m;\n    for (auto i: lst) {\n        if (i < 2) continue;\n        while\
    \ (i != 1) {\n            int p = -1;\n            for (int j = 2; j <= i; j++)\
    \ {\n                if (i % j == 0) {\n                    p = j;\n         \
    \           break;\n                }\n            }\n            if (p == -1)\
    \ break;\n            m[p]++;\n            i /= p;\n        }\n    }\n    long\
    \ res = 0;\n    for (auto i: m) {\n        if (i.second >= 2) {\n            long\
    \ tmp = i.first;\n            while (tmp) {\n                res += tmp % 10;\n\
    \                tmp /= 10;\n            }\n        }\n    }\n    return res;",
  "    std::map<long, long> d;\n    for (std::vector<long>::const_iterator i = lst.begin();\
    \ i != lst.end(); ++i) {\n        if ((*i) > 1) {\n            long k = (*i);\n\
    \            long s = 0;\n            for (long j = 2; j <= k; j++) {\n      \
    \          if (k % j == 0) {\n                    k /= j;\n                  \
    \  s += j;\n                    j--;\n                }\n            }\n     \
    \       d[s] = std::max(d[s], s);\n        }\n    }\n    long m = d.rbegin()->second;\n\
    \    long s = 0;\n    for (long i = 0; i < 10; i++) {\n        if (m > 0) {\n\
    \            s += m % 10;\n            m /= 10;\n        }\n    }\n    return\
    \ s;", '  std::vector<long> primes = {(long)2, (long)3, (long)5, (long)7, (long)11,
    (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41,
    (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73,
    (long)79, (long)83, (long)89, (long)97, (long)101, (long)103, (long)107, (long)109,
    (long)113, (long)127, (long)131, (long)137, (long)139, (long)149, (long)151, (long)157,
    (long)163, (long)167, (long)173, (long)179, (long)181, (long)191, (long)193, (long)197,
    (long)199, (long)211, (long)223, (long)227, (long)229, (long)233, (long)239, (long)241,
    (long)251, (long)257, (long)263, (long)269, (long)271, (long)277, (long)281, (long)283,
    (long)293, (long)307, (long)311, (long)313, (long)317, (long)331, (long)337, (long)347,
    (long)349, (long)353, (long)359, (long)367, (long)373, (long)379, (long)383, (long)389,
    (long)397, (long)401, (long)409, (long)419, (long)421, (long)431, (long)433, (long)439,
    (long)443, (long)449, (long)457, (long)461, (long)463, (long)467, (long)479, (long)487,
    (long)491, (long)499, (long)503, (long)509, (long)521, (long)523, (long)5', " \
    \   long res;\n    long _lst0_size = lst.size();\n    long max_prime = (long)0;\n\
    \    long mv = (long)0;\n    for (long _lst0_idx = (long)0; _lst0_idx < _lst0_size;\
    \ _lst0_idx++) {\n        long elem = lst[_lst0_idx];\n        long elem0 = elem;\n\
    \        long a = (long)0;\n        long b = (long)0;\n        long c = (long)0;\n\
    \        long d = (long)0;\n        long e = (long)0;\n        long f = (long)0;\n\
    \        long g = (long)0;\n        long h = (long)0;\n        long i = (long)0;\n\
    \        long j = (long)0;\n        long k = (long)0;\n        long m = (long)0;\n\
    \        long n = (long)0;\n        long o = (long)0;\n        long p = (long)0;\n\
    \        long q = (long)0;\n        long r = (long)0;\n        long s = (long)0;\n\
    \        long t = (long)0;\n        long u = (long)0;\n        long v = (long)0;\n\
    \        long w = (long)0;\n        long x = (long)0;\n        long y = (long)0;\n\
    \        long z = (long)0;\n        a = elem;\n        b = (long)2;\n        c\
    \ = a;\n        if (b <= c) {\n            d = (long)1;\n        } else {\n  \
    \          d = (long)0;\n        }\n        e = d;\n        f = (long)2;\n   \
    \     g = e;\n        if (f <= g) {\n            h = (long)1;\n        } else\
    \ {\n            h = (long)0;\n        }\n        i = h;\n        j = (long)2;\n\
    \        k = i;\n        if (j <= k) {\n            m = (long)1", "  // your code\
    \ here\n  return (long)0;", "   int sum = 0;\n   int primes = std::vector<long>::max_size;\n\
    \   for (int num = 0; num < lst.size(); num++) {\n       if (isPrime(num)) {\n\
    \           if (num > primes) {\n               primes = num;\n           }\n\
    \       }\n   }\n   while (primes > 0) {\n       sum += primes % 10;\n       primes\
    \ /= 10;\n   }\n   return sum;"]
stop_tokens:
- "\n}"
