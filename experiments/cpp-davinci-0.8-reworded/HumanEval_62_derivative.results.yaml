language: cpp
name: HumanEval_62_derivative
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> coeff;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    coeff.push_back(xs[i] * i);\n  }\n  return coeff;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // Implement this placeholder.\n    return {};\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyblxnw4k: /tmp/tmpyblxnw4k.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    long i = 0;\n    while (i < xs.size()\
    \ - 1) {\n        result.push_back(xs[i] * (xs.size() - 1 - i));\n        i +=\
    \ 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw3h_f084: /tmp/tmpw3h_f084.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    int i = 1;\n    while (i < xs.size())\
    \ {\n        result.push_back(xs[i] * i);\n        i++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ans.push_back(xs[i] * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tassert(xs.size() >= 2);\n\tstd::vector<long> result;\n\tfor (int i\
    \ = 1; i < xs.size(); i++) {\n\t\tresult.push_back(xs[i] * i);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp16qws3np: /tmp/tmp16qws3np.cpp:11: std::vector<long int> derivative(std::vector<long
    int>): Assertion `xs.size() >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  int n = xs.size();\n  std::vector<long> ans(n-1);\n  for(int i = 1;\
    \ i < n; i++) {\n    ans[i-1] = xs[i] * i;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tint size = xs.size();\n\tassert(size > 0);\n\tstd::vector<long> ans;\n\
    \tfor (int i = 1; i < size; i++) {\n\t\tans.push_back(xs[i] * i);\n\t}\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // Write your code here\n    std::vector<long> res;\n    for(int\
    \ i=1;i<xs.size();i++){\n        res.push_back(xs[i]*i);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ys;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    ys.push_back(xs[i] * i);\n\t}\n\treturn ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ys;\n  for (int i = 1; i < xs.size(); i++) {\n  \
    \  ys.push_back(xs[i] * i);\n  }\n  return ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> r;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    r.push_back(xs[i] * i);\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> deriv;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tderiv.push_back(xs[i] * i);\n\t}\n\treturn deriv;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> sol;\n    for(int i = 0; i < xs.size() - 1; i++)\
    \ {\n        sol.push_back(xs[i] * (xs.size() - i - 1));\n    }\n    return sol;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgnvxebbp: /tmp/tmpgnvxebbp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    int ys = xs.size();\n    long temp;\n\
    \    int i = 0;\n    while (i < ys - 1) {\n        temp = xs[i] * (ys - i - 1);\n\
    \        result.push_back(temp);\n        i++;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxxt4hhw6: /tmp/tmpxxt4hhw6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    int n = xs.size();\n    int i = 0;\n \
    \   long coef = 0;\n    long pow = 0;\n    while (i < n-1) {\n        coef = xs[i+1]\
    \ * (i+1);\n        pow = i;\n        ys.push_back(coef);\n        i++;\n    }\n\
    \    return ys;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  long n = xs.size();\n  std::vector<long> rs;\n  for (long i = 1; i\
    \ < n; i++) {\n    rs.push_back(xs[i] * i);\n  }\n  return rs;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (size_t i = 1; i < xs.size();\
    \ i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  // Your code here\n  std::vector<long> ans;\n  for(int i=1;i<xs.size();i++){\n\
    \    ans.push_back(xs[i]*i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    if(xs.size() == 0) return result;\n\
    \    for(int i = 1; i < xs.size(); i++)\n        result.push_back(xs[i] * i);\n\
    \    return result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tint n = xs.size();\n\tfor (int i = 1; i <\
    \ n; i++) {\n\t\tret.push_back(xs[i] * i);\n\t}\n\treturn ret;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res(xs.size() - 1);\n    for (long p = 1; p < xs.size();\
    \ p++) {\n        res[p - 1] = xs[p] * p;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ys;\n\tfor (size_t i = 1; i < xs.size(); i++) {\n\
    \t\tys.push_back(xs[i] * i);\n\t}\n\treturn ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result(xs.size() - 1);\n    for (long p = 1; p\
    \ < xs.size(); p++) {\n        result[p - 1] = p * xs[p];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tfor (int i = 1; i < xs.size(); i++)\n\t\t\
    ret.push_back(xs[i] * i);\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // Corner case\n    if (xs.size() == 0 || xs.size() == 1) {\n   \
    \     return std::vector<long>({(long)0});\n    }\n    std::vector<long> ans;\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        ans.push_back(xs[i] * i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = derivative;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw10md9_g: /tmp/tmpw10md9_g.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (size_t i = 1; i < xs.size(); i++)\
    \ {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> res;\n    for (int i =\
    \ 1; i < n; i++)\n        res.push_back(xs[i] * i);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> res;\n\tres.resize(xs.size() - 1);\n\tfor (int i\
    \ = 1; i < xs.size(); i++) {\n\t\tres[i - 1] = i * xs[i];\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++)\n\t\t\
    ans.push_back(xs[i] * i);\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tlong size = xs.size();\n\tif (size <= 1) {\n\t\txs.clear();\n\t\treturn\
    \ xs;\n\t}\n\tfor (long i = 0; i < size - 1; i++) {\n\t\txs[i] = xs[i + 1] * (i\
    \ + 1);\n\t}\n\txs.pop_back();\n\treturn xs;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result = std::vector<long>();\n    for (long i\
    \ = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> ans;\n    for (int i =\
    \ 1; i < n; i++) {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tans.push_back(xs[i] * i);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    int size = xs.size();\n    int counter\
    \ = 0;\n    for (int i = 0; i < size; i++) {\n        if (xs[i] == 0)\n      \
    \      counter++;\n        else\n            break;\n    }\n    if (counter ==\
    \ size)\n        return result;\n    else {\n        int i = counter;\n      \
    \  while (i < size) {\n            result.push_back(xs[i] * i);\n            i++;\n\
    \        }\n        return result;\n    }\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprbpmnhg2: /tmp/tmprbpmnhg2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> r;\n    for (auto x = 1; x < xs.size(); x++) {\n\
    \        r.push_back(xs[x] * x);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  int n = xs.size();\n  std::vector<long> ys;\n  for (int i = 1; i <\
    \ n; i++) {\n    ys.push_back(xs[i] * i);\n  }\n  return ys;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> vs;\n  for (int i = 1; i < xs.size(); i++) {\n  \
    \  vs.push_back(xs[i] * i);\n  }\n  return vs;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  long n = xs.size();\n  assert(n > 0);\n  std::vector<long> res;\n \
    \ for (long i = 1; i < n; i++) {\n    res.push_back(xs[i] * i);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  // Implement me\n  std::vector<long> ret;\n  for(int i = 1; i < xs.size();\
    \ i++)\n  {\n    ret.push_back(xs[i] * i);\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    int n = xs.size();\n    int i;\n    for(i\
    \ = 1; i < n; i++)\n    {\n        ans.push_back(xs[i] * i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (std::size_t i = 1; i < xs.size();\
    \ ++i) {\n    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  long n = xs.size();\n  if (n == 0) {\n  \
    \  return ans;\n  }\n  if (n == 1) {\n    ans.push_back(0);\n    return ans;\n\
    \  }\n  for (long i = 1; i < n; i++) {\n    ans.push_back(xs[i] * i);\n  }\n \
    \ return ans;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr7aooffy: /tmp/tmpr7aooffy.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103658
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ret;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ret.push_back(xs[i] * i);\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result(xs.size() - 1);\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> dxs;\n    // \n    // Your code here\n    // \n\
    \    for(int i=1;i<xs.size();i++){\n        dxs.push_back(xs[i]*i);\n    }\n \
    \   return dxs;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    if (xs.size() == 0) return res;\n   \
    \ int n = xs.size();\n    for (int i = 1; i < n; i++)\n        res.push_back(xs[i]\
    \ * i);\n    return res;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> result;\n    for (int i\
    \ = 1; i < n; i++) {\n        result.push_back(xs[i] * i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    if (xs.size() == 0) {\n        return xs;\n    }\n    std::vector<long>\
    \ ys;\n    for (long i = 1; i < xs.size(); i++) {\n        ys.push_back(xs[i]\
    \ * i);\n    }\n    return ys;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  assert(xs.size()>=1);\n  std::vector<long> result(xs.size()-1);\n \
    \ for(long p = 1; p < xs.size(); p++){result[p-1] = xs[p] * p;}\n  return result;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    if (xs.size() == 0) {\n        return xs;\n    }\n    xs.erase(xs.begin());\n\
    \    int i = 0;\n    while (i < xs.size()) {\n        xs[i] *= i + 1;\n      \
    \  i++;\n    }\n    return xs;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tint n = xs.size();\n\tstd::vector<long> res;\n\tfor (int i = 1; i <\
    \ n; i++)\n\t\tres.push_back(xs[i] * i);\n\treturn res;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ys;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    ys.push_back(xs[i] * i);\n\t}\n\treturn ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> derivative_xs;\n    for (unsigned int i = 1; i\
    \ < xs.size(); i++) {\n        derivative_xs.push_back(xs[i] * i);\n    }\n  \
    \  return derivative_xs;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ret;\n  for (int i = 1; i < xs.size(); i++)\n   \
    \ ret.push_back(xs[i] * i);\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> res = {};\n  if (xs.size() <= 1) return res;\n  for\
    \ (int i = 1; i < xs.size(); i++) {\n    res.push_back(xs[i] * i);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // Your code here\n    std::vector<long> v;\n    if(xs.size()==1){\n\
    \      return v;\n    }\n    for(int i=1;i<xs.size();i++){\n      v.push_back(xs[i]*i);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = derivative;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> r;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    r.push_back(xs[i] * i);\n\t}\n\treturn r;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tans.push_back(xs[i] * i);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ys;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    ys.push_back(xs[i] * i);\n\t}\n\treturn ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int size = xs.size();\n    assert(size > 0);\n    std::vector<long>\
    \ res;\n    for (int i = 1; i < size; i++) {\n        res.push_back(xs[i] * i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = derivative;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> output;\n    int length = xs.size();\n    for (int\
    \ i = 1; i < length; i++) {\n        output.push_back(xs[i] * i);\n    }\n   \
    \ return output;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> out;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        out.push_back(xs[i] * i);\n    }\n    return out;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    assert(xs.size() >= 1);\n    int n = xs.size();\n    std::vector<long>\
    \ ans;\n    ans.resize(n - 1);\n    for (int i = 1; i < n; i++) {\n        ans[i\
    \ - 1] = i * xs[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tlong xs_size = xs.size();\n\tstd::vector<long> res;\n\tres.reserve(xs_size\
    \ - 1);\n\tfor (long i = 1; i < xs_size; i++) {\n\t\tres.push_back(xs[i] * i);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // We skip the first element in the result, because it's always zero.\n\
    \    std::vector<long> result((xs.size() - 1));\n    for (int index = 1; index\
    \ < xs.size(); index++) {\n        result[index - 1] = xs[index] * index;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> v;\n\tint length = xs.size();\n\tfor (int i = 1;\
    \ i < length; i++) {\n\t\tv.push_back(xs[i] * i);\n\t}\n\treturn v;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> sol;\n\tint index = 1;\n\tfor (auto x : xs) {\n\t\
    \tif (index == 1) {\n\t\t\tsol.push_back(x);\n\t\t}\n\t\telse {\n\t\t\tsol.push_back(x\
    \ * index);\n\t\t}\n\t\tindex++;\n\t}\n\treturn sol;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_b799_ey: /tmp/tmp_b799_ey.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tfor (size_t i = 1; i < xs.size(); i++) {\n\
    \t\tret.push_back(xs[i] * i);\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  for (size_t i = 1; i < xs.size(); i++) {\n\
    \    ans.push_back(xs[i] * i);\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long>::iterator it = xs.begin();\n  xs.erase(it);\n  for\
    \ (int i = 0; i < xs.size(); i++) {\n    xs[i] = xs[i] * (i + 1);\n  }\n  return\
    \ xs;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    int n = xs.size();\n    for (int i\
    \ = 1; i < n; i++) {\n        result.push_back(xs[i] * i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> answer;\n    int i=0;\n    while(i<xs.size()-1){\n\
    \        answer.push_back(xs[i+1]*(i+1));\n        i++;\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  int n = xs.size();\n  std::vector<long> res(n-1);\n  for (int i = 1;\
    \ i < n; i++) {\n    res[i-1] = xs[i] * i;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  int size = xs.size();\n  if (size == 0) {\n    return std::vector<long>({});\n\
    \  }\n  std::vector<long> ans;\n  for (int i = 1; i < size; i++) {\n    ans.push_back(xs[i]\
    \ * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tint size = xs.size();\n\tif (size < 2)\
    \ {\n\t\treturn std::vector<long>{(long)0};\n\t}\n\tfor (int i = 1; i < size;\
    \ i++) {\n\t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpoqa5ha9f: /tmp/tmpoqa5ha9f.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> answer;\n    int n = xs.size();\n    for (int i\
    \ = 1; i < n; i++) {\n        answer.push_back(xs[i] * i);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // Implement your solution here\n    return xs;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzinanrsp: /tmp/tmpzinanrsp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\txs.erase(xs.begin());\n\tfor (int i = 0; i < xs.size(); i++) {\n\t\t\
    xs[i] *= (i + 1);\n\t}\n\treturn xs;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> answer;\n    int len = xs.size();\n    for (int\
    \ i = 1; i < len; i++) {\n        answer.push_back(xs[i] * i);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans(xs.size() - 1);\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        ans[i - 1] = i * xs[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tlong x = 1;\n\tfor (long i = 0; i < xs.size(); i++) {\n\t\txs[i] *=\
    \ x;\n\t\tx++;\n\t}\n\txs.erase(xs.begin());\n\treturn xs;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5iuf65si: /tmp/tmp5iuf65si.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  if (xs.size() < 2) {\n    return std::vector<long>({(long)0});\n  }\n\
    \  std::vector<long> ans;\n  for (int i = 1; i < xs.size(); i++) {\n    ans.push_back(xs[i]\
    \ * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpacms_u55: /tmp/tmpacms_u55.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tlong num_elements = xs.size();\n\tstd::vector<long> ret;\n\tfor (long\
    \ i = 1; i < num_elements; i++) {\n\t\tret.push_back(xs[i] * i);\n\t}\n\treturn\
    \ ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tif (xs.size() < 2) {\n\t\treturn{};\n\t}\n\tstd::vector<long> output;\n\
    \tfor (int i = 1; i < xs.size(); i++) {\n\t\toutput.push_back(xs[i] * i);\n\t\
    }\n\treturn output;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ds;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    ds.push_back(xs[i] * i);\n\t}\n\treturn ds;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tif(xs.size()>0) {\n\t\tresult.push_back(xs[0]);\n\
    \t\tfor(int i=1; i<xs.size(); i++) {\n\t\t\tlong c = xs[i] * i;\n\t\t\tresult.push_back(c);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwzkx7akt: /tmp/tmpwzkx7akt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    if (xs.size() == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ ans(xs.size() - 1);\n    for (int i = 1; i < xs.size(); i++) {\n        ans[i\
    \ - 1] = xs[i] * i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> rv;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\t\
    rv.push_back(xs[i] * i);\n\t}\n\treturn rv;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ans.push_back(xs[i] * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ys;\n\tif(xs.size()==0)\n\t\treturn ys;\n\tys.push_back(xs[0]);\n\
    \tfor(int i=1;i<xs.size();i++)\n\t\tys.push_back(xs[i]*i);\n\treturn ys;\n}\n\
    int main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpehci68uo: /tmp/tmpehci68uo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103661
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    long deg = xs.size() - 1;\n    if (deg\
    \ == 0) {\n        ret.push_back(0);\n        return ret;\n    }\n    for (long\
    \ i = 1; i <= deg; i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo4k4c8wv: /tmp/tmpo4k4c8wv.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> deriv;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        deriv.push_back(xs[i] * i);\n    }\n    return deriv;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103661
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  if (xs.size() < 2) {\n    xs.clear();\n    return xs;\n  }\n  for (int\
    \ i = 0; i < xs.size() - 1; i++) {\n    xs[i] = xs[i + 1] * (i + 1);\n  }\n  xs.pop_back();\n\
    \  return xs;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103661
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tret.resize(xs.size() - 1);\n\tfor (int i\
    \ = 1; i < xs.size(); i++)\n\t\tret[i - 1] = xs[i] * i;\n\treturn ret;\n}\nint\
    \ main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103661
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    //# Start coding here\n    // C-array pointers are a little dangerous:\n\
    \    // we have to keep the original vector\n    // to keep it from going out\
    \ of scope.\n    int n = xs.size();\n    std::vector<long> ret(n - 1);\n    for\
    \ (int i = 1; i < n; i++) {\n        ret[i - 1] = i * xs[i];\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int deg = xs.size() - 1;\n    std::vector<long> res(deg);\n    for\
    \ (int i = 0; i < deg; i++) {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> arr;\n    int deg = xs.size();\n    for(int i =\
    \ 1; i < deg; i++) {\n        arr.push_back(xs[i] * i);\n    }\n    return arr;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tfor (int i = 1; i < xs.size(); i++) {\n\
    \t\tresult.push_back(xs[i] * i);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans(xs.size() - 1);\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        ans[i - 1] = i * xs[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ans.push_back(xs[i] * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    long len = xs.size();\n    if (len <=\
    \ 1) {\n        return ret;\n    }\n    for (long i = 1; i < len; i++) {\n   \
    \     ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res(xs.size() - 1);\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        res[i - 1] = xs[i] * i;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long>ys;\n    for(int i=1;i<xs.size();i++){\n       \
    \ ys.push_back(xs[i]*i);\n    }\n    return ys;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // remove constant term\n    if (xs.size() > 1)\n        xs.erase(xs.begin());\n\
    \    else\n        xs.clear();\n    for (int i = 0; i < xs.size(); i++)\n    \
    \    xs[i] *= (i + 1);\n    return xs;\n}\nint main() {\n    auto candidate =\
    \ derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  // Your code here\n  vector<long> newV;\n  for(int i = 1; i < xs.size();\
    \ i++){\n    newV.push_back(xs[i]*i);\n  }\n  return newV;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb63_e_8_.cpp: In function \u2018std::vector<long int> derivative(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb63_e_8_.cpp:12:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   12 |   vector<long> newV;\n      |   ^~~~~~\n/tmp/tmpb63_e_8_.cpp:12:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb63_e_8_.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb63_e_8_.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpb63_e_8_.cpp:12:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   12 |   vector<long>\
    \ newV;\n      |          ^~~~\n/tmp/tmpb63_e_8_.cpp:14:5: error: \u2018newV\u2019\
    \ was not declared in this scope\n   14 |     newV.push_back(xs[i]*i);\n     \
    \ |     ^~~~\n/tmp/tmpb63_e_8_.cpp:16:10: error: \u2018newV\u2019 was not declared\
    \ in this scope\n   16 |   return newV;\n      |          ^~~~\n"
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tret.push_back(xs[i] * i);\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    assert(xs.size() > 0);\n    std::vector<long> ret;\n    int n = xs.size();\n\
    \    for (int i = 1; i < n; i++) {\n        ret.push_back(xs[i] * i);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ans;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   ans.push_back(xs[i] * i);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    long n = xs.size();\n    std::vector<long> result;\n    for (long\
    \ i = 1; i < n; i++) {\n        result.push_back(xs[i] * i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> res;\n\tint deg = xs.size() - 1;\n\tlong coeff;\n\
    \tint j = 0;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tcoeff = (long)i * xs[i];\n\
    \t\tres.push_back(coeff);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\txs.erase(xs.begin());\n\tfor (int i = 0; i < xs.size(); i++) {\n\t\t\
    xs[i] *= (i + 1);\n\t}\n\treturn xs;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103660
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    if (n < 2) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> ret(n - 1);\n    for (int i = 1; i < n; i++) {\n\
    \        ret[i - 1] = xs[i] * i;\n    }\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103656
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  long size = xs.size();\n  assert(size >= 1);\n  std::vector<long> result(size\
    \ - 1);\n  for (long i = 1; i < size; i++) {\n    result[i - 1] = i * xs[i];\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = derivative;\n  \
    \  assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> nxs;\n    // Your code here\n    for(int i=1;i<xs.size();i++){\n\
    \        nxs.push_back(xs[i]*i);\n    }\n    return nxs;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result(xs.size() - 1);\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    long len = xs.size();\n    std::vector<long> res;\n    for (int i\
    \ = 1; i < len; i++) {\n        res.push_back(xs[i] * i);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> res(n - 1);\n    for (int\
    \ i = 1; i < n; i++) {\n        res[i - 1] = i * xs[i];\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    long n = xs.size();\n    std::vector<long> res;\n    long t = 1;\n\
    \    for (int i = 1; i < n; i++) {\n        res.push_back(xs[i] * t);\n      \
    \  t += 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> r;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        r.push_back(xs[i] * i);\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  if (xs.size() == 0) return xs;\n  std::vector<long> ret(xs.size() -\
    \ 1);\n  for (int i = 1; i < xs.size(); i++) {\n    ret[i - 1] = i * xs[i];\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ret;\n\tfor (unsigned int i = 1; i < xs.size(); i++)\
    \ {\n\t\tret.push_back(xs[i] * i);\n\t}\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tans.push_back(xs[i] * i);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  int n = xs.size();\n  std::vector<long> res(n - 1);\n  if (n == 1)\
    \ return res;\n  for (int i = 1; i < n; ++i) {\n    res[i - 1] = xs[i] * i;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    long sz = xs.size();\n    std::vector<long> result;\n    result.reserve(sz\
    \ - 1);\n    for (int i = 1; i < sz; i++) {\n        result.push_back(xs[i] *\
    \ i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> new_xs;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        new_xs.push_back(xs[i] * i);\n    }\n    return new_xs;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    long i=1;\n    for(auto x:xs){\n    \
    \    if(i==1){\n            res.push_back(x);\n        }else{\n            res.push_back(x*i);\n\
    \        }\n        i++;\n    }\n    res.erase(res.begin());\n    return res;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1mo91bdl: /tmp/tmp1mo91bdl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> xss;\n    for (unsigned long i = 1; i < xs.size();\
    \ i++) {\n        xss.push_back(xs[i] * i);\n    }\n    return xss;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> res;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tres.push_back(xs[i] * i);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ans;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ans.push_back(xs[i] * i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\t//x^(n) * n => x^(n-1)\n\t// xs[0] => 0\n\t// xs[1] => 1\n\t// xs[2]\
    \ => 2\n\t// xs[3] => 3\n\t// xs[4] => 4\n\t// xs[5] => 5\n\t// xs[6] => 6\n\t\
    // xs[7] => 7\n\t// xs[8] => 8\n\t// xs[9] => 9\n\t// xs[10] => 10\n\t// xs[11]\
    \ => 11\n\tlong i = 0;\n\tstd::vector<long> ys;\n\tfor (; i < xs.size() - 1; i++)\
    \ {\n\t\tys.push_back(xs[i + 1] * (i + 1));\n\t}\n\treturn ys;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        ret.push_back(xs[i] * i);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> coefficients;\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        coefficients.push_back(xs[i] * i);\n    }\n    return coefficients;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    // placeholder\n    return {};\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt95hx65k: /tmp/tmpt95hx65k.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    for (int i = 1; i < xs.size(); i++) {\n        xs[i - 1] = i * xs[i];\n\
    \    }\n    xs.pop_back();\n    return xs;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  long n = xs.size();\n  std::vector<long> result;\n  for (long i = 1;\
    \ i < n; i++) {\n    result.push_back(xs[i] * i);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> result;\n\tresult.reserve(xs.size() - 1);\n\tfor\
    \ (int i = 1; i < xs.size(); i++) {\n\t\tresult.push_back(xs[i] * i);\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> ans;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tans.push_back(xs[i] * i);\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long>::iterator it;\n\tfor (it = xs.begin(); it != xs.end();\
    \ ++it) {\n\t\tif (*it != 0) {\n\t\t\t*it = *it * (it - xs.begin());\n\t\t}\n\t\
    }\n\txs.erase(xs.begin());\n\treturn xs;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> derivative(xs.size() - 1);\n    for (int i = 0;\
    \ i < derivative.size(); i++) {\n        derivative[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return derivative;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tint n = xs.size();\n\tstd::vector<long> ys(n - 1);\n\tfor (int i =\
    \ 0; i < n - 1; i++) {\n\t\tys[i] = xs[i + 1] * (i + 1);\n\t}\n\treturn ys;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    long n = xs.size();\n    std::vector<long> r(n - 1);\n    for (long\
    \ i = 1; i < n; i++) {\n        r[i - 1] = xs[i] * i;\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (long i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> dx(n-1);\n    for (int\
    \ i = 0; i < n-1; i++)\n        dx[i] = xs[i+1] * (i+1);\n    return dx;\n}\n\
    int main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    result.push_back(xs[i] * i);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        res.push_back(xs[i] * i);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long>deriv;\n    for(int i=1;i<xs.size();i++){\n    \
    \  deriv.push_back(xs[i]*i);\n    }\n    return deriv;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    int n = xs.size();\n    std::vector<long> ys;\n    int j = 1;\n \
    \   while(j<n){\n        ys.push_back(xs[j]*j);\n        j++;\n    }\n    return\
    \ ys;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tif (xs.size() == 0) {\n\t\treturn std::vector<long>();\n\t}\n\tif (xs.size()\
    \ == 1) {\n\t\treturn std::vector<long>({0});\n\t}\n\tstd::vector<long> result(xs.size()\
    \ - 1);\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tresult[i - 1] = i * xs[i];\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = derivative;\n   \
    \ assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaihro19n: /tmp/tmpaihro19n.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> out;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        out.push_back(xs[i] * i);\n    }\n    return out;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103659
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long>::size_type len = xs.size();\n    std::vector<long>\
    \ ans(len - 1);\n    for (long i = 1; i < len; i++) {\n        ans[i - 1] = xs[i]\
    \ * i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = derivative;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> ret;\n  int i;\n  int n;\n  n = xs.size();\n  i =\
    \ 0;\n  while(i < n) {\n    ret.push_back(xs[i] * i);\n    i += 1;\n  }\n  ret.erase(ret.begin());\n\
    \  return ret;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tif (xs.size() == 0) {\n\t\treturn xs;\n\t}\n\tif (xs.size() == 1) {\n\
    \t\treturn std::vector<long>({ 0 });\n\t}\n\tstd::vector<long> result;\n\tfor\
    \ (int i = 1; i < xs.size(); i++) {\n\t\tresult.push_back(xs[i] * i);\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgrh4iu60: /tmp/tmpgrh4iu60.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1})))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103664
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> v;\n    for(int i = 1; i < xs.size(); i++) {\n\
    \        v.push_back(xs[i] * i);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    for (int i = 0; i < xs.size(); i++) {\n        xs[i] *= i;\n    }\n\
    \    xs.erase(xs.begin());\n    return xs;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ret;\n    // WRITE YOUR CODE HERE\n    return ret;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpftj22y2h: /tmp/tmpftj22y2h.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)3,
    (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,
    (long)12, (long)20}))'' failed.

    '
  stdout: ''
  timestamp: 1660103664
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> newXs;\n  for (int i = 1; i < xs.size(); i++) {\n\
    \    newXs.push_back(xs[i] * i);\n  }\n  return newXs;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> answer;\n\tint size = xs.size();\n\tfor (int i =\
    \ 1; i < size; i++) {\n\t\tanswer.push_back(xs[i] * i);\n\t}\n\treturn answer;\n\
    }\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103664
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> res(xs.size() - 1);\n    for (int i = 1; i < xs.size();\
    \ i++)\n        res[i - 1] = xs[i] * i;\n    return res;\n}\nint main() {\n  \
    \  auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103664
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n\tstd::vector<long> res;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\
    \tres.push_back(xs[i] * i);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> result;\n    for (int i = 1; i < xs.size(); i++)\
    \ {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103657
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> ys;\n    for (size_t i = 1; i < xs.size(); i++)\
    \ {\n        ys.push_back(xs[i] * i);\n    }\n    return ys;\n}\nint main() {\n\
    \    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> c;\n    c.resize(xs.size()-1);\n    for(int i=0;i<xs.size()-1;i++){\n\
    \        c[i] = xs[i+1]*(i+1);\n    }\n    return c;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long> der(xs.size() - 1);\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        der[i - 1] = i * xs[i];\n    }\n    return der;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n    std::vector<long>ans;\n    for(int i=1;i<xs.size();i++){\n      \
    \  ans.push_back(xs[i]*i);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1,\
    \ (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12,\
    \ (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  // your code here.\n  std::vector<long> res;\n  if(xs.size() == 0)\
    \ return res;\n  res.resize(xs.size() - 1);\n  for(int i = 0; i < xs.size() -\
    \ 1; i++){\n    res[i] = xs[i + 1] * (i + 1);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103664
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
    \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
    \ of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4,\
    \ (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long>\
    \ xs) {\n  std::vector<long> res;\n  for (int i = 1; i < xs.size(); i++) {\n \
    \   res.push_back(xs[i] * i);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1})))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2,\
    \ (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103664
