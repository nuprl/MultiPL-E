name: HumanEval_159_eat
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and\
  \ you already have eaten a certain number of carrots,\n// but now you need to eat\
  \ more carrots to complete the day's meals.\n// you should return a vector of [\
  \ total number of eaten carrots after your meals,\n// the number of carrots left\
  \ after your meals ]\n// if there are not enough remaining carrots, you will eat\
  \ all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5),\
  \ (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8),\
  \ (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n\
  // (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7,\
  \ (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that\
  \ you have eaten.\n// @need : integer\n// the number of carrots that you need to\
  \ eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in\
  \ stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0\
  \ <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long\
  \ need, long remaining) {\n"
tests: "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6),\
  \ (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4),\
  \ (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1),\
  \ (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2),\
  \ (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4),\
  \ (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4),\
  \ (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
completions: ["    int sum = number + need;\n    if (sum > remaining)\n    {\n   \
    \     std::vector<long> res = {remaining, 0};\n        return res;\n    }\n  \
    \  else\n    {\n        std::vector<long> res = {sum, remaining - sum};\n    \
    \    return res;\n    }", "    std::vector<long> a;\n    if (remaining < need)\
    \ {\n        a.push_back(number + remaining);\n        a.push_back(0);\n    }\
    \ else {\n        a.push_back(number + need);\n        a.push_back(remaining -\
    \ need);\n    }\n    return a;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "  if(remaining - need\
    \ < 0) {\n    std::vector<long> z = {number + remaining, 0};\n    return z;\n\
    \  } else {\n    std::vector<long> z = {number + need, remaining - need};\n  \
    \  return z;\n  }", "    std::vector<long> res;\n    if(number + need > remaining){\n\
    \        res.push_back(remaining);\n        res.push_back(0);\n    }\n    else{\n\
    \        res.push_back(number + need);\n        res.push_back(remaining - (number\
    \ + need));\n    }\n    return res;", "    long eaten = number;\n    long left\
    \ = remaining;\n    if (left < need) {\n        eaten += left;\n        left =\
    \ 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n   \
    \ return {eaten, left};", "    long size = need - number;\n    std::vector<long>\
    \ result;\n    if (size > remaining) {\n        result.push_back(size + remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(size + number);\n\
    \        result.push_back(remaining - size);\n    }\n    return result;", "  if\
    \ (need > remaining)\n    return {number + remaining, 0};\n  return {number +\
    \ need, remaining - need};", "  return std::vector<long>{\n    number >= need\
    \ ? number + remaining : number + remaining - (need - number),\n    number >=\
    \ need ? 0 : need - number\n  };", "    std::vector<long> v;\n    if (number <\
    \ 1000 && need < 1000 && remaining < 1000) {\n        if (number + need <= remaining)\
    \ {\n            v.push_back(number + need);\n            v.push_back(remaining\
    \ - need);\n        } else {\n            v.push_back(number + remaining);\n \
    \           v.push_back(0);\n        }\n    }\n    return v;", "    std::vector<long>\
    \ result;\n    long meal_remain = (need - number);\n    long new_number = number\
    \ + remaining;\n    long new_remaining = remaining - meal_remain;\n    if (new_remaining\
    \ > 0) {\n        result.push_back(new_number);\n        result.push_back(new_remaining);\n\
    \    } else {\n        result.push_back(new_number);\n        result.push_back(0);\n\
    \    }\n    return result;", "\tlong totalNumber = number + need;\n\tstd::vector<long>\
    \ result;\n\tresult.push_back(totalNumber);\n\tresult.push_back(remaining - totalNumber);\n\
    \treturn result;", "  std::vector<long> ans{number + need, remaining};\n  if (ans[0]\
    \ > ans[1]) ans[0] = ans[1];\n  return {ans[0], ans[1] - ans[0]};", "  long carrotsEat\
    \ = number + std::min(need, remaining);\n  long carrotsLeft = std::max(0L, remaining\
    \ - need);\n  return {carrotsEat, carrotsLeft};", "\tvector<long> result;\n\t\
    if (remaining > number) {\n\t\tif (need > remaining) {\n\t\t\tif (remaining +\
    \ number >= need) {\n\t\t\t\tresult.push_back(need);\n\t\t\t\tresult.push_back(remaining\
    \ + number - need);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(remaining\
    \ + number);\n\t\t\t\tresult.push_back(0);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\
    result.push_back(remaining);\n\t\t\tresult.push_back(0);\n\t\t}\n\t}\n\telse {\n\
    \t\tif (need > number) {\n\t\t\tresult.push_back(number);\n\t\t\tresult.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(need);\n\t\t\tresult.push_back(0);\n\
    \t\t}\n\t}\n\treturn result;", "    // happy coding :)\n    if(number + need <\
    \ remaining) {\n        std::vector<long> v = {number + need, remaining - (number\
    \ + need)};\n        return v;\n    }\n    else {\n        std::vector<long> v\
    \ = {remaining + number, 0};\n        return v;\n    }", "\tlong out[2];\n\tlong\
    \ n = number + need;\n\tif (n > remaining) {\n\t\tout[0] = remaining;\n\t\tout[1]\
    \ = 0;\n\t}\n\telse {\n\t\tout[0] = n;\n\t\tout[1] = remaining - n;\n\t}\n\tstd::vector<long>\
    \ result(out, out + sizeof(out) / sizeof(out[0]));\n\treturn result;", "  \n \
    \ return std::vector<long>({number + need <= remaining ? number + need : remaining,\
    \ number + need <= remaining ? remaining - (number + need) : 0});", '  // Your
    code', "    std::vector<long> answer = {number, remaining};\n    answer[0] +=\
    \ need;\n    if (answer[0] > 1000)\n        answer[0] = 1000;\n    answer[1] -=\
    \ need;\n    if (answer[1] < 0)\n        answer[1] = 0;\n    return answer;",
  "\tstd::vector<long> result;\n\tlong total = number + need;\n\tlong re = remaining\
    \ - need;\n\tresult.push_back(total);\n\tif (re < 0)\n\t\tresult.push_back(0);\n\
    \telse\n\t\tresult.push_back(re);\n\treturn result;", "  std::vector<long> result;\n\
    \  if(remaining >= need)\n  {\n    result.push_back(number + need);\n    result.push_back(remaining\
    \ - need);\n  }\n  else\n  {\n    result.push_back(number + remaining);\n    result.push_back(0);\n\
    \  }\n  return result;", "    std::vector<long> result{number, 0};\n    if (number\
    \ + need <= remaining)\n    {\n        result[0] += need;\n        result[1] =\
    \ remaining - need;\n    }\n    else\n    {\n        result[0] += remaining;\n\
    \        result[1] = 0;\n    }\n    return result;", "  std::vector<long> carrot;\n\
    \  int sum;\n  sum = number + need;\n  if (sum > remaining) {\n    sum = remaining;\n\
    \    carrot.push_back(sum);\n    carrot.push_back(0);\n  } else {\n    carrot.push_back(sum);\n\
    \    carrot.push_back(remaining - sum);\n  }\n  return carrot;", "    if (remaining\
    \ + number >= need) {\n        return {need, remaining + number - need};\n   \
    \ } else {\n        return {remaining + number, 0};\n    }", "    if (need > number\
    \ + remaining)\n        return {number + remaining, 0};\n    return {need, remaining\
    \ - (need - number)};", "    long sum = number + need;\n    if (sum > remaining)\
    \ {\n        return std::vector<long>({sum, remaining - sum});\n    } else {\n\
    \        return std::vector<long>({sum, 0});\n    }", "    std::vector<long> vec;\n\
    \    if(number + need <= remaining){\n        vec.push_back(number + need);\n\
    \        vec.push_back(remaining - (number + need));\n    }else{\n        vec.push_back(number\
    \ + remaining);\n        vec.push_back(0);\n    }\n    return vec;", "    long\
    \ total = number + std::min(need, remaining);\n    remaining -= std::min(need,\
    \ remaining);\n    return std::vector<long>({total, remaining});", "    std::vector<long>\
    \ result;\n    if(remaining<need){\n        result.push_back(number+remaining);\n\
    \        result.push_back(0);\n    }else{\n        result.push_back(number+need);\n\
    \        result.push_back(remaining-need);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    if(need>=remaining)\n    {\n        res.push_back(number+remaining);\n\
    \        res.push_back(0);\n    }\n    else\n    {\n        res.push_back(number+need);\n\
    \        res.push_back(remaining-need);\n    }\n    return res;", "  long last\
    \ = number + remaining;\n  return std::vector<long>({std::min(last, number + need),\
    \ last - std::min(last, number + need)});", "  std::vector<long> result;\n  if(remaining\
    \ == 0){\n    result.push_back(0);\n    result.push_back(0);\n    return result;\n\
    \  }\n  if(remaining < need){\n    result.push_back(remaining);\n    result.push_back(0);\n\
    \    return result;\n  }\n  if(remaining == need){\n    result.push_back(remaining);\n\
    \    result.push_back(0);\n    return result;\n  }\n  result.push_back(need);\n\
    \  result.push_back(remaining - need);\n  return result;", "  std::vector<long>\
    \ ret;\n  if (number + need > remaining) {\n    ret.push_back(remaining);\n  \
    \  ret.push_back(0);\n  } else {\n    ret.push_back(number + need);\n    ret.push_back(remaining\
    \ - (number + need));\n  }\n  return ret;", "\tstd::vector<long> d(2);\n\tif (number\
    \ + need <= remaining)\n\t{\n\t\td[0] = number + need;\n\t\td[1] = remaining -\
    \ (number + need);\n\t}\n\telse\n\t{\n\t\td[0] = number + remaining;\n\t\td[1]\
    \ = 0;\n\t}\n\treturn d;", "    if(need <= remaining)\n        return {number\
    \ + need, remaining - need};\n    else\n        return {number + remaining, 0};",
  "  std::vector<long> v;\n  long total = number + remaining;\n  if (total >= need)\
    \ {\n    v.push_back(need);\n    v.push_back(total - need);\n  } else {\n    v.push_back(total);\n\
    \    v.push_back(0);\n  }\n  return v;", '    return std::vector<long>({(long)number
    + (long)std::min(need, remaining), (long)std::max(0, remaining - need)});', "\t\
    // your code here :)\n\t// int remaining2 = remaining - number;\n\tif (remaining\
    \ == 0) {\n\t\treturn { 0, 0 };\n\t}\n\tif (remaining < need - number) {\n\t\t\
    return { number + remaining, 0 };\n\t}\n\treturn { number + need, remaining -\
    \ need };", "    std::vector<long> ret;\n    //your code here\n    ret.push_back(need+number);\n\
    \    if (remaining < need)\n        ret.push_back(0);\n    else\n        ret.push_back(remaining-need);\n\
    \    return ret;", "    if (need > remaining)\n        return std::vector<long>({(long)number\
    \ + remaining, (long)0});\n    else\n        return std::vector<long>({(long)number\
    \ + need, (long)remaining - need});", "    //your code here\n    std::vector<long>\
    \ result;\n    if(need == remaining) {\n        result.push_back(number+need);\n\
    \        result.push_back(0);\n    }\n    else if(need > remaining) {\n      \
    \  result.push_back(number+remaining);\n        result.push_back(need-remaining);\n\
    \    }\n    else {\n        result.push_back(number+need);\n        result.push_back(remaining-need);\n\
    \    }\n    return result;", "\treturn{ number+std::min(need, remaining), remaining\
    \ - std::min(need, remaining) };", "  long total = number + need;\n  return {total,\
    \ (remaining - need)};", "\tif (number + remaining >= need)\n\t\treturn { need,\
    \ remaining - (need - number) };\n\telse\n\t\treturn { number + remaining, 0 };",
  "    long res = number + remaining;\n    if (res >= need)\n        return {need,\
    \ res - need};\n    else\n        return {res, 0};", "\t//cout << number << \"\
    \ \" << need << \" \" << remaining << endl;\n\tif (remaining < need) {\n\t\tstd::vector<long>\
    \ v;\n\t\tv.push_back(number + remaining);\n\t\tv.push_back(0);\n\t\treturn v;\n\
    \t}\n\telse {\n\t\tstd::vector<long> v;\n\t\tv.push_back(number + need);\n\t\t\
    v.push_back(remaining - need);\n\t\treturn v;\n\t}\n\t", "    // your code here\n\
    \    if (need <= remaining)\n    {\n        std::vector<long> vec;\n        vec.push_back(number\
    \ + need);\n        vec.push_back(remaining - need);\n        return vec;\n  \
    \  } else\n    {\n        std::vector<long> vec;\n        vec.push_back(number\
    \ + remaining);\n        vec.push_back(0);\n        return vec;\n    }", "   \
    \ if (number + remaining < need) {\n        return {number + remaining, 0};\n\
    \    }\n    return {need, number + remaining - need};", "    long sum = 0;\n \
    \   std::vector<long>v;\n    if(remaining - (need - number) >= 0)\n        sum\
    \ = number + need;\n    else\n        sum = number + remaining;\n    v.push_back(sum);\n\
    \    v.push_back(remaining - (need - number));\n    return v;", "    if(remaining\
    \ < need)\n        return {number + remaining, 0};\n    return {number + need,\
    \ remaining - need};", "    std::vector<long> v;\n    if (remaining>=need)\n \
    \   {\n        v.push_back(number+need);\n        v.push_back(remaining-need);\n\
    \    }\n    else\n    {\n        v.push_back(number+remaining);\n        v.push_back(0);\n\
    \    }\n    return v;", "    if (remaining < need)\n        return {remaining+number,\
    \ 0};\n    return {number+need, remaining-need};", "  std::vector<long> res;\n\
    \  res.push_back(0);\n  res.push_back(0);\n  if (remaining <= number) {\n    res[0]\
    \ = remaining;\n    res[1] = 0;\n  } else {\n    if (remaining - number >= need)\
    \ {\n      res[0] = number + need;\n      res[1] = remaining - number - need;\n\
    \    } else {\n      res[0] = number + remaining - number;\n      res[1] = 0;\n\
    \    }\n  }\n  return res;", "    if (number+need>=remaining)\n    {\n       \
    \ return {remaining, 0};\n    }\n    else\n    {\n        return {number+need,\
    \ remaining-(number+need)};\n    }", "    long eaten = number;\n    if (number\
    \ + remaining < need) {\n        eaten += remaining;\n        remaining = 0;\n\
    \    } else {\n        eaten += need;\n        remaining -= need;\n    }\n   \
    \ return {eaten, remaining};", "    if(remaining>=need)\n        return std::vector<long>{number+need,remaining-need};\n\
    \    else\n        return std::vector<long>{number+remaining,0};", '    // Write
    your code here...', "    int check;\n    std::vector<long> c;\n    c.push_back(number+remaining);\n\
    \    c.push_back(0);\n    for(int i=0;i<c.size();i++)\n    {\n        check=c[i];\n\
    \        if(check>=need)\n        {\n            c[i]-=need;\n            c[i]=number+remaining-need;\n\
    \            c.push_back(c[i]);\n            c.erase(c.begin()+i);\n         \
    \   return c;\n        }\n    }\n    return c;", "\tstd::vector<long> result;\n\
    \tif (remaining >= need) {\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining\
    \ - need);\n\t}\n\telse {\n\t\tresult.push_back(number + remaining);\n\t\tresult.push_back(0);\n\
    \t}\n\treturn result;", "    // Write your code here\n    long total = 0;\n  \
    \  if(need>remaining){\n        total = number + remaining;\n        remaining\
    \ = 0;\n    }\n    else{\n        total = number + need;\n        remaining =\
    \ remaining - need;\n    }\n    std::vector<long> res;\n    res.push_back(total);\n\
    \    res.push_back(remaining);\n    return res;", "\treturn { number + ((need\
    \ <= remaining) ? need : remaining),\n\t\tremaining - ((need <= remaining) ? need\
    \ : remaining) };", "    if(remaining>=need){\n        return std::vector<long>\
    \ {number+need,remaining-need};\n    }\n    else{\n        return std::vector<long>\
    \ {number+remaining,0};\n    }", "\tif(remaining<need-number)\n\t\treturn {number+remaining,0};\n\
    \telse return {number+need,remaining-(need-number)};", '    return ((need >= (number
    + remaining)) ? std::vector<long>({(long)(number + remaining), (long)0}) : std::vector<long>({(long)(number
    + need), (long)(remaining - need)}));', "  std::vector<long> answ;\n  long temp\
    \ = 0;\n  temp = number + need;\n  if (need > remaining) {\n    answ.push_back(remaining);\n\
    \    answ.push_back(0);\n  } else {\n    answ.push_back(temp);\n    answ.push_back(remaining\
    \ - need);\n  }\n  return answ;", "\tassert(0 <= number);\n\tassert(number <=\
    \ 1000);\n\tassert(0 <= need);\n\tassert(need <= 1000);\n\tassert(0 <= remaining);\n\
    \tassert(remaining <= 1000);\n\tstd::vector<long> ret(2);\n\tif (number + need\
    \ <= remaining) {\n\t\tret[0] = number + need;\n\t\tret[1] = remaining - (number\
    \ + need);\n\t}\n\telse {\n\t\tret[0] = number + remaining;\n\t\tret[1] = 0;\n\
    \t}\n\treturn ret;", "    int sum = number + need;\n    if (sum <= remaining)\
    \ {\n        return {sum, remaining - sum};\n    } else {\n        if (remaining\
    \ >= number) {\n            return {sum - (sum - remaining), 0};\n        } else\
    \ {\n            return {number + remaining, 0};\n        }\n    }", "    std::vector<long>\
    \ meal;\n    meal.push_back(need + number);\n    if (meal[0] >= remaining) {\n\
    \        meal.push_back(0);\n    } else {\n        meal.push_back(remaining -\
    \ meal[0]);\n    }\n    return meal;", "  std::vector<long> ret;\n  long total_number_eaten\
    \ = number + need;\n  if (remaining >= need) {\n    ret.push_back(total_number_eaten);\n\
    \    ret.push_back(remaining - need);\n  } else {\n    ret.push_back(remaining\
    \ + number);\n    ret.push_back(0);\n  }\n  return ret;", "    // Write your code\
    \ here\n    long all_carrots = remaining + number;\n    long eaten_carrots = need\
    \ - number;\n    long left_carrots = remaining - eaten_carrots;\n    std::vector<long>\
    \ v;\n    if (left_carrots < 0) {\n        eaten_carrots = need;\n        left_carrots\
    \ = 0;\n    }\n    v.push_back(eaten_carrots);\n    v.push_back(left_carrots);\n\
    \    return v;", "  if(remaining >= (need - number)){\n    return std::vector<long>\
    \ {(number + need), (remaining - (need - number))};\n  }\n  return std::vector<long>\
    \ {(number + remaining), 0};", "\tstd::vector<long> res{};\n\tif (number + need\
    \ > remaining) {\n\t\tres.push_back(remaining);\n\t\tres.push_back(0);\n\t}\n\t\
    else {\n\t\tres.push_back(number + need);\n\t\tres.push_back(remaining - need);\n\
    \t}\n\treturn res;", "    if (need - number > remaining)\n        return { number\
    \ + remaining, 0 };\n    else\n        return { number + need, remaining - need\
    \ };", "    std::vector<long> res;\n    long total = number + need;\n    if (total\
    \ > remaining) {\n        res.push_back(remaining);\n        res.push_back(0);\n\
    \    } else {\n        res.push_back(total);\n        res.push_back(remaining\
    \ - total);\n    }\n    return res;", "    if (remaining >= need)\n        return\
    \ {number + need, remaining - need};\n    return {number + remaining, 0};", " \
    \   long carrotsToEat = need - number;\n    if (carrotsToEat > remaining) {\n\
    \        carrotsToEat = remaining;\n    }\n    remaining -= carrotsToEat;\n  \
    \  return {carrotsToEat + number, remaining};", "    if(remaining + number >=\
    \ need)\n        return {need, remaining + number - need};\n    else\n       \
    \ return {remaining + number, 0};", "    if (remaining >= need) {\n        return\
    \ std::vector<long>({number + need, remaining - need});\n    } else {\n      \
    \  return std::vector<long>({number + remaining, 0});\n    }", "    std::vector<long>\
    \ v;\n    long total_meal = number + need;\n    if (total_meal < remaining) {\n\
    \        v.push_back(total_meal);\n        v.push_back(remaining - total_meal);\n\
    \    } else {\n        v.push_back(total_meal);\n        v.push_back(0);\n   \
    \ }\n    return v;", "    std::vector<long> x;\n    if(number + need >= remaining){\n\
    \    x.push_back(remaining);\n    x.push_back(0);\n    }\n    else if(remaining\
    \ > number + need){\n    x.push_back(number + need);\n    x.push_back(remaining\
    \ - (number + need));\n    }\n    return x;", "\tif (number + need <= remaining)\
    \ {\n\t\tstd::vector<long> result = { number + need, remaining - (number + need)\
    \ };\n\t\treturn result;\n\t}\n\telse {\n\t\tstd::vector<long> result = { number\
    \ + remaining, 0 };\n\t\treturn result;\n\t}", "  if(need <= remaining) {\n  \
    \  std::vector<long> v{(long) number + need, (long) remaining - need};\n    return\
    \ v;\n  }\n  else {\n    std::vector<long> v{(long) number + remaining, (long)\
    \ 0};\n    return v;\n  }", "    std::vector<long> result;\n    long total;\n\
    \    if(remaining<need){\n        total=number+remaining;\n        result.push_back(total);\n\
    \        result.push_back(0);\n    }else{\n        total=number+need;\n      \
    \  remaining=remaining-need;\n        result.push_back(total);\n        result.push_back(remaining);\n\
    \    }\n    return result;", "  // your code here\n  std::vector<long> result(2);\n\
    \  result[0] = number;\n  result[1] = 0;\n  for (int i = 0; i < need; i++) {\n\
    \    if (remaining > 0) {\n      result[0]++;\n      remaining--;\n    }\n  }\n\
    \  result[1] = remaining;\n  return result;", "    std::vector<long>result;\n\
    \    if(number < 0 || need < 0 || remaining < 0){\n        result.push_back(0);\n\
    \        result.push_back(0);\n        return result;\n    }\n    if(remaining\
    \ > number+need){\n        result.push_back(number+need);\n        result.push_back(remaining-number-need);\n\
    \        return result;\n    }else{\n        result.push_back(remaining+number);\n\
    \        result.push_back(0);\n        return result;\n    }", "\tif(number+need<=remaining)\n\
    \t\treturn {number+need,remaining-number-need};\n\telse\n\t\treturn {remaining+number,0};",
  "    int n = remaining - need;\n    int x;\n    if (n >= 0) {\n        x = number\
    \ + need;\n    } else {\n        x = number + remaining;\n    }\n    std::vector<long>\
    \ p = {x, n};\n    return p;", "  std::vector<long> result;\n  std::cout << \"\
    number:\" << number << \", need:\" << need << \", remaining:\" << remaining <<\
    \ std::endl;\n  if (need <= remaining) {\n    result.push_back(number + need);\n\
    \    result.push_back(remaining - need);\n  } else {\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n  }\n  return result;", "    std::vector<long>\
    \ arr(2);\n    if (need == 0 || remaining == 0)\n    {\n        arr[0] = number;\n\
    \        arr[1] = remaining;\n        return arr;\n    }\n    if (remaining <\
    \ need)\n    {\n        arr[0] = number + remaining;\n        arr[1] = 0;\n  \
    \      return arr;\n    }\n    arr[0] = number + need;\n    arr[1] = remaining\
    \ - need;\n    return arr;", "    std::vector<long> v;\n    if (remaining >= need)\
    \ {\n        v.push_back(number + need);\n        v.push_back(remaining - need);\n\
    \    } else {\n        v.push_back(number + remaining);\n        v.push_back(0);\n\
    \    }\n    return v;", "  if (number + remaining >= need)\n    return { number\
    \ + need, (number + remaining) - need };\n  else\n    return { number + remaining,\
    \ 0 };", "    std::vector<long> res;\n    long eat = number + need;\n    if (eat\
    \ > remaining)\n        eat = remaining;\n    res.push_back(eat);\n    res.push_back(remaining\
    \ - eat);\n    return res;", "  // your code here\n  if (number + need > remaining)\n\
    \  {\n    std::vector<long> v = {remaining, 0};\n    return v;\n  }\n  else\n\
    \  {\n    std::vector<long> v = {number + need, remaining - (number + need)};\n\
    \    return v;\n  }", "    std::vector<long> ans(2);\n    ans[0] = (number + need);\n\
    \    ans[1] = (remaining - need);\n    if (ans[1] < 0) {\n        ans[0] = (ans[0]\
    \ + ans[1]);\n        ans[1] = 0;\n    }\n    return ans;", "\tstd::vector<long>\
    \ r;\n\tif (number + need <= remaining) {\n\t\tr.push_back(number + need);\n\t\
    \tr.push_back(remaining - number - need);\n\t}\n\telse {\n\t\tr.push_back(number\
    \ + remaining);\n\t\tr.push_back(0);\n\t}\n\treturn r;", "    std::vector<long>\
    \ result;\n    result.push_back(number + std::min(need, remaining));\n    result.push_back(std::max(0l,\
    \ remaining - need));\n    return result;", "    if (remaining<need) return {\
    \ number+remaining, 0 };\n    return { number+need, remaining-need };", "    std::vector<long>\
    \ result;\n    if(remaining <= 0)\n        return result;\n    if(remaining >=\
    \ need)\n        result.push_back(number + need);\n    else\n        result.push_back(number\
    \ + remaining);\n    result.push_back(remaining - need > 0 ? remaining - need\
    \ : 0);\n    return result;", "  std::vector<long> output = {};\n  if (need >\
    \ number + remaining) {\n    output.push_back(number + remaining);\n    output.push_back(0);\n\
    \  } else {\n    output.push_back(number + need);\n    output.push_back(remaining\
    \ - need);\n  }\n  return output;", "  int l = 0;\n  int r = 0;\n  if(number+remaining\
    \ > need){\n    l = need;\n    r = number+remaining-need;\n  }\n  else{\n    l\
    \ = number+remaining;\n    r = 0;\n  }\n  return std::vector<long>({l,r});", " \
    \   long sum = number;\n    std::vector<long> result;\n    if(remaining >= need)\n\
    \    {\n        sum += need;\n        result.push_back(sum);\n        result.push_back(remaining\
    \ - need);\n    }\n    else if(remaining <= need)\n    {\n        sum += remaining;\n\
    \        result.push_back(sum);\n        result.push_back(0);\n    }\n    return\
    \ result;", "\tlong total = number;\n\tif (need <= remaining) {\n\t\ttotal +=\
    \ need;\n\t\tremaining -= need;\n\t}\n\telse {\n\t\ttotal += remaining;\n\t\t\
    remaining = 0;\n\t}\n\tstd::vector<long> answer;\n\tanswer.push_back(total);\n\
    \tanswer.push_back(remaining);\n\treturn answer;", "\t// your code here...\n\t\
    if (remaining >= need)\n\t\treturn std::vector<long>({ number + need, remaining\
    \ - need });\n\telse\n\t\treturn std::vector<long>({ number + remaining, 0 });",
  "    // Happy coding...\n    std::vector<long> res;\n    if (need <= remaining)\
    \ {\n        res.push_back(number + need);\n        res.push_back(remaining -\
    \ need);\n    } else {\n        res.push_back(number + remaining);\n        res.push_back(0);\n\
    \    }\n    return res;", "    if(number+need>remaining)\n        return {remaining,\
    \ 0};\n    else\n        return {number+need, remaining-number-need};", "\tstd::vector<long>\
    \ carrots;\n\tif (number + need <= remaining) {\n\t\tcarrots.push_back(number\
    \ + need);\n\t\tcarrots.push_back(remaining - (number + need));\n\t}\n\telse {\n\
    \t\tcarrots.push_back(remaining);\n\t\tcarrots.push_back(0);\n\t}\n\treturn carrots;",
  "    std::vector<long> retVal;\n    if(remaining >= need)\n    {\n        retVal.push_back(number\
    \ + need);\n        retVal.push_back(remaining - need);\n    }\n    else\n   \
    \ {\n        retVal.push_back(number + remaining);\n        retVal.push_back(0);\n\
    \    }\n    return retVal;", '    return {number + need, remaining - need};',
  "    long sum = number + remaining;\n    long y = sum - need;\n    std::vector<long>\
    \ x;\n    if (y < 0) {\n        x.push_back(sum);\n        x.push_back(0);\n \
    \   } else {\n        x.push_back(need);\n        x.push_back(y);\n    }\n   \
    \ return x;", "  // Your code here!\n  if(need < remaining)\n  {\n    remaining\
    \ -= need;\n    number += need;\n  }\n  else if(remaining == 0)\n  {\n    number\
    \ += 0;\n  }\n  else\n  {\n    number += remaining;\n    remaining = 0;\n  }\n\
    \  return {number, remaining};", "    // Your code here!\n    long need_to_eat\
    \ = need - number;\n    if (remaining >= need_to_eat) {\n        remaining -=\
    \ need_to_eat;\n        return {need, remaining};\n    } else {\n        return\
    \ {remaining + number, 0};\n    }", '  return std::vector<long>({ (long)std::min(number
    + remaining, need), (long)std::max(0L, remaining - (need - number)) });', "  \
    \  long total = number;\n    if (need - number > remaining) {\n        total +=\
    \ remaining;\n        remaining = 0;\n    } else {\n        total += need - number;\n\
    \        remaining -= need - number;\n    }\n    return {total, remaining};",
  "    long eaten = 0;\n    if (number < need) {\n        eaten = number + remaining;\n\
    \        if (eaten < need) {\n            return {eaten, 0};\n        } else {\n\
    \            return {need, eaten - need};\n        }\n    } else {\n        return\
    \ {number, remaining};\n    }", "    if(need > remaining)\n    {\n        return\
    \ std::vector<long>({number + remaining, 0});\n    }\n\n    return std::vector<long>({number\
    \ + need, remaining - need});", "  long sum = number + remaining;\n  return {std::min(sum,\
    \ number + need), std::max(sum - need, (long)0)};", "    if(number + need > remaining)\
    \ {\n        return {remaining, 0};\n    }\n    return {number + need, remaining\
    \ - number - need};", "    // your code goes here...\n    std::vector<long> ret;\n\
    \    if (remaining < need) {\n        ret.push_back(number + remaining);\n   \
    \     ret.push_back(0);\n    } else {\n        ret.push_back(number + need);\n\
    \        ret.push_back(remaining - need);\n    }\n    return ret;", "\t//TODO:\
    \ return a vector of [total number of eaten carrots after your meals, the number\
    \ of carrots left after your meals]\n\tstd::vector<long> ret;\n\tret.push_back(0);\n\
    \tret.push_back(0);\n\tif (number < 0 || need < 0 || remaining < 0)\n\t\treturn\
    \ ret;\n\tlong totalCarrots;\n\tif (remaining >= need - number)\n\t\ttotalCarrots\
    \ = number + need;\n\telse\n\t\ttotalCarrots = number + remaining;\n\tret[0] =\
    \ totalCarrots;\n\tret[1] = remaining - need + number;\n\treturn ret;", "    //\
    \ Good luck :)\n    if (remaining + number >= need)\n        return { need, remaining\
    \ + number - need };\n    else\n        return { remaining + number, 0 };", " \
    \   long num_carrots_after_meals, remaining_carrots;\n    if(remaining >= need)\
    \ {\n        num_carrots_after_meals = number + need;\n        remaining_carrots\
    \ = remaining - need;\n    }\n    else {\n        num_carrots_after_meals = number\
    \ + remaining;\n        remaining_carrots = 0;\n    }\n    std::vector<long> ret\
    \ = {num_carrots_after_meals, remaining_carrots};\n    return ret;", "\t\tif(number\
    \ + remaining >= need)\n\t\t\treturn std::vector<long>({number + remaining, need\
    \ - number});\n\t\telse\n\t\t\treturn std::vector<long>({number + remaining, 0});",
  "\treturn { number + std::min(need, remaining), remaining - std::min(need, remaining)\
    \ };", "\tlong num_eaten = number;\n\tif (remaining > need) {\n\t\tnum_eaten +=\
    \ need;\n\t\tremaining -= need;\n\t}\n\telse {\n\t\tnum_eaten += remaining;\n\t\
    \tremaining = 0;\n\t}\n\tstd::vector<long> ret;\n\tret.push_back(num_eaten);\n\
    \tret.push_back(remaining);\n\treturn ret;", "  // your code here!\n  std::vector<long>\
    \ result;\n  if(remaining >= need){\n    result.push_back(number + need);\n  \
    \  result.push_back(remaining - need);\n  }\n  else{\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n  }\n  return result;", "    vector<long>\
    \ res;\n    if (number + need > remaining) {\n        res.push_back(remaining);\n\
    \        res.push_back(0);\n    } else {\n        res.push_back(number + need);\n\
    \        res.push_back(remaining - number - need);\n    }\n    return res;", " \
    \ // your code here\n  return std::vector<long>({number + std::min(need, remaining),\
    \ remaining - std::min(need, remaining)});", "  long x = (remaining + number)\
    \ - need;\n  return (x < 0) ? std::vector<long>({(long)remaining + number, (long)0})\
    \ : std::vector<long>({(long)remaining + number, (long)x});", "    if(need-number>remaining)\n\
    \    {\n        std::vector<long> v = {remaining+number,0};\n        return v;\n\
    \    }\n    else\n    {\n        std::vector<long> v = {need,remaining-(need-number)};\n\
    \        return v;\n    }", "    std::vector<long> result;\n    if (need > remaining)\
    \ {\n        if (number > remaining) {\n            result.push_back(remaining);\n\
    \            result.push_back(0);\n        } else {\n            result.push_back(number);\n\
    \            result.push_back(remaining - number);\n        }\n    } else {\n\
    \        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "  // your code here\n    std::vector<long>\
    \ v;\n    if(remaining < (need - number))\n    {\n        v.push_back(remaining\
    \ + number);\n        v.push_back(0);\n    }\n    else\n    {\n        v.push_back(need);\n\
    \        v.push_back(remaining - (need - number));\n    }\n    return v;", "\t\
    long a = number + (remaining >= need ? need : remaining);\n\tlong b = remaining\
    \ - need;\n\tstd::vector<long> arr = {a, b < 0 ? 0 : b};\n\treturn arr;", "  \
    \  if(need <= remaining)\n        return std::vector<long>({number + need, remaining\
    \ - need});\n    return std::vector<long>({number + remaining, 0});", "\tstd::vector<long>\
    \ result;\n\tif (remaining < need) {\n\t\tresult.push_back(number + remaining);\n\
    \t\tresult.push_back(0);\n\t}\n\telse {\n\t\tresult.push_back(number + need);\n\
    \t\tresult.push_back(remaining - need);\n\t}\n\treturn result;", "    //coding\
    \ and coding..\n    long total = 0;\n    if(remaining > need){\n        total\
    \ = number + need;\n        remaining = remaining - need;\n    }\n    else{\n\
    \        total = number + remaining;\n        remaining = 0;\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(total);\n    result.push_back(remaining);\n  \
    \  return result;", "    std::vector<long> v;\n    if (need < remaining){\n  \
    \      v.push_back(number + need);\n        v.push_back(remaining - need);\n \
    \   }\n    else{\n        v.push_back(number + remaining);\n        v.push_back(0);\n\
    \    }\n    return v;", "  std::vector<long> result;\n  long total = number +\
    \ remaining;\n  if (need < total) {\n    result.push_back(number + need);\n  \
    \  result.push_back(total - need);\n  } else {\n    result.push_back(total);\n\
    \    result.push_back(0);\n  }\n  return result;", "    std::vector<long> result;\n\
    \    if(remaining<need){\n        result.push_back(number+remaining);\n      \
    \  result.push_back(0);\n    }\n    else{\n        result.push_back(number+need);\n\
    \        result.push_back(remaining-need);\n    }\n    return result;", "    std::vector<long>\
    \ v;\n    int value;\n    if (remaining<need)\n        value=remaining+number;\n\
    \    else\n        value=number+need;\n    v.push_back(value);\n    v.push_back(remaining-need);\n\
    \    return v;", '    // your code here ...', '    return {number + std::min(need,
    remaining), remaining - std::min(need, remaining)};', "    std::vector<long> carrots;\n\
    \    if (remaining + number >= need) {\n        carrots.push_back(need);\n   \
    \     carrots.push_back(remaining - (need - number));\n    } else {\n        carrots.push_back(remaining\
    \ + number);\n        carrots.push_back(0);\n    }\n    return carrots;", '    return
    {number + std::min(need, remaining), std::max(remaining - need, (long)0)};', "\t\
    if (number >= need) return std::vector<long>{ number, remaining };\n\tif (need\
    \ - number >= remaining) return std::vector<long>{ (number + remaining), 0 };\n\
    \treturn std::vector<long>{ need, remaining - (need - number) };", "    if (number\
    \ >= need || remaining == 0) {\n        return {number, remaining};\n    } else\
    \ if (remaining >= need - number) {\n        return {number + need - number, remaining\
    \ - need + number};\n    } else {\n        return {number + remaining, 0};\n \
    \   }", "    // Happy coding :D\n    long a = number + need;\n    long b = number\
    \ + need - remaining;\n    long c = 0;\n    std::vector<long>d;\n    if (a > remaining)\
    \ {\n        d.push_back(a);\n        d.push_back(c);\n    }\n    else if (a <=\
    \ remaining) {\n        d.push_back(remaining);\n        d.push_back(b);\n   \
    \ }\n    return d;", "    int total = need - number;\n    if (total > remaining)\n\
    \    {\n        return {(long)total + number, (long)0};\n    }\n    else\n   \
    \ {\n        return {(long)need, (long)remaining - total};\n    }\n    \n    \n\
    \    ", "  if(remaining < need - number)\n    return {number + remaining, 0};\n\
    \  return {number + need, remaining - need + number};", "\tif (number == 0 &&\
    \ need == 0 && remaining == 0)\n\t\treturn { 0, 0 };\n\tif (number > 1000 || need\
    \ > 1000 || remaining > 1000)\n\t\treturn { 0, 0 };\n\tlong eaten = 0;\n\tlong\
    \ left = 0;\n\tlong sum = number + remaining;\n\tif (sum >= need) {\n\t\teaten\
    \ = need;\n\t\tleft = sum - need;\n\t}\n\telse if (sum < need) {\n\t\teaten =\
    \ sum;\n\t\tleft = 0;\n\t}\n\tstd::vector<long> result({ eaten, left });\n\treturn\
    \ result;", "    // your code\n    int eaten=0;\n    int remain=0;\n    if(remaining<(need-number)){\n\
    \        eaten=number+remaining;\n        remain=0;\n    }\n    else{\n      \
    \  eaten=number+need-number;\n        remain=remaining-(need-number);\n    }\n\
    \    std::vector<long> result;\n    result.push_back(eaten);\n    result.push_back(remain);\n\
    \    return result;\n", "  long carrots_needed;\n  long after_meals;\n  if (number\
    \ + remaining > need) {\n    carrots_needed = need;\n    after_meals = number\
    \ + remaining - need;\n  } else {\n    carrots_needed = number + remaining;\n\
    \    after_meals = 0;\n  }\n  std::vector<long> result;\n  result.push_back(carrots_needed);\n\
    \  result.push_back(after_meals);\n  return result;", "    // your code here\n\
    \    std::vector<long> x;\n    if (need>=remaining)\n    {\n        long z = number+remaining;\n\
    \        x.push_back(z);\n        x.push_back(0);\n    }\n    else\n    {\n  \
    \      long z = number+need;\n        x.push_back(z);\n        long y = remaining-need;\n\
    \        x.push_back(y);\n    }\n    return x;", "    std::vector<long> result;\n\
    \    if (number >= need)\n        result.push_back(number);\n    else if (remaining\
    \ >= need - number)\n        result.push_back(need);\n    else\n        result.push_back(number\
    \ + remaining);\n    if (result[0] < need)\n        result.push_back(0);\n   \
    \ else\n        result.push_back(remaining - (result[0] - number));\n    return\
    \ result;", "\tif (remaining >= (need - number)) {\n\t\treturn { number + need,\
    \ remaining - (need - number) };\n\t}\n\telse {\n\t\treturn { number + remaining,\
    \ 0 };\n\t}", "    std::vector<long> eat_number;\n    if(number >= need)\n   \
    \ {\n        eat_number.push_back(number);\n        eat_number.push_back(remaining);\n\
    \    }\n    else\n    {\n        number += remaining;\n        if(number >= need)\n\
    \        {\n            eat_number.push_back(need);\n            eat_number.push_back(number\
    \ - need);\n        }\n        else\n        {\n            eat_number.push_back(number);\n\
    \            eat_number.push_back(0);\n        }\n    }\n    return eat_number;",
  "  long sum = number + need;\n  long diff = sum - remaining;\n  std::vector<long>\
    \ result;\n  if (diff < 0) {\n    result.push_back(sum);\n    result.push_back(0);\n\
    \  } else {\n    result.push_back(sum);\n    result.push_back(diff);\n  }\n  return\
    \ result;", "    std::vector<long> final{};\n    int value;\n    if(remaining\
    \ >= need){\n        value = number + need;\n        final.push_back(value);\n\
    \        remaining = remaining - need;\n        final.push_back(remaining);\n\
    \    }\n    else{\n        value = number + remaining;\n        final.push_back(value);\n\
    \        remaining = 0;\n        final.push_back(remaining);\n    }\n    return\
    \ final;", '  return {std::min(need, remaining) + number, remaining - std::min(need,
    remaining)};', "    // your code here...\n    int remaining_carrots = (remaining\
    \ - number);\n    int total_carrots_eaten = 0;\n    if(remaining_carrots >= need){\n\
    \        total_carrots_eaten = number + need;\n        return{total_carrots_eaten,\
    \ remaining_carrots - need};\n    }\n    else if(remaining_carrots < need){\n\
    \        total_carrots_eaten = number + remaining_carrots;\n        return{total_carrots_eaten,\
    \ 0};\n    }", "\tif (number + remaining < need) {\n\t\treturn {number + remaining,\
    \ 0};\n\t}\n\telse {\n\t\treturn {need, remaining - (need - number)};\n\t}", "\t\
    std::vector<long> res;\n\tlong need_to_eat = number + need;\n\tif (need_to_eat\
    \ > remaining) {\n\t\tres.push_back(remaining);\n\t\tres.push_back(0);\n\t}\n\t\
    else {\n\t\tres.push_back(need_to_eat);\n\t\tres.push_back(remaining - need_to_eat);\n\
    \t}\n\treturn res;", "    std::vector<long> v;\n    // insert your code here\n\
    \    if(remaining<need){\n        v.push_back(number+remaining);\n        v.push_back(0);\n\
    \    }\n    else{\n        v.push_back(number+need);\n        v.push_back(remaining-need);\n\
    \    }\n    return v;", "  long sum = number + need;\n  long left = sum > remaining\
    \ ? 0 : remaining - sum;\n  return std::vector<long>({sum, left});", '  // Your
    code here :)', "    std::vector<long> res;\n    if(remaining < (need - number)){\n\
    \        res.push_back(remaining + number);\n        res.push_back(0);\n    }else{\n\
    \        res.push_back(need);\n        res.push_back(remaining - (need - number));\n\
    \    }\n    return res;", "    // your code here\n    std::vector<long> ans;\n\
    \    if (remaining == 0)\n    {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (need < remaining)\n    {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n        return ans;\n  \
    \  }\n    if (need >= remaining)\n    {\n        ans.push_back(number + remaining);\n\
    \        ans.push_back(0);\n        return ans;\n    }", "  int add = std::min(need,\
    \ remaining);\n  return {number + add, remaining - add};", "  // your code\n \
    \ int temp;\n  temp = need - number;\n  if(remaining < temp)\n    temp = remaining;\n\
    \  std::vector<long> answer;\n  answer.push_back(temp + number);\n  answer.push_back(remaining\
    \ - temp);\n  return answer;", "    if (need > remaining + number) {\n       \
    \ return {number + remaining, 0};\n    }\n    return {number + need, remaining\
    \ - need};", "\tif (remaining >= need - number)\n\t\treturn std::vector<long>({\
    \ number + need, remaining - need + number });\n\telse\n\t\treturn std::vector<long>({\
    \ number + remaining, 0 });", "  std::vector<long> ret;\n  if(remaining >= need)\n\
    \    ret.push_back(number + need);\n  else\n    ret.push_back(number + remaining);\n\
    \  ret.push_back(remaining - need);\n  return ret;", "    if(remaining == 0) return\
    \ {need, 0};\n    if(need == 0) return {number, remaining};\n    long total =\
    \ number + remaining;\n    if(total >= need) return {need + number, total - need};\n\
    \    else return {total, 0};", "\tstd::vector<long> v = {};\n\tif (remaining ==\
    \ 0) {\n\t\tv.push_back(0);\n\t\tv.push_back(0);\n\t\treturn v;\n\t}\n\tif (remaining\
    \ > 0 && remaining < need) {\n\t\tv.push_back(number + remaining);\n\t\tv.push_back(0);\n\
    \t\treturn v;\n\t}\n\tv.push_back(number + need);\n\tv.push_back(remaining - need);\n\
    \treturn v;", "    if (number + remaining < need) {\n        return {number +\
    \ remaining, 0};\n    }\n    else if (number + remaining == need) {\n        return\
    \ {number + remaining, 0};\n    }\n    else {\n        return {number + need,\
    \ remaining - need};\n    }", "  std::vector<long> temp;\n  if (number + need\
    \ < remaining) {\n    temp.push_back(number + need);\n    temp.push_back(remaining\
    \ - number - need);\n  } else {\n    temp.push_back(number + remaining);\n   \
    \ temp.push_back(0);\n  }\n  return temp;", "    // Write your code here\n   \
    \ long sum = number + remaining;\n    std::vector<long> v;\n    if(sum<need){\n\
    \    \tv.push_back(sum);\n    \tv.push_back(0);\n    }\n    else{\n    \tv.push_back(need);\n\
    \    \tv.push_back(sum-need);\n    }\n    return v;", "  if (need <= remaining)\n\
    \    return std::vector<long>({number + need, remaining - need});\n  else {\n\
    \    return std::vector<long>({number + remaining, 0});\n  }", "\tstd::vector<long>v;\n\
    \tif(remaining == 0){\n\t\tv.push_back(0);\n\t\tv.push_back(0);\n\t\treturn v;\n\
    \t}\n\tint total = number + need;\n\tif(total > remaining){\n\t\tv.push_back(remaining);\n\
    \t\tv.push_back(0);\n\t\treturn v;\n\t}\n\telse{\n\t\tv.push_back(total);\n\t\t\
    v.push_back(remaining - total);\n\t\treturn v;\n\t}", "\tlong eaten = 0;\n\tlong\
    \ remain = 0;\n\tif (number < 0 || need < 0 || remaining < 0) {\n\t\tassert(false);\n\
    \t}\n\telse if (number >= 0 && number <= 1000 && need >= 0 && need <= 1000 &&\
    \ remaining >= 0 && remaining <= 1000) {\n\t\tif (remaining < need) {\n\t\t\t\
    eaten = number + remaining;\n\t\t\tremain = 0;\n\t\t}\n\t\telse {\n\t\t\teaten\
    \ = number + need;\n\t\t\tremain = remaining - need;\n\t\t}\n\t}\n\tstd::vector<long>\
    \ res = { eaten, remain };\n\treturn res;", "\treturn std::vector<long>({ (long)number+need,\
    \ remaining-need});", "    long total = 0;\n    if(number + remaining >= need)\
    \ {\n        total = number + remaining;\n        remaining = remaining - (need\
    \ - number);\n    } else {\n        total = number + remaining;\n        remaining\
    \ = 0;\n    }\n    return {total, remaining};", "    //your code here\n    std::vector<long>\
    \ ret;\n    if(remaining >= need){\n        ret.push_back(need + number);\n  \
    \      ret.push_back(remaining - need);\n    }\n    else{\n        ret.push_back(remaining\
    \ + number);\n        ret.push_back(0);\n    }\n    return ret;", "  std::vector<long>\
    \ ret;\n  if (number == 0 && need == 0 && remaining == 0)\n    return ret;\n \
    \ long sum = number + remaining;\n  if (sum < need) {\n    ret.push_back(sum);\n\
    \    ret.push_back(0);\n  } else {\n    ret.push_back(need);\n    ret.push_back(sum\
    \ - need);\n  }\n  return ret;", "    // calculate the number of eaten carrots\
    \ after your meals\n    long eat_n_carrots = number + std::min(need, remaining);\n\
    \    // calculate the number of remaining carrots after your meals\n    long remain_n_carrots\
    \ = std::max(remaining - need, (long)0);\n    // return the vector of [ total\
    \ number of eaten carrots after your meals,\n    // the number of carrots left\
    \ after your meals ]\n    return {eat_n_carrots, remain_n_carrots};", "    if\
    \ (remaining == 0)\n        return {number, remaining};\n    std::vector<long>\
    \ v(2);\n    if (need > remaining) {\n        v[0] = number + remaining;\n   \
    \     v[1] = 0;\n    } else {\n        v[0] = number + need;\n        v[1] = remaining\
    \ - need;\n    }\n    return v;", "  // Your code here\n  long eaten = 0;\n  if\
    \ (remaining <= number) {\n    eaten = remaining;\n  } else {\n    eaten = number\
    \ + need;\n  }\n  if (eaten > remaining) {\n    eaten = remaining;\n  }\n  std::vector<long>\
    \ answer;\n  answer.push_back(eaten);\n  answer.push_back(remaining - eaten);\n\
    \  return answer;", "\treturn { number + std::min(need, remaining), std::max(0L,\
    \ remaining - need) };", "    std::vector<long> result;\n    if (number == remaining)\n\
    \        result.push_back(0);\n    else if (number < remaining)\n        result.push_back(need);\n\
    \    else\n        result.push_back(number - remaining);\n    result.push_back(remaining);\n\
    \    return result;", "    std::vector<long> v;\n    if (need > remaining) {\n\
    \        long res = number + remaining;\n        v.push_back(res);\n        v.push_back(0);\n\
    \    } else {\n        long res = number + need;\n        v.push_back(res);\n\
    \        v.push_back(remaining - need);\n    }\n    return v;", "\tstd::vector<long>\
    \ v(2);\n\tlong carrots_needed = need - number;\n\tlong eaten = 0;\n\tif (carrots_needed\
    \ > remaining) {\n\t\teaten = remaining;\n\t}\n\telse {\n\t\teaten = carrots_needed;\n\
    \t}\n\tv[0] = number + eaten;\n\tv[1] = remaining - eaten;\n\treturn v;", '    return
    {std::min(number + remaining, need), std::max(number + remaining - need, 0L)};',
  "    // your code\n    std::vector<long> ret;\n    long r = remaining-number;\n\
    \    ret.push_back(r>=need?r:r+need);\n    ret.push_back(r>=need?need:0);\n  \
    \  return ret;", "    // write your code here\n    long eatCarrot = number + need;\n\
    \    if(eatCarrot <= remaining){\n        return {eatCarrot, remaining - eatCarrot};\n\
    \    }\n    else if(eatCarrot > remaining){\n        return {eatCarrot - (eatCarrot\
    \ - remaining), 0};\n    }\n    else{\n        return {};\n    }", "\tif(number+need<=remaining)\n\
    \t\treturn {number+need,remaining-number-need};\n\telse\n\t\treturn {number+remaining,0};",
  '    return std::vector<long>({number + std::min(need, remaining), remaining - std::min(need,
    remaining)});', "    // your code here :))))\n    std::vector<long> v;\n    long\
    \ sum, rem;\n    if(number<=0 || need<=0 || remaining<=0)\n        return v;\n\
    \    sum = number + need;\n    if(sum>=remaining)\n    {\n        sum = remaining;\n\
    \        rem = 0;\n    }\n    else\n    {\n        rem = remaining - sum;\n  \
    \  }\n    v.push_back(sum);\n    v.push_back(rem);\n    return v;", "    int x\
    \ = number + remaining;\n    int y = 0;\n    int z = x - need;\n    if (z < 0)\
    \ {\n        y = abs(z);\n        z = 0;\n    }\n    std::vector<long> v = {z,\
    \ y};\n    return v;", "    long total = number + min(need, remaining);\n    return\
    \ {total, max(remaining - need, 0L)};", "    // your code here :)\n    std::vector<long>\
    \ carrots;\n    if (remaining < need - number) {\n        carrots.push_back(number\
    \ + remaining);\n        carrots.push_back(0);\n    } else {\n        carrots.push_back(number\
    \ + need);\n        carrots.push_back(remaining - need + number);\n    }\n   \
    \ return carrots;"]
stop_tokens:
- "\n}"
