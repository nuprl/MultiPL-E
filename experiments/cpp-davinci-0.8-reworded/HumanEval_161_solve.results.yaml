language: cpp
name: HumanEval_161_solve
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int l = s.length();\n    for(int i = 0; i < l; i++) {\n        if(s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpgkh3hjxw: /tmp/tmpgkh3hjxw.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.empty()) return \"\";\n    std::string res;\n    for (auto &c : s)\
    \ {\n        res += isalpha(c) ? isupper(c) ? tolower(c) : toupper(c) : c;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmptw2j1djm: /tmp/tmptw2j1djm.cpp:26: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res=\"\";\n    std::cout<<\"s is: \"<<s<<std::endl;\n    for(int\
    \ i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n            res+=char(s[i]-32);\n\
    \        }else if(s[i]>='A'&&s[i]<='Z'){\n            res+=char(s[i]+32);\n  \
    \      }else{\n            res+=s[i];\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6qtygld5: /tmp/tmp6qtygld5.cpp:32: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: 's is: AsDf

    s is: 1234

    '
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string res = \"\";\n  for (char &c : s) {\n    if (islower(c)) {\n   \
    \   res += toupper(c);\n    } else if (isupper(c)) {\n      res += tolower(c);\n\
    \    } else {\n      res += c;\n    }\n  }\n  if (res.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n    std::reverse(res.begin(), res.end());\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string str = \"\";\n    if(s.length() < 1)\n        return s;\n    if(s.length()\
    \ == 1)\n        return (char)(isupper(s[0]) ? tolower(s[0]) : toupper(s[0]))\
    \ + \"\";\n    for(auto i : s) {\n        str += (char)(isupper(i) ? tolower(i)\
    \ : toupper(i));\n    }\n    return str;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp1436za1n: /tmp/tmp1436za1n.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size()==0)\n        return s;\n    if(s.size()==1 && isalpha(s[0]))\n\
    \        return s;\n    int flag=0;\n    for(int i=0;i<s.size();i++)\n    {\n\
    \        if(isalpha(s[i]))\n        {\n            flag=1;\n            break;\n\
    \        }\n    }\n    if(flag==0)\n    {\n        reverse(s.begin(),s.end());\n\
    \        return s;\n    }\n    int i=0;\n    while(i<s.size())\n    {\n      \
    \  if(isalpha(s[i]))\n        {\n            if(islower(s[i]))\n             \
    \   s[i]=toupper(s[i]);\n            else if(isupper(s[i]))\n                s[i]=tolower(s[i]);\n\
    \        }\n        i++;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) return s;\n    int i = 0;\n    while(s[i] > 'Z' || s[i]\
    \ < 'A') i++;\n    std::string result = s.substr(i);\n    std::reverse(result.begin(),\
    \ result.end());\n    int pos = 0;\n    while(pos < i) {\n        if (result[pos]\
    \ <= 'Z' && result[pos] >= 'A') {\n            result[pos] += 32;\n        } else\
    \ if (result[pos] <= 'z' && result[pos] >= 'a') {\n            result[pos] -=\
    \ 32;\n        }\n        pos++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgsvhy5yh: /tmp/tmpgsvhy5yh.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ count++;\n    }\n    if(count == 0) return std::string(s.rbegin(), s.rend());\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n    \
    \        if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n        \
    \    } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string r;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\n\
    \            r += isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n        else\n\
    \            r += s[i];\n    }\n    if (r.size() == s.size()) {\n        std::reverse(r.begin(),\
    \ r.end());\n    }\n    return r;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpcauygk8n: /tmp/tmpcauygk8n.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int flag = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = 1;\n            break;\n        }\n    }\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(flag == 0) {\n            return std::string(s.rbegin(),\
    \ s.rend());\n        }\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            }\n            else if(isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(auto& c : s) {\n        if(std::isalpha(c)) {\n            c = std::tolower(c);\n\
    \        }\n    }\n    std::reverse(s.begin(), s.end());\n    for(auto& c : s)\
    \ {\n        if(std::isalpha(c)) {\n            c = std::toupper(c);\n       \
    \ }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprfmjh7mh: /tmp/tmprfmjh7mh.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool is_letter = false;\n    for (char &ch : s) {\n        if (isalpha(ch))\
    \ {\n            is_letter = true;\n            ch = islower(ch) ? toupper(ch)\
    \ : tolower(ch);\n        }\n    }\n    if (!is_letter) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\n\
    \            count++;\n    }\n    if(count == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n            \
    \    s[i] = toupper(s[i]);\n            else\n                s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty()) return \"\";\n    for(auto& i : s) {\n        if(i >= 'a' &&\
    \ i <= 'z') i = toupper(i);\n        else if(i >= 'A' && i <= 'Z') i = tolower(i);\n\
    \    }\n    if(s.find_first_of(\"a-zA-Z\") == std::string::npos)\n        std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpdapiyzl5: /tmp/tmpdapiyzl5.cpp:34: int main(): Assertion `candidate(("#ccc"))
    == ("#CCC")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >\
    \ 64 && s[i] < 91) {\n\t\t\tresult.push_back(s[i] + 32);\n\t\t}\n\t\telse if (s[i]\
    \ > 96 && s[i] < 123) {\n\t\t\tresult.push_back(s[i] - 32);\n\t\t}\n\t\telse {\n\
    \t\t\tresult.push_back(s[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpfgxop7x7: /tmp/tmpfgxop7x7.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int n = s.size();\n\tif (n == 0) return \"\";\n\tint n_letter = 0;\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tn_letter += 1;\n\t\t}\n\
    \t}\n\tif (n_letter == 0) {\n\t\treverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tfor (int i = 0; i < n; i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t} else {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(char& c : s) {\n        if(c >= 'a' && c <= 'z')\
    \ count++;\n        else if(c >= 'A' && c <= 'Z') count++;\n    }\n    if(count\
    \ == 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    for(char& c : s) {\n        if(c >= 'a' && c <= 'z') c = toupper(c);\n  \
    \      else if(c >= 'A' && c <= 'Z') c = tolower(c);\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0) return \"\";\n    for(int i = 0; i < s.size(); i++){\n\
    \        if(isalpha(s[i])){\n            if(islower(s[i])){\n                s[i]\
    \ = toupper(s[i]);\n            }else{\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpjp7s2m8l: /tmp/tmpjp7s2m8l.cpp:31: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int L = s.length();\n    int lCase,uCase;\n    lCase = uCase = 0;\n    for(int\
    \ i=0;i<L;i++){\n        if(islower(s[i])) lCase++;\n        else if(isupper(s[i]))\
    \ uCase++;\n    }\n    if(lCase==0 && uCase==0)\n        reverse(s.begin(),s.end());\n\
    \    else{\n        for(int i=0;i<L;i++){\n            if(islower(s[i])) s[i]\
    \ = toupper(s[i]);\n            else if(isupper(s[i])) s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int flag = 0;\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n      flag = 1;\n      break;\n    }\n    if(s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      flag = 1;\n      break;\n    }\n  }\n  if(flag == 0)\
    \ {\n    for(int i = 0; i < s.length()/2; i++) {\n      char temp = s[i];\n  \
    \    s[i] = s[s.length()-i-1];\n      s[s.length()-i-1] = temp;\n    }\n    return\
    \ s;\n  }\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i] >= 'a' && s[i]\
    \ <= 'z') {\n      s[i] = s[i] - 32;\n    }\n    else if(s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n      s[i] = s[i] + 32;\n    }\n  }\n  return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    bool change = false;\n    for (char c : s)\
    \ {\n        if (std::isalpha(c)) {\n            change = true;\n            c\
    \ = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n        }\n        result\
    \ += c;\n    }\n    if (!change) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // check if any chars are alphabets\n    bool alph = false;\n    for (auto&\
    \ c : s) {\n        if (isalpha(c)) {\n            alph = true;\n            break;\n\
    \        }\n    }\n    if (!alph) {\n        reverse(s.begin(), s.end());\n  \
    \      return s;\n    }\n    for (auto& c : s) {\n        if (isalpha(c)) {\n\
    \            if (isupper(c)) {\n                c = tolower(c);\n            }\
    \ else {\n                c = toupper(c);\n            }\n        }\n    }\n \
    \   return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      s[i] = std::tolower(s[i]);\n        }\n    }\n    reverse(s.begin(), s.end());\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      s[i] = std::toupper(s[i]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpagx0tkop: /tmp/tmpagx0tkop.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(!std::isalpha(s[0])){\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    for(int i = 0; i < s.size(); i++){\n        if(std::isalpha(s[i])){\n\
    \            if(std::isupper(s[i]))\n                s[i] = tolower(s[i]);\n \
    \           else\n                s[i] = toupper(s[i]);\n        }\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp0ldsswio: /tmp/tmp0ldsswio.cpp:35: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    for (auto &c : s)\n        if (std::isalpha(c))\n\
    \            c ^= 32;\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpsr_lh79j: /tmp/tmpsr_lh79j.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  bool flag = true;\n  for (auto x : s) {\n    if (isalpha(x)) flag = false;\n\
    \  }\n  if (flag) std::reverse(s.begin(), s.end());\n  for (auto &x : s) {\n \
    \   if (isalpha(x)) {\n      x = toupper(x);\n    }\n  }\n  return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnjo_52u5: /tmp/tmpnjo_52u5.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098023
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string a = \"\";\n\tint len = s.length();\n\tfor (int i = 0; i < len; i++)\
    \ {\n\t\tif (s[i] >= 65 && s[i] <= 90) {\n\t\t\ta += (char)(s[i] + 32);\n\t\t\
    }\n\t\telse if (s[i] >= 97 && s[i] <= 122) {\n\t\t\ta += (char)(s[i] - 32);\n\t\
    \t}\n\t\telse {\n\t\t\ta += s[i];\n\t\t}\n\t}\n\tif (a == s) {\n\t\tstd::reverse(a.begin(),\
    \ a.end());\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\tif (s.size() > 0) {\n\t\tfor (auto i = 0; i < s.size();\
    \ i++) {\n\t\t\tchar c = s[i];\n\t\t\tif (isalpha(c)) {\n\t\t\t\tif (islower(c))\
    \ {\n\t\t\t\t\tresult += toupper(c);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult\
    \ += tolower(c);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult += c;\n\t\t\
    \t}\n\t\t}\n\t}\n\telse {\n\t\tresult = s;\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_wune7o6: /tmp/tmp_wune7o6.cpp:41: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] -= 'a' - 'A';\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] += 'a' - 'A';\n        }\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpa0k91ge_: /tmp/tmpa0k91ge_.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for (auto &c : s)\n    if (isalpha(c))\n      c ^= 32;\n  reverse(s.begin(),\
    \ s.end());\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd7zmegw_: /tmp/tmpd7zmegw_.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::regex re(\"[a-zA-Z]\");\n  std::smatch match;\n  int count = 0;\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    if (std::regex_search(s, match, re))\n\
    \      count++;\n  }\n  if (count == 0) {\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n  }\n  for (int i = 0; i < s.size(); i++) {\n    if (std::isupper(s[i]))\n\
    \      s[i] = std::tolower(s[i]);\n    else if (std::islower(s[i]))\n      s[i]\
    \ = std::toupper(s[i]);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    bool has_letter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            has_letter =\
    \ true;\n            res += s[i] - 32;\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            has_letter = true;\n            res += s[i] + 32;\n \
    \       } else {\n            res += s[i];\n        }\n    }\n    if (!has_letter)\
    \ {\n        return std::string(res.rbegin(), res.rend());\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\tstd::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \tfor (char c : s) {\n\t\tif (std::isalpha(c)) {\n\t\t\tresult += std::toupper(c);\n\
    \t\t}\n\t\telse {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp94ssrwd5: /tmp/tmp94ssrwd5.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string rev;\n\tbool letter = false;\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif (isalpha(s[i])) {\n\t\t\tletter = true;\n\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (letter) {\n\t\treturn s;\n\t}\n\telse {\n\t\tfor (int\
    \ i = s.length() - 1; i >= 0; i--) {\n\t\t\trev.push_back(s[i]);\n\t\t}\n\t\t\
    return rev;\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // std::cout << s << \"\\n\";\n    if (s.length() == 0) {\n        return\
    \ s;\n    }\n    std::string letter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    std::string isLetter = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (letter.find(s[i]) != std::string::npos) {\n            isLetter\
    \ += s[i];\n        }\n    }\n    if (isLetter.length() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (letter.find(s[i]) != std::string::npos) {\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n          \
    \  } else {\n                s[i] = toupper(s[i]);\n            }\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpxyxwuw8f: /tmp/tmpxyxwuw8f.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string s2 = \"\";\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    if (s[i] >= 'a' && s[i] <= 'z') {\n            s2 += (char)(s[i] - 'a' +\
    \ 'A');\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            s2 += (char)(s[i]\
    \ - 'A' + 'a');\n        } else {\n            s2 += s[i];\n        }\n    }\n\
    \    std::reverse(s2.begin(), s2.end());\n    return s2;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpoou1k142: /tmp/tmpoou1k142.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098021
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool containsLetters = false;\n    for (auto c : s) {\n        if (isalpha(c))\
    \ {\n            containsLetters = true;\n            break;\n        }\n    }\n\
    \    if (!containsLetters) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n\n    for (auto& c : s) {\n        if (isalpha(c)) {\n\
    \            if (isupper(c)) {\n                c = tolower(c);\n            }\
    \ else {\n                c = toupper(c);\n            }\n        }\n    }\n \
    \   return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  bool flag=false;\n  for(auto x:s)\n    if(isalpha(x))\n      flag=true;\n \
    \ if(!flag)\n    std::reverse(s.begin(),s.end());\n  else\n    for(auto &x:s)\n\
    \      if(isalpha(x))\n        x^=32;\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(),\n                   [](char\
    \ c) { return isalpha(c) ? tolower(c) : c; });\n    std::reverse(s.begin(), s.end());\n\
    \    std::transform(s.begin(), s.end(), s.begin(),\n                   [](char\
    \ c) { return isalpha(c) ? toupper(c) : c; });\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpemujw88p: /tmp/tmpemujw88p.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int i=0;\n    bool isLetter = false;\n    while(i<s.length()){\n        if((s[i]\
    \ >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)){\n            isLetter\
    \ = true;\n            break;\n        }\n        i++;\n    }\n    if(isLetter){\n\
    \        for(int i=0;i<s.length();i++){\n            if(s[i] >= 65 && s[i] <=\
    \ 90){\n                s[i] = s[i] + 32;\n            }\n            else if(s[i]\
    \ >= 97 && s[i] <= 122){\n                s[i] = s[i] - 32;\n            }\n \
    \       }\n    }\n    else{\n        int start = 0;\n        int end = s.length()-1;\n\
    \        while(start < end){\n            std::swap(s[start],s[end]);\n      \
    \      start++;\n            end--;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.length();\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] -= 32;\n        } else if(s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            s[i] += 32;\n        }\n    }\n    if(s ==\
    \ \"\") {\n        reverse(s.begin(), s.end());\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd1b5g4f3: /tmp/tmpd1b5g4f3.cpp:32: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if(!s.size()) return s;\n  for(int i = 0; i < s.size(); i++) {\n    if(isalpha(s[i]))\
    \ s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n  }\n  return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp9yb2hz9u: /tmp/tmp9yb2hz9u.cpp:25: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int i = 0;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n      s[i] =\
    \ std::tolower(c);\n      break;\n    }\n    i++;\n  }\n  if (i == s.size()) {\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  for (auto c : s)\
    \ {\n    if (std::isalpha(c)) {\n      if (std::islower(c)) {\n        s[i] =\
    \ std::toupper(c);\n      } else {\n        s[i] = std::tolower(c);\n      }\n\
    \    }\n    i++;\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp12oznlnu: /tmp/tmp12oznlnu.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    //your code here\n    bool non_alpha_present = false;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(!isalpha(s[i]))\n            non_alpha_present\
    \ = true;\n    }\n    if(!non_alpha_present) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\n            \
    \    s[i] = tolower(s[i]);\n            else\n                s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpfabppwnn: /tmp/tmpfabppwnn.cpp:38: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) return \"\";\n    std::string res = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            has_letter = true;\n            res += (char)(s[i]\
    \ - 'a' + 'A');\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n          \
    \  has_letter = true;\n            res += (char)(s[i] - 'A' + 'a');\n        }\
    \ else {\n            res += s[i];\n        }\n    }\n    if (!has_letter) {\n\
    \        std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098022
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int count = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if ((s[i] >= 'a'\
    \ && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n      count++;\n    }\n\
    \  }\n  if (count == 0) {\n    reverse(s.begin(), s.end());\n    return s;\n \
    \ }\n  else {\n    for (int i = 0; i < s.size(); i++) {\n      if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n        s[i] = s[i] - 32;\n      }\n      else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n        s[i] = s[i] + 32;\n      }\n    }\n    return\
    \ s;\n  }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int flag = 0;\n\tfor (auto &it : s) {\n\t\tif (islower(it)) {\n\t\t\tflag = 1;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (flag == 0) {\n\t\treverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\tfor (auto &it : s) {\n\t\tif (islower(it))\n\t\t\tit = toupper(it);\n\
    \t\telse if (isupper(it))\n\t\t\tit = tolower(it);\n\t}\n\treturn s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int p = 0;\n    std::string newStr;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (p == 0) {\n          \
    \      p = 1;\n                newStr += toupper(s[i]);\n            } else {\n\
    \                p = 0;\n                newStr += tolower(s[i]);\n          \
    \  }\n        } else {\n            newStr += s[i];\n        }\n    }\n    return\
    \ newStr;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp2zwbcdy9: /tmp/tmp2zwbcdy9.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result;\n    if (std::regex_match(s, std::regex(\"^[a-zA-Z]+$\"\
    ))) {\n        for (auto &c : s) {\n            if (isupper(c)) {\n          \
    \      result += tolower(c);\n            } else {\n                result +=\
    \ toupper(c);\n            }\n        }\n    } else {\n        std::reverse(s.begin(),\
    \ s.end());\n        result = s;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmparpjey3b: /tmp/tmparpjey3b.cpp:36: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    bool alpha=false;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(isalpha(s[i])){\n\t\
    \t\talpha=true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(alpha){\n\t\tint i=0;\n\t\twhile(s[i]!='\\\
    0'){\n\t\t\tif(isalpha(s[i])){\n\t\t\t\tif(islower(s[i])){\n\t\t\t\t\ts[i]=toupper(s[i]);\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ts[i]=tolower(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\
    \t\ti++;\n\t\t}\n\t}\n\telse{\n\t\tstd::reverse(s.begin(),s.end());\n\t}\n\treturn\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string t = s;\n  std::reverse(t.begin(), t.end());\n  if(s.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\") == std::string::npos)\n    return t;\n  for(int\
    \ i = 0; i < s.size(); i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i]))\
    \ {\n        t[i] = toupper(s[i]);\n      } else {\n        t[i] = tolower(s[i]);\n\
    \      }\n    }\n  }\n  return t;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpc1aif6ub: /tmp/tmpc1aif6ub.cpp:36: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      s[i] = (islower(s[i])) ? (toupper(s[i])) : (tolower(s[i]));\n        }\n\
    \    }\n    reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpk27y3vp_: /tmp/tmpk27y3vp_.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i]))\
    \ {\n            count++;\n        }\n    }\n    if(count == 0) {\n        for(int\
    \ i = 0; i < s.length()/2; i++) {\n            char temp = s[i];\n           \
    \ s[i] = s[s.length()-1-i];\n            s[s.length()-1-i] = temp;\n        }\n\
    \        return s;\n    }\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(std::isalpha(s[i])) {\n            if(std::isupper(s[i])) {\n           \
    \     s[i] = tolower(s[i]);\n            }\n            else {\n             \
    \   s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int len =\
    \ s.length();\n    int flag = 0;\n    for(int i = 0; i < len; i++) {\n       \
    \ if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n       \
    \     flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n \
    \       std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int\
    \ i = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n         \
    \   s[i] = s[i] - 32;\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            s[i] = s[i] + 32;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmps61g69ku: /tmp/tmps61g69ku.cpp:41: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  bool f = false;\n  std::string x = \"\";\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      x += toupper(s[i]);\n      f\
    \ = true;\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      x += tolower(s[i]);\n\
    \      f = true;\n    } else {\n      x += s[i];\n    }\n  }\n  if (f) return\
    \ x;\n  std::reverse(x.begin(), x.end());\n  return x;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool check = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            check = true;\n            break;\n  \
    \      }\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            check = true;\n\
    \            break;\n        }\n    }\n    if(check == false) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 32;\n   \
    \     }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i]\
    \ + 32;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string result;\n  bool foundAlpha = false;\n  for (size_t i = 0; i < s.size();\
    \ i++) {\n    if(isalpha(s[i])) {\n      foundAlpha = true;\n      result += toupper(s[i]);\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  if (!foundAlpha) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpw9fqg7k9: /tmp/tmpw9fqg7k9.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    bool flag = false;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif ((s[i] >=\
    \ 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n\t\t\tflag = true;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\ts[i] = s[i] - 32;\n\t\t\t\
    }\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\ts[i] = s[i] + 32;\n\t\
    \t\t}\n\t\t}\n\t}\n\telse {\n\t\tint l = 0;\n\t\tint r = s.length() - 1;\n\t\t\
    while (l < r) {\n\t\t\tchar temp = s[l];\n\t\t\ts[l] = s[r];\n\t\t\ts[r] = temp;\n\
    \t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    int i = 0;\n    while(s[i] != '\\0'){\n \
    \       if (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n\
    \        }\n        else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result\
    \ += tolower(s[i]);\n        }\n        else{\n            result += s[i];\n \
    \       }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmptfyact_1: /tmp/tmptfyact_1.cpp:35: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (isalpha(s[0])) {\n        for (int i = 0; i < s.size(); i++) {\n    \
    \        if (isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n\
    \        }\n    }\n    else {\n        for (int i = 0; i < s.size() / 2; i++)\
    \ {\n            char tmp = s[i];\n            s[i] = s[s.size() - i - 1];\n \
    \           s[s.size() - i - 1] = tmp;\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprp23pi2r: /tmp/tmprp23pi2r.cpp:36: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string res = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n\t\t\tres += (char)(s[i] - 32);\n\t\t}\n\t\telse if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tres += (char)(s[i] + 32);\n\t\t}\n\t\t\
    else {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmptiqwm5dh: /tmp/tmptiqwm5dh.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.length() == 0) return s;\n    std::string out = \"\";\n    bool isLetter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (std::isalpha(s[i]))\
    \ {\n            isLetter = true;\n            if (std::isupper(s[i])) out +=\
    \ std::tolower(s[i]);\n            else out += std::toupper(s[i]);\n        }\
    \ else {\n            out += s[i];\n        }\n    }\n    if (!isLetter) {\n \
    \       std::reverse(out.begin(), out.end());\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(std::all_of(s.begin(), s.end(), isdigit))\n        std::reverse(s.begin(),\
    \ s.end());\n    else\n        for(auto& c : s)\n            if(std::isalpha(c))\
    \ c ^= 32;\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpqc4rmpd1: /tmp/tmpqc4rmpd1.cpp:30: int main(): Assertion `candidate(("#6@2"))
    == ("2@6#")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    string str;\n    int n = s.length();\n    int flag = 0;\n    for(int i =\
    \ 0; i < n; i++) {\n        if(islower(s[i])) {\n            flag = 1;\n     \
    \       break;\n        }\n    }\n    if(flag == 0) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < n; i++) {\n    \
    \    if(islower(s[i])) {\n            str.push_back(toupper(s[i]));\n        }\n\
    \        else if(isupper(s[i])) {\n            str.push_back(tolower(s[i]));\n\
    \        }\n        else {\n            str.push_back(s[i]);\n        }\n    }\n\
    \    return str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2a8ojagv.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp2a8ojagv.cpp:16:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   16 |     string str;\n      |     ^~~~~~\n/tmp/tmp2a8ojagv.cpp:16:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2a8ojagv.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2a8ojagv.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp2a8ojagv.cpp:31:13: error: \u2018str\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   31 |             str.push_back(toupper(s[i]));\n\
    \      |             ^~~\n      |             std\n/tmp/tmp2a8ojagv.cpp:34:13:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   34 |             str.push_back(tolower(s[i]));\n      |             ^~~\n\
    \      |             std\n/tmp/tmp2a8ojagv.cpp:37:13: error: \u2018str\u2019 was\
    \ not declared in this scope; did you mean \u2018std\u2019?\n   37 |         \
    \    str.push_back(s[i]);\n      |"
  stdout: ''
  timestamp: 1660098024
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    int n = s.size();\n    bool letter_exist = false;\n\
    \    for (char c : s) {\n        if (isalpha(c)) {\n            letter_exist =\
    \ true;\n            if (islower(c)) {\n                res += toupper(c);\n \
    \           } else {\n                res += tolower(c);\n            }\n    \
    \    } else {\n            res += c;\n        }\n    }\n    if (!letter_exist)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    bool flag = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            flag = true;\n\
    \            res += toupper(s[i]);\n        } else if(s[i] >= 'A' && s[i] <= 'Z'){\n\
    \            flag = true;\n            res += tolower(s[i]);\n        } else res\
    \ += s[i];\n    }\n    if(!flag) res = std::string(res.rbegin(), res.rend());\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result = \"\";\n\tbool alpha;\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\talpha = false;\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\talpha =\
    \ true;\n\t\t\tresult += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n\t\t\talpha = true;\n\t\t\tresult += (char)(s[i] + 32);\n\t\t\
    }\n\t\telse {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (alpha) {\n\t\treturn result;\n\
    \t}\n\telse {\n\t\tstd::reverse(result.begin(), result.end());\n\t\treturn result;\n\
    \t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgw82cjzk: /tmp/tmpgw82cjzk.cpp:46: int main(): Assertion `candidate(("#AsdfW^45"))
    == ("#aSDFw^45")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool all_num=true;\n    for(char x:s){\n        if(!(int(x)>=48 && int(x)<=57)){\n\
    \            all_num=false;\n            break;\n        }\n    }\n    if(all_num){\n\
    \        std::reverse(s.begin(),s.end());\n        return s;\n    }\n    for(int\
    \ i=0;i<s.size();i++){\n        if(int(s[i])>=97 && int(s[i])<=122){\n       \
    \     s[i]=char(int(s[i])-32);\n        }\n        else if(int(s[i])>=65 && int(s[i])<=90){\n\
    \            s[i]=char(int(s[i])+32);\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplnv9fbj5: /tmp/tmplnv9fbj5.cpp:44: int main(): Assertion `candidate(("#6@2"))
    == ("2@6#")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for (char &c : s)\n    if (std::isalpha(c))\n      c ^= ' ';\n  reverse(s.begin(),\
    \ s.end());\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmptor6bcld: /tmp/tmptor6bcld.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool is_letter_exist = false;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            is_letter_exist = true;\n         \
    \   if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            }\
    \ else {\n                s[i] = tolower(s[i]);\n            }\n        }\n  \
    \  }\n    if (!is_letter_exist) {\n        reverse(s.begin(), s.end());\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    char a, b;\n    int j = 0;\n    bool flag = false;\n    if (s.length() ==\
    \ 0)\n        return s;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            flag = true;\n            a = s[i];\n       \
    \     if (islower(a)) {\n                b = toupper(a);\n            } else {\n\
    \                b = tolower(a);\n            }\n            s[i] = b;\n     \
    \   }\n    }\n    if (flag == false) {\n        for (int i = 0; i < s.length()\
    \ / 2; i++) {\n            a = s[i];\n            s[i] = s[s.length() - 1 - i];\n\
    \            s[s.length() - 1 - i] = a;\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    char arr[s.length()];\n\tstrcpy(arr, s.c_str());\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (arr[i] >= 'a' && arr[i] <= 'z') {\n\t\t\tarr[i] = toupper(arr[i]);\n\
    \t\t}\n\t\telse if (arr[i] >= 'A' && arr[i] <= 'Z') {\n\t\t\tarr[i] = tolower(arr[i]);\n\
    \t\t}\n\t}\n\treturn arr;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4og73xug: /tmp/tmp4og73xug.cpp:31: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int flag = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            flag = 1;\n            break;\n      \
    \  }\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = 1;\n      \
    \      break;\n        }\n    }\n    if(flag == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    else {\n        for(int i = 0; i <\
    \ s.length(); i++) {\n            if(s[i] >= 'a' && s[i] <= 'z') {\n         \
    \       s[i] = s[i] - 32;\n            }\n            else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n                s[i] = s[i] + 32;\n            }\n        }\n   \
    \     return s;\n    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i]\
    \ > 64 && s[i] < 123) {\n            flag = true;\n            break;\n      \
    \  }\n    }\n    if(flag) {\n        for(int i = 0; i < s.size(); i++) {\n   \
    \         if(s[i] > 64 && s[i] < 91) {\n                s[i] += 32;\n        \
    \    }\n            else if(s[i] > 96 && s[i] < 123) {\n                s[i] -=\
    \ 32;\n            }\n        }\n    }\n    else {\n        reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string reversed = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (std::isalpha(s[i])) {\n            reversed += isupper(s[i]) ? tolower(s[i])\
    \ : toupper(s[i]);\n        } else {\n            reversed += s[i];\n        }\n\
    \    }\n    if (std::all_of(reversed.begin(), reversed.end(), [](char c) { return\
    \ !isalpha(c); })) {\n        std::reverse(reversed.begin(), reversed.end());\n\
    \    }\n    return reversed;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098024
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool haveLetter = false;\n    for (auto ch : s) {\n        if (isalpha(ch))\
    \ {\n            haveLetter = true;\n            break;\n        }\n    }\n  \
    \  for (auto& ch : s) {\n        if (isalpha(ch)) {\n            ch = islower(ch)\
    \ ? toupper(ch) : tolower(ch);\n        }\n    }\n    return haveLetter ? s :\
    \ std::string(s.rbegin(), s.rend());\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty()) return s;\n    bool alph[26] = {false};\n    bool upp = false;\n\
    \    bool low = false;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ >= 65 && s[i] <= 90){\n            alph[s[i] - 65] = true;\n            upp\
    \ = true;\n        }\n        else if(s[i] >= 97 && s[i] <= 122){\n          \
    \  alph[s[i] - 97] = true;\n            low = true;\n        }\n    }\n    if(!low\
    \ && !upp) return s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ >= 65 && s[i] <= 90){\n            s[i] = s[i] + 32;\n        }\n        else\
    \ if(s[i] >= 97 && s[i] <= 122){\n            s[i] = s[i] - 32;\n        }\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpo6rzx_f9: /tmp/tmpo6rzx_f9.cpp:44: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    if (s.empty()) {\n\t\treturn s;\n\t}\n\tstd::string res;\n\tfor (int i = 0; i\
    \ < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tres += toupper(s[i]);\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tres += tolower(s[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tif (res == s) {\n\t\tstd::reverse(res.begin(),\
    \ res.end());\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string b(s);\n\tint i = 0;\n\tfor (auto &c : s) {\n\t\tif (isalpha(c)) {\n\
    \t\t\tif (islower(c)) {\n\t\t\t\tb[i] = toupper(c);\n\t\t\t} else {\n\t\t\t\t\
    b[i] = tolower(c);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (b == s) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\treturn b;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string str = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      if (islower(s[i])) {\n        str += toupper(s[i]);\n      } else {\n\
    \        str += tolower(s[i]);\n      }\n    } else {\n      str += s[i];\n  \
    \  }\n  }\n  return str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7y8gk_la: /tmp/tmp7y8gk_la.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int alp = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      alp = 1;\n      if (islower(s[i])) {\n        s[i] = toupper(s[i]);\n\
    \      } else {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if (alp\
    \ == 0) {\n    for (int i = 0; i < s.size() / 2; i++) {\n      std::swap(s[i],\
    \ s[s.size() - i - 1]);\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    if (result == s) {\n \
    \       std::reverse(result.begin(), result.end());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpotn7h7bq: /tmp/tmpotn7h7bq.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string res{};\n  int cnt = 0;\n  for (char& c : s) {\n    if (std::isalpha(c))\
    \ {\n      cnt++;\n      if (std::islower(c)) {\n        c = std::toupper(c);\n\
    \      } else {\n        c = std::tolower(c);\n      }\n    }\n  }\n  if (cnt\
    \ == 0) {\n    std::reverse(s.begin(), s.end());\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    if (s.size() == 0) {\n\t\treturn \"\";\n\t}\n\tstd::string result = \"\";\n\t\
    for (auto x : s) {\n\t\tif (islower(x)) {\n\t\t\tresult += (char)toupper(x);\n\
    \t\t}\n\t\telse if (isupper(x)) {\n\t\t\tresult += (char)tolower(x);\n\t\t}\n\t\
    \telse {\n\t\t\tresult += x;\n\t\t}\n\t}\n\tif (s == result) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool isAnyLowerCase = false;\n    bool isAnyUpperCase = false;\n    for (auto\
    \ e : s) {\n        if (isupper(e)) {\n            isAnyUpperCase = true;\n  \
    \      } else if (islower(e)) {\n            isAnyLowerCase = true;\n        }\n\
    \    }\n    for (auto& e : s) {\n        if (isAnyLowerCase && isAnyUpperCase)\
    \ {\n            if (isupper(e)) {\n                e = tolower(e);\n        \
    \    } else if (islower(e)) {\n                e = toupper(e);\n            }\n\
    \        } else if (isAnyLowerCase) {\n            e = toupper(e);\n        }\
    \ else if (isAnyUpperCase) {\n            e = tolower(e);\n        }\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmps4j6nl30: /tmp/tmps4j6nl30.cpp:43: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool has_letter = false;\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            has_letter = true;\n            break;\n\
    \        }\n    }\n    if (!has_letter) {\n        reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (islower(s[i])) {\n            s[i] = toupper(s[i]);\n        } else if (isupper(s[i]))\
    \ {\n            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = \"\";\n    bool isLetter = false;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            isLetter = true;\n\
    \            break;\n        }\n    }\n    if (!isLetter) {\n        for (int\
    \ i = s.size() - 1; i >= 0; i--) {\n            res += s[i];\n        }\n    \
    \    return res;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res +=\
    \ toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    int counter\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\n\
    \            counter++;\n    }\n    if (counter != 0) {\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (islower(s[i]))\n                s[i]\
    \ = toupper(s[i]);\n            else\n                s[i] = tolower(s[i]);\n\
    \        }\n    }\n    else {\n        std::reverse(s.begin(), s.end());\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp9jgq1kar: /tmp/tmp9jgq1kar.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // islower(char c)\n    // Check if the character is lowercase.\n    // if(islower(c))\n\
    \    // toupper(char c)\n    // Converts the given character to its upper case.\n\
    \    // if(!islower(c))\n    // tolower(char c)\n    // Converts the given character\
    \ to its lower case.\n    for(int i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\
    \ {\n            s[i] = toupper(s[i]);\n        } else if(!islower(s[i])) {\n\
    \            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5tvqse99: /tmp/tmp5tvqse99.cpp:36: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098026
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string a = \"\";\n    bool no = true;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            a += toupper(s[i]);\n\
    \            no = false;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n \
    \           a += tolower(s[i]);\n            no = false;\n        } else {\n \
    \           a += s[i];\n        }\n    }\n    if (no) {\n        reverse(a.begin(),\
    \ a.end());\n    }\n    return a;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098025
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::vector<char> res;\n    if(s.length() == 0)\n        return \"\";\n \
    \   if(std::all_of(s.begin(), s.end(), [](char c){return !isalpha(c);})){\n  \
    \      std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for(char\
    \ c : s){\n        if(c <= 'z' && c >= 'a'){\n            c -= 32;\n        }else\
    \ if(c <= 'Z' && c >= 'A'){\n            c += 32;\n        }\n        res.push_back(c);\n\
    \    }\n    return std::string(res.begin(), res.end());\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // Write your code here:\n  std::string ans;\n  for(int i = 0; i < s.size();\
    \ i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      ans += s[i] - 32;\n    }else\
    \ if(s[i] >= 'A' && s[i] <= 'Z'){\n      ans += s[i] + 32;\n    }else{\n     \
    \ ans += s[i];\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmptlor8e7b: /tmp/tmptlor8e7b.cpp:32: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098026
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Complete this function\n    // If string contains no letters\n    bool\
    \ containsLetter = false;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n\
    \            containsLetter = true;\n            break;\n        }\n    }\n  \
    \  if (!containsLetter) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    // If string contains letters\n    for (auto &c : s) {\n\
    \        if (isalpha(c)) {\n            if (isupper(c)) {\n                c =\
    \ tolower(c);\n            } else {\n                c = toupper(c);\n       \
    \     }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int len = s.length();\n  std::string s2 = \"\";\n  int count = 0;\n  for(int\
    \ i = 0; i < len; i++) {\n    if(isalpha(s[i])) {\n      count++;\n      s2 +=\
    \ toupper(s[i]);\n    }\n    else {\n      s2 += s[i];\n    }\n  }\n  if(count\
    \ == 0)\n    reverse(s2.begin(), s2.end());\n  return s2;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5ibsr0t_: /tmp/tmp5ibsr0t_.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    //v2\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\t\
    if (islower(s[i])) {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn s;\n\t//v1\n\t//\t\
    for (int i = 0; i < s.size(); i++) {\n\t//\t\tif (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n\t//\t\t\ts[i] -= 32;\n\t//\t\t}\n\t//\t\telse if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n\t//\t\t\ts[i] += 32;\n\t//\t\t}\n\t//\t}\n\t//\treturn s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnnj_z0qd: /tmp/tmpnnj_z0qd.cpp:42: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (std::count_if(s.begin(), s.end(), isalpha) == 0)\n        return std::string(s.rbegin(),\
    \ s.rend());\n    else\n        std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpc91gykun: /tmp/tmpc91gykun.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool isNotALetter = true;\n    for (char ch: s)\n        if (isalpha(ch))\n\
    \            isNotALetter = false;\n    std::string result = \"\";\n    if (isNotALetter)\
    \ {\n        for (int i = s.size() - 1; i >= 0; i--)\n            result += s[i];\n\
    \        return result;\n    }\n    for (char ch: s) {\n        if (islower(ch))\n\
    \            result += toupper(ch);\n        else if (isupper(ch))\n         \
    \   result += tolower(ch);\n        else\n            result += ch;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    // Write your code here\n\tstd::string str = \"\";\n\tint count = 0;\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tcount++;\n\t\t\
    \tif (islower(s[i])) {\n\t\t\t\tstr = str + (char)toupper(s[i]);\n\t\t\t}\n\t\t\
    \telse {\n\t\t\t\tstr = str + (char)tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tstr = str + s[i];\n\t\t}\n\t}\n\tif (count == 0) {\n\t\tint j = str.length()\
    \ - 1;\n\t\tint i = 0;\n\t\twhile (i < j) {\n\t\t\tchar c = str[i];\n\t\t\tstr[i]\
    \ = str[j];\n\t\t\tstr[j] = c;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn str;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int letters = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            letters++;\n            if (isupper(s[i])) {\n              \
    \  s[i] = tolower(s[i]);\n            } else {\n                s[i] = toupper(s[i]);\n\
    \            }\n        }\n    }\n    if (letters == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int flag = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag\
    \ == 0)\n        return std::string(s.rbegin(), s.rend());\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(islower(s[i]))\n            s[i] = toupper(s[i]);\n\
    \        else if(isupper(s[i]))\n            s[i] = tolower(s[i]);\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    bool is_letter = false;\n\tfor (char& ch : s) {\n\t\tif (isalpha(ch)) {\n\t\t\t\
    is_letter = true;\n\t\t\tif (islower(ch)) {\n\t\t\t\tch = toupper(ch);\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tch = tolower(ch);\n\t\t\t}\n\t\t}\n\t}\n\tif (!is_letter)\
    \ {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = \"\";\n    int letter = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (islower(s[i])) {\n            res += toupper(s[i]);\n  \
    \          letter++;\n        } else if (isupper(s[i])) {\n            res +=\
    \ tolower(s[i]);\n            letter++;\n        } else {\n            res +=\
    \ s[i];\n        }\n    }\n    if (letter == 0) return std::string(res.rbegin(),\
    \ res.rend());\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for (auto& it : s) {\n    if (isalpha(it)) {\n      if (islower(it)) it = toupper(it);\n\
    \      else it = tolower(it);\n    }\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp4xycobyz: /tmp/tmp4xycobyz.cpp:27: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.length() == 0) return \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            if (isupper(s[i])) s[i] = tolower(s[i]);\n\
    \            else s[i] = toupper(s[i]);\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4epiqva2: /tmp/tmp4epiqva2.cpp:28: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(std::isalpha(s[i])) {\n \
    \           if(std::isupper(s[i])) {\n                s[i] = std::tolower(s[i]);\n\
    \            } else {\n                s[i] = std::toupper(s[i]);\n          \
    \  }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpz0bcfoa6: /tmp/tmpz0bcfoa6.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::transform(s.begin(), s.end(), s.begin(),\n    [](char c) {\n      return\
    \ (isalpha(c)) ? tolower(c) ^ tolower(c) ^ c : c;\n    }\n  );\n  return (std::all_of(s.begin(),\
    \ s.end(), [](char c) { return !isalpha(c); })) ? \n    std::string(s.rbegin(),\
    \ s.rend()) : s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp8gaushk1: /tmp/tmp8gaushk1.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    for (char c : s) {\n        if (isalpha(c))\
    \ {\n            result += isupper(c) ? tolower(c) : toupper(c);\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result.size() == 0\
    \ ? s : result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp3ua24a9b: /tmp/tmp3ua24a9b.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(auto i: s) {\n        if(i >= 'a' && i <= 'z')\n\
    \            count++;\n        else if(i >= 'A' && i <= 'Z')\n            count++;\n\
    \    }\n    if(count > 0) {\n        for(int i = 0; i < s.length(); i++) {\n \
    \           if(s[i] >= 'a' && s[i] <= 'z')\n                s[i] = toupper(s[i]);\n\
    \            else if(s[i] >= 'A' && s[i] <= 'Z')\n                s[i] = tolower(s[i]);\n\
    \        }\n    }\n    else {\n        for(int i = 0; i < s.length()/2; i++) {\n\
    \            char temp = s[i];\n            s[i] = s[s.length()-i-1];\n      \
    \      s[s.length()-i-1] = temp;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i]))\
    \ {\n            if(std::islower(s[i])) {\n                s[i] = std::toupper(s[i]);\n\
    \            } else {\n                s[i] = std::tolower(s[i]);\n          \
    \  }\n            count++;\n        }\n    }\n    if(count == 0) {\n        for(int\
    \ i = 0; i < s.length()/2; i++) {\n            std::swap(s[i], s[s.length()-i-1]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool flag = true;\n    for(int i = 0; i < s.size(); i++) {\n        if((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    if(flag) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] =\
    \ s[i] - 'A' + 'a';\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int l, u, num;\n  l = 0;\n  u = 0;\n  num = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (islower(s[i])) {\n      l++;\n    } else if (isupper(s[i]))\
    \ {\n      u++;\n    } else {\n      num++;\n    }\n  }\n  if (l == 0 && u ==\
    \ 0) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  if (num ==\
    \ s.length()) {\n    return s;\n  }\n  for (int i = 0; i < s.length(); i++) {\n\
    \    if (islower(s[i])) {\n      s[i] = toupper(s[i]);\n    } else if (isupper(s[i]))\
    \ {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // start your code here\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    if (s.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\") == std::string::npos)\n        std::reverse(s.begin(),\
    \ s.end());\n    else {\n        for (char& c : s) {\n            if (islower(c))\n\
    \                c = toupper(c);\n            else\n                c = tolower(c);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpnu6ce315: /tmp/tmpnu6ce315.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // find all lowercase indices\n  vector<int> lower_indices;\n  for (int i =\
    \ 0; i < s.size(); i++) {\n    if (islower(s[i])) lower_indices.push_back(i);\n\
    \  }\n  // no lowercase? reverse the string\n  if (lower_indices.size() == 0)\
    \ {\n    reverse(s.begin(), s.end());\n    return s;\n  }\n  // reverse the case\
    \ of lowercase letters\n  for (int i = 0; i < lower_indices.size(); i++) {\n \
    \   s[lower_indices[i]] = toupper(s[lower_indices[i]]);\n  }\n  return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpjfnr3k.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpgpjfnr3k.cpp:17:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   17 |   vector<int> lower_indices;\n      |   ^~~~~~\n/tmp/tmpgpjfnr3k.cpp:17:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgpjfnr3k.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgpjfnr3k.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpgpjfnr3k.cpp:17:10:\
    \ error: expected primary-expression before \u2018int\u2019\n   17 |   vector<int>\
    \ lower_indices;\n      |          ^~~\n/tmp/tmpgpjfnr3k.cpp:19:24: error: \u2018\
    lower_indices\u2019 was not declared in this scope\n   19 |     if (islower(s[i]))\
    \ lower_indices.push_back(i);\n      |                        ^~~~~~~~~~~~~\n\
    /tmp/tmpgpjfnr3k.cpp:22:7: error: \u2018lower_indices\u2019 was not declared in\
    \ this scope\n   22 |   if (lower_indices.size() == 0) {\n      |       ^~~~~~~~~~~~~\n\
    /tmp/tmpgpjfnr3k.cpp:27:23: error: \u2018lower_indices\u2019 was not declared\
    \ in this scope\n   27 |   for (int i = 0; i < lower_indices.size(); i++) {\n\
    \      |                       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result=\"\";\n\tbool check=false;\n\tfor(int i=0;i<s.length();i++){\n\
    \t\tif(isalpha(s[i])){\n\t\t\tcheck=true;\n\t\t\tif(islower(s[i])){\n\t\t\t\t\
    result+=toupper(s[i]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult+=tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\tresult+=s[i];\n\t\t}\n\t}\n\tif(check){\n\t\t\
    return result;\n\t}\n\telse{\n\t\tstd::reverse(result.begin(),result.end());\n\
    \t\treturn result;\n\t}\n\t\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    // Check the number of letters.\n\t// If there is none, return the reverse of\
    \ the input string.\n\tif( std::count_if(s.begin(), s.end(), isalpha) == 0 ) {\n\
    \t\treturn std::string(s.rbegin(), s.rend());\n\t}\n\t// If there is at least\
    \ one letter, iterate over the string and\n\t// apply to each character the following\
    \ transformations:\n\t// If the character is a letter, reverse its case.\n\t//\
    \ If the character is not a letter, keep it as it is.\n\tstd::transform(s.begin(),\
    \ s.end(), s.begin(), [](char c) {\n\t\treturn isalpha(c) ? (islower(c) ? toupper(c)\
    \ : tolower(c)) : c;\n\t});\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  bool flag = false;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    for (int\
    \ i = 0; i < s.size(); i++) {\n      if (islower(s[i])) {\n        s[i] = toupper(s[i]);\n\
    \      } else if (isupper(s[i])) {\n        s[i] = tolower(s[i]);\n      }\n \
    \   }\n  } else {\n    reverse(s.begin(), s.end());\n  }\n  return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098027
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (std::find_if(s.begin(), s.end(), ::isalpha) == s.end()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (std::isalpha(s[i])) {\n            if (std::isupper(s[i])) {\n\
    \                s[i] = std::tolower(s[i]);\n            } else {\n          \
    \      s[i] = std::toupper(s[i]);\n            }\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool containsLetter = false;\n    for (char c : s) {\n        if (std::isalpha(c))\
    \ {\n            containsLetter = true;\n            break;\n        }\n    }\n\
    \    if (!containsLetter) {\n        for (int i = 0; i < s.size() / 2; i++) {\n\
    \            std::swap(s[i], s[s.size() - i - 1]);\n        }\n        return\
    \ s;\n    }\n    for (char &c : s) {\n        if (std::isalpha(c)) {\n       \
    \     if (std::isupper(c)) c = std::tolower(c);\n            else c = std::toupper(c);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\tstd::for_each(s.begin(), s.end(), [&result](const char\
    \ &c) {\n\t\tif (std::isalpha(c)) {\n\t\t\tresult += std::toupper(c);\n\t\t} else\
    \ {\n\t\t\tresult += c;\n\t\t}\n\t});\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpuq3x5tfi: /tmp/tmpuq3x5tfi.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool f = false;\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        char c = s[i];\n        if (islower(c)) {\n    \
    \        f = true;\n            result += toupper(c);\n        } else if (isupper(c))\
    \ {\n            f = true;\n            result += tolower(c);\n        } else\
    \ {\n            result += c;\n        }\n    }\n    if (f) {\n        return\
    \ result;\n    } else {\n        std::reverse(result.begin(), result.end());\n\
    \        return result;\n    }\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code goes here\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int size = s.size();\n    int counter = 0;\n    std::string res = \"\";\n\
    \    for (int i = 0; i < size; i++) {\n        if (std::isalpha(s[i])) {\n   \
    \         counter++;\n            if (std::islower(s[i])) {\n                res\
    \ += std::toupper(s[i]);\n            } else {\n                res += std::tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (counter == 0) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    if(s.size()<=1) return s;\n\tint count = 0;\n\tfor(auto c:s)\n\t\tif(isalpha(c))\
    \ count++;\n\tif(count == 0) return s;\n\tfor(auto& c:s)\n\t\tif(isalpha(c)) \n\
    \t\t\tc = isupper(c) ? tolower(c) : toupper(c);\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpon5h4pag: /tmp/tmpon5h4pag.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int i = 0;\n\tstd::string st = \"\";\n\tstd::string st2 = \"\";\n\twhile (i <\
    \ s.length()) {\n\t\tif (islower(s[i])) {\n\t\t\ts[i] = toupper(s[i]);\n\t\t\t\
    st = st + s[i];\n\t\t}\n\t\telse if (isupper(s[i])) {\n\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\tst = st + s[i];\n\t\t}\n\t\telse {\n\t\t\tst2 = st2 + s[i];\n\t\t}\n\t\t\
    i++;\n\t}\n\tif (st.length() != 0) {\n\t\treturn st;\n\t}\n\telse {\n\t\tint i\
    \ = st2.length() - 1;\n\t\twhile (i >= 0) {\n\t\t\tst = st + st2[i];\n\t\t\ti--;\n\
    \t\t}\n\t\treturn st;\n\t}\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpflnhuzu_: /tmp/tmpflnhuzu_.cpp:50: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string r = \"\";\n    if(s.length() == 0)\n    {\n        return r;\n\
    \    }\n    else\n    {\n        for(int i = 0; i < s.length(); i++)\n       \
    \ {\n            if(s[i] >= 'a' && s[i] <= 'z')\n            {\n             \
    \   r += toupper(s[i]);\n            }\n            else if(s[i] >= 'A' && s[i]\
    \ <= 'Z')\n            {\n                r += tolower(s[i]);\n            }\n\
    \            else\n            {\n                r += s[i];\n            }\n\
    \        }\n        return r;\n    }\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp7m8qm6ex: /tmp/tmp7m8qm6ex.cpp:44: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(!std::isalpha(s[0])) {\n        std::reverse(s.begin(), s.end());\n  \
    \      return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(std::isalpha(s[i]))\
    \ {\n            if(std::isupper(s[i])) {\n                s[i] = std::tolower(s[i]);\n\
    \            } else {\n                s[i] = std::toupper(s[i]);\n          \
    \  }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpj66e96dy: /tmp/tmpj66e96dy.cpp:36: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\t\n\tfor (auto c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tif\
    \ (isupper(c)) {\n\t\t\t\tresult += tolower(c);\n\t\t\t} else {\n\t\t\t\tresult\
    \ += toupper(c);\n\t\t\t}\n\t\t} else {\n\t\t\tresult += c;\n\t\t}\n\t}\n\tif\
    \ (result.size() == 0) {\n\t\treverse(s.begin(), s.end());\n\t\treturn s;\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_xasasir: /tmp/tmp_xasasir.cpp:38: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c) { return std::tolower(c);\
    \ });\n\tif (s.find_first_of(\"abcdefghijklmnopqrstuvwxyz\") != std::string::npos)\
    \ {\n\t\tstd::transform(s.begin(), s.end(), s.begin(), [](unsigned char c) { return\
    \ std::toupper(c); });\n\t}\n\telse {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5dyr5gq4: /tmp/tmp5dyr5gq4.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool letter_exists = false;\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (isalpha(s[i])) {\n            letter_exists = true;\n            if\
    \ (islower(s[i])) {\n                s[i] = toupper(s[i]);\n            } else\
    \ {\n                s[i] = tolower(s[i]);\n            }\n        }\n    }\n\
    \    if (!letter_exists) {\n        for (int i = 0; i < s.size() / 2; i++) {\n\
    \            char temp = s[i];\n            s[i] = s[s.size() - i - 1];\n    \
    \        s[s.size() - i - 1] = temp;\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int n = s.size();\n\tif (n == 0)\n\t\treturn \"\";\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tif (std::isalpha(s[i])) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t\
    \t\ts[i] = (char) toupper(s[i]);\n\t\t\telse\n\t\t\t\ts[i] = (char) tolower(s[i]);\n\
    \t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnpf0wdu_: /tmp/tmpnpf0wdu_.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string res = \"\";\n  bool found=false;\n  for(char c:s){\n    if(isalpha(c)){\n\
    \      found=true;\n      if(isupper(c)) res.push_back(tolower(c));\n      else\
    \ res.push_back(toupper(c));\n    }\n    else{\n      res.push_back(c);\n    }\n\
    \  }\n  if(!found) std::reverse(res.begin(),res.end());\n  return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool contains_letter = false;\n    for (char c : s)\n        if (std::isalpha(c))\n\
    \            contains_letter = true;\n    if (!contains_letter)\n        std::reverse(s.begin(),\
    \ s.end());\n    for (char &c : s)\n        if (std::isalpha(c))\n           \
    \ c = isupper(c) ? tolower(c) : toupper(c);\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if(s.empty()) return s;\n  int l = s.length();\n  for(int i = 0; i < l; i++)\
    \ {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = 'A' + (s[i] - 'a');\n\
    \    } else if(s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] = 'a' + (s[i] - 'A');\n\
    \    }\n  }\n  if(s[0] >= '0' && s[0] <= '9') {\n    std::reverse(s.begin(), s.end());\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpfei50bbc: /tmp/tmpfei50bbc.cpp:37: int main(): Assertion `candidate(("#6@2"))
    == ("2@6#")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') ||\
    \ (s[i] >= 'A' && s[i] <= 'Z')) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] =\
    \ toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp1_26_2mo: /tmp/tmp1_26_2mo.cpp:31: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098028
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = \"\";\n    if (s.size() == 0) {\n        return s;\n  \
    \  }\n    bool letters = false;\n    int i = 0;\n    while (i < s.size()) {\n\
    \        //  std::cout << \"i \" << i << \" \" << s[i] << std::endl;\n       \
    \ if (std::isalpha(s[i])) {\n            if (std::islower(s[i])) {\n         \
    \       res += std::toupper(s[i]);\n            } else {\n                res\
    \ += std::tolower(s[i]);\n            }\n            letters = true;\n       \
    \ } else {\n            res += s[i];\n        }\n        i++;\n    }\n    if (!letters)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098028
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if(s.size()==0)\n      return s;\n  int i=0;\n  while(i<s.size()){\n      if(s[i]>='a'\
    \ && s[i]<='z'){\n          s[i]='A'+s[i]-'a';\n      }\n      else if(s[i]>='A'\
    \ && s[i]<='Z'){\n          s[i]='a'+s[i]-'A';\n      }\n      i++;\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpsxc3p1sh: /tmp/tmpsxc3p1sh.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool is_letter=false;\n    int len=s.length();\n    for(int i=0;i<len;i++){\n\
    \        if((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z')){\n            is_letter=true;\n\
    \            break;\n        }\n    }\n    if(is_letter){\n        for(int i=0;i<len;i++){\n\
    \            if(s[i]>='a'&&s[i]<='z'){\n                s[i]-=32;\n          \
    \  }\n            else if(s[i]>='A'&&s[i]<='Z'){\n                s[i]+=32;\n\
    \            }\n        }\n    }\n    else{\n        for(int i=0;i<len/2;i++){\n\
    \            swap(s[i],s[len-i-1]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprl2qzcex.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmprl2qzcex.cpp:36:13: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   36 |             swap(s[i],s[len-i-1]);\n      |             ^~~~\n\
    /tmp/tmprl2qzcex.cpp:36:13: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprl2qzcex.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprl2qzcex.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmprl2qzcex.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmprl2qzcex.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, p"
  stdout: ''
  timestamp: 1660098029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    if(s.size() == 0)\n\t\treturn s;\n\tstd::string res;\n\tfor(int i = 0; i < s.size();\
    \ i++) {\n\t\tif(std::isalpha(s[i])) {\n\t\t\tif(std::isupper(s[i]))\n\t\t\t\t\
    res += std::tolower(s[i]);\n\t\t\telse\n\t\t\t\tres += std::toupper(s[i]);\n\t\
    \t}\n\t\telse\n\t\t\tres += s[i];\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5kqpgl82: /tmp/tmp5kqpgl82.cpp:34: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string ret = \"\";\n  int found = 0;\n  for (char c : s) {\n    if (c\
    \ >= 'a' && c <= 'z') {\n      found = 1;\n      ret += toupper(c);\n    } else\
    \ if (c >= 'A' && c <= 'Z') {\n      found = 1;\n      ret += tolower(c);\n  \
    \  } else {\n      ret += c;\n    }\n  }\n  if (found == 0) {\n    return std::string(ret.rbegin(),\
    \ ret.rend());\n  }\n  return ret;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n          \
    \  } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd3xh3ldt: /tmp/tmpd3xh3ldt.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int i;\n    bool flag = false;\n    for(i = 0; i < s.length(); i++) {\n \
    \       if(islower(s[i])) {\n            flag = true;\n            break;\n  \
    \      }\n    }\n    if(flag) {\n        for(i = 0; i < s.length(); i++) {\n \
    \           if(islower(s[i])) s[i] = toupper(s[i]);\n            else if(isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n        }\n    }\n    else {\n        for(i = 0; i <\
    \ s.length()/2; i++) {\n            std::swap(s[i], s[s.length()-i-1]);\n    \
    \    }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098029
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpqxpzy7c3: /tmp/tmpqxpzy7c3.cpp:27: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.length() == 0) return s;\n    std::vector<char> characters;\n    for\
    \ (char& c : s) {\n        if (c >= 'a' && c <= 'z') {\n            characters.push_back(c);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            characters.push_back(c);\n\
    \        }\n    }\n    if (characters.size() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string res = \"\";\n    int j\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            res += std::toupper(characters[j]);\n          \
    \  j++;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res +=\
    \ std::tolower(characters[j]);\n            j++;\n        } else {\n         \
    \   res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(!std::any_of(s.begin(), s.end(), isalpha)) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n\n    int n = s.size();\n    for(int i\
    \ = 0; i < n; i++) {\n        if(!isalpha(s[i])) {\n            continue;\n  \
    \      }\n        if(islower(s[i])) {\n            s[i] = toupper(s[i]);\n   \
    \     } else {\n            s[i] = tolower(s[i]);\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    \tif (std::all_of(s.begin(), s.end(), [](char i) { return !isalpha(i); })) {\n\
    \t\t\tstd::reverse(s.begin(), s.end());\n\t\t\treturn s;\n\t\t}\n\t\tstd::transform(s.begin(),\
    \ s.end(), s.begin(),\n\t\t\t[](unsigned char c) { return std::tolower(c); });\n\
    \t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tif (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\t\ts[i] = toupper(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\treturn s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpz3rkui67: /tmp/tmpz3rkui67.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here\n    \n    \n    int alpha = 0;\n    // loop over\
    \ the string and\n    // see if a letter is present or not\n    for(int i = 0;\
    \ i < s.length(); i++)\n    {\n        if(isalpha(s[i]))\n        {\n        \
    \    alpha = 1;\n            break;\n        }\n    }\n    // if no letter is\
    \ present then return\n    // the reversed string\n    if(alpha == 0)\n    {\n\
    \        reverse(s.begin(), s.end());\n        return s;\n    }\n    // if a letter\
    \ is present, reverse\n    // the case of it\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            if(isupper(s[i]))\n\
    \            {\n                s[i] = tolower(s[i]);\n            }\n       \
    \     else\n            {\n                s[i] = toupper(s[i]);\n           \
    \ }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \   std::string result = \"\";\n   int len = s.length();\n   int count = 0;\n\
    \   int i = 0;\n   while(i < len){\n       if(isalpha(s[i])){\n           count++;\n\
    \       }\n       i++;\n   }\n   if(count == 0){\n       std::reverse(s.begin(),\
    \ s.end());\n       return s;\n   }\n   for(int i = 0; i < len; i++){\n      \
    \ if(isalpha(s[i])){\n           if(isupper(s[i])){\n               result +=\
    \ tolower(s[i]);\n           }\n           else{\n               result += toupper(s[i]);\n\
    \           }\n       }\n       else{\n           result += s[i];\n       }\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    //write your code here\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    std::string final;\n    int i = 0;\n   \
    \ while(i < n)\n    {\n        if(isalpha(s[i]))\n        {\n            if(isupper(s[i]))\n\
    \            {\n                final.push_back(tolower(s[i]));\n            }\n\
    \            else\n            {\n                final.push_back(toupper(s[i]));\n\
    \            }\n        }\n        else\n        {\n            final.push_back(s[i]);\n\
    \        }\n        i++;\n    }\n    std::reverse(final.begin(), final.end());\n\
    \    return final;\n    */\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    std::string new_string;\n    int i = 0;\n\
    \    while(i < n)\n    {\n        if(islower(s[i]))\n        {\n            new_string.push_back(toupper(s[i]));\n\
    \        }\n        else if(isupper(s[i]))\n        {\n            new_string.push_back(tolower(s[i]));\n\
    \        }\n        else\n        {\n            new_string.push_back(s[i]);\n\
    \        }\n        i++;\n    }\n    if(islower(new_string[0]))\n    {\n     \
    \   std::reverse(new_string.begin(), new_string.end());\n    }\n    return new_string;\n\
    \    */\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    //return s;\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    /*\n    int n = s.length();\n    if(islower(s[0]))\n    {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    for(int i = 0; i < n; i++)\n    {\n        if(islower(s[i]))\n\
    \        {\n            s[\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i3s1tjj.cpp:78:5: error: unterminated comment\n   78 |     /*\n\
    \      |     ^\n/tmp/tmp3i3s1tjj.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp3i3s1tjj.cpp:15:34: error: expected \u2018}\u2019 at end of input\n\
    \   15 | std::string solve(std::string s) {\n      |                         \
    \         ^\n/tmp/tmp3i3s1tjj.cpp:15:34: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660098029
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::stringstream ss;\n  bool has_letter = false;\n  for (auto ch : s) {\n\
    \    if (isalpha(ch)) {\n      has_letter = true;\n      ss << char(islower(ch)\
    \ ? toupper(ch) : tolower(ch));\n    } else {\n      ss << ch;\n    }\n  }\n \
    \ std::string result = ss.str();\n  if (!has_letter) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  bool isLetter = false;\n  for (auto c : s) {\n    if (isalpha(c)) {\n     \
    \ isLetter = true;\n      break;\n    }\n  }\n  if (!isLetter) {\n    reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (int i = 0; i < s.size(); i++) {\n    if\
    \ (isalpha(s[i])) {\n      if (isupper(s[i]))\n        s[i] = tolower(s[i]);\n\
    \      else\n        s[i] = toupper(s[i]);\n    }\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::regex e(\"[A-Za-z]\");\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (std::regex_match(std::string(1,\
    \ s[i]), e)) {\n\t\t\tif (s[i] > 64 && s[i] < 91) {\n\t\t\t\ts[i] += 32;\n\t\t\
    \t}\n\t\t\telse if (s[i] > 96 && s[i] < 123) {\n\t\t\t\ts[i] -= 32;\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (std::regex_match(s, e)) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprfxl7wdm: /tmp/tmprfxl7wdm.cpp:35: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int count_of_letters = 0;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n\t\t\tcount_of_letters++;\n\t\t}\n\t\telse if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\tcount_of_letters++;\n\t\t}\n\t}\n\tif (count_of_letters\
    \ == 0) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tfor (size_t\
    \ i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i]\
    \ = s[i] - 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i]\
    \ = s[i] + 32;\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty()) return s;\n    bool isAllLetters = true;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(!isalpha(s[i])) {\n            isAllLetters\
    \ = false;\n            break;\n        }\n    }\n    if(isAllLetters) {\n   \
    \     reverse(s.begin(), s.end());\n        for(int i = 0; i < s.size(); i++)\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpmci37d0j: /tmp/tmpmci37d0j.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int lower = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            lower++;\n        }\n    }\n    if (lower == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n        \
    \        s[i] = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    bool flag = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\t\tif (isalpha(s[i])) {\n\t\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ts[i]\
    \ = tolower(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    if(s.empty())\n        return \"\";\n    std::string\
    \ res = \"\";\n    for(auto i : s){\n        if(i > 96 && i < 123)\n         \
    \   res += toupper(i);\n        else if(i > 64 && i < 91)\n            res +=\
    \ tolower(i);\n        else\n            res += i;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpbvkucqyr: /tmp/tmpbvkucqyr.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c -=\
    \ 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            c += 32;\n    \
    \    }\n        result += c;\n    }\n    if (result == s) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int i,j;\n\tfor(i=0;i<s.length();i++)\n\t{\n\t\tif(isalpha(s[i]))\n\t\t{\n\t\t\
    \tif(isupper(s[i]))\n\t\t\t{\n\t\t\t\ts[i]=tolower(s[i]);\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\ts[i]=toupper(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\tif(isalpha(s[0]))\n\
    \t{\n\t\treturn s;\n\t}\n\telse\n\t{\n\t\tstd::reverse(s.begin(),s.end());\n\t\
    \treturn s;\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprpjgonwf: /tmp/tmprpjgonwf.cpp:46: int main(): Assertion `candidate(("#a@C"))
    == ("#A@c")'' failed.

    '
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if (s.size() == 0) {\n    return s;\n  }\n  for (char &x : s) {\n    if (isalpha(x))\
    \ {\n      if (islower(x)) {\n        x = toupper(x);\n      } else {\n      \
    \  x = tolower(x);\n      }\n    }\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmphtlluu78: /tmp/tmphtlluu78.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool noLetter = true;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            noLetter = false;\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    if (noLetter)\
    \ {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string res;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n\t\t\tres += toupper(s[i]);\n\t\t} else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n\t\t\tres += tolower(s[i]);\n\t\t} else {\n\t\t\tres += s[i];\n\
    \t\t}\n\t}\n\tif (res.find_first_of(\"a-zA-Z\") == std::string::npos) {\n\t\t\
    std::reverse(res.begin(), res.end());\n\t}\n\treturn res;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpj8qquzbg: /tmp/tmpj8qquzbg.cpp:40: int main(): Assertion `candidate(("#ccc"))
    == ("#CCC")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    bool is_letter = false;\n    for (auto c\
    \ : s) {\n        if (isalpha(c)) is_letter = true;\n    }\n    if (!is_letter)\
    \ {\n        reverse(s.begin(), s.end());\n        return s;\n    } else {\n \
    \       for (auto c : s) {\n            if (isalpha(c)) {\n                result\
    \ += (isupper(c) ? tolower(c) : toupper(c));\n            } else {\n         \
    \       result += c;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) return s;\n    std::string res = \"\";\n    bool isletter\
    \ = false;\n    for (char c : s) {\n        if (std::isalpha(c)) isletter = true;\n\
    \    }\n    if (!isletter) {\n        for (int i = s.size() - 1; i >= 0; i--)\
    \ {\n            res += s[i];\n        }\n        return res;\n    }\n    for\
    \ (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            res += c -\
    \ 32;\n        } else if (c >= 'A' && c <= 'Z') {\n            res += c + 32;\n\
    \        } else {\n            res += c;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string t = \"\";\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      t += isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n    } else {\n\
    \      t += s[i];\n    }\n  }\n  if (t == s) {\n    reverse(t.begin(), t.end());\n\
    \  }\n  return t;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098030
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int l = s.length();\n  std::string out = \"\";\n  for (int i = 0; i < l; i++)\
    \ {\n    if (s[i] >= 'a' && s[i] <= 'z')\n      out += (char)(s[i] - 'a' + 'A');\n\
    \    else if (s[i] >= 'A' && s[i] <= 'Z')\n      out += (char)(s[i] - 'A' + 'a');\n\
    \    else out += s[i];\n  }\n  if (out == s)\n    return out;\n  std::reverse(out.begin(),\
    \ out.end());\n  return out;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp8kcxeuha: /tmp/tmp8kcxeuha.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) {\n        return \"\";\n    }\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n            if (std::isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpkacf_040: /tmp/tmpkacf_040.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            hasLetter = true;\n            if (isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n        }\n \
    \   }\n    if (!hasLetter) {\n        std::reverse(s.begin(), s.end());\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    bool flag = false;\n\tstd::string result = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tresult += s[i] - 32;\n\t\
    \t\tflag = true;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tresult\
    \ += s[i] + 32;\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\t\t\tresult += s[i];\n\t\
    }\n\tif (flag)\n\t\treturn result;\n\telse {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t\treturn result;\n\t}\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string result;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult += (std::isalpha(s[i]))\
    \ ? \n\t\t\tstd::toupper(s[i]) : std::tolower(s[i]);\n\t}\n\treturn std::string(result.rbegin(),\
    \ result.rend());\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpvlttiqkg: /tmp/tmpvlttiqkg.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    if (s.empty()) {\n\t\treturn s;\n\t}\n\tint i = 0;\n\twhile (i < s.size() && !std::isalpha(s[i]))\
    \ {\n\t\ti++;\n\t}\n\tif (i == s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\tfor (i = 0; i < s.size(); i++) {\n\t\tif (std::isalpha(s[i]))\
    \ {\n\t\t\tif (std::isupper(s[i])) {\n\t\t\t\ts[i] = std::tolower(s[i]);\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts[i] = std::toupper(s[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string str = \"\";\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ttemp =\
    \ tolower(s[i]);\n\t\t\t\tstr += temp;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttemp =\
    \ toupper(s[i]);\n\t\t\t\tstr += temp;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstr\
    \ += s[i];\n\t\t}\n\t}\n\tif (str == \"\") {\n\t\tstd::reverse(s.begin(), s.end());\n\
    \t\treturn s;\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpx6s097pe: /tmp/tmpx6s097pe.cpp:42: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool flag = true;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i]\
    \ < '0' || s[i] > '9') {\n            flag = false;\n            break;\n    \
    \    }\n    }\n    if(flag) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z')\n            s[i] -= 32;\n        else if(s[i] >= 'A'\
    \ && s[i] <= 'Z')\n            s[i] += 32;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp1pcufw2i: /tmp/tmp1pcufw2i.cpp:42: int main(): Assertion `candidate(("#6@2"))
    == ("2@6#")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    std::string r;\n\tfor (char c : s) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\
    r += toupper(c);\n\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tr += tolower(c);\n\
    \t\t} else {\n\t\t\tr += c;\n\t\t}\n\t}\n\tif (r.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n\t\tstd::reverse(r.begin(), r.end());\n\t}\n\treturn\
    \ r;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    string ans = \"\";\n    // Condition for no letters\n    if (s.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos)\n   \
    \     ans = string(s.rbegin(), s.rend());\n    else {\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s[i] >= 65 && s[i] <= 90)\n        \
    \        ans += s[i] + 32;\n            else if (s[i] >= 97 && s[i] <= 122)\n\
    \                ans += s[i] - 32;\n            else\n                ans += s[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxy5t0pf.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpmxy5t0pf.cpp:16:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   16 |     string ans = \"\";\n      |     ^~~~~~\n/tmp/tmpmxy5t0pf.cpp:16:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmxy5t0pf.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmxy5t0pf.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpmxy5t0pf.cpp:18:84: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   18 |     if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == string::npos)\n      |                                                  \
    \                                  ^~~~~~\n/tmp/tmpmxy5t0pf.cpp:19:9: error: \u2018\
    ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019?\n   19\
    \ |         ans = string(s.rbegin(), s.rend());\n      |         ^~~\n      |\
    \         abs\n/tmp/tmpmxy5t0pf.cpp:23:17: error: \u2018ans\u2019 was not decl"
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    int len = s.length();\n\tint check = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\
    \tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tcheck = 1;\n\t\t\tbreak;\n\t\t}\n\t\
    \telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tcheck = 1;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\tif (check == 0) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn\
    \ s;\n\t}\n\telse {\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\telse if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\t\
    return s;\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // if (s.empty()) {\n  //   return s;\n  // }\n  // int i = 0;\n  // while\
    \ (!isalpha(s[i])) {\n  //   i++;\n  // }\n  // if (i == s.size()) {\n  //   reverse(s.begin(),\
    \ s.end());\n  //   return s;\n  // }\n  // for (int j = i; j < s.size(); j++)\
    \ {\n  //   if (isalpha(s[j])) {\n  //     if (isupper(s[j])) {\n  //       s[j]\
    \ = tolower(s[j]);\n  //     } else {\n  //       s[j] = toupper(s[j]);\n  //\
    \     }\n  //   }\n  // }\n  // return s;\n  for (char &c : s) {\n    if (c >=\
    \ 'a' && c <= 'z') {\n      c = toupper(c);\n    } else if (c >= 'A' && c <= 'Z')\
    \ {\n      c = tolower(c);\n    }\n  }\n  reverse(s.begin(), s.end());\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpu37vwuko: /tmp/tmpu37vwuko.cpp:49: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            s[i] = toupper(s[i]);\n\
    \        else if (s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = tolower(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpezf8yt7j: /tmp/tmpezf8yt7j.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n      else s[i] = toupper(s[i]);\n    }\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmppeyzuv5o: /tmp/tmppeyzuv5o.cpp:27: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            flag\
    \ = true;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.size(); i++) {\n            if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \                s[i] = s[i] - 'a' + 'A';\n            }\n            else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n                s[i] = s[i] - 'A' + 'a';\n       \
    \     }\n        }\n    }\n    else {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = \"\";\n    bool notLetterFound = true;\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            notLetterFound\
    \ = false;\n            ans += isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    if (notLetterFound)\
    \ {\n        std::reverse(ans.begin(), ans.end());\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    bool contains_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            contains_letter = true;\n            break;\n\
    \        }\n    }\n    if (contains_letter) {\n        for (int i = 0; i < s.size();\
    \ i++) {\n            if (s[i] >= 'a' && s[i] <= 'z') {\n                s[i]\
    \ = s[i] - 'a' + 'A';\n            }\n        }\n    } else {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpfd4u_m5d: /tmp/tmpfd4u_m5d.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() < 1) return s;\n    for (char& c : s) {\n        if (std::isalpha(c))\
    \ c = std::tolower(c);\n    }\n    if (s == std::string(s.rbegin(), s.rend()))\n\
    \        for (char& c : s) {\n            if (std::isalpha(c)) c = std::toupper(c);\n\
    \        }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp2_04iyxw: /tmp/tmp2_04iyxw.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::regex r(\"[a-zA-Z]\");\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (std::regex_match(std::string(1, s[i]), r)) {\n            s[i] = s[i]\
    \ ^ 32;\n        }\n    }\n    if (std::regex_match(s, r)) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp4vgh5u_n: /tmp/tmp4vgh5u_n.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n            hasLetter\
    \ = true;\n        }\n    }\n    if (!hasLetter)\n        std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpkd6a7i59: /tmp/tmpkd6a7i59.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int count=0;\n  for(int i=0;i<s.size();i++){\n    if(s[i]>='a' && s[i]<='z'){\n\
    \      count++;\n    }\n    else if(s[i]>='A' && s[i]<='Z'){\n      count++;\n\
    \    }\n  }\n  if(count==0){\n    reverse(s.begin(),s.end());\n    return s;\n\
    \  }\n  for(int i=0;i<s.size();i++){\n    if(s[i]>='a' && s[i]<='z'){\n      s[i]=s[i]-32;\n\
    \    }\n    else if(s[i]>='A' && s[i]<='Z'){\n      s[i]=s[i]+32;\n    }\n  }\n\
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \ \n  int count = 0;\n  int len = s.length();\n  for(int i = 0; i < len; i++)\n\
    \  {\n    if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\n \
    \   {\n      count++;\n    }\n  }\n  if(count > 0)\n  {\n    for(int i = 0; i\
    \ < len; i++)\n    {\n      if(s[i] >= 'a' && s[i] <= 'z')\n      {\n        s[i]\
    \ = toupper(s[i]);\n      }\n      else if(s[i] >= 'A' && s[i] <= 'Z')\n     \
    \ {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  else\n  {\n    for(int\
    \ i = 0; i < len/2; i++)\n    {\n      char temp = s[i];\n      s[i] = s[len-i-1];\n\
    \      s[len-i-1] = temp;\n    }\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    int length = s.length();\n    int count =\
    \ 0;\n    for (int i = 0; i < length; i++) {\n        if (isalpha(s[i])) {\n \
    \           if (islower(s[i])) {\n                result += toupper(s[i]);\n \
    \           } else {\n                result += tolower(s[i]);\n            }\n\
    \            count++;\n        } else {\n            result += s[i];\n       \
    \ }\n    }\n    if (count == 0) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.length() == 0) return \"\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    if (result.length() == s.length())\
    \ {\n        return std::string(result.rbegin(), result.rend());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpltu6n3ql: /tmp/tmpltu6n3ql.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int i;\n  for(i=0;i<s.length();i++)\n  {\n    if(s[i]>='a' && s[i]<='z')\n\
    \    {\n      s[i]=s[i]-32;\n    }\n    else if(s[i]>='A' && s[i]<='Z')\n    {\n\
    \      s[i]=s[i]+32;\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmppycin6vr: /tmp/tmppycin6vr.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\
    \t\ts[i] -= 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i]\
    \ += 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplzutei35: /tmp/tmplzutei35.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int flag = 0;\n    for(int i = 0;i < s.length();i++)\n    {\n        if(!isalpha(s[i]))\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      flag = 1;\n            if(islower(s[i]))\n            {\n             \
    \   s[i] = toupper(s[i]);\n            }\n            else\n            {\n  \
    \              s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(flag\
    \ == 0)\n    {\n        std::reverse(s.begin(),s.end());\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string s1 = \"\";\n  int sz = s.size();\n  int flag = 0;\n  for(int i\
    \ = 0; i < sz; i++) {\n    if(s[i] >= 65 && s[i] <= 90) {\n      flag = 1;\n \
    \     break;\n    }\n    else if(s[i] >= 97 && s[i] <= 122) {\n      flag = 1;\n\
    \      break;\n    }\n  }\n  if(flag == 0) {\n    reverse(s.begin(), s.end());\n\
    \    return s;\n  }\n  int sz1 = s.size();\n  for(int i = 0; i < sz1; i++) {\n\
    \    if(s[i] >= 65 && s[i] <= 90) {\n      s1.push_back(s[i] + 32);\n    }\n \
    \   else if(s[i] >= 97 && s[i] <= 122) {\n      s1.push_back(s[i] - 32);\n   \
    \ }\n    else {\n      s1.push_back(s[i]);\n    }\n  }\n  return s1;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if\
    \ (std::isalpha(s[i])) {\n      result += (char) (s[i] ^ ' ');\n    } else {\n\
    \      result += s[i];\n    }\n  }\n  if (result == s) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = \"\";\n    bool has_letters = false;\n    for (auto\
    \ c : s) {\n        if (isalpha(c)) {\n            has_letters = true;\n     \
    \       if (islower(c)) {\n                result += toupper(c);\n           \
    \ } else {\n                result += tolower(c);\n            }\n        } else\
    \ {\n            result += c;\n        }\n    }\n    if (!has_letters) {\n   \
    \     reverse(result.begin(), result.end());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string t;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i]))\
    \ {\n            t += tolower(s[i]);\n        } else {\n            t += s[i];\n\
    \        }\n    }\n    if (t.size() == 0) {\n        return std::string(s.rbegin(),\
    \ s.rend());\n    }\n    std::string ans;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (std::isalpha(s[i])) {\n            ans += std::toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpiuff4jsq: /tmp/tmpiuff4jsq.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int isLetter = 0;\n  std::string result;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (isalpha(s[i])) {\n      isLetter = 1;\n      result += std::toupper(s[i]);\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  if (isLetter == 0) {\n   \
    \ std::reverse(result.begin(), result.end());\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpzpiiedmf: /tmp/tmpzpiiedmf.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n     \
    \       isLetter = true;\n            break;\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - 'a' + 'A';\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            s[i] = toupper(s[i]);\n        } else if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n        }\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpxos5hfjv: /tmp/tmpxos5hfjv.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098032
