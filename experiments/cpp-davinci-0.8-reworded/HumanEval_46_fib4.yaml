name: HumanEval_46_fib4
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence\
  \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
  // fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) ->\
  \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to\
  \ efficiently compute the n-th element of the fib4 number sequence.  Do not use\
  \ recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n\
  // (14)\nlong fib4(long n) {\n"
tests: "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) ==\
  \ (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n\
  \    assert(candidate((12)) == (386));\n}\n"
completions: ["    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long fib3 = 0;\n\
    \    long fib2 = 2;\n    long fib1 = 0;\n    long fib0 = 0;\n    long fib_n =\
    \ 0;\n    for (int i = 4; i <= n; i++) {\n        fib_n = fib3 + fib2 + fib1 +\
    \ fib0;\n        fib3 = fib2;\n        fib2 = fib1;\n        fib1 = fib0;\n  \
    \      fib0 = fib_n;\n    }\n    return fib_n;", "\t//I am going to solve this\
    \ by calculating the Fib4(n) = F(n) + G(n) where F is the same as fib4(n) and\
    \ G(n) is fib4(n-2)\n\t//Recurrsion:\n\t//F(n) = F(n-1) + G(n-1)\n\t//G(n) = F(n-2)\
    \ + G(n-2)\n\t//Boundary Cases:\n\t//F(0) = 0\n\t//F(1) = 0\n\t//F(2) = 2\n\t\
    //F(3) = 0\n\t//G(0) = 2\n\t//G(1) = 0\n\t//G(2) = 0\n\t//G(3) = 0\n\t//Now, I\
    \ am going to convert this into matrices:\n\t//{F(n)}{F(n-1)}   =   {{1,1,1,1},{1,0,0,0}}\
    \   *   {F(n-1)}{F(n-2)}\n\t//{G(n)}{G(n-1)}       {0,1,1,1}               {G(n-1)}{G(n-2)}\n\
    \t//So, we have:\n\t//A = {{1,1,1,1},{1,0,0,0}}\n\t//m = {{F(n)}{F(n-1)}{G(n)}{G(n-1)}}\n\
    \t//m = A * m\n\t//Now, I am going to use exponentiation by squaring to calculate\
    \ A^n\n\tif (n < 4) {\n\t\tif (n == 0) return 0;\n\t\tif (n == 1) return 0;\n\t\
    \tif (n == 2) return 2;\n\t\tif (n == 3) return 0;\n\t}\n\tstd::vector<std::vector<long>>\
    \ A = { { 1,1,1,1 },{ 1,0,0,0 } };\n\tstd::vector<std::vector<long>> m = { { 0,0,2,0\
    \ },{ 0,0,0,0 } };\n\twhile (n > 0", "  std::vector<long> v(4);\n  v[0] = 0;\n\
    \  v[1] = 0;\n  v[2] = 2;\n  v[3] = 0;\n  if (n == 0) return v[0];\n  if (n ==\
    \ 1) return v[1];\n  if (n == 2) return v[2];\n  if (n == 3) return v[3];\n  std::vector<long>\
    \ c(4);\n  for (int i = 4; i <= n; i++) {\n    c[0] = v[1];\n    c[1] = v[2];\n\
    \    c[2] = v[3];\n    c[3] = v[0] + v[1] + v[2] + v[3];\n    v = c;\n  }\n  return\
    \ v[3];", "    // your code here\n    return 0;", "    // Insert your code here.\n\
    \    std::vector<long> fib;\n    fib.push_back(0);\n    fib.push_back(0);\n  \
    \  fib.push_back(2);\n    fib.push_back(0);\n    if (n < 4) {\n        return\
    \ fib[n];\n    }\n    for (int i = 4; i <= n; i++) {\n        fib.push_back(fib[i-1]\
    \ + fib[i-2] + fib[i-3] + fib[i-4]);\n    }\n    return fib[n];", "  if (n < 2)\
    \ {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long prev=0, prev_prev=0,\
    \ prev_prev_prev=0, prev_prev_prev_prev=0;\n  long fib4=0;\n  for (long i=3; i<=n;\
    \ i++) {\n    prev_prev_prev_prev = prev_prev_prev;\n    prev_prev_prev = prev_prev;\n\
    \    prev_prev = prev;\n    prev = fib4;\n    fib4 = prev_prev_prev_prev + prev_prev_prev\
    \ + prev_prev + prev;\n  }\n  return fib4;", "    long arr[n];\n    arr[0] = 0;\n\
    \    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i < n;\
    \ i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n\
    \    return arr[n-1];", "    if (n == 0) return 0;\n    if (n == 1) return 0;\n\
    \    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long ans = 0;\n   \
    \ int first = 0;\n    int second = 0;\n    int third = 2;\n    int fourth = 0;\n\
    \    for (int i = 3; i < n; i++) {\n        ans = first + second + third + fourth;\n\
    \        first = second;\n        second = third;\n        third = fourth;\n \
    \       fourth = ans;\n    }\n    return ans;", "  // your code here\n  if(n ==\
    \ 0) return 0;\n  if(n == 1) return 0;\n  if(n == 2) return 2;\n  if(n == 3) return\
    \ 0;\n  long n1 = 0;\n  long n2 = 0;\n  long n3 = 2;\n  long n4 = 0;\n  long f\
    \ = 0;\n  for(int i = 0; i < n-3; i++){\n    f = n1 + n2 + n3 + n4;\n    n1 =\
    \ n2;\n    n2 = n3;\n    n3 = n4;\n    n4 = f;\n  }\n  return f;", "    if (n\
    \ < 3) return 0;\n    long n1 = 0, n2 = 0, n3 = 2, n4 = 0, r = 0;\n    for (long\
    \ i = 3; i <= n; i++) {\n        r = n1 + n2 + n3 + n4;\n        n1 = n2;\n  \
    \      n2 = n3;\n        n3 = n4;\n        n4 = r;\n    }\n    return r;", "\t\
    if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 4) {\n\t\treturn 4;\n\t}\n\tlong arr[n+1];\n\tarr[0] = 0;\n\tarr[1] = 0;\n\t\
    arr[2] = 2;\n\tarr[3] = 0;\n\tarr[4] = 4;\n\tfor (int i = 5; i <= n; i++) {\n\t\
    \tarr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n\t}\n\treturn arr[n];",
  "    if (n < 2) return 0;\n    if (n == 2) return 2;\n    long a = 0, b = 0, c =\
    \ 2, d = 0;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n    \
    \    a = b;\n        b = c;\n        c = d;\n    }\n    return d;", "//     You\
    \ have to define the fib4 function.\n\tif(n == 0) {\n\t\treturn 0;\n\t}\n\tif(n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\tif(n == 2) {\n\t\treturn 2;\n\t}\n\tif(n == 3)\
    \ {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d\
    \ = 0;\n\tlong num = 0;\n\tfor(int i = 4; i <= n; i++) {\n\t\tnum = a + b + c\
    \ + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = num;\n\t}\n\treturn num;",
  "  // print(1)\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n  long\
    \ tmp;\n  int i;\n  for (i = 3; i <= n; i++) {\n    tmp = a + b + c + d;\n   \
    \ a = b;\n    b = c;\n    c = d;\n    d = tmp;\n  }\n  return d;", "\tif (n <=\
    \ 3) {\n\t\treturn 0;\n\t}\n\tif (n == 4) {\n\t\treturn 2;\n\t}\n\telse {\n\t\t\
    long fib[n + 1];\n\t\tfib[0] = 0;\n\t\tfib[1] = 0;\n\t\tfib[2] = 2;\n\t\tfib[3]\
    \ = 0;\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\tfib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3] + fib[i - 4];\n\t\t}\n\t\treturn fib[n];\n\t}", "  long a1\
    \ = 0, a2 = 0, a3 = 2, a4 = 0, a5 = 0;\n  long res = 0;\n  if (n == 0) return\
    \ 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n\
    \  while (n >= 4) {\n    res = a1 + a2 + a3 + a4;\n    a1 = a2;\n    a2 = a3;\n\
    \    a3 = a4;\n    a4 = res;\n    n--;\n  }\n  return res;", "\tif (n <= 1) return\
    \ 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong n1 = 0, n2 = 2,\
    \ n3 = 0, n4 = 0, tmp, i;\n\tfor (i = 4; i <= n; i++) {\n\t\ttmp = n4;\n\t\tn4\
    \ = n1 + n2 + n3 + n4;\n\t\tn1 = n2;\n\t\tn2 = n3;\n\t\tn3 = tmp;\n\t}\n\treturn\
    \ n4;", "  std::vector<long> a = {0, 0, 2, 0};\n  while (a.size() < n + 1) {\n\
    \    a.push_back(a[a.size() - 1] + a[a.size() - 2] + a[a.size() - 3] + a[a.size()\
    \ - 4]);\n  }\n  return a[n];", "    // your code here\n    long a = 0, b = 0,\
    \ c = 2, d = 0, e = 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n    \
    \    return 0;\n    for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;", "  // your code goes here \n  // If we start with:\n  // f4(0) = 0\n  //\
    \ f4(1) = 0\n  // f4(2) = 2\n  // f4(3) = 0\n  // Then we can compute f4(4), f4(5),\
    \ f4(6), etc. using:\n  // f4(n) = f4(n-1) + f4(n-2) + f4(n-3) + f4(n-4)\n\n \
    \ // We can solve this problem in O(n) time and O(1) space.\n\n  // We can think\
    \ of this problem as keeping track of 4 values:\n  // f4(n-1), f4(n-2), f4(n-3),\
    \ f4(n-4).\n  // Then f4(n) = f4(n-1) + f4(n-2) + f4(n-3) + f4(n-4).\n  // When\
    \ we're done computing f4(n), we can keep track of the values of\n  // f4(n),\
    \ f4(n-1), f4(n-2), f4(n-3) for the next iteration.\n  // Note: we only need to\
    \ keep track of the last 4 values.\n\n  // The following represents a sequence\
    \ that the variables track:\n  // (1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, ...)\n  // a = 1\n  // b = 1\n  // c = 2\n  // d =\
    \ 3\n  // e = 5\n  // f = 8\n  // g = 13\n  // h = 21\n  // We can add in the\
    \ initial values we care about to get:\n  // (0, 0, 2, 0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, ...)\n  // a = 0\n  // b = 0\n  // c = 2\n  // d =\
    \ 0\n  // e = 1\n  // f = 1\n  // g = 2\n  // h = 3\n ", "    std::vector<long>\
    \ n_minus_1 = {0, 0, 2, 0};\n    std::vector<long> n_minus_2 = {0, 0, 0, 2};\n\
    \    std::vector<long> n_minus_3 = {0, 0, 0, 0};\n    std::vector<long> n_minus_4\
    \ = {0, 0, 0, 0};\n    std::vector<long> n_th = {0, 0, 0, 0};\n    if (n < 4)\
    \ return n_minus_1[n];\n    for (int i = 4; i <= n; i++) {\n        for (int j\
    \ = 0; j < 4; j++) {\n            n_th[j] = n_minus_1[j] + n_minus_2[j] + n_minus_3[j]\
    \ + n_minus_4[j];\n        }\n        n_minus_4 = n_minus_3;\n        n_minus_3\
    \ = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1 = n_th;\n  \
    \  }\n    return n_th[3];", "    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n\
    \ == 0)\n        return a;\n    else if (n == 1)\n        return b;\n    else\
    \ if (n == 2)\n        return c;\n    else if (n == 3)\n        return d;\n  \
    \  for (int i = 4; i <= n; i++) {\n        e = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;", "\tlong\
    \ n3, n2, n1, n0;\n\tlong m2, m1, m0;\n\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tn3 = 0;\n\tn2\
    \ = 0;\n\tn1 = 2;\n\tn0 = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tm0 = n3 +\
    \ n2 + n1 + n0;\n\t\tn3 = n2;\n\t\tn2 = n1;\n\t\tn1 = n0;\n\t\tn0 = m0;\n\t}\n\
    \treturn m0;", "  if (n < 3) {\n    return (n == 0) ? 0 : 2;\n  }\n  long fib4s[4]\
    \ = {0, 0, 2, 0};\n  for (long i = 3; i < n; i++) {\n    long newFib4 = fib4s[0]\
    \ + fib4s[1] + fib4s[2] + fib4s[3];\n    fib4s[0] = fib4s[1];\n    fib4s[1] =\
    \ fib4s[2];\n    fib4s[2] = fib4s[3];\n    fib4s[3] = newFib4;\n  }\n  return\
    \ fib4s[3];", "\tlong a=0,b=0,c=2,d=0,e=0;\n\tif(n==0)\n\t\treturn 0;\n\telse\
    \ if(n==1)\n\t\treturn 0;\n\telse if(n==2)\n\t\treturn 2;\n\telse if(n==3)\n\t\
    \treturn 0;\n\telse{\n\t\tfor(int i=4;i<=n;i++){\n\t\t\te=a+b+c+d;\n\t\t\ta=b;\n\
    \t\t\tb=c;\n\t\t\tc=d;\n\t\t\td=e;\n\t\t}\n\t\treturn e;\n\t}", "\tif (n < 3)\
    \ {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tif (n == 4) {\n\
    \t\treturn 2;\n\t}\n\tlong fib1 = 0;\n\tlong fib2 = 2;\n\tlong fib3 = 0;\n\tlong\
    \ fib4 = 2;\n\tlong fibx = 0;\n\tlong index = 4;\n\twhile (index < n) {\n\t\t\
    fibx = fib1 + fib2 + fib3 + fib4;\n\t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\t\tfib3\
    \ = fib4;\n\t\tfib4 = fibx;\n\t\tindex++;\n\t}\n\treturn fibx;", "  long a = 0,\
    \ b = 0, c = 2, d = 0, e = 0;\n  for (long i = 0; i < n; i++) {\n    e = d;\n\
    \    d = c;\n    c = b;\n    b = a;\n    a = d + e + c + b;\n  }\n  return a;",
  "\tassert(n >= 0);\n\tif (n <= 3) {\n\t\treturn n > 1;\n\t}\n\tlong fib4_m4 = 0;\n\
    \tlong fib4_m3 = 0;\n\tlong fib4_m2 = 2;\n\tlong fib4_m1 = 0;\n\tlong fib4_n;\n\
    \tfor (long i = 4; i <= n; i++) {\n\t\tfib4_n = fib4_m4 + fib4_m3 + fib4_m2 +\
    \ fib4_m1;\n\t\tfib4_m4 = fib4_m3;\n\t\tfib4_m3 = fib4_m2;\n\t\tfib4_m2 = fib4_m1;\n\
    \t\tfib4_m1 = fib4_n;\n\t}\n\treturn fib4_n;", "    long a[n];\n    a[0] = 0;\n\
    \    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    for(int i = 4; i < n; i++) {\n\
    \        a[i] = a[i-1] + a[i-2] + a[i-3] + a[i-4];\n    }\n    return a[n-1];",
  "\tlong temp = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d = 0;\n\t\
    if (n == 0) {\n\t\treturn a;\n\t}\n\telse if (n == 1) {\n\t\treturn b;\n\t}\n\t\
    else if (n == 2) {\n\t\treturn c;\n\t}\n\telse if (n == 3) {\n\t\treturn d;\n\t\
    }\n\telse {\n\t\tfor (int i = 0; i < n - 3; i++) {\n\t\t\ttemp = a + b + c + d;\n\
    \t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = temp;\n\t\t}\n\t\treturn temp;\n\
    \t}", "    // your code here\n    long *array = new long[n + 1];\n    array[0]\
    \ = 0;\n    array[1] = 0;\n    array[2] = 2;\n    array[3] = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n        array[i] = array[i - 1] + array[i - 2] + array[i\
    \ - 3] + array[i - 4];\n    }\n    return array[n];", "  long a = 0, b = 0, c\
    \ = 2, d = 0, e = 0;\n  for (long i = 0; i < n - 2; i++) {\n    e = a + b + c\
    \ + d;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;", " \
    \ // assert(n >= 0);\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n \
    \   return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n   \
    \ return 0;\n  }\n  long fib4_n_minus_1 = 0;\n  long fib4_n_minus_2 = 0;\n  long\
    \ fib4_n_minus_3 = 2;\n  long fib4_n_minus_4 = 0;\n  long result = 0;\n  long\
    \ i = 4;\n  while (i <= n) {\n    result = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3\
    \ + fib4_n_minus_4;\n    fib4_n_minus_4 = fib4_n_minus_3;\n    fib4_n_minus_3\
    \ = fib4_n_minus_2;\n    fib4_n_minus_2 = fib4_n_minus_1;\n    fib4_n_minus_1\
    \ = result;\n    i += 1;\n  }\n  return result;", "  long* fibonacciSequence =\
    \ new long[n + 1];\n  fibonacciSequence[0] = 0;\n  fibonacciSequence[1] = 0;\n\
    \  fibonacciSequence[2] = 2;\n  fibonacciSequence[3] = 0;\n  for (int i = 4; i\
    \ <= n; i++) {\n    fibonacciSequence[i] = fibonacciSequence[i - 1] + fibonacciSequence[i\
    \ - 2] + fibonacciSequence[i - 3] + fibonacciSequence[i - 4];\n  }\n  return fibonacciSequence[n];",
  "    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n\
    \    if (n == 3) {\n        return 0;\n    }\n    long prev_p = 0;\n    long prev_s\
    \ = 0;\n    long prev_t = 2;\n    long prev_f = 0;\n    long result = 0;\n   \
    \ for (long i = 4; i <= n; i++) {\n        result = prev_p + prev_s + prev_t +\
    \ prev_f;\n        prev_p = prev_s;\n        prev_s = prev_t;\n        prev_t\
    \ = prev_f;\n        prev_f = result;\n    }\n    return result;", "    if (n\
    \ == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n  \
    \  } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n       \
    \ return 0;\n    } else {\n        std::vector<long> fib4_vec(4);\n        fib4_vec[0]\
    \ = 0;\n        fib4_vec[1] = 0;\n        fib4_vec[2] = 2;\n        fib4_vec[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long f = fib4_vec[0]\
    \ + fib4_vec[1] + fib4_vec[2] + fib4_vec[3];\n            fib4_vec[0] = fib4_vec[1];\n\
    \            fib4_vec[1] = fib4_vec[2];\n            fib4_vec[2] = fib4_vec[3];\n\
    \            fib4_vec[3] = f;\n        }\n        return fib4_vec[3];\n    }",
  "  long i = 0;\n  long j = 0;\n  long k = 2;\n  long l = 0;\n  long m = 0;\n  for\
    \ (int o = 2; o < n; o++) {\n    m = i + j + k + l;\n    i = j;\n    j = k;\n\
    \    k = l;\n    l = m;\n  }\n  return m;", "    // YOUR CODE HERE\n    long i=0,j=0,k=2,l=0,temp=0;\n\
    \    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n\
    \        return 2;\n    if(n==3)\n        return 0;\n    while(n-3)\n    {\n \
    \       temp=i+j+k+l;\n        i=j;\n        j=k;\n        k=l;\n        l=temp;\n\
    \        n--;\n    }\n    return temp;", "    if (n < 0) {\n        return 0;\n\
    \    }\n    if (n < 2) {\n        return 0;\n    }\n    if (n == 2) {\n      \
    \  return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    // Using\
    \ Matrix Multiplication for fib4\n    // f4 = [0, 1, 1, 0]\n    //         1 \
    \ 0  0  0\n    //         0  1  0  0\n    //         0  0  1  0\n    //      \
    \   0  0  0  1\n    // f4 * f4 = [1, 0, 0, 0]\n    //         1  0  0  0\n   \
    \ //         0  1  0  0\n    //         0  0  1  0\n    //         0  0  0  1\n\
    \    // f4 ^ n = [0, 1, 1, 0]\n    //         1  0  0  0\n    //         0  1\
    \  0  0\n    //         0  0  1  0\n    //         0  0  0  1\n    long a[4][4]\
    \ = {{1, 0, 0, 0},\n                    {0, 1, 0, 0},\n                    {0,\
    \ 0, 1, 0},\n                    {0, 0, 0, 1}};\n    long ans[4][4] = {{0, 1,\
    \ 1, 0},\n                      {1, 0, 0, 0},\n                      {0, 1, 0,\
    \ 0},\n                      {0, 0, 1, 0}};\n    for (long i = 1; i < n; i++)\
    \ {\n        long d = ans[0][0] * a[0][0] + ans[0][1] * a[1][0] + ans[0][2] *\
    \ a[2][0] + ans[0][3] * a[3][0];\n        long e = ans[0][0] * a[0][1] + ans[0][1]\
    \ * a[1][1] + ans[0][2] * a[2][1] + ans[0][3] * a[3][1];\n        long f = ans[0][",
  "  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if\
    \ (n == 3) return 0;\n  long first = 0;\n  long second = 0;\n  long third = 2;\n\
    \  long fourth = 0;\n  long answer = 0;\n  for (int i = 4; i <= n; i++) {\n  \
    \  answer = first + second + third + fourth;\n    first = second;\n    second\
    \ = third;\n    third = fourth;\n    fourth = answer;\n  }\n  return answer;",
  "    assert(n >= 0);\n    // YOUR CODE HERE\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0, temp;\n    for (int i = 4; i <= n; i++) {\n    \
    \    temp = a;\n        a = b;\n        b = c;\n        c = d;\n        d = a\
    \ + b + c + temp;\n    }\n    return d;", "  int fib4[n];\n  fib4[0] = 0;\n  fib4[1]\
    \ = 0;\n  fib4[2] = 2;\n  fib4[3] = 0;\n  for (int i = 4; i < n; i++) {\n    fib4[i]\
    \ = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n  }\n  return fib4[n-1];",
  "    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n   \
    \ if (n == 2) return 2;\n    if (n == 3) return 0;\n    int arr[n];\n    arr[0]\
    \ = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for (int i = 4;\
    \ i < n; i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n\
    \    }\n    return arr[n-1];", "    long x = 0, y = 0, z = 2, w = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n        w = x + y + z;\n        x = y;\n       \
    \ y = z;\n        z = w;\n    }\n    return w;", "    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    while (n > 3) {\n        long\
    \ next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = next;\n        n--;\n    }\n    return a + b + c + d;", "     if(n==0)\
    \ return 0;\n    else if(n==1) return 0;\n    else if(n==2) return 2;\n    else\
    \ if(n==3) return 0;\n    else if(n==4) return 4;\n    else\n    {\n        long\
    \ a=0,b=0,c=2,d=4,e=0;\n        for(int i=5;i<=n;i++)\n        {\n           \
    \ e=a+b+c+d;\n            a=b;\n            b=c;\n            c=d;\n         \
    \   d=e;\n        }\n        return e;\n    }", "    assert(n>=0);\n    if(n==0)\
    \ return 0;\n    if(n==1) return 0;\n    if(n==2) return 2;\n    if(n==3) return\
    \ 0;\n    long a=0,b=0,c=2,d=0,f=0;\n    for(int i=4;i<=n;i++){\n        f=a+b+c+d;\n\
    \        a=b;\n        b=c;\n        c=d;\n        d=f;\n    }\n    return f;",
  "    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    for (int i = 3; i <= n; i++) {\n\
    \        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = e;\n    }\n    return e;", "  if (n == 0) return 0;\n  if (n == 1)\
    \ return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  std::vector<long>\
    \ array;\n  array.push_back(0);\n  array.push_back(0);\n  array.push_back(2);\n\
    \  array.push_back(0);\n  for (int i = 4; i <= n; i++) {\n    long sum = array[0]\
    \ + array[1] + array[2] + array[3];\n    array.push_back(sum);\n    array.erase(array.begin());\n\
    \  }\n  return array[3];", "\tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tlong\
    \ result = 0;\n\tfor (long i = 4; i <= n; i++) {\n\t\tresult = a + b + c + d;\n\
    \t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = result;\n\t}\n\treturn result;", " \
    \   if (n <= 3) return 0;\n    int a = 0, b = 0, c = 2, d = 0;\n    for (int i\
    \ = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;", "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\
    \tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif\
    \ (n == 3) {\n\t\treturn 0;\n\t}\n\tlong fib[n + 1];\n\tfib[0] = 0;\n\tfib[1]\
    \ = 0;\n\tfib[2] = 2;\n\tfib[3] = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tfib[i]\
    \ = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n\t}\n\treturn fib[n];",
  "\t// Write your code here.\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\
    \t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d = 0;\n\
    \tfor (int i = 4; i <= n; i++) {\n\t\tlong e = a + b + c + d;\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\treturn d;", "    long k = 0;\n    long\
    \ l = 0;\n    long m = 2;\n    long o = 0;\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n\
    \        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    for\
    \ (int i = 2; i < n; i++) {\n        o = k + l + m;\n        k = l;\n        l\
    \ = m;\n        m = o;\n    }\n    return o;", "    long prevprevprev=0;\n   \
    \ long prevprev=0;\n    long prev=0;\n    long curr=2;\n    if(n<=3) return 0;\n\
    \    if(n==4) return 2;\n    while(n>4){\n        prevprevprev=prevprev;\n   \
    \     prevprev=prev;\n        prev=curr;\n        curr=curr+prevprev+prevprevprev;\n\
    \        n--;\n    }\n    return curr;", "    if (n < 4) {\n        return (n\
    \ == 2) ? 2 : 0;\n    }\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i\
    \ = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;", "  long curr = 0;\n  long prev_1 = 0;\n\
    \  long prev_2 = 0;\n  long prev_3 = 0;\n  long prev_4 = 0;\n  for (int i = 0;\
    \ i < n; i++) {\n    curr = prev_1 + prev_2 + prev_3 + prev_4;\n    prev_4 = prev_3;\n\
    \    prev_3 = prev_2;\n    prev_2 = prev_1;\n    prev_1 = curr;\n  }\n  return\
    \ curr;", "    if (n < 4) {\n        return n;\n    }\n    int p1 = 3;\n    int\
    \ p2 = 2;\n    int p3 = 0;\n    int p4 = 0;\n    int current = 4;\n    int result\
    \ = 0;\n    while (current <= n) {\n        result = p1 + p2 + p3 + p4;\n    \
    \    p4 = p3;\n        p3 = p2;\n        p2 = p1;\n        p1 = result;\n    \
    \    current++;\n    }\n    return result;", "    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n\
    \        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);", "    if (n == 0) {\n      \
    \  return 0;\n    }\n    else if (n == 1) {\n        return 0;\n    }\n    else\
    \ if (n == 2) {\n        return 2;\n    }\n    else if (n == 3) {\n        return\
    \ 0;\n    }\n    else {\n        long a = 0;\n        long b = 0;\n        long\
    \ c = 2;\n        long d = 0;\n        long e = 0;\n        for (int i = 4; i\
    \ <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n         \
    \   b = c;\n            c = d;\n            d = e;\n        }\n        return\
    \ e;\n    }", "  assert(n>=0);\n  if(n==0)\n    return 0;\n  if(n==1)\n    return\
    \ 0;\n  if(n==2)\n    return 2;\n  if(n==3)\n    return 0;\n  if(n==4)\n    return\
    \ 2;\n  long a=0,b=0,c=2,d=2,e;\n  for(int i=5;i<=n;i++)\n  {\n    e=a+b+c+d;\n\
    \    a=b;\n    b=c;\n    c=d;\n    d=e;\n  }\n  return e;", "    assert(n>=0);\n\
    \    long previous = 0;\n    long current = 0;\n    long beforePrevious = 0;\n\
    \    long beforePrevious2 = 0;\n    for (long i = 0; i <= n; i++) {\n        if\
    \ (i == 0) {\n            beforePrevious2 = 0;\n        } else if (i == 1) {\n\
    \            beforePrevious = 0;\n        } else if (i == 2) {\n            previous\
    \ = 2;\n        } else if (i == 3) {\n            current = 0;\n        } else\
    \ {\n            long temp = current;\n            current = previous + current\
    \ + beforePrevious + beforePrevious2;\n            beforePrevious2 = beforePrevious;\n\
    \            beforePrevious = previous;\n            previous = temp;\n      \
    \  }\n    }\n    return current;", "    if (n==0) return 0;\n    if (n==1) return\
    \ 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n    long fib4PrevPrevPrevPrev\
    \ = 0;\n    long fib4PrevPrevPrev = 0;\n    long fib4PrevPrev = 2;\n    long fib4Prev\
    \ = 0;\n    long fib4Current = 0;\n    for (long i=4; i<=n; i++) {\n        fib4Current\
    \ = fib4PrevPrevPrevPrev + fib4PrevPrevPrev + fib4PrevPrev + fib4Prev;\n     \
    \   fib4PrevPrevPrevPrev = fib4PrevPrevPrev;\n        fib4PrevPrevPrev = fib4PrevPrev;\n\
    \        fib4PrevPrev = fib4Prev;\n        fib4Prev = fib4Current;\n    }\n  \
    \  return fib4Current;", "    assert(n>=0);\n    long a[n];\n    a[0]=0;\n   \
    \ a[1]=0;\n    a[2]=2;\n    a[3]=0;\n    for(int i=4;i<=n;i++){\n        a[i]=a[i-1]+a[i-2]+a[i-3]+a[i-4];\n\
    \    }\n    return a[n];", "\tassert(n >= 0);\n\tlong n1 = 0, n2 = 0, n3 = 2,\
    \ n4 = 0, result = 0;\n\tif (n == 0)\n\t\treturn 0;\n\telse if (n == 1)\n\t\t\
    return 0;\n\telse if (n == 2)\n\t\treturn 2;\n\telse if (n == 3)\n\t\treturn 0;\n\
    \telse\n\t{\n\t\tfor (int i = 4; i <= n; i++)\n\t\t{\n\t\t\tresult = n1 + n2 +\
    \ n3 + n4;\n\t\t\tn1 = n2;\n\t\t\tn2 = n3;\n\t\t\tn3 = n4;\n\t\t\tn4 = result;\n\
    \t\t}\n\t\treturn result;\n\t}", "  long i, x1 = 0, x2 = 0, x3 = 2, x4 = 0, xn;\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n \
    \ if (n == 3) return 0;\n  for (i = 4; i <= n; i++) {\n    xn = x1 + x2 + x3 +\
    \ x4;\n    x1 = x2;\n    x2 = x3;\n    x3 = x4;\n    x4 = xn;\n  }\n  return xn;",
  "  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if\
    \ (n == 2) {\n    return 2;\n  }\n  if (n == 3) {\n    return 0;\n  }\n  long\
    \ a = 0;\n  long b = 0;\n  long c = 2;\n  long d = 0;\n  for (int i = 4; i <=\
    \ n; i++) {\n    long temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = temp;\n  }\n  return a + b + c + d;", "  if (n == 0) return 0;\n  if\
    \ (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long\
    \ a = 0, b = 0, c = 2, d = 0;\n  for (int i = 0; i < n - 3; i++) {\n    long tmp\
    \ = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = tmp;\n  }\n  return\
    \ a + b + c + d;", "  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n\
    \ == 2) return 2;\n  if (n == 3) return 0;\n  long temp, current = 0, prev1 =\
    \ 0, prev2 = 2, prev3 = 0;\n  for (int i = 4; i <= n; i++) {\n    temp = current;\n\
    \    current = prev1 + prev2 + prev3 + current;\n    prev3 = prev2;\n    prev2\
    \ = prev1;\n    prev1 = temp;\n  }\n  return current;", "    long arr[n+1];\n\
    \    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    long\
    \ i;\n    for(i=4;i<=n;i++){\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3]\
    \ + arr[i-4];\n    }\n    return arr[n];", "    assert(n >= 0);\n    if (n ==\
    \ 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n\
    \ == 3) return 0;\n    if (n == 4) return 4;\n    long i;\n    long first = 0;\n\
    \    long second = 0;\n    long third = 2;\n    long fourth = 4;\n    long sum\
    \ = 6;\n    for (i = 5; i <= n; i++) {\n        first = second;\n        second\
    \ = third;\n        third = fourth;\n        fourth = sum;\n        sum = first\
    \ + second + third + fourth;\n    }\n    return sum;", "// Please write your code\
    \ here.\n  long fib[n+1];\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 2;\n  fib[3]\
    \ = 0;\n  for(int i = 4; i<=n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\
    \ + fib[i-4];\n  }\n  return fib[n];", "    if (n == 0) return 0;\n    if (n ==\
    \ 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        long\
    \ temp = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n    \
    \    c = temp;\n    }\n    return d;", "  long fib4 = 0;\n  long fib3 = 0;\n \
    \ long fib2 = 2;\n  long fib1 = 0;\n  long fib0 = 0;\n  for (long i = 3; i <=\
    \ n; i++) {\n    fib4 = fib3 + fib2 + fib1 + fib0;\n    fib0 = fib1;\n    fib1\
    \ = fib2;\n    fib2 = fib3;\n    fib3 = fib4;\n  }\n  return fib4;", "    if (n\
    \ == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if\
    \ (n == 3) return 0;\n    if (n == 4) return 2;\n    long a = 0, b = 0, c = 2,\
    \ d = 2, e;\n    for (int i = 5; i <= n; i++) {\n        e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ e;", "\tlong fib4_arr[n+1];\n\tfib4_arr[0] = 0;\n\tfib4_arr[1] = 0;\n\tfib4_arr[2]\
    \ = 2;\n\tfib4_arr[3] = 0;\n\t\n\tfor(int i = 4; i <= n; i++) {\n\t\tfib4_arr[i]\
    \ = fib4_arr[i-1] + fib4_arr[i-2] + fib4_arr[i-3] + fib4_arr[i-4];\n\t}\n\treturn\
    \ fib4_arr[n];", "    long a = 0, b = 0, c = 2, d = 0, e;\n    if (n == 0) return\
    \ a;\n    if (n == 1) return b;\n    if (n == 2) return c;\n    if (n == 3) return\
    \ d;\n    for (int i = 3; i < n; i++) {\n        e = a + b + c + d;\n        a\
    \ = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;",
  '  // your code here.', "    if (n==0) return 0;\n    if (n==1) return 0;\n    if\
    \ (n==2) return 2;\n    if (n==3) return 0;\n    long first = 0;\n    long second\
    \ = 0;\n    long third = 2;\n    long fourth = 0;\n    long sum = fourth + third\
    \ + second + first;\n    for (int i = 4; i < n; i++) {\n        first = second;\n\
    \        second = third;\n        third = fourth;\n        fourth = sum;\n   \
    \     sum = fourth + third + second + first;\n    }\n    return sum;", "  if (n\
    \ <= 3) {\n    return n * 2;\n  }\n  long arr[] = {0, 0, 2, 0};\n  long first\
    \ = 0;\n  long second = 0;\n  long third = 2;\n  long fourth = 0;\n  long index\
    \ = 3;\n  while (index < n) {\n    long newVal = first + second + third + fourth;\n\
    \    first = second;\n    second = third;\n    third = fourth;\n    fourth = newVal;\n\
    \    index++;\n  }\n  return first + second + third + fourth;", "    if (n <=\
    \ 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n\
    \ == 3) return 0;\n    std::vector<long> numbers(n);\n    numbers[0] = 0;\n  \
    \  numbers[1] = 0;\n    numbers[2] = 2;\n    numbers[3] = 0;\n    for (long i\
    \ = 4; i < n; i++) {\n        numbers[i] = numbers[i-1] + numbers[i-2] + numbers[i-3]\
    \ + numbers[i-4];\n    }\n    return numbers[n-1];", "  // You fill in here.\n\
    \tlong a = 0, b = 0, c = 2, d = 0, e = 0;\n\tfor(int i = 3; i <= n; i++) {\n\t\
    \te = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t}\n\t\
    return e;", "    // if (n == 0) {\n    //     return 0;\n    // } else if (n ==\
    \ 1) {\n    //     return 0;\n    // } else if (n == 2) {\n    //     return 2;\n\
    \    // } else if (n == 3) {\n    //     return 0;\n    // } else {\n    //  \
    \   return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    // }\n    // Recursive\
    \ solution is very slow.  TLE.\n    // Use array to cache results.\n    long f[n+1];\n\
    \    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    //  F(n) = F(n-1)\
    \ + F(n-2) + F(n-3) + F(n-4)\n    for (int i = 4; i <= n; i++) {\n        f[i]\
    \ = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    }\n    return f[n];", "    assert(n\
    \ >= 0);\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n ==\
    \ 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n\
    \    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 0; i < n - 3; i++) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;", "  long a = 0, b = 0, c = 2, d = 0, e;\n  if (n == 0) return\
    \ a;\n  if (n == 1) return b;\n  if (n == 2) return c;\n  if (n == 3) return d;\n\
    \  for (int i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a = b;\n    b =\
    \ c;\n    c = d;\n    d = e;\n  }\n  return e;", "\tassert(n >= 0);\n\tif (n ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2)\
    \ {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tlong last1 = 2;\n\
    \tlong last2 = 0;\n\tlong last3 = 0;\n\tlong last4 = 0;\n\tlong sum = 2;\n\tfor\
    \ (int i = 4; i <= n; i++) {\n\t\tsum = last1 + last2 + last3 + last4;\n\t\tlast4\
    \ = last3;\n\t\tlast3 = last2;\n\t\tlast2 = last1;\n\t\tlast1 = sum;\n\t}\n\t\
    return sum;", "  // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\
    \ 24 25 26 27 28 29 30\n  // 0 0 2 0 4 8 14 26 44 74 120 196 320 516 836 1352\
    \ 2188 3540 5728 9268 14960 24228 39188\n  // 0 0 2 0 4 8 14 26 44 74 120 196\
    \ 320 516 836 1352 2188 3540 5728 9268 14960 24228 39188\n  // 0 1 2 3 4 5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n  assert(n\
    \ >= 0);\n  if (n <= 2) return n * 2;\n  long a = 0, b = 2, c = 4, d = 8, e =\
    \ 14;\n  for (int i = 5; i <= n; i++) {\n    long temp = a + b + c + d;\n    a\
    \ = b;\n    b = c;\n    c = d;\n    d = e;\n    e = temp;\n  }\n  return e;",
  "  //your code here\n  long a=0,b=0,c=2,d=0,i=3;\n  if(n==0) return 0;\n  if(n==1)\
    \ return 0;\n  if(n==2) return 2;\n  if(n==3) return 0;\n  while(i<=n){\n    d=a+b+c;\n\
    \    a=b;\n    b=c;\n    c=d;\n    i++;\n  }\n  return d;", "\tif (n == 0) {\n\
    \t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\t\
    return 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tlong f1 = 0;\n\tlong f2\
    \ = 0;\n\tlong f3 = 2;\n\tlong f4 = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\t\
    long temp = f4;\n\t\tf4 = f1 + f2 + f3 + f4;\n\t\tf1 = f2;\n\t\tf2 = f3;\n\t\t\
    f3 = temp;\n\t}\n\treturn f4;", "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n ==\
    \ 3) {\n\t\treturn 0;\n\t}\n\tlong f1 = 0;\n\tlong f2 = 0;\n\tlong f3 = 2;\n\t\
    long f4 = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong temp = f4;\n\t\tf4 =\
    \ f1 + f2 + f3 + f4;\n\t\tf1 = f2;\n\t\tf2 = f3;\n\t\tf3 = temp;\n\t}\n\treturn\
    \ f4;", "  long a, b, c, d, e;\n  if (n==0) return 0;\n  else if (n==1) return\
    \ 0;\n  else if (n==2) return 2;\n  else if (n==3) return 0;\n  else {\n    a\
    \ = 0;\n    b = 0;\n    c = 2;\n    d = 0;\n    while (n>3) {\n      e = d;\n\
    \      d = c;\n      c = b;\n      b = a;\n      a = d + c + b + e;\n      n--;\n\
    \    }\n    return a;\n  }", "  assert(n >= 0);\n  if (n == 0) {\n    return 0;\n\
    \  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n    return 2;\n\
    \  } else if (n == 3) {\n    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long\
    \ c = 2;\n  long d = 0;\n  long i = 4;\n  while (i < n) {\n    a = b;\n    b =\
    \ c;\n    c = d;\n    d = a + b + c;\n    i++;\n  }\n  return a + b + c + d;",
  "    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n\
    \    if (n == 3) return 0;\n    long fib4x1 = 0;\n    long fib4x2 = 0;\n    long\
    \ fib4x3 = 2;\n    long fib4x4 = 0;\n    long res = 0;\n    for (int i = 4; i\
    \ <= n; i++) {\n        res = fib4x1 + fib4x2 + fib4x3 + fib4x4;\n        fib4x1\
    \ = fib4x2;\n        fib4x2 = fib4x3;\n        fib4x3 = fib4x4;\n        fib4x4\
    \ = res;\n    }\n    return res;", "  if (n == 0) return 0;\n  if (n == 1) return\
    \ 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);", "    assert(n>=0);\n    std::vector<long> fib(n+1);\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for(int\
    \ i=4; i<=n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\
    \    }\n    return fib[n];", "    // Write your code here\n    long fib[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    if(n\
    \ < 4)\n        return fib[n];\n    for(int i = 4; i <= n; i++)\n        fib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    return fib[n];", "    if (n\
    \ < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 0;\n   \
    \ }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long * A = new long[n+1];\n\
    \    A[0] = 0;\n    A[1] = 0;\n    A[2] = 2;\n    A[3] = 0;\n    for (int i =\
    \ 4; i <= n; i++) {\n        A[i] = A[i-1] + A[i-2] + A[i-3] + A[i-4];\n    }\n\
    \    return A[n];", "  // WRITE YOUR CODE HERE\n  if(n == 0) return 0;\n  if(n\
    \ == 1) return 0;\n  if(n == 2) return 2;\n  if(n == 3) return 0;\n  int fib[n+1];\n\
    \  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 2;\n  fib[3] = 0;\n  for(int i = 4;\
    \ i <= n; i++) {\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n  }\n\
    \  return fib[n];", "    std::vector<long> fib4(n+1);\n    fib4[0] = 0;\n    fib4[1]\
    \ = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n    }\n   \
    \ return fib4[n];", "    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    vector<long>\
    \ v;\n    v.push_back(0);\n    v.push_back(0);\n    v.push_back(2);\n    v.push_back(0);\n\
    \    for (int i = 4; i <= n; i++) {\n        v.push_back(v[i-1] + v[i-2] + v[i-3]\
    \ + v[i-4]);\n    }\n    return v[n];", "    if (n == 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ previous_previous = 0;\n    long previous = 0;\n    long current = 2;\n    for\
    \ (long i = 4; i <= n; i++) {\n        previous_previous = previous;\n       \
    \ previous = current;\n        current = previous_previous + previous + current;\n\
    \    }\n    return current;", "    // your code here\n    // if (n == 0) return\
    \ 0;\n    // if (n == 1) return 0;\n    // if (n == 2) return 2;\n    // if (n\
    \ == 3) return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i\
    \ <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;", "    long i=0,n1=0,n2=2,n3=0,n4=0,x;\n    if(n==0){\n\
    \        return 0;\n    }\n    if(n==1){\n        return 0;\n    }\n    if(n==2){\n\
    \        return 2;\n    }\n    if(n==3){\n        return 0;\n    }\n    for(i=0;i<n-3;i++){\n\
    \        x=n1+n2+n3+n4;\n        n1=n2;\n        n2=n3;\n        n3=n4;\n    \
    \    n4=x;\n    }\n    return n1+n2+n3+n4;", "  long a=0,b=0,c=2,d=0,e=0;\n  for(int\
    \ i=4;i<=n;i++){\n    e=a+b+c+d;\n    a=b;\n    b=c;\n    c=d;\n    d=e;\n  }\n\
    \  return e;", "    if (n==0) {\n        return 0;\n    }\n    if (n==1) {\n \
    \       return 0;\n    }\n    if (n==2) {\n        return 2;\n    }\n    if (n==3)\
    \ {\n        return 0;\n    }\n    int x = 0;\n    int y = 0;\n    int z = 2;\n\
    \    int w = 0;\n    for (int i = 4; i<=n; i++) {\n        int temp = x+y+z+w;\n\
    \        x = y;\n        y = z;\n        z = w;\n        w = temp;\n    }\n  \
    \  return x+y+z+w;", "  long first = 0;\n  long second = 0;\n  long third = 2;\n\
    \  long fourth = 0;\n  long temp = 0;\n  long answer = 0;\n  if (n == 0 || n ==\
    \ 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  for (int i\
    \ = 3; i <= n; i++) {\n    answer = first + second + third + fourth;\n    first\
    \ = second;\n    second = third;\n    third = fourth;\n    fourth = answer;\n\
    \  }\n  return answer;", "  long fib4_seq[n+1];\n  fib4_seq[0] = 0;\n  fib4_seq[1]\
    \ = 0;\n  fib4_seq[2] = 2;\n  fib4_seq[3] = 0;\n  for (long i = 4; i <= n; i++)\
    \ {\n    fib4_seq[i] = fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4];\n\
    \  }\n  return fib4_seq[n];", "    long curr_val, prev1_val, prev2_val, prev3_val;\n\
    \    curr_val = prev1_val = prev2_val = prev3_val = 0;\n    if (n == 0) {\n  \
    \      return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n\
    \ == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n  \
    \  }\n    for (int i = 0; i < n; i++) {\n        curr_val = prev1_val + prev2_val\
    \ + prev3_val;\n        prev3_val = prev2_val;\n        prev2_val = prev1_val;\n\
    \        prev1_val = curr_val;\n    }\n    return curr_val;", "  assert(n >= 0);\n\
    \  std::vector<long> fibo4_seq(4, 0);\n  if (n == 0 || n == 1) return 0;\n  fibo4_seq[0]\
    \ = 0;\n  fibo4_seq[1] = 0;\n  fibo4_seq[2] = 2;\n  fibo4_seq[3] = 0;\n  for (long\
    \ i = 4; i <= n; i++) {\n    auto result = fibo4_seq[3] + fibo4_seq[2] + fibo4_seq[1]\
    \ + fibo4_seq[0];\n    fibo4_seq[0] = fibo4_seq[1];\n    fibo4_seq[1] = fibo4_seq[2];\n\
    \    fibo4_seq[2] = fibo4_seq[3];\n    fibo4_seq[3] = result;\n  }\n  return fibo4_seq[3];",
  "\t// use recursion to compute fib4(n).  Do not use any loops.  Time complexity\
    \ must be O(n)\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn\
    \ 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\
    \t}\n\telse {\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    \t}", "  if (n < 0) return -1;\n  if (n == 0) return 0;\n  if (n == 1) return\
    \ 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n  long n1 = 0, n2 = 0,\
    \ n3 = 2, n4 = 0, res = 0;\n  for (int i = 4; i <= n; i++) {\n    res = n1 + n2\
    \ + n3 + n4;\n    n1 = n2;\n    n2 = n3;\n    n3 = n4;\n    n4 = res;\n  }\n \
    \ return res;", "  assert(n >= 0);\n  if (n < 4) return n;\n  int dp[5];\n  dp[0]\
    \ = dp[1] = dp[2] = 0;\n  dp[3] = 2;\n  for (int i = 4; i <= n; i++) {\n    dp[4]\
    \ = dp[3] + dp[2] + dp[1] + dp[0];\n    dp[0] = dp[1];\n    dp[1] = dp[2];\n \
    \   dp[2] = dp[3];\n    dp[3] = dp[4];\n  }\n  return dp[4];", "    // Write your\
    \ code here!\n    long fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2]\
    \ = 2;\n    fib[3] = 0;\n    for(int i = 4; i <= n; i++)\n        fib[i] = fib[i-1]\
    \ + fib[i-2] + fib[i-3] + fib[i-4];\n    return fib[n];", "  long fib4Num[n+1];\n\
    \  fib4Num[0] = 0;\n  fib4Num[1] = 0;\n  fib4Num[2] = 2;\n  fib4Num[3] = 0;\n\
    \  for (int i = 4; i <= n; i++) {\n    fib4Num[i] = fib4Num[i-1] + fib4Num[i-2]\
    \ + fib4Num[i-3] + fib4Num[i-4];\n  }\n  return fib4Num[n];", "\tlong r1 = 0,\
    \ r2 = 0, r3 = 2, r4 = 0, i = 2;\n\tlong r = 0;\n\twhile (i < n) {\n\t\tr = r1\
    \ + r2 + r3 + r4;\n\t\tr1 = r2;\n\t\tr2 = r3;\n\t\tr3 = r4;\n\t\tr4 = r;\n\t\t\
    i++;\n\t}\n\treturn r;", "    \n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    \n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long ans = 0;\n    \n\
    \    for (int i = 4; i <= n; i++) {\n        ans = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = ans;\n    }\n    \n    return\
    \ ans;", "    long array[] = {0, 0, 2, 0};\n    if (n <= 3) {\n        return\
    \ array[n];\n    }\n    long first = array[0];\n    long second = array[1];\n\
    \    long third = array[2];\n    long fourth = array[3];\n    for (int i = 4;\
    \ i <= n; i++) {\n        first = second;\n        second = third;\n        third\
    \ = fourth;\n        fourth = first + second + third + fourth;\n    }\n    return\
    \ fourth;", "    // Your code here\n    long ans = 0;\n    long a = 0, b = 0,\
    \ c = 2, d = 0;\n    for(int i = 0; i < n; i++){\n        ans = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = ans;\n    }\n   \
    \ return ans;", "\tint* arr = new int[n+1];\n\tarr[0] = 0;\n\tarr[1] = 0;\n\t\
    arr[2] = 2;\n\tarr[3] = 0;\n\tfor(int i = 4; i <= n; i++) {\n\t\tarr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3] + arr[i-4];\n\t}\n\treturn arr[n];", "\tint i;\n\tlong\
    \ fib4[n+1];\n\tfib4[0] = 0;\n\tfib4[1] = 0;\n\tfib4[2] = 2;\n\tfib4[3] = 0;\n\
    \tfor(i=4;i<=n;i++)\n\t\tfib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \treturn fib4[n];", "\tlong i = 1;\n\tlong fib4[n];\n\tfib4[0] = 0;\n\tfib4[1]\
    \ = 0;\n\tfib4[2] = 2;\n\tfib4[3] = 0;\n\tfor (i; i < n; i++) {\n\t\tfib4[i] =\
    \ fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n\t}\n\treturn fib4[n\
    \ - 1];", "    assert(n>=0);\n    long a = 0, b = 0, c = 2, d = 0, e = 0;\n  \
    \  while(n>0){\n        e = d;\n        d = c;\n        c = a + b + c + d;\n \
    \       b = a;\n        a = e;\n        n--;\n    }\n    return a;", "\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tlong i = 4;\n\tlong sum = 0;\n\tlong f1 = 0;\n\tlong f2 = 0;\n\
    \tlong f3 = 2;\n\tlong f4 = 0;\n\twhile (i <= n) {\n\t\tsum = f1 + f2 + f3 + f4;\n\
    \t\tf1 = f2;\n\t\tf2 = f3;\n\t\tf3 = f4;\n\t\tf4 = sum;\n\t\ti++;\n\t}\n\treturn\
    \ sum;", "  assert(n >= 0);\n  long a = 0, b = 0, c = 2, d = 0, e;\n  if (n ==\
    \ 0) return a;\n  if (n == 1) return b;\n  if (n == 2) return c;\n  if (n == 3)\
    \ return d;\n  for (int i = 4; i <= n; i++) {\n    e = a + b + c + d;\n    a =\
    \ b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;", "    assert(n >=\
    \ 0);\n    // put your code here\n    if(n == 0 || n == 1 || n == 3)\n       \
    \ return 0;\n    if(n == 2)\n        return 2;\n    long ans = 0;\n    long f1\
    \ = 0, f2 = 0, f3 = 0, f4 = 2;\n    for(int i = 4; i <= n; i++){\n        ans\
    \ = f1 + f2 + f3 + f4;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n\
    \        f4 = ans;\n    }\n    return ans;", "    if (n <= 0) return 0;\n    long\
    \ a=0, b=0, c=2, d=0, e=0;\n    for (int i=3; i<=n; i++) {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;", "\t// solution:   0,0,2,0,4,8,14,32,50,108,176,378,604,1294,2098,4420,7118,15138,24256,51776,83934,180200,289134,615318,984462,2107080,3391522,7266364,11627876,24982124,39810328,85688268,137508324,292966984,469039996,1006453924,1619493914,3474764140,5564309752,11901187964,18865618704,40439367624,64482826376,138376479840,220865306212,473743775392,751609051508,1615395560784,2576985566920,5538017159848,8816802716704,18914459334536,30081461901248,64494444204992,102573106031744,219910542795456,350685182827776,753982804880752,1199863725059008,2579087778731184,4108451451390208,8844491730568064,14093338482277272,30437235848059648,48531623530336920,104448925803766392,166382339134086656,358698738678575752,575071085761442360,1239183502694848000,1974465153956271360,4252545553955607080,6817008713009838440,14661907827682400960,23477916542683201296,50360025880368981792,80231942303038395904,172076588827495784704,275115723027834169312,591666570129228349440,946181823457312412480,2030669097316620600640,3246845811820336806208,6965255307672723457440",
  "    std::vector<long> curr;\n    curr.push_back(0);\n    curr.push_back(0);\n \
    \   curr.push_back(2);\n    curr.push_back(0);\n    long num = 4;\n    while (num\
    \ <= n) {\n        long x = curr[3] + curr[2] + curr[1] + curr[0];\n        curr[0]\
    \ = curr[1];\n        curr[1] = curr[2];\n        curr[2] = curr[3];\n       \
    \ curr[3] = x;\n        num++;\n    }\n    return curr[3];", "    if (n < 3) return\
    \ n << 1;\n    long a = 2, b = 0, c = 0, d = 1, e;\n    for (long p = 3; p < n;\
    \ p++) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n    }\n    return a + b + c + d;", "    long f4[n+1];\n\
    \    f4[0] = 0;\n    f4[1] = 0;\n    f4[2] = 2;\n    f4[3] = 0;\n    for (int\
    \ i = 4; i <= n; i++) {\n        f4[i] = f4[i-1] + f4[i-2] + f4[i-3] + f4[i-4];\n\
    \    }\n    return f4[n];", "  long fib4_array[1000];\n  fib4_array[0] = 0;\n\
    \  fib4_array[1] = 0;\n  fib4_array[2] = 2;\n  fib4_array[3] = 0;\n  if (n <=\
    \ 3) {\n    return fib4_array[n];\n  }\n  else {\n    for (int i = 4; i <= n;\
    \ i++) {\n      fib4_array[i] = fib4_array[i-1] + fib4_array[i-2] + fib4_array[i-3]\
    \ + fib4_array[i-4];\n    }\n    return fib4_array[n];\n  }", "\tlong prev = 0;\n\
    \tlong curr = 0;\n\tlong prev2 = 0;\n\tlong prev3 = 0;\n\tlong prev4 = 0;\n\t\
    if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\telse {\n\
    \t\tprev = 0;\n\t\tcurr = 0;\n\t\tprev2 = 2;\n\t\tprev3 = 0;\n\t\tprev4 = 0;\n\
    \t\tfor (int i = 4; i <= n; i++) {\n\t\t\tcurr = prev + prev2 + prev3 + prev4;\n\
    \t\t\tprev4 = prev3;\n\t\t\tprev3 = prev2;\n\t\t\tprev2 = prev;\n\t\t\tprev =\
    \ curr;\n\t\t}\n\t\treturn curr;\n\t}", "    if (n <= 2) return n * 2;\n    long\
    \ fib4 = 0, last = 2, second_last = 0, third_last = 0, fourth_last = 0;\n    for\
    \ (long i = 3; i <= n; i++) {\n        fourth_last = third_last;\n        third_last\
    \ = second_last;\n        second_last = last;\n        last = fib4;\n        fib4\
    \ = fourth_last + third_last + second_last + last;\n    }\n    return fib4;",
  "  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if\
    \ (n == 3) return 0;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);",
  "    // your code here.\n    long fib[n+1];\n    fib[0] = 0;\n    fib[1] = 0;\n\
    \    fib[2] = 2;\n    fib[3] = 0;\n    for(int i = 4; i <= n; i++)\n    {\n  \
    \      fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return\
    \ fib[n];", "\tassert(n >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3)\
    \ {\n\t\treturn 0;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 2;\n\tlong d\
    \ = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong next = a + b + c + d;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = next;\n\t}\n\treturn a + b + c + d;",
  "  \n  // fill in the code\n  if(n <= 3)\n    return 0;\n  if(n == 4)\n    return\
    \ 2;\n  long prev_prev_prev = 0;\n  long prev_prev = 0;\n  long prev = 0;\n  long\
    \ curr = 2;\n  long next;\n  for(int i = 5; i <= n; i++) {\n    next = prev_prev_prev\
    \ + prev_prev + prev + curr;\n    prev_prev_prev = prev_prev;\n    prev_prev =\
    \ prev;\n    prev = curr;\n    curr = next;\n  }\n  return next;", "    long x1\
    \ = 0, x2 = 0, x3 = 2, x4 = 0, x5 = 0;\n    long i;\n    if (n == 0) return 0;\n\
    \    else if (n == 1) return 0;\n    else if (n == 2) return 2;\n    else if (n\
    \ == 3) return 0;\n    else if (n == 4) return 2;\n    else {\n        for (i\
    \ = 5; i <= n; i++) {\n            x5 = x1 + x2 + x3 + x4;\n            x1 = x2;\n\
    \            x2 = x3;\n            x3 = x4;\n            x4 = x5;\n        }\n\
    \        return x5;\n    }", "  if (n < 0) return -1;\n  if (n == 0) return 0;\n\
    \  if (n == 1) return 0;\n  if (n == 2) return 2;\n  if (n == 3) return 0;\n \
    \ long f0 = 0;\n  long f1 = 0;\n  long f2 = 2;\n  long f3 = 0;\n  long f4 = 0;\n\
    \  for (int i = 4; i <= n; i++) {\n    f4 = f0 + f1 + f2 + f3;\n    f0 = f1;\n\
    \    f1 = f2;\n    f2 = f3;\n    f3 = f4;\n  }\n  return f4;", "    long a=0,b=0,c=2,d=0,e=0;\n\
    \    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n\
    \        return 2;\n    if(n==3)\n        return 0;\n    for(int i=4;i<=n;i++)\n\
    \    {\n        e=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n       \
    \ d=e;\n    }\n    return e;", "    long* ans = new long[n+1];\n    ans[0] = 0;\n\
    \    ans[1] = 0;\n    ans[2] = 2;\n    ans[3] = 0;\n    for(int i = 4; i < n+1;\
    \ i++) {\n        ans[i] = ans[i-1] + ans[i-2] + ans[i-3] + ans[i-4];\n    }\n\
    \    return ans[n];", "\tif (n <= 3) return 0;\n\tif (n == 4) return 2;\n\tlong\
    \ arr[n];\n\tarr[0] = 0;\n\tarr[1] = 0;\n\tarr[2] = 2;\n\tarr[3] = 0;\n\tfor (int\
    \ i = 4; i < n; i++) {\n\t\tarr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i\
    \ - 4];\n\t}\n\treturn arr[n - 1];", "// Todo\n\tlong nums[10000];\n\tnums[0]\
    \ = 0;\n\tnums[1] = 0;\n\tnums[2] = 2;\n\tnums[3] = 0;\n\tfor (int i = 4; i <=\
    \ n; i++) {\n\t\tnums[i] = nums[i - 1] + nums[i - 2] + nums[i - 3] + nums[i -\
    \ 4];\n\t}\n\treturn nums[n];", "  assert(n >= 0);\n  long a = 0, b = 0, c = 2,\
    \ d = 0, e = 0;\n  for (long i = 3; i <= n; i++) {\n    e = a + b + c + d;\n \
    \   a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n  return e;", "    if (n\
    \ < 0)\n        return -1;\n    if (n == 0)\n        return 0;\n    long a = 0,\
    \ b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
  "    std::vector<long> fib = {0, 0, 2, 0};\n    assert(n >= 0);\n    if (n < fib.size())\
    \ {\n        return fib[n];\n    }\n    for (long i = 4; i <= n; i++) {\n    \
    \    fib.push_back(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]);\n    }\n    return\
    \ fib[n];", "\tstd::vector<long> fib4_vec = {0, 0, 2, 0};\n\tif (n < 4) {\n\t\t\
    return fib4_vec[n];\n\t} else {\n\t\tfor (long i = 4; i <= n; i++) {\n\t\t\tfib4_vec.push_back(fib4_vec[i-1]\
    \ + fib4_vec[i-2] + fib4_vec[i-3] + fib4_vec[i-4]);\n\t\t}\n\t\treturn fib4_vec[n];\n\
    \t}", "  \n  // note n is 0 based\n\n  // Seed with fib4(0) and fib4(1)\n  long\
    \ fib4_nm2 = 0;\n  long fib4_nm1 = 0;\n  long fib4_nm3 = 0;\n  long fib4_nm4 =\
    \ 0;\n  long fib4_n;\n\n  if (n == 0) {\n    return fib4_nm2;\n  }\n  else if\
    \ (n == 1) {\n    return fib4_nm1;\n  }\n  else if (n == 2) {\n    return 2;\n\
    \  }\n  else if (n == 3) {\n    return fib4_nm3;\n  }\n  else {\n    for (int\
    \ i = 4; i <= n; i++) {\n      fib4_n = fib4_nm1 + fib4_nm2 + fib4_nm3 + fib4_nm4;\n\
    \      fib4_nm4 = fib4_nm3;\n      fib4_nm3 = fib4_nm2;\n      fib4_nm2 = fib4_nm1;\n\
    \      fib4_nm1 = fib4_n;\n    }\n    return fib4_n;\n  }", "    long n1=0,n2=0,n3=2,n4=0,res=0;\n\
    \    if(n==0)return 0;\n    if(n==1)return 0;\n    if(n==2)return 2;\n    if(n==3)return\
    \ 0;\n    for(int i=4;i<=n;i++){\n        res=n1+n2+n3+n4;\n        n1=n2;\n \
    \       n2=n3;\n        n3=n4;\n        n4=res;\n    }\n    return res;", "\t\
    assert(n >= 0);\n\tlong *arr = new long[n + 1];\n\tfor (int i = 0; i <= n; i++)\n\
    \t\tarr[i] = 0;\n\tarr[0] = 0;\n\tarr[1] = 0;\n\tarr[2] = 2;\n\tarr[3] = 0;\n\t\
    for (int i = 4; i <= n; i++)\n\t\tarr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3]\
    \ + arr[i - 4];\n\treturn arr[n];", "\tif (n == 0) return 0;\n\tif (n == 1) return\
    \ 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tint arr[n];\n\tarr[0]\
    \ = 0;\n\tarr[1] = 0;\n\tarr[2] = 2;\n\tarr[3] = 0;\n\tfor (int i = 4; i < n;\
    \ i++) {\n\t\tarr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4];\n\t\
    }\n\treturn arr[n - 1];", "\tlong sum = 0;\n\tlong temp1 = 0;\n\tlong temp2 =\
    \ 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tfor (long i = 2; i <= n; i++) {\n\
    \t\tif (i == 2) {\n\t\t\tsum = 2;\n\t\t\ttemp1 = 2;\n\t\t}\n\t\telse if (i ==\
    \ 3) {\n\t\t\tsum = 0;\n\t\t\ttemp2 = 0;\n\t\t}\n\t\telse if (i == 4) {\n\t\t\t\
    sum = 0;\n\t\t\ttemp3 = 0;\n\t\t}\n\t\telse {\n\t\t\ttemp4 = sum;\n\t\t\tsum =\
    \ sum + temp1 + temp2 + temp3;\n\t\t\ttemp1 = temp2;\n\t\t\ttemp2 = temp3;\n\t\
    \t\ttemp3 = temp4;\n\t\t}\n\t}\n\treturn sum;", "    long fib[n+1];\n    fib[0]\
    \ = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for (int i = 4;\
    \ i <= n; i++)\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\
    \    return fib[n];", "    long fib3=0,fib2=0,fib1=2,fib0=0;\n    for(int i=4;i<=n;i++){\n\
    \        fib3=fib2;\n        fib2=fib1;\n        fib1=fib0;\n        fib0=fib1+fib2+fib3+fib4;\n\
    \    }\n    return fib0;", "    assert(n >= 0);\n    if (n <= 3) return n == 2;\n\
    \    long a[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        long\
    \ b = a[0] + a[1] + a[2] + a[3];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = a[3];\n        a[3] = b;\n    }\n    return a[3];", "    if (n\
    \ <= 1) {\n        return 0;\n    }\n    else if (n == 2) {\n        return 2;\n\
    \    }\n    long current = 0;\n    long first = 0;\n    long second = 0;\n   \
    \ long third = 0;\n    long fourth = 0;\n    for (long i = 3; i <= n; i++) {\n\
    \        current = first + second + third + fourth;\n        first = second;\n\
    \        second = third;\n        third = fourth;\n        fourth = current;\n\
    \    }\n    return current;", "    assert(n >= 0);\n    if (n == 0) {\n      \
    \  return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n ==\
    \ 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n\
    \    long f_1 = 0;\n    long f_2 = 0;\n    long f_3 = 2;\n    long f_4 = 0;\n\
    \    long fib;\n    for (int i = 4; i <= n; i++) {\n        fib = f_1 + f_2 +\
    \ f_3 + f_4;\n        f_1 = f_2;\n        f_2 = f_3;\n        f_3 = f_4;\n   \
    \     f_4 = fib;\n    }\n    return fib;", "  assert(n >= 0);\n  if (n == 0) {\n\
    \    return 0;\n  } else if (n == 1) {\n    return 0;\n  } else if (n == 2) {\n\
    \    return 2;\n  } else if (n == 3) {\n    return 0;\n  } else {\n    long ans\
    \ = 0;\n    long last = 2;\n    long last_2 = 0;\n    long last_3 = 0;\n    long\
    \ last_4 = 0;\n    for (int i = 4; i <= n; i++) {\n      ans = last + last_2 +\
    \ last_3 + last_4;\n      last_4 = last_3;\n      last_3 = last_2;\n      last_2\
    \ = last;\n      last = ans;\n    }\n    return ans;\n  }", "    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    vector<long> fib4_values = {0, 0, 2, 0};\n    long result = 2;\n   \
    \ for (int i = 4; i <= n; i++) {\n        result = fib4_values[0] + fib4_values[1]\
    \ + fib4_values[2] + fib4_values[3];\n        fib4_values[0] = fib4_values[1];\n\
    \        fib4_values[1] = fib4_values[2];\n        fib4_values[2] = fib4_values[3];\n\
    \        fib4_values[3] = result;\n    }\n    return result;", "    long a = 0,\
    \ b = 0, c = 2, d = 0, e;\n    if (n == 0)\n        return a;\n    else if (n\
    \ == 1)\n        return b;\n    else if (n == 2)\n        return c;\n    else\
    \ if (n == 3)\n        return d;\n    for (int i = 4; i <= n; i++) {\n       \
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    return e;", "    long a1 = 0, a2 = 0, a3 = 2, a4 = 0, a5\
    \ = 0;\n    if (n == 0) return 0;\n    else if (n == 1) return 0;\n    else if\
    \ (n == 2) return 2;\n    else if (n == 3) return 0;\n    else {\n        for\
    \ (int i = 4; i <= n; i++) {\n            a5 = a1 + a2 + a3 + a4;\n          \
    \  a1 = a2;\n            a2 = a3;\n            a3 = a4;\n            a4 = a5;\n\
    \        }\n        return a5;\n    }", "    if (n == 0) return 0;\n    if (n\
    \ == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long\
    \ a = 1, b = 2, c = 0, d = 0;\n    for (int i = 4; i <= n; i++) {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;", "    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n   \
    \ if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n\
    \    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        long tmp = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = tmp;\n    }\n    return a + b + c + d;", "    // Your code\
    \ here\n    if(n==0 || n==1)\n        return 0;\n    if(n==2)\n        return\
    \ 2;\n    long a=0,b=0,c=2,d=0;\n    for(int i=3;i<=n;i++)\n    {\n        d=a+b+c;\n\
    \        a=b;\n        b=c;\n        c=d;\n    }\n    return d;", "  // assert(n>=0);\n\
    \  long x = 0;\n  long y = 0;\n  long z = 2;\n  long w = 0;\n  if (n == 0) {\n\
    \    return x;\n  }\n  if (n == 1) {\n    return y;\n  }\n  if (n == 2) {\n  \
    \  return z;\n  }\n  if (n == 3) {\n    return w;\n  }\n  //long start = (System.currentTimeMillis());\n\
    \  for (long i = 3; i < n; i++) {\n    w = x + y + z + w;\n    x = y;\n    y =\
    \ z;\n    z = w;\n  }\n  //long end = (System.currentTimeMillis());\n  //std::cout\
    \ << \"fib4 \" << n << \" - \" << (end - start) << \" ms\" << '\\n';\n  return\
    \ w;", "    if (n < 4) return (n-1)*2;\n    std::vector<long> a = {0, 0, 2, 0};\n\
    \    for (int i = 4; i <= n; i++) {\n        a.push_back(a[i-1] + a[i-2] + a[i-3]\
    \ + a[i-4]);\n    }\n    return a[n];", "    long fib4_0 = 0;\n    long fib4_1\
    \ = 0;\n    long fib4_2 = 2;\n    long fib4_3 = 0;\n    long result = 0;\n   \
    \ if (n == 0) {\n        return fib4_0;\n    }\n    if (n == 1) {\n        return\
    \ fib4_1;\n    }\n    if (n == 2) {\n        return fib4_2;\n    }\n    if (n\
    \ == 3) {\n        return fib4_3;\n    }\n    for (int i = 4; i <= n; i++) {\n\
    \        result = fib4_0 + fib4_1 + fib4_2 + fib4_3;\n        fib4_0 = fib4_1;\n\
    \        fib4_1 = fib4_2;\n        fib4_2 = fib4_3;\n        fib4_3 = result;\n\
    \    }\n    return result;", "  if (n < 0) {\n    return -1;\n  }\n  if (n ==\
    \ 0) {\n    return 0;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long\
    \ d = 0;\n  long tmp;\n  for (int i = 3; i <= n; i++) {\n    tmp = d;\n    d =\
    \ a + b + c + d;\n    a = b;\n    b = c;\n    c = tmp;\n  }\n  return d;", "\t\
    if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n\
    \ == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tlong n1\
    \ = 0;\n\tlong n2 = 0;\n\tlong n3 = 2;\n\tlong n4 = 0;\n\tlong n5 = 0;\n\tfor\
    \ (int i = 4; i <= n; i++) {\n\t\tn5 = n1 + n2 + n3 + n4;\n\t\tn1 = n2;\n\t\t\
    n2 = n3;\n\t\tn3 = n4;\n\t\tn4 = n5;\n\t}\n\treturn n5;", "  assert(n >= 0);\n\
    \  if (n < 4) {\n    return std::max(n - 1, 0l);\n  }\n  std::vector<long> v(4);\n\
    \  v[0] = 0;\n  v[1] = 0;\n  v[2] = 2;\n  v[3] = 0;\n  for (long i = 4; i <= n;\
    \ i++) {\n    long next = v[0] + v[1] + v[2] + v[3];\n    v[0] = v[1];\n    v[1]\
    \ = v[2];\n    v[2] = v[3];\n    v[3] = next;\n  }\n  return v[3];", "\tlong one\
    \ = 1;\n\tlong two = 2;\n\tlong four = 4;\n\tlong five = 5;\n\tif (n == one) {\n\
    \t\treturn 0;\n\t}\n\tif (n == two) {\n\t\treturn two;\n\t}\n\tif (n == four)\
    \ {\n\t\treturn two;\n\t}\n\tif (n == five) {\n\t\treturn four;\n\t}\n\tlong*\
    \ a = new long[n];\n\ta[0] = 0;\n\ta[1] = 0;\n\ta[2] = 2;\n\ta[3] = 0;\n\ta[4]\
    \ = 2;\n\ta[5] = 4;\n\tfor (long i = 6; i < n; i++) {\n\t\ta[i] = a[i - 1] + a[i\
    \ - 2] + a[i - 3] + a[i - 4];\n\t}\n\treturn a[n - 1];", "    // Your code here!\n\
    \    long* fib_numbers = new long[n + 1];\n    fib_numbers[0] = 0;\n    fib_numbers[1]\
    \ = 0;\n    fib_numbers[2] = 2;\n    fib_numbers[3] = 0;\n    for (int i = 4;\
    \ i <= n; i++) {\n        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i\
    \ - 2] + fib_numbers[i - 3] + fib_numbers[i - 4];\n    }\n    return fib_numbers[n];",
  "    if (n == 0) {\n        return 0;\n    }\n    else if (n == 1) {\n        return\
    \ 0;\n    }\n    else if (n == 2) {\n        return 2;\n    }\n    else if (n\
    \ == 3) {\n        return 0;\n    }\n    long temp;\n    long fib0 = 0;\n    long\
    \ fib1 = 0;\n    long fib2 = 2;\n    long fib3 = 0;\n    long fib4 = 0;\n    for\
    \ (int i = 4; i <= n; i++) {\n        temp = fib0 + fib1 + fib2 + fib3;\n    \
    \    fib0 = fib1;\n        fib1 = fib2;\n        fib2 = fib3;\n        fib3 =\
    \ temp;\n    }\n    return temp;", "    if (n == 0) {\n        return 0;\n   \
    \ }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n  \
    \  long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n;\
    \ i++) {\n        long e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return a + b + c + d;", "    // WRITE\
    \ YOUR CODE HERE\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n\
    \        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n\
    \ == 3){\n        return 0;\n    }\n    long arr[n+1];\n    arr[0] = 0;\n    arr[1]\
    \ = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i <= n; i++){\n \
    \       arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return\
    \ arr[n];", "  if (n == 0) {\n    return 0;\n  } else if (n == 1) {\n    return\
    \ 0;\n  } else if (n == 2) {\n    return 2;\n  } else if (n == 3) {\n    return\
    \ 0;\n  } else {\n    long n_minus_1 = 0;\n    long n_minus_2 = 0;\n    long n_minus_3\
    \ = 2;\n    long n_minus_4 = 0;\n    long result = 0;\n    for (int i = 4; i <=\
    \ n; i++) {\n      result = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4;\n \
    \     n_minus_4 = n_minus_3;\n      n_minus_3 = n_minus_2;\n      n_minus_2 =\
    \ n_minus_1;\n      n_minus_1 = result;\n    }\n    return result;\n  }", "  assert(n\
    \ >= 0);\n  if (n < 4) {\n    return n;\n  }\n  long a = 0;\n  long b = 0;\n \
    \ long c = 2;\n  long d = 0;\n  for (long i = 4; i <= n; i++) {\n    long new_d\
    \ = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = new_d;\n  }\n\
    \  return d;", "  // your code here\n  if(n<=1)\n    return 0;\n  else if(n==2)\n\
    \    return 2;\n  else if(n==3)\n    return 0;\n  else\n  {\n    long n1=0,n2=0,n3=2,n4=0,res=0;\n\
    \    for(int i=4;i<=n;i++)\n    {\n      res=n1+n2+n3+n4;\n      n1=n2;\n    \
    \  n2=n3;\n      n3=n4;\n      n4=res;\n    }\n    return res;\n  }", "\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n ==\
    \ 3) return 0;\n\tif (n == 4) return 4;\n\tlong n_1 = 0;\n\tlong n_2 = 0;\n\t\
    long n_3 = 2;\n\tlong n_4 = 4;\n\tlong n_n = 0;\n\tfor (int i = 5; i <= n; i++)\
    \ {\n\t\tn_n = n_1 + n_2 + n_3 + n_4;\n\t\tn_1 = n_2;\n\t\tn_2 = n_3;\n\t\tn_3\
    \ = n_4;\n\t\tn_4 = n_n;\n\t}\n\treturn n_n;", "  if (n < 3) {\n    return 2 *\
    \ n;\n  }\n  long i = 2;\n  long a = 0;\n  long b = 0;\n  long c = 2;\n  long\
    \ d = 2;\n  while (i < n) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b\
    \ + c;\n    i++;\n  }\n  return d;", "    if (n==0 || n==1 || n==3) return 0;\n\
    \    if (n==2) return 2;\n    long a=0, b=0, c=2, d=0;\n    while (n>4) {\n  \
    \      d = a+b+c;\n        a = b;\n        b = c;\n        c = d;\n        n--;\n\
    \    }\n    return d;", "  if (n < 4) {\n    return 2 * n;\n  }\n  long a = 2;\n\
    \  long b = 0;\n  long c = 2;\n  long d = 0;\n  long e = 2;\n  long f = 0;\n \
    \ long g = 2;\n  long h = 0;\n  long count = 4;\n  while (count < n) {\n    long\
    \ a_ = b + c + d + e;\n    long b_ = a;\n    long c_ = b + c + d + e;\n    long\
    \ d_ = a;\n    long e_ = b + c + d + e;\n    long f_ = a;\n    long g_ = b + c\
    \ + d + e;\n    long h_ = a;\n    a = a_;\n    b = b_;\n    c = c_;\n    d = d_;\n\
    \    e = e_;\n    f = f_;\n    g = g_;\n    h = h_;\n    count++;\n  }\n  return\
    \ g;", "\tlong i, arr[3] = { 0, 0, 2 };\n\tfor (i = 4; i <= n; i++) {\n\t\tarr[i\
    \ % 3] = arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i - 3) % 3] + arr[(i - 4)\
    \ % 3];\n\t}\n\treturn arr[n % 3];", "\t// n=0 ---> 0\n\t// n=1 ---> 0\n\t// n=2\
    \ ---> 2\n\t// n=3 ---> 0\n\t// n=4 ---> 5\n\t// n=5 ---> 4\n\t// n=6 ---> 8\n\
    \t// n=7 ---> 14\n\t// n=8 ---> 25\n\t// n=9 ---> 44\n\t// n=10 ---> 77\n\t//\
    \ n=11 ---> 132\n\t// n=12 ---> 231\n\tlong a = 0;\n\tlong b = 0;\n\tlong c =\
    \ 2;\n\tlong d = 0;\n\tlong temp;\n\tfor (int i = 2; i < n; i++) {\n\t\ttemp =\
    \ d;\n\t\td = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = temp;\n\t}\n\treturn\
    \ d;", "    long * arr = new long[n+1];\n    arr[0] = 0;\n    arr[1] = 0;\n  \
    \  arr[2] = 2;\n    arr[3] = 0;\n    if (n <= 3) {\n        return arr[n];\n \
    \   }\n    for (int i = 4; i <= n; i++) {\n        arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i-3] + arr[i-4];\n    }\n    return arr[n];", "    long f[n+1];\n    int\
    \ i;\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (i =\
    \ 4; i <= n; i++)\n    {\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n\
    \    }\n    return f[n];", "    long arr[n+1];\n    arr[0] = 0;\n    arr[1] =\
    \ 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i <= n; i++) {\n  \
    \      arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return\
    \ arr[n];", "\tif (n <= 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return\
    \ 2;\n\tif (n == 3) return 0;\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);", "  long a = 0, b = 0, c = 2, d = 0, temp = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    temp = a;\n    a = b;\n    b = c;\n    c = d;\n    d\
    \ = b + c + temp;\n  }\n  return a;", "    if (n == 0 || n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n\
    \        return 0;\n    } else {\n        long a = 0;\n        long b = 0;\n \
    \       long c = 2;\n        long d = 0;\n        for (int i = 3; i < n; i++)\
    \ {\n            a = b;\n            b = c;\n            c = d;\n            d\
    \ = a + b + c;\n        }\n        return d;\n    }", "    long prev1 = 2;\n \
    \   long prev2 = 1;\n    long prev3 = 1;\n    long curr = 0;\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n \
    \   if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return\
    \ 0;\n    }\n    for (int i = 4; i <= n; i++) {\n        curr = prev1 + prev2\
    \ + prev3;\n        prev3 = prev2;\n        prev2 = prev1;\n        prev1 = curr;\n\
    \    }\n    return curr;", "    long nums[n+1];\n    nums[0] = 0;\n    nums[1]\
    \ = 0;\n    nums[2] = 2;\n    nums[3] = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        nums[i] = nums[i-1] + nums[i-2] + nums[i-3] + nums[i-4];\n    }\n   \
    \ return nums[n];", "    long a = 0, b = 0, c = 2, d = 0, e = 0;\n    if (n <=\
    \ 3) {\n        return 0;\n    }\n    for (int i = 4; i <= n; i++) {\n       \
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    return e;", "    // Your code here\n    long arr[n+1];\n\
    \    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int\
    \ i = 4; i <= n; i++){\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n\
    \    }\n    return arr[n];", "    if (n == 0) {\n        return 0;\n    } else\
    \ if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n\
    \    } else if (n == 3) {\n        return 0;\n    } else {\n        return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    }", "    if (n == 0) {\n        return\
    \ 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n\
    \        return 2;\n    } else if (n == 3) {\n        return 0;\n    } else {\n\
    \        long a = 0;\n        long b = 0;\n        long c = 2;\n        long d\
    \ = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = a + b\
    \ + c + d;\n            a = b;\n            b = c;\n            c = d;\n     \
    \       d = temp;\n        }\n        return a + b + c + d;\n    }", "    if (n\
    \ < 0) return -1;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if\
    \ (n == 2) return 2;\n    if (n == 3) return 0;\n    if (n == 4) return 2;\n \
    \   long x = 2;\n    long y = 0;\n    long z = 2;\n    long t = 4;\n    for (int\
    \ i = 5; i <= n; i++) {\n        long newy = y;\n        long newz = z;\n    \
    \    y = x;\n        z = t;\n        x = newy;\n        t = newz + y + z + x;\n\
    \    }\n    return t;", "\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\t\
    if (n == 2) return 2;\n\tif (n == 3) return 0;\n\t\n\tlong p = 0;\n\tlong q =\
    \ 0;\n\tlong r = 2;\n\tlong s = 0;\n\tlong i = 4;\n\twhile (i <= n) {\n\t\tlong\
    \ t = s;\n\t\ts = p + q + r + s;\n\t\tp = q;\n\t\tq = r;\n\t\tr = t;\n\t\ti +=\
    \ 1;\n\t}\n\treturn s;", "  // C++11 style arrays.\n  const long length = 4;\n\
    \  long arr[length] = {0, 0, 2, 0};\n  if (n < length) {\n    return arr[n];\n\
    \  }\n\n  for (long i = length; i <= n; i++) {\n    arr[i % length] = arr[(i -\
    \ 1) % length] + arr[(i - 2) % length] + arr[(i - 3) % length] + arr[(i - 4) %\
    \ length];\n  }\n  return arr[n % length];", "  long a[4] = {0,0,2,0};\n  long*\
    \ temp = a;\n  long* temp2 = a;\n  for(int i = 0; i < 4; i++){\n    temp = temp\
    \ + 1;\n  }\n  if(n < 4){\n    return a[n];\n  }\n  temp2 = temp2 + 3;\n  for(int\
    \ i = 4; i < n; i++){\n    long result = 0;\n    for(int j = 0; j < 4; j++){\n\
    \      result = result + *temp2;\n      temp2 = temp2 + 1;\n    }\n    *temp =\
    \ result;\n    temp = temp + 1;\n    temp2 = temp2 - 3;\n  }\n  return *temp2;"]
stop_tokens:
- "\n}"
