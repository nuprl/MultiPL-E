name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"\
  xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong\
  \ count_distinct_characters(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    // Your code goes here\n    long count = 0;\n    for(long i = 0;\
    \ i < string.length(); i++){\n        int flag = 0;\n        for(long j = 0; j\
    \ < i; j++){\n            if(string[i] == string[j]){\n                flag =\
    \ 1;\n                break;\n            }\n        }\n        if(flag == 0){\n\
    \            count++;\n        }\n    }\n    return count;", "    // declare variables\n\
    \    std::set<char> set;\n    std::string string2;\n    long n;\n    // loop to\
    \ put characters into the set\n    for (int i = 0; i < string.length(); i++) {\n\
    \        set.insert(string[i]);\n    }\n    // loop to put characters from set\
    \ into string2\n    for (auto it = set.begin(); it != set.end(); it++) {\n   \
    \     string2 += *it;\n    }\n    // store length of string2 into n\n    n = string2.length();\n\
    \    // return n\n    return n;", "\tint count = 0;\n\tstd::string::iterator it;\n\
    \tstd::set<char> set;\n\tstd::set<char>::iterator it1;\n\tfor (it = string.begin();\
    \ it != string.end(); it++) {\n\t\tset.insert(*it);\n\t}\n\tfor (it1 = set.begin();\
    \ it1 != set.end(); it1++) {\n\t\tcount++;\n\t}\n\treturn count;", "  std::string\
    \ my_string = string;\n  std::unordered_set<char> char_set;\n  for (std::string::iterator\
    \ it = my_string.begin(); it != my_string.end(); it++) {\n    char_set.insert(*it);\n\
    \  }\n  return char_set.size();", "\tlong count = 0;\n\tstd::set<char>s;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\ts.insert(string[i]);\n\t}\n\tfor\
    \ (auto i = s.begin(); i != s.end(); i++) {\n\t\tcount++;\n\t}\n\treturn count;\n\
    \t// remove this code", "    int len = string.length();\n    int count = 0;\n\
    \    int list[len];\n    for(int i = 0; i < len; i++) {\n        list[i] = string[i];\n\
    \    }\n    for(int i = 0; i < len; i++) {\n        for(int j = i + 1; j < len;\
    \ j++) {\n            if(list[i] == list[j]) {\n                list[j] = -1;\n\
    \            }\n        }\n    }\n    for(int i = 0; i < len; i++) {\n       \
    \ if(list[i] != -1) {\n            count++;\n        }\n    }\n    return count;",
  "\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\t\
    std::unordered_set<char> distinctCharSet;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tdistinctCharSet.insert(string[i]);\n\t}\n\treturn distinctCharSet.size();",
  "    std::set<char> chars(string.begin(), string.end());\n    return chars.size();",
  "    long count = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> distinct_chars;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        distinct_chars.insert(string[i]);\n    }\n    return distinct_chars.size();",
  "    long ans = 0;\n    for(int i = 0; i < string.length(); i++) {\n        std::string\
    \ temp = string.substr(i, 1);\n        if(string.find(temp, i + 1) == std::string::npos)\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;", "  // write your\
    \ code here...\n  long ret = string.length();\n  for(int i = 0; i < string.length();\
    \ i++){\n    for(int j = i+1; j < string.length(); j++){\n      if(string[i] ==\
    \ string[j]){\n        ret--;\n        break;\n      }\n    }\n  }\n  return ret;",
  "  // your code here\n  long i;\n  long count=0;\n  for(i=0;i<string.length();i++)\n\
    \  {\n    if(!(string[i]==' '))\n    {\n      if(string[i]>=65 && string[i]<=90)\n\
    \      {\n        string[i]=string[i]+32;\n      }\n      string[i+1]=string[i];\n\
    \      string[i]=' ';\n      count++;\n    }\n  }\n  return count;", "\t//create\
    \ a set\n\tstd::set<char> set;\n\t//check the length of the string\n\tif(string.length()\
    \ == 0)\n\t\treturn 0;\n\t//insert each character in the set\n\tfor(char c : string)\n\
    \t\tset.insert(c);\n\t//return the size of the set\n\treturn set.size();", " \
    \   // YOUR CODE GOES HERE\n    set<char> distinct_characters;\n    for(char ch:\
    \ string){\n        if(isalpha(ch)){\n            distinct_characters.insert(tolower(ch));\n\
    \        }\n    }\n    return distinct_characters.size();", "  // Your code goes\
    \ here\n  int len = string.length();\n  set<char> myset;\n  for(int i=0;i<len;i++){\n\
    \    myset.insert(string[i]);\n  }\n  return myset.size();", "    std::set<char>\
    \ distinct_char;\n    for (int i = 0; i < string.length(); i++) {\n        distinct_char.insert(string[i]);\n\
    \    }\n    return distinct_char.size();", "    // Implement me!\n    long count\
    \ = 0;\n    std::vector<char> v;\n    for(int i = 0; i < string.length(); i++){\n\
    \        bool isDistinct = true;\n        for(int j = 0; j < v.size(); j++){\n\
    \            if(tolower(string[i]) == tolower(v[j])){\n                isDistinct\
    \ = false;\n                break;\n            }\n        }\n        if(isDistinct){\n\
    \            v.push_back(string[i]);\n            count++;\n        }\n    }\n\
    \    return count;", "  for(int i=0;i<string.length();i++){\n    string[i]=tolower(string[i]);\n\
    \  }\n  std::sort(string.begin(),string.end());\n  std::set<char> s;\n  for(int\
    \ i=0;i<string.length();i++){\n    s.insert(string[i]);\n  }\n  long n=s.size();\n\
    \  return n;", "    long c=0;\n    int l=string.length();\n    unordered_set<char>\
    \ set;\n    // your code here\n    for(int i=0;i<l;i++)\n    {\n        set.insert(tolower(string[i]));\n\
    \    }\n    c=set.size();\n    return c;", "    long count = 0;\n    std::map<char,\
    \ int> countMap;\n    for (int i = 0; i < string.length(); i++) {\n        char\
    \ c = string[i];\n        countMap[c] = 1;\n    }\n    return countMap.size();",
  "    long count = 0;\n    for(int i = 0; i < string.length(); i++){\n        char\
    \ a = string[i];\n        int flag = 0;\n        for(int j = 0; j < i; j++){\n\
    \            if(a == string[j]){\n                flag = 1;\n                break;\n\
    \            }\n        }\n        if(flag == 0){\n            count++;\n    \
    \    }\n    }\n    return count;", "\tstd::sort(string.begin(), string.end());\n\
    \tstring.erase(std::unique(string.begin(), string.end()), string.end());\n\treturn\
    \ string.length();", "\tlong distinct_char_count = 0;\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::sort(string.begin(), string.end());\n\
    \tfor (std::string::iterator iterator = string.begin(); iterator != string.end();\
    \ ++iterator) {\n\t\tif (*iterator != *(iterator + 1))\n\t\t\tdistinct_char_count++;\n\
    \t}\n\treturn distinct_char_count;", "    long no_of_distinct_characters = 0;\n\
    \    for(int i = 0;i < string.size();++i) {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            string[i] = string[i] - 'a' + 'A';\n        }\n    }\n\
    \    std::sort(string.begin(),string.end());\n    for(int i = 0;i < string.size();++i)\
    \ {\n        if(i == 0 || string[i] != string[i - 1]) {\n            ++no_of_distinct_characters;\n\
    \        }\n    }\n    return no_of_distinct_characters;", "  // your code here\n\
    \   long n = string.length();\n  long count = 0;\n  long i;\n  sort(string.begin(),\
    \ string.end());\n  for (i = 0; i < n; i++) {\n    if (string[i] != string[i +\
    \ 1])\n      count++;\n  }\n  return count;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::string distinct_string;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        std::string current_char\
    \ = string.substr(i, 1);\n        std::size_t found = distinct_string.find(current_char);\n\
    \        if (found == std::string::npos) {\n            distinct_string.append(current_char);\n\
    \        }\n    }\n    return distinct_string.length();", "long count = 0;\nfor(int\
    \ i = 0; i < string.length(); i++) {\n        std::string temp = string.substr(i,\
    \ 1);\n        if(temp.find(string[i]) == std::string::npos)\n            count++;\n\
    \    }\nreturn count;", "  std::set<char> s;\n  for(char c : string) {\n    s.insert(tolower(c));\n\
    \  }\n  return s.size();", "    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        for(int j = i + 1; j < string.length(); j++){\n            if(string[i]\
    \ == string[j]){\n                string.erase(j, 1);\n                j--;\n\
    \            }\n        }\n    }\n    count = string.length();\n    return count;",
  "\tlong count = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (count_if(string.begin(),\
    \ string.end(), [&](char c) {\n\t\t\treturn toupper(c) == toupper(string[i]);\n\
    \t\t}) == 1)\n\t\t\tcount++;\n\t}\n\treturn count;", "\tlong distinct_characters\
    \ = 0;\n\tstring.erase(remove(string.begin(), string.end(), ' '), string.end());\
    \ //remove spaces\n\tlong alphabet[26];\n\tfor (int i = 0; i < 26; i++) {\n\t\t\
    alphabet[i] = 0;\n\t}\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar\
    \ ch = string[i];\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tif (alphabet[ch -\
    \ 'a'] == 0) {\n\t\t\t\talphabet[ch - 'a'] = 1;\n\t\t\t\tdistinct_characters++;\n\
    \t\t\t}\n\t\t}\n\t\telse if (ch >= 'A' && ch <= 'Z') {\n\t\t\tif (alphabet[ch\
    \ - 'A'] == 0) {\n\t\t\t\talphabet[ch - 'A'] = 1;\n\t\t\t\tdistinct_characters++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn distinct_characters;", "  // Write your code here\n\
    \  int n = string.length();\n  long count=0;\n  int arr[26]={0};\n  for(int i=0;i<n;i++)\n\
    \  {\n    if(string[i]>='a' && string[i]<='z')\n    {\n      arr[string[i]-'a']++;\n\
    \    }\n    else if(string[i]>='A' && string[i]<='Z')\n    {\n      arr[string[i]-'A']++;\n\
    \    }\n  }\n  for(int i=0;i<26;i++)\n  {\n    if(arr[i]>0)\n    {\n      count++;\n\
    \    }\n  }\n  return count;", "    std::vector<char> str_to_char(string.begin(),\
    \ string.end());\n    std::set<char> st;\n    for (int i = 0; i < str_to_char.size();\
    \ i++) {\n        st.insert(str_to_char[i]);\n    }\n    return st.size();", " \
    \   long c = 0;\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::sort(string.begin(), string.end());\n    for (long i =\
    \ 0; i < string.length(); i++) {\n        if (string[i] != string[i + 1]) {\n\
    \            c++;\n        }\n    }\n    return c;", "    int count = 0;\n   \
    \ std::string s = \"\";\n    for(int i = 0; i < string.length(); i++){\n     \
    \   if(s.find(tolower(string[i])) == std::string::npos){\n            s += tolower(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;", "\tstd::set<char>\
    \ chars;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchars.insert(tolower(string[i]));\n\
    \t}\n\treturn chars.size();", "    long distinct_chars = 0;\n    //*******************************************\n\
    \    //*********Your code goes here**********\n    //*******************************************\n\
    \    return distinct_chars;", "  \t//replace with your solution\n\tlong size =\
    \ string.size();\n\tlong distinct = 0;\n\tlong i = 0;\n\tfor(i=0;i<size;i++){\n\
    \t\tchar t = string[i];\n\t\tlong j = 0;\n\t\tlong check = 0;\n\t\tfor(j=0;j<i;j++){\n\
    \t\t\tif(t==string[j]){\n\t\t\t\tcheck = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    \tif(check==0){\n\t\t\tdistinct++;\n\t\t}\n\t}\n\treturn distinct;", "    long\
    \ count = 0;\n    string = string + '0';\n    // Write your code here\n    //\
    \ To print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    sort(string.begin(), string.end());\n  \
    \  for(int i = 0; i < string.length() - 1; i++) {\n        if(string[i] != string[i\
    \ + 1])\n            count++;\n    }\n    return count;", "\tint str_len = string.length();\n\
    \tstd::string lower_string = \"\";\n\tfor (int i = 0; i < str_len; i++) {\n\t\t\
    char ch = string[i];\n\t\tlower_string += std::tolower(ch);\n\t}\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < str_len; i++) {\n\t\tchar ch = lower_string[i];\n\
    \t\tif (lower_string.find(ch) == i) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
  '  return (long)std::set<char>(string.begin(), string.end()).size();', "    std::vector<char>\
    \ v(string.begin(), string.end());\n    std::sort(v.begin(), v.end());\n    std::vector<char>\
    \ v1(v.begin(), std::unique(v.begin(), v.end()));\n    return v1.size();", "\t\
    return string.length();", "    long ans=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> data(string.begin(),\
    \ string.end());\n    return data.size();", "    long count = 0;\n    std::set<char>\
    \ char_set;\n    std::string string_lower(string);\n    std::transform(string_lower.begin(),\
    \ string_lower.end(), string_lower.begin(), ::tolower);\n    for (char& c : string_lower)\
    \ {\n        if (char_set.find(c) == char_set.end()) {\n            char_set.insert(c);\n\
    \            count++;\n        }\n    }\n    return count;", "\treturn std::set<char>(string.begin(),\
    \ string.end()).size();", "    int length = string.length();\n    long ans = 0;\n\
    \    std::vector<int> temp(26, 0);\n    for(int i = 0; i < length; i++) {\n  \
    \      int index = tolower(string[i]) - 'a';\n        if(temp[index] == 0) {\n\
    \            ans++;\n            temp[index] = 1;\n        }\n    }\n    return\
    \ ans;", "    std::unordered_set<int> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "  long length =\
    \ string.length();\n  unordered_set<char> distinct_chars;\n  for (long i = 0;\
    \ i < length; i++) {\n    if (distinct_chars.find(tolower(string[i])) == distinct_chars.end())\
    \ {\n      distinct_chars.insert(tolower(string[i]));\n    }\n  }\n  return distinct_chars.size();",
  "long count;\nstring temp;\ntemp= string;\n \n    for (long i = 0; i < string.length();\
    \ i++) {\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i]\
    \ = string[i] + 32;\n        }\n    }\n \n    for (long i = 0; i < string.length();\
    \ i++) {\n        for (long j = i + 1; j < string.length();) {\n            if\
    \ (string[j] == string[i]) {\n                string.erase(string.begin() + j);\n\
    \            } else {\n                j++;\n            }\n        }\n    }\n\
    \ \n    count = string.length();\n \n    return count;", "    int len = string.length();\n\
    \    set<char> s;\n    for(int i=0;i<len;i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "  // int count = 0;\n  // bool check = true;\n\
    \  // std::set<char> set;\n  // for(std::string::iterator it = string.begin();\
    \ it != string.end(); it++){\n  //   if(set.find(*it) == set.end()){\n  //   \
    \  count++;\n  //     set.insert(*it);\n  //   }\n  // }\n  // return count;\n\
    \  int count = 0;\n  bool check = true;\n  for(std::string::iterator it = string.begin();\
    \ it != string.end(); it++){\n    for(std::string::iterator jt = string.begin();\
    \ jt != string.end(); jt++){\n      if(*it == *jt){\n        check = false;\n\
    \        break;\n      }\n    }\n    if(check){\n      count++;\n    }\n    check\
    \ = true;\n  }\n  return count;", "    // Your code goes here\n    long count=0;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        int flag=0;\n        for(int\
    \ j=0;j<i;j++)\n        {\n            if(string[i]==string[j])\n            {\n\
    \                flag=1;\n                break;\n            }\n        }\n \
    \       if(flag==0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;", "  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  return std::set<char>(string.begin(), string.end()).size();", "\t// Convert\
    \ all characters to lowercase\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tstd::unordered_set<char> set(string.begin(),\
    \ string.end());\n\treturn set.size();", "  long total_characters = 0;\n  for\
    \ (auto it = string.begin(); it != string.end(); it++) {\n    if (string.find(*it)\
    \ != string.npos) {\n      total_characters += 1;\n    }\n  }\n  return total_characters;",
  "long count = 0;\nstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    std::sort(string.begin(), string.end());\nfor (long i = 0; i < string.length();\
    \ i++) {\n\tif (string[i] != string[i+1]) {\n\t\tcount++;\n\t}", "  // int ans\
    \ = 0;\n  // std::string::iterator it;\n  // std::set<char> str;\n  // for(it\
    \ = string.begin(); it != string.end(); it++) {\n  //   str.insert(*it);\n  //\
    \ }\n  // return str.size();\n  // return ans;\n  // it is a good habit to write\
    \ return when you are returning something from a function\n  //return 0;\n  //\
    \ write your code here\n  long count = 0;\n  std::set<char> s;\n  std::set<char>::iterator\
    \ it;\n  for(it = s.begin(); it != s.end(); it++) {\n    s.insert(*it);\n  }\n\
    \  return s.size();", "  int count[200] = {0};\n  for(int i = 0; i < string.length();\
    \ i++) {\n    int a = string[i];\n    count[a]++;\n  }\n  int distinct = 0;\n\
    \  for(int i = 0; i < 200; i++) {\n    if(count[i] > 0)\n      distinct++;\n \
    \ }\n  return distinct;", "    int count = 0;\n    int n = string.length();\n\
    \    int i;\n    int j;\n    int is_duplicate = 0;\n    std::set<char> characters;\n\
    \    std::set<char>::iterator it;\n    for (i = 0; i < n; i++) {\n        is_duplicate\
    \ = 0;\n        for (it = characters.begin(); it != characters.end(); it++) {\n\
    \            if (string[i] == *it) {\n                is_duplicate = 1;\n    \
    \            break;\n            }\n        }\n        if (is_duplicate == 0)\
    \ {\n            characters.insert(string[i]);\n        }\n    }\n    return characters.size();",
  '  return std::set<std::string>{string.begin(), string.end()}.size();', "\tlong\
    \ distinct = 0;\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower); // Convert to lower case\n\n\tstd::string unique = \"\";\n\tfor\
    \ (char c : string) {\n\t\tif (unique.find(c) == std::string::npos)\n\t\t\tunique\
    \ += c;\n\t}\n\n\treturn unique.length();", "  std::set<char> s;\n  for(int i=0;i<string.length();i++){\n\
    \    s.insert(string[i]);\n  }\n  return s.size();", "\tstd::set<char> set;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tset.insert(string[i]);\n\t}\n\
    \treturn set.size();", "  assert(false);\n  long result = 0;\n  return result;",
  "    // Good luck. :-)\n    int count = 0;\n    std::set<char> myset;\n    for(int\
    \ i = 0; i < string.length(); i++){\n        if(myset.find(string[i]) == myset.end()){\n\
    \            myset.insert(string[i]);\n            count++;\n        }\n    }\n\
    \    return count;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s;\n    for (auto i : string) {\n        s.insert(i);\n\
    \    }\n    return s.size();", "\t// write your code here\n\t// you should return\
    \ the number of different characters\n\t// the function takes a string, not a\
    \ char array\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \tstring.erase(std::unique(string.begin(), string.end()), string.end());\n\treturn\
    \ string.length();", "    long distinct_chars = 0;\n    for (long i = 0; i < string.length();\
    \ i++) {\n        long char_ascii = (long)string[i];\n        if (char_ascii >=\
    \ 65 && char_ascii <= 90) {\n            distinct_chars += 1;\n        }\n   \
    \     else if (char_ascii >= 97 && char_ascii <= 122) {\n            distinct_chars\
    \ += 1;\n        }\n    }\n    return distinct_chars;", "    std::set<char> _set;\n\
    \    for(char i: string) {\n        _set.insert(tolower(i));\n    }\n    return\
    \ _set.size();", "    std::map<char,int> stringMap;\n    for(long i=0;i<string.length();i++){\n\
    \        stringMap[string[i]]++;\n    }\n    return stringMap.size();", "  int\
    \ i,count=0;\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  sort(string.begin(),string.end());\n  for(i=0;i<string.length();i++)\n  {\n\
    \     if(string[i]!=string[i+1])\n        count++;\n  }\n    return count;", " \
    \   set<char> s;\n    for(char c: string)\n    {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    long distinct_count=0;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]!=' '){\n            distinct_count++;\n            string[i]='\
    \ ';\n            for(int j=i+1;j<string.length();j++){\n                if(string[i]==string[j]){\n\
    \                    string[j]=' ';\n                }\n            }\n      \
    \  }\n    }\n    return distinct_count;", "\tlong count=0;\n\tchar c='$';\n\t\
    if(string.size()>0)\n\t{\n\t\tfor(int i=0;i<string.size();i++)\n\t\t{\n\t\t\t\
    if(string[i]!=c)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tc=string[i];\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn count;", "\t// Write your code here\n\tlong count = 0;\n\t\
    std::string::iterator it;\n\tstd::sort(string.begin(), string.end());\n\tfor (it\
    \ = string.begin(); it != string.end(); it++) {\n\t\tstd::string::iterator it2\
    \ = it + 1;\n\t\tif (*it != *it2) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
  "  long count = 0;\n  std::string str = \"\";\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  for (long i = 0; i < string.length();\
    \ i++) {\n    if (str.find(string[i]) == std::string::npos) {\n      str += string[i];\n\
    \      count++;\n    }\n  }\n  return count;", "\tlong count = 0;\n\tstd::map<char,\
    \ bool> map;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (map.find(tolower(string[i]))\
    \ == map.end()) {\n\t\t\tmap[tolower(string[i])] = true;\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;", "    long count = 0;\n    int i;\n    long size = string.size();\n\
    \    for(i = 0; i < size; i++) {\n        if(string[i] != ' ') {\n           \
    \ count++;\n            for(int j = i + 1; j < size; j++) {\n                if(string[i]\
    \ == string[j]) {\n                    string[j] = ' ';\n                }\n \
    \           }\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  std::vector<char> letters;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (std::find(letters.begin(), letters.end(), std::tolower(string[i]))\
    \ == letters.end()) {\n            letters.push_back(std::tolower(string[i]));\n\
    \            count++;\n        }\n    }\n    return count;", "    int n = string.length();\n\
    \    std::map<char, int> mp;\n    for(int i = 0; i < n; i++)\n        mp[tolower(string[i])]++;\n\
    \    return mp.size();", "\tstd::set<char> s;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\ts.insert(tolower(string[i]));\n\t}\n\treturn s.size();", "\tstd::set<char>\
    \ set;\n\tfor (char ch : string) {\n\t\tset.insert(tolower(ch));\n\t}\n\treturn\
    \ set.size();", "\tlong count = 0;\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tstd::sort(string.begin(), string.end());\n\t\
    auto i = string.begin();\n\twhile (i != string.end()) {\n\t\tif (i == string.begin())\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tif (*i != *(i - 1)) {\n\t\t\t\t\
    count++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::vector<char> string_vec(string.begin(),\
    \ string.end());\n    std::set<char> distinct_chars(string_vec.begin(), string_vec.end());\n\
    \    return distinct_chars.size();", '    return std::set<char>(string.begin(),
    string.end()).size();', "  //string.size()\n  std::set<char>str(string.begin(),string.end());\n\
    \  return str.size();", "\t// Write your solution code below this line.\n\tstd::set<char>\
    \ s;\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \tfor (auto c : string) {\n\t\ts.insert(c);\n\t}\n\treturn s.size();", "    std::set<char>\
    \ charSet;\n    for (int i = 0; i < string.length(); i++) {\n        charSet.insert(tolower(string[i]));\n\
    \    }\n    return charSet.size();", "\tstd::set<char> letters;\n\tfor (int i\
    \ = 0; i < string.length(); i++) {\n\t\tletters.insert(tolower(string[i]));\n\t\
    }\n\treturn letters.size();", "    // your code here\n    long count=0;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    sort(string.begin(),string.end());\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]!=string[i+1])\n\
    \        {\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Your code goes here\n\tlong count = 0;\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\tfor(int i = 0; i < string.length(); i++)\n\t\
    {\n\t\tif(string[i] != ' ')\n\t\t{\n\t\t\tif(string[i] != string[i+1])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    // Your code\
    \ goes here\n    std::string s = string;\n    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::tolower);\n    std::unordered_set<char> myset;\n    for(auto x:\
    \ s)\n    {\n        myset.insert(x);\n    }\n    return myset.size();", "  std::set<char>\
    \ char_set;\n  for (int i = 0; i < string.length(); i++) {\n    char c = string[i];\n\
    \    char_set.insert(c);\n  }\n  return char_set.size();", "\t\n\treturn 0;",
  "\t//auto string_temp = string;\n\tlong count = 0;\n\tfor (long index = 0; index\
    \ < string.length(); index++) {\n\t\tbool found = false;\n\t\tchar current_character\
    \ = tolower(string[index]);\n\t\tfor (long jndex = 0; jndex < index; jndex++)\
    \ {\n\t\t\tif (current_character == tolower(string[jndex])) {\n\t\t\t\tfound =\
    \ true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(std::tolower(c));\n    }\n    return set.size();", " \
    \   std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::vector<bool> distinct(26, false);\n    long distinct_count = 0;\n  \
    \  for (auto c : string) {\n        if (!distinct[c - 'a']) {\n            distinct[c\
    \ - 'a'] = true;\n            distinct_count++;\n        }\n    }\n    return\
    \ distinct_count;", "    // YOUR CODE GOES HERE\n    std::set<char> string_set;\n\
    \    for (auto &i : string) {\n        string_set.insert(tolower(i));\n    }\n\
    \    return string_set.size();", "\t\tlong number_of_distinct_characters=0;\n\t\
    \tint i=0;\n\t\tstd::map<char, int> alphabet;\n\t\twhile(string[i]!='\\0'){\n\t\
    \t\tif(alphabet.find(string[i])==alphabet.end()){\n\t\t\t\talphabet[string[i]]++;\n\
    \t\t\t\tnumber_of_distinct_characters++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn\
    \ number_of_distinct_characters;\n\t}", "    int count = 0;\n    for(char c: string){\n\
    \        int count1 = 0;\n        for(char d: string){\n            if(tolower(c)\
    \ == tolower(d)){\n                count1 = 1;\n                break;\n     \
    \       }\n        }\n        if(count1 == 0){\n            count += 1;\n    \
    \    }\n    }\n    return count;", "\t// long count = 0;\n\t// std::set<char>\
    \ s;\n\t// for(auto ch : string)\n\t// \ts.insert(tolower(ch));\n\t// count =\
    \ s.size();\n\t// return count;\n\tstd::set<char> s;\n\tfor(auto ch : string)\n\
    \t\ts.insert(tolower(ch));\n\treturn s.size();", "    long result = 0;\n    std::set<char>\
    \ chars;\n    for (char &c : string) {\n        if (chars.find(tolower(c)) ==\
    \ chars.end()) {\n            result++;\n            chars.insert(tolower(c));\n\
    \        }\n    }\n    return result;", "    // your code goes here\n    long\
    \ count=0;\n    long len=string.length();\n    string a;\n    for(long i=0;i<len;i++)\n\
    \    {\n        long flag=0;\n        char c=string[i];\n        for(long j=0;j<a.length();j++)\n\
    \        {\n            if(c==a[j])\n            {\n                flag=1;\n\
    \                break;\n            }\n        }\n        if(flag==0)\n     \
    \   {\n            a+=c;\n            count++;\n        }\n    }\n    return count;",
  "\t// Transform string to lowercase\n\tstd::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n\t// Set keeps track of all the different characters\
    \ in the string\n\tstd::set<char> char_set;\n\t// Loop over all characters\n\t\
    for (char letter : string) {\n\t\t// If the character is already in the set, do\
    \ nothing\n\t\tif (char_set.find(letter) != char_set.end()) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\t// Otherwise, put the character in the set\n\t\tchar_set.insert(letter);\n\
    \t}\n\t// Return the size of the set\n\treturn char_set.size();", "  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return std::unordered_set<char>(string.begin(),\
    \ string.end()).size();", "    std::string::iterator iter;\n    long count=0;\n\
    \    for(iter=string.begin();iter!=string.end();iter++){\n        if(std::find(string.begin(),iter,tolower(*iter))==iter){\n\
    \            count++;\n        }\n    }\n    return count;", "  std::string::iterator\
    \ end_unique = std::unique(string.begin(), string.end());\n  return std::distance(string.begin(),\
    \ end_unique);", "  // int len = string.length();\n  // std::vector<char> d(len);\n\
    \  // int x = 0;\n  // for (int i = 0; i < len; i++) {\n  //   if (std::find(d.begin(),\
    \ d.end(), string[i]) == d.end()) {\n  //     d[x] = string[i];\n  //     x++;\n\
    \  //   }\n  // }\n  // return x;\n  std::string s;\n  for (char c : string) {\n\
    \    if (s.find(tolower(c)) == std::string::npos) {\n      s += tolower(c);\n\
    \    }\n  }\n  return s.length();", "\tlong count = 0;\n\tlong n = string.length();\n\
    \tif(n <= 1)\n\t\treturn n;\n\telse\n\t{\n\t\tstd::sort(string.begin(), string.end());\n\
    \t\tfor(long i = 0; i < n-1; i++)\n\t\t{\n\t\t\tif(string[i] != string[i+1])\n\
    \t\t\t\tcount++;\n\t\t}\n\t\treturn count + 1;\n\t}", "    int length = string.length();\n\
    \    std::unordered_set<char> s;\n    for(int i = 0; i < length; i++) {\n    \
    \    s.insert(tolower(string[i]));\n    }\n    return s.size();", "\tstd::set<char>\
    \ s;\n\tfor(int i=0;i<string.length();i++){\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\treturn s.size();", "\tconst int length = string.length();\n\tlong count\
    \ = 0;\n\tchar alpha[26] = {0};\n\tfor(int i = 0; i < length; i++) {\n\t\tint\
    \ index = tolower(string[i]) - 'a';\n\t\tif(alpha[index] == 0) {\n\t\t\talpha[index]\
    \ = 1;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    std::string new_string = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (i == 0) {\n            new_string += string[i];\n      \
    \  } else {\n            if (string[i] != string[i - 1]) {\n                new_string\
    \ += string[i];\n            }\n        }\n    }\n    return new_string.length();",
  "    long ans=0;\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        if(s.find(tolower(string[i]))==s.end()){\n            s.insert(tolower(string[i]));\n\
    \            ans++;\n        }\n    }\n    return ans;", "  std::set<char> set;\n\
    \  int count = 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (set.find(tolower(string[i]))\
    \ == set.end()) {\n      set.insert(tolower(string[i]));\n      count++;\n   \
    \ }\n  }\n  return count;", "    std::set<char> set;\n    for (auto s : string)\
    \ {\n        set.insert(tolower(s));\n    }\n    return set.size();", "    std::unordered_set<char>\
    \ uset;\n    for(auto x: string) {\n        char ch = std::tolower(x);\n     \
    \   uset.insert(ch);\n    }\n    return uset.size();", "\tlong count = 0;\n\t\
    for (char i = 'a'; i <= 'z'; i++) {\n\t\tcount += string.find(i) != -1;\n\t}\n\
    \tfor (char i = 'A'; i <= 'Z'; i++) {\n\t\tcount += string.find(i) != -1;\n\t\
    }\n\treturn count;", "    long count = 0;\n    for(long index = 0; index < string.length();\
    \ index++){\n        char temp = string[index];\n        if(temp == ' '){\n  \
    \          continue;\n        }\n        long index2 = index + 1;\n        for(;\
    \ index2 < string.length(); index2++){\n            if(string[index2] == temp\
    \ || temp == string[index2] + 32 || temp == string[index2] - 32){\n          \
    \      string[index2] = ' ';\n            }\n        }\n        count++;\n   \
    \ }\n    return count;", "\tlong count = 0;\n\tstd::string::iterator it;\n\tstd::map<char,int>\
    \  map;\n\tfor(it = string.begin(); it != string.end(); it++)\n\t{\n\t\tif(map.find(*it)\
    \ == map.end())\n\t\t{\n\t\t\tcount++;\n\t\t\tmap[*it] = 0;\n\t\t}\n\t}\n\treturn\
    \ count;", "// Write your solution here\n//Iterate over all the characters in\
    \ the given string.\n//If the character is new (i.e., not present in the map),\
    \ insert into the map.\n//Else, ignore the character.\n//The final map size (number\
    \ of characters) will give the answer.\n  std::map<char, int> map;\n  for(int\
    \ i=0; i<string.length(); i++){\n    map[string[i]]++;\n  }\n  return map.size();",
  "    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::sort(string.begin(), string.end());\n    char first = ' ';\n    int\
    \ count = 0;\n    for (char i : string) {\n        if (i != first) {\n       \
    \     count++;\n            first = i;\n        }\n    }\n    return count;",
  "  long result = 0;\n  std::set<char> unique;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    unique.insert(tolower(string[i]));\n  }\n  result = unique.size();\n\
    \  return result;", "    // your code here\n    int i=0;\n    string upp_s=\"\"\
    ;\n    int count=0;\n    for(int j=0;j<string.length();j++){\n        upp_s+=toupper(string[j]);\n\
    \    }\n    sort(upp_s.begin(),upp_s.end());\n    for(int k=0;k<upp_s.length();k++){\n\
    \        if(upp_s[k]!=upp_s[k+1]){\n            count++;\n        }\n    }\n \
    \   return count;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::unordered_set<char> set;\n    for (auto i : string) {\n\
    \        set.insert(i);\n    }\n    return set.size();", "  \tlong count = 0;\n\
    \  \tint num;\n\tstd::string arr[string.length()];\n\tfor(int i = 0; i < string.length();\
    \ i++){\n\t\tint num = int(string[i]);\n\t\tif(num >= 65 && num <= 90){\n\t\t\t\
    num += 32;\n\t\t}\n\t\tchar ch = char(num);\n\t\tstring[i] = ch;\n\t}\n\tstd::sort(string.begin(),\
    \ string.end());\n\tfor(int i = 0; i < string.length(); i++){\n\t\tint num = int(string[i]);\n\
    \t\tif(num >= 65 && num <= 90){\n\t\t\tnum += 32;\n\t\t}\n\t\tchar ch = char(num);\n\
    \t\tarr[i] = ch;\n\t}\n\tfor(int i = 0; i < string.length(); i++){\n\t\tif(arr[i]\
    \ != arr[i+1]){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    // Your code\
    \ goes here\n    map<char,int>m;\n    for(int i=0;i<string.length();i++)\n   \
    \ {\n        m[string[i]]++;\n    }\n    return m.size();", "    long count=0;\n\
    \    std::vector<char> chars;\n    for(int i=0;i<string.length();i++){\n     \
    \   char c=string[i];\n        if(std::find(chars.begin(),chars.end(),c)==chars.end()){\n\
    \            chars.push_back(c);\n            count++;\n        }\n    }\n   \
    \ return count;", "    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        for(int j = i+1; j < string.length(); j++){\n            if(string[i]\
    \ == string[j]){\n                string.erase(j,1);\n                j--;\n \
    \           }\n        }\n    }\n    return string.length();", '    return 0L;',
  "  long sum = 0;\n  int l = 0;\n  int u = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n      l++;\n    else\
    \ if (string[i] >= 'A' && string[i] <= 'Z')\n      u++;\n  }\n  sum = l + u;\n\
    \  return sum;", "    long count=0;\n    bool check[52]={0};\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]>='a' && string[i]<='z'){\n            if(check[string[i]-'a']==0){\n\
    \                count++;\n                check[string[i]-'a']=1;\n         \
    \   }\n        }\n        else if(string[i]>='A' && string[i]<='Z'){\n       \
    \     if(check[string[i]-'A'+26]==0){\n                count++;\n            \
    \    check[string[i]-'A'+26]=1;\n            }\n        }\n    }\n    return count;",
  " \tstd::set<char> s;\n \tfor(int i=0;i<string.length();i++){\n \t\ts.insert(string[i]);\n\
    \ \t}\n \tlong count=s.size();\n \treturn count;", "    string.erase(std::remove(string.begin(),\
    \ string.end(), ' '), string.end());\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    std::vector<std::string> chars;\n    long count = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        std::string s(1, string[i]);\n        if\
    \ (std::find(chars.begin(), chars.end(), s) == chars.end()) {\n            chars.push_back(s);\n\
    \            count++;\n        }\n    }\n    return count;", "    // Takes a string,\n\
    \    // returns the number of distinct characters in it\n    int count[256];\n\
    \    int l = string.length();\n    int i = 0;\n    while(i < 256)\n    {\n   \
    \     count[i] = 0;\n        i = i + 1;\n    }\n    int result = 0;\n    i = 0;\n\
    \    while(i < l)\n    {\n        count[string[i]] = count[string[i]] + 1;\n \
    \       i = i + 1;\n    }\n    i = 0;\n    while(i < 256)\n    {\n        if(count[i]\
    \ != 0)\n        {\n            result = result + 1;\n        }\n        i = i\
    \ + 1;\n    }\n    return result;", "    long count = 0;\n    bool ch[256] = {false};\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (ch[tolower(string[i])]\
    \ == false) {\n            ch[tolower(string[i])] = true;\n            count++;\n\
    \        }\n    }\n    return count;", '    return std::set<char>(string.begin(),
    string.end()).size();', "    // create a set that contains only distinct elements\n\
    \    std::set<char> characters;\n    // traverse the input string\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        // add every character to the set\n\
    \        characters.insert(string[i]);\n    }\n    // return the size of the set\n\
    \    return characters.size();", "  std::set<char> s;\n  for(int i=0;i<string.length();i++){\n\
    \    s.insert(tolower(string[i]));\n  }\n  return s.size();", "    // Write your\
    \ code here\n    long count = 0;\n    for(int i = 0; i < string.length(); i++){\n\
    \        if(string[i] >= 'a' && string[i] <= 'z'){\n            count++;\n   \
    \     }\n        else if(string[i] >= 'A' && string[i] <= 'Z'){\n            count++;\n\
    \        }\n    }\n    return count;", "  long count = 0;\n  std::vector<char>\
    \ v;\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  for (long i = 0; i < string.length(); i++) {\n    if (std::find(v.begin(),\
    \ v.end(), string[i]) == v.end()) {\n      v.push_back(string[i]);\n      count++;\n\
    \    }\n  }\n  return count;", "    //set stores unique characters\n    std::set<char>\
    \ distinct;\n    int i = 0;\n    while(i < string.length()){\n        //inserting\
    \ into set\n        distinct.insert(string[i]);\n        i += 1;\n    }\n    //sz\
    \ returning set size\n    return distinct.size();", "    long count = 0;\n   \
    \ bool visited[26] = {false};\n    for(long i = 0; i < string.length(); i++) {\n\
    \        if(!visited[string[i] - 'a']) {\n            visited[string[i] - 'a']\
    \ = true;\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Write your code here\n    if(string.length() == 0) return 0;\n    set<char>\
    \ st;\n    for(int i = 0; i < string.length(); i++){\n        st.insert(tolower(string[i]));\n\
    \    }\n    return st.size();", "    // your code here\n    long count = 0;\n\
    \    std::map<char, int> m;\n    for(auto i : string){\n        m[i]++;\n    }\n\
    \    for(auto i : m){\n        if(i.second > 0){\n            count++;\n     \
    \   }\n    }\n    return count;", "  long length = string.length();\n  std::set<char>\
    \ s;\n  for(long i = 0; i < length; i++) {\n    s.insert(tolower(string[i]));\n\
    \  }\n  return s.size();", "     std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n     std::set<char> test_set;\n     for(long index\
    \ = 0; index < string.length(); index++){\n         test_set.insert(string[index]);\n\
    \     }\n     return test_set.size();", "    long count=0;\n    int length=string.length();\n\
    \    std::set<char> S;\n    for(int i=0;i<length;i++){\n        S.insert(string[i]);\n\
    \    }\n    std::set<char>::iterator itr;\n    for(itr=S.begin();itr!=S.end();itr++){\n\
    \        count++;\n    }\n    return count;", "\tlong count = 0;\n\tstd::vector<char>\
    \ string_sorted = string;\n\tstd::sort(string_sorted.begin(), string_sorted.end());\n\
    \tfor (int i = 0; i < string_sorted.size(); i++) {\n\t\tif (i == 0) {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string_sorted[i] != string_sorted[i - 1]) {\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;", "    long count = 0;\n    for(int i\
    \ = 0; i < string.length(); i++){\n        bool flag = true;\n        for(int\
    \ j = 0; j < i; j++){\n            if(string[i] == string[j]){\n             \
    \   flag = false;\n                break;\n            }\n        }\n        if(flag){\n\
    \            count++;\n        }\n    }\n    return count;", "    std::set<char>\
    \ found;\n    for (char c : string) {\n        found.insert(tolower(c));\n   \
    \ }\n    return found.size();", "  long count = 0;\n  std::vector<bool> bool_vec(128,\
    \ false);\n  for (int i = 0; i < string.length(); i++) {\n    if (!bool_vec[tolower(string[i])])\
    \ {\n      bool_vec[tolower(string[i])] = true;\n      count++;\n    }\n  }\n\
    \  return count;", "  // Write your code here\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> set1;\n  for(int\
    \ i=0;i<string.length();i++)\n  {\n      set1.insert(string[i]);\n  }\n  return\
    \ set1.size();", "    int i,j;\n    int count=0;\n    // Similar to merge sort\n\
    \    for(i=0;i<string.length();i++)\n    {\n        for(j=0;j<i;j++)\n       \
    \ {\n            if(string[i]==string[j])\n            {\n                break;\n\
    \            }\n        }\n        if(i==j)\n        {\n            count++;\n\
    \        }\n    }\n    return count;", "    // Your code goes here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(s.find(tolower(string[i]))\
    \ == s.end()) {\n            s.insert(tolower(string[i]));\n            count++;\n\
    \        }\n    }\n    return count;", "\t// Remove lower case characters\n\t\
    std::string string_upper_case = string;\n\tstd::transform(string_upper_case.begin(),\
    \ string_upper_case.end(), string_upper_case.begin(), ::toupper);\n\t// Remove\
    \ duplicates\n\tstd::string string_distinct = string_upper_case;\n\tstd::sort(string_distinct.begin(),\
    \ string_distinct.end());\n\tstring_distinct.erase(std::unique(string_distinct.begin(),\
    \ string_distinct.end()), string_distinct.end());\n\t// Get length\n\tlong string_length\
    \ = string_distinct.length();\n\t// Return\n\treturn string_length;", "    long\
    \ cnt = 0;\n    std::vector<int> v(26, 0);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    for (auto &e : string)\n    \
    \    if (!v[e - 'a']) {\n            v[e - 'a'] = 1;\n            cnt++;\n   \
    \     }\n    return cnt;", "  // Please fill your code here\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  // std::vector<char> lister;\n\
    \  int current_length = 0;\n  int length = string.length();\n  for (int index\
    \ = 0; index < length; index++){\n    if (current_length == 0){\n      // lister.push_back(string[index]);\n\
    \      current_length++;\n    }\n    else{\n      bool already_exist = false;\n\
    \      for (int idx = 0; idx < current_length; idx++){\n        if (string[index]\
    \ == string[idx]){\n          already_exist = true;\n          break;\n      \
    \  }\n      }\n      if (!already_exist){\n        // lister.push_back(string[index]);\n\
    \        current_length++;\n      }\n    }\n  }\n  return current_length;", " \
    \   std::vector<std::string>string_vec;\n    long string_vec_len = string.length();\n\
    \    for(int i = 0; i < string_vec_len; i++){\n        std::string temp_string(1,string[i]);\n\
    \        string_vec.push_back(temp_string);\n    }\n    std::sort(string_vec.begin(),string_vec.end());\n\
    \    std::vector<std::string>::iterator it;\n    it = std::unique(string_vec.begin(),string_vec.end());\n\
    \    string_vec.resize(std::distance(string_vec.begin(),it));\n    return string_vec.size();",
  "  long count=0;\n  //for (std::string::iterator it = string.begin(); it != string.end();\
    \ ++it)\n  //{\n  //  \n  //}\n  //std::cout<<string;\n  std::vector<char> v;\n\
    \  for(int i=0;i<string.length();i++)\n  {\n    v.push_back(string[i]);\n  }\n\
    \  std::sort(v.begin(),v.end());\n  //std::cout<<\"vec\"<<v;\n  std::vector<char>::iterator\
    \ ip;\n  ip=std::unique(v.begin(),v.end());\n  v.resize(std::distance(v.begin(),ip));\n\
    \  //std::cout<<\"vec\"<<v;\n  for(int i=0;i<v.size();i++)\n  {\n    count++;\n\
    \  }\n  return count;", "\tlong count=0;\n\t// Write your code here.\n\t//int\
    \ size=string.size();\n\t//int string[size];\n\tfor(int i=0;i<string.size();i++)\n\
    \t{\n\t\tstring[i]=tolower(string[i]);\n\t}\n\tstd::map<char,int> m1;\n\tstd::map<char,int>::iterator\
    \ it;\n\tfor(int i=0;i<string.size();i++)\n\t{\n\t\tm1[string[i]]++;\n\t}\n\t\
    for(it=m1.begin();it!=m1.end();it++)\n\t{\n\t\tif(it->second>0)\n\t\t{\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;", "    std::set<char> set;\n    std::string::iterator\
    \ it;\n    int i;\n    char c;\n    for (it = string.begin(); it < string.end();\
    \ it++) {\n        c = std::tolower(*it);\n        set.insert(c);\n    }\n   \
    \ return set.size();", "\t// Return the count of distinct characters in string\n\
    \tlong len = string.length();\n\tstd::map<char,int> m;\n\tfor(int i=0;i<len;i++){\n\
    \t\tm[string[i]] = 1;\n\t}\n\treturn m.size();", "    int n = string.length();\n\
    \    int count[256] = {0};\n    for (int i = 0; i < n; i++) {\n        count[tolower(string[i])]++;\n\
    \    }\n    int result = 0;\n    for (int i = 0; i < 256; i++) {\n        if (count[i]\
    \ != 0) {\n            result++;\n        }\n    }\n    return result;", "   \
    \ std::map<char,int> unique_characters;\n    std::string::iterator it = string.begin();\n\
    \    while(it != string.end()){\n        unique_characters[*it]++;\n        it++;\n\
    \    }\n    return unique_characters.size();", "  std::set<char> chars;\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  for (auto &c : string) {\n    chars.insert(c);\n\
    \  }\n  return chars.size();", "  std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n  std::set<char> st(string.begin(), string.end());\n\
    \  std::cout << \"Number of distinct characters:\" << st.size() << std::endl;\n\
    \  return st.size();", "  std::set<char> s;\n  for(int i=0;i<string.length();i++){\n\
    \    s.insert(string[i]);\n  }\n  return s.size();", "    long count = 0;\n  \
    \  std::string temp = \"\";\n    for(char c : string){\n        if(temp.find(tolower(c))\
    \ == std::string::npos){\n            temp += tolower(c);\n            count++;\n\
    \        }\n    }\n    return count;", "\tlong distinct_char_count = 0;\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::set<char> distinct_chars(string.begin(),\
    \ string.end());\n\treturn distinct_chars.size();", "    long count = 0;\n   \
    \ std::set<char> S;\n    for(long i = 0; i < string.length(); i++)\n        S.insert(tolower(string[i]));\n\
    \    return S.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower); //Convert all characters to lower case\n    std::set<char> uniqueCharacters;\n\
    \n    for(char character : string) {\n        uniqueCharacters.insert(character);\n\
    \    }\n\n    return uniqueCharacters.size();", "\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::sort(string.begin(), string.end());\n\
    \tstd::string string2;\n\tstring2.push_back(string[0]);\n\tstring.erase(0, 1);\n\
    \twhile (string.length() != 0) {\n\t\tif (string[0] != string2[string2.length()\
    \ - 1]) {\n\t\t\tstring2.push_back(string[0]);\n\t\t}\n\t\tstring.erase(0, 1);\n\
    \t}\n\treturn string2.length();", "    long counter = 0;\n    std::set<char> mySet;\n\
    \    for(auto i : string){\n        mySet.insert(i);\n    }\n    return mySet.size();",
  "\tlong n = string.length();\n\tlong count=0;\n\tchar s[n];\n\tstrcpy(s,string.c_str());\n\
    \tfor(long i=0;i<n;i++){\n\t\tfor(long j=i+1;j<n;j++){\n\t\t\tif(s[i]==s[j]){\n\
    \t\t\t\tcount=count+1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n-count);",
  "\tstd::string string2 = string;\n\tstd::transform(string2.begin(), string2.end(),\
    \ string2.begin(), ::tolower);\n\tstd::set<char> s;\n\tfor (int i = 0; i < string2.length();\
    \ i++) {\n\t\ts.insert(string2[i]);\n\t}\n\treturn s.size();", "\tlong count=0;\n\
    \tstd::set<char> distinct_characters;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tchar key=tolower(string[i]);\n\t\tauto it=distinct_characters.find(key);\n\
    \t\tif(it==distinct_characters.end()){\n\t\t\tdistinct_characters.insert(key);\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long count = 0;\n    std::unordered_set<char>\
    \ visited_characters;\n    for (char current_character : string) {\n        if\
    \ (visited_characters.find(current_character) == visited_characters.end()) {\n\
    \            count++;\n            visited_characters.insert(current_character);\n\
    \        }\n    }\n    return count;", "    std::set<char> set;\n    long count\
    \ = 0;\n    for (auto ch : string) {\n        if (set.count(tolower(ch)) == 0)\
    \ {\n            count += 1;\n            set.insert(tolower(ch));\n        }\n\
    \    }\n    return count;", "    long count = 0;\n    std::set<char> distinctChars;\n\
    \    for (auto const & c : string) {\n        distinctChars.insert(std::tolower(c));\n\
    \    }\n    count = distinctChars.size();\n    return count;", "    std::unordered_set<char>\
    \ string_set;\n    for (char ch : string) {\n        string_set.insert(tolower(ch));\n\
    \    }\n    return string_set.size();", "    long distinct_characters = 0;\n \
    \   std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::vector<char> v(string.begin(), string.end());\n    std::sort(v.begin(),\
    \ v.end());\n    auto last = std::unique(v.begin(), v.end());\n    distinct_characters\
    \ = std::distance(v.begin(), last);\n    return distinct_characters;", "  long\
    \ i,j,k,l,m;\n  i=j=k=l=m=0;\n  std::set<char> s;\n  while(string[i]!='\\0'){\n\
    \    s.insert(string[i]);\n    i++;\n  }\n  return s.size();", "    char character;\n\
    \    // A set that contains only distinct elements\n    std::set<char> distinct_chars;\n\
    \    for (std::string::iterator iter = string.begin(); iter != string.end(); iter++)\
    \ {\n        character = *iter;\n        // Cast to lowercase if the character\
    \ is uppercase\n        if (character >= 'A' && character <= 'Z') {\n        \
    \    character = character + ('a' - 'A');\n        }\n        distinct_chars.insert(character);\n\
    \    }\n    return distinct_chars.size();", "    long count = 0;\n    long i =\
    \ 0;\n    while (i < string.length()) {\n        char curr = string[i];\n    \
    \    count++;\n        while (i < string.length() && curr == string[i]) {\n  \
    \          i++;\n        }\n    }\n    return count;", "  long size = string.size();\n\
    \  int ans = 0;\n  std::vector<int> check(26,0);\n  for(int i=0;i<size;i++){\n\
    \    int a = string[i] - 'a';\n    int b = string[i] - 'A';\n    if(a>=0 && a<26\
    \ && check[a]==0){\n      ans++;\n      check[a] = 1;\n    }\n    else if(b>=0\
    \ && b<26 && check[b]==0){\n      ans++;\n      check[b] = 1;\n    }\n  }\n  return\
    \ ans;", "\tlong count = 0;\n\tchar ch;\n\tint num;\n\tint len = string.length();\n\
    \tstd::vector<char> freq(26,0);\n\tfor(int i=0;i<len;i++){\n\t\tch = string[i];\n\
    \t\tnum = int(ch);\n\t\tif(num>=65 && num<=90){\n\t\t\tnum = num + 32;\n\t\t}\n\
    \t\tfreq[num-97] = 1;\n\t}\n\tfor(int i=0;i<26;i++){\n\t\tif(freq[i] == 1){\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count;", "\tstd::set<char> char_set;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tchar_set.insert(tolower(string[i]));\n\
    \t}\n\treturn char_set.size();", "    // write your code here\n    long count\
    \ = 0;\n    for(long i = 0; i < string.length(); i++){\n        char current =\
    \ string[i];\n        for(long j = 0; j < string.length(); j++){\n           \
    \ if(current != string[j]){\n                // if(string[j] == string[i]){\n\
    \                //     break;\n                // }\n                if(j ==\
    \ string.length() - 1){\n                    count++;\n                }\n   \
    \         }else{\n                break;\n            }\n        }\n    }\n  \
    \  return count;", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(string[i]);\n    }\n    return set.size();", "\t\
    set<char> s;\n\tfor(auto i:string)\n\t\ts.insert(tolower(i));\n\treturn s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        if(s.find(string[i])\
    \ == s.end()){\n            s.insert(string[i]);\n        }\n    }\n    return\
    \ s.size();", "    assert(string != \"\");\n    long count = 0;\n    for (char\
    \ c : string) {\n        if (string.find(c) != string.rfind(c))\n            count++;\n\
    \    }\n    return count;", "\t// your solution goes here\n\tunordered_set<char>\
    \ distinct;\n\tfor (auto i : string) {\n\t\tdistinct.insert(tolower(i));\n\t}\n\
    \treturn distinct.size();", "    if(string.length()==0)\n        return 0;\n \
    \   if(string.length()==1)\n        return 1;\n    int count=0;\n    int n=string.length();\n\
    \    bool flag=false;\n    int hash[26]={0};\n    for(int i=0;i<n;i++)\n    {\n\
    \        flag=false;\n        if(string[i]>='a' && string[i]<='z')\n        {\n\
    \            if(hash[string[i]-'a']==0)\n            {\n                count++;\n\
    \                hash[string[i]-'a']=1;\n            }\n            flag=true;\n\
    \        }\n        if(string[i]>='A' && string[i]<='Z')\n        {\n        \
    \    if(hash[string[i]-'A']==0)\n            {\n                count++;\n   \
    \             hash[string[i]-'A']=1;\n            }\n            flag=true;\n\
    \        }\n        if(flag==false)\n            continue;\n    }\n    return\
    \ count;", "    long count=0;\n    for(int i=0;i<string.length();i++){\n     \
    \   if(string[i]>=97 && string[i]<=122){\n            for(int j=0;j<i;j++){\n\
    \                if(string[j]==string[i]){\n                    break;\n     \
    \           }\n                if(j==i-1){\n                    count+=1;\n  \
    \              }\n            }\n        }\n        else if(string[i]>=65 && string[i]<=90){\n\
    \            for(int j=0;j<i;j++){\n                if(string[j]==string[i]){\n\
    \                    break;\n                }\n                if(j==i-1){\n\
    \                    count+=1;\n                }\n            }\n        }\n\
    \    }\n    return count;", "\tstd::vector<bool> arr (256, false);\n\tlong count\
    \ = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (arr[tolower(string[i])]\
    \ == false) {\n\t\t\tarr[tolower(string[i])] = true;\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;", "    long n = string.length();\n    bool character_seen[256]\
    \ = {false};\n    for (long i = 0; i < n; i++) {\n        character_seen[string[i]]\
    \ = true;\n    }\n    long count = 0;\n    for (long i = 0; i < 256; i++) {\n\
    \        if (character_seen[i]) {\n            count++;\n        }\n    }\n  \
    \  return count;"]
stop_tokens:
- "\n}"
