name: HumanEval_79_decimal_to_binary
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
  \ in decimal form and your task is to convert it to\n// binary format. The function\
  \ should return a string, with each character representing a binary\n// number.\
  \ Each character in the string will be '0' or '1'.\n// There will be an extra couple\
  \ of characters 'db' at the beginning and at the end of the string.\n// The extra\
  \ characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n\
  // (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string\
  \ decimal_to_binary(long decimal) {\n"
tests: "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
  \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
  \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
completions: ["  std::string binary(\"db\");\n  if (decimal == 0) {\n    binary.append(\"\
    0db\");\n    return binary;\n  }\n  while (decimal != 0) {\n    binary.append(std::to_string(decimal\
    \ % 2));\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary.append(\"db\");\n  return binary;", "    std::string binary;\n    int\
    \ index = sizeof(long)*8-1;\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    for(int i = 0; i < sizeof(long)*8; i++) {\n        long mask = 1;\n     \
    \   mask = mask << index;\n        mask = mask & decimal;\n        binary.push_back(mask?'1':'0');\n\
    \        index--;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;", "    std::string binary;\n    while (decimal > 0) {\n  \
    \      if (decimal % 2 == 0) {\n            binary = \"0\" + binary;\n       \
    \ } else {\n            binary = \"1\" + binary;\n        }\n        decimal /=\
    \ 2;\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;", "\t\
    std::string result = \"db\";\n\tint remainder = 0;\n\tint q = 0;\n\tlong bin =\
    \ 0;\n\tlong mult = 1;\n\t\n\twhile (decimal != 0) {\n\t\tremainder = decimal\
    \ % 2;\n\t\tbin = bin + (remainder * mult);\n\t\tmult = mult * 10;\n\t\tdecimal\
    \ = decimal / 2;\n\t}\n\t\n\tlong temp = bin;\n\twhile (temp != 0) {\n\t\tresult\
    \ += std::to_string(temp % 10);\n\t\ttemp = temp / 10;\n\t}\n\t\n\tresult += \"\
    db\";\n\t\n\treturn result;", "    assert(decimal >= 0);\n    std::string res\
    \ = \"db\";\n    while (decimal > 0) {\n        res.push_back('0' + decimal %\
    \ 2);\n        decimal /= 2;\n    }\n    std::reverse(res.begin() + 2, res.end());\n\
    \    res.push_back('d');\n    res.push_back('b');\n    return res;", "    std::string\
    \ result=\"db\";\n    while(decimal>0){\n        result+=(decimal%2)+'0';\n  \
    \      decimal/=2;\n    }\n    result+=\"db\";\n    std::reverse(result.begin()+2,result.end()-2);\n\
    \    return result;", "    // insert code here\n    std::string ret = \"db\";\n\
    \    if (decimal == 0) {\n        ret.append(\"0db\");\n        return ret;\n\
    \    }\n    while (decimal > 0) {\n        long temp = decimal % 2;\n        decimal\
    \ /= 2;\n        if (temp == 0) {\n            ret.append(\"0\");\n        } else\
    \ {\n            ret.append(\"1\");\n        }\n    }\n    std::reverse(ret.begin()\
    \ + 2, ret.end());\n    ret.append(\"db\");\n    return ret;", "  std::string\
    \ bin_str;\n  while (decimal > 0) {\n    bin_str += std::to_string(decimal % 2);\n\
    \    decimal /= 2;\n  }\n  std::reverse(bin_str.begin(), bin_str.end());\n  return\
    \ \"db\" + bin_str + \"db\";", "    std::string bin;\n    while (decimal > 0)\
    \ {\n        int rem = decimal % 2;\n        bin += rem + '0';\n        decimal\
    \ /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n    bin = \"db\" +\
    \ bin + \"db\";\n    return bin;", "  std::string binaryStr = \"db\";\n  // Write\
    \ your code here\n  while(decimal > 0) {\n    binaryStr += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binaryStr.begin() + 2, binaryStr.end());\n\
    \  binaryStr += \"db\";\n  return binaryStr;", "  std::string binary=\"db\";\n\
    \  if(decimal<=0)\n  {\n    return \"\";\n  }\n  int rem;\n  while(decimal>0)\n\
    \  {\n    rem=decimal%2;\n    binary+=std::to_string(rem);\n    decimal/=2;\n\
    \  }\n  std::reverse(binary.begin(),binary.end());\n  binary+=\"db\";\n  return\
    \ binary;", "    std::string binary;\n    binary += \"db\";\n    while (decimal\
    \ > 0) {\n        if (decimal % 2 == 0)\n            binary += \"0\";\n      \
    \  else\n            binary += \"1\";\n        decimal /= 2;\n    }\n    binary\
    \ += \"db\";\n    return binary;", "  std::string answer = \"db\";\n  if (decimal\
    \ == 0) {\n    answer += \"0\";\n  }\n  while (decimal > 0) {\n    answer += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  answer += \"db\";\n  std::reverse(answer.begin()\
    \ + 2, answer.end() - 2);\n  return answer;", "  std::string bin = \"db\";\n \
    \ while (decimal > 0) {\n    bin += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(bin.begin() + 2, bin.end());\n  bin += \"db\";\n\
    \  return bin;", "  std::string out = \"db\";\n  while (decimal > 0) {\n    if\
    \ (decimal % 2 == 0) {\n      out += \"0\";\n    } else {\n      out += \"1\"\
    ;\n    }\n    decimal /= 2;\n  }\n  std::reverse(out.begin() + 2, out.end());\n\
    \  out += \"db\";\n  return out;", "  int binaryNum[32];\n  int i = 0;\n  while\
    \ (decimal > 0) {\n    binaryNum[i] = decimal % 2;\n    decimal = decimal / 2;\n\
    \    i++;\n  }\n  std::string ret(\"db\");\n  while (i > 0) {\n    i--;\n    if\
    \ (binaryNum[i] == 0) {\n      ret += \"0\";\n    } else {\n      ret += \"1\"\
    ;\n    }\n  }\n  ret += \"db\";\n  return ret;", "  string str = \"db\";\n  do\
    \ {\n    if (decimal % 2 == 0) {\n      str += \"0\";\n    } else {\n      str\
    \ += \"1\";\n    }\n    decimal /= 2;\n  } while (decimal > 0);\n  reverse(str.begin()\
    \ + 2, str.end());\n  str += \"db\";\n  return str;", "    std::string result\
    \ = \"db\";\n    while (decimal > 0) {\n        result.push_back(char('0' + decimal\
    \ % 2));\n        decimal /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result.push_back('d');\n    result.push_back('b');\n    return result;",
  "    std::string bin = \"db\";\n    if (decimal == 0) {\n        bin += \"0\";\n\
    \    }\n    else {\n        while (decimal > 0) {\n            bin += std::to_string(decimal\
    \ % 2);\n            decimal /= 2;\n        }\n    }\n    std::reverse(bin.begin()\
    \ + 2, bin.end());\n    bin += \"db\";\n    return bin;", "  std::string binary_number\
    \ = \"db\";\n  while (decimal) {\n    binary_number.push_back(decimal%2 + '0');\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary_number.begin() + 2, binary_number.end());\n\
    \  binary_number.push_back('d');\n  binary_number.push_back('b');\n  return binary_number;",
  "    assert(decimal >= 0);\n    std::string binary = \"db\";\n    std::stack<int>\
    \ s;\n    while (decimal) {\n        s.push(decimal % 2);\n        decimal /=\
    \ 2;\n    }\n    while (!s.empty()) {\n        binary += std::to_string(s.top());\n\
    \        s.pop();\n    }\n    binary += \"db\";\n    return binary;", "    //\
    \ Write your code here\n\n    std::string result;\n    long remainder = 0;\n \
    \   while (decimal != 0) {\n        remainder = decimal % 2;\n        result +=\
    \ std::to_string(remainder);\n        decimal /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    result = \"db\" + result + \"db\";\n    return result;",
  "  std::string bin = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 == 0)\
    \ {\n      bin = \"0\" + bin;\n    } else {\n      bin = \"1\" + bin;\n    }\n\
    \    decimal /= 2;\n  }\n  bin += \"db\";\n  return bin;", "    std::stringstream\
    \ ss;\n    std::string binary_string;\n    ss << std::bitset<32>(decimal);\n \
    \   ss >> binary_string;\n    return \"db\" + binary_string + \"db\";", "    if\
    \ (decimal == 0) return \"db0db\";\n    std::string res = \"db\";\n    while (decimal\
    \ > 0) {\n        res.push_back('0' + decimal % 2);\n        decimal /= 2;\n \
    \   }\n    std::reverse(res.begin() + 2, res.end());\n    res.push_back('d');\n\
    \    res.push_back('b');\n    return res;", "    std::string binary = \"db\";\n\
    \    while (decimal != 0) {\n        if (decimal%2 == 0) {\n            binary\
    \ += \"0\";\n        } else {\n            binary += \"1\";\n        }\n     \
    \   decimal /= 2;\n    }\n    for (int i = binary.length(); i < 32; i++) {\n \
    \       binary += \"0\";\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    binary += \"db\";\n    return binary;", "    if (decimal < 0) {\n       \
    \ throw std::domain_error(\"You have to provide a non-negative number\");\n  \
    \  }\n\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    std::string\
    \ binary_string = \"db\";\n    std::vector<int> binary_numbers;\n\n    while (decimal\
    \ > 0) {\n        binary_numbers.push_back(decimal % 2);\n        decimal /= 2;\n\
    \    }\n\n    for (int i = binary_numbers.size() - 1; i >= 0; i--) {\n       \
    \ binary_string += std::to_string(binary_numbers[i]);\n    }\n\n    binary_string\
    \ += \"db\";\n\n    return binary_string;", "\tstd::string binary = \"db\";\n\t\
    while (decimal > 0) {\n\t\tlong rem = decimal % 2;\n\t\tbinary += std::to_string(rem);\n\
    \t\tdecimal /= 2;\n\t}\n\tbinary += \"db\";\n\tstd::reverse(binary.begin(), binary.end());\n\
    \treturn binary;", '    return "db" + std::bitset<8>(decimal).to_string() + "db";',
  "  std::string bin = \"db\";\n  if(decimal == 0) {\n    bin.append(\"0db\");\n \
    \   return bin;\n  }\n  std::vector<int> temp;\n  while(decimal != 0) {\n    temp.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  while(!temp.empty()) {\n    bin.append(std::to_string(temp.back()));\n\
    \    temp.pop_back();\n  }\n  bin.append(\"db\");\n  return bin;", "  std::string\
    \ binary_str(\"db\");\n  bool flag = false;\n  for (unsigned long i = 0x80000000;\
    \ i > 0; i >>= 1) {\n    if (decimal & i) {\n      binary_str += '1';\n      flag\
    \ = true;\n    } else if (flag) {\n      binary_str += '0';\n    }\n  }\n  binary_str\
    \ += \"db\";\n  return binary_str;", "    // Write your code here.\n    std::string\
    \ ret = \"db\";\n    for (long quotient = decimal, remainder; quotient != 0;)\
    \ {\n        remainder = quotient % 2;\n        quotient /= 2;\n        ret +=\
    \ (remainder == 0) ? '0' : '1';\n    }\n    std::reverse(ret.begin() + 2, ret.end());\n\
    \    ret += \"db\";\n    return ret;", "  std::string binary_rep;\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0) {\n      binary_rep.push_back('0');\n    }\
    \ else {\n      binary_rep.push_back('1');\n    }\n    decimal /= 2;\n  }\n  int\
    \ size = binary_rep.size();\n  for (int i = 0; i < size; i++) {\n    std::swap(binary_rep[i],\
    \ binary_rep[size - i - 1]);\n  }\n  return \"db\" + binary_rep + \"db\";", " \
    \   std::string out = \"db\";\n    while (decimal) {\n        out += (decimal\
    \ % 2 == 0) ? \"0\" : \"1\";\n        decimal /= 2;\n    }\n    out += \"db\"\
    ;\n    std::reverse(out.begin() + 2, out.end() - 2);\n    return out;", "    //\
    \ TODO\n    std::string binary = \"db\";\n    while(decimal != 0) {\n        if(decimal\
    \ % 2 == 0)\n            binary += \"0\";\n        else\n            binary +=\
    \ \"1\";\n        decimal /= 2;\n    }\n    binary += \"db\";\n    reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n    return binary;", "  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n  return binary;", "  std::string binary = \"db\";\n  while (decimal\
    \ != 0) {\n    int r = decimal % 2;\n    if (r == 0)\n      binary += \"0\";\n\
    \    else\n      binary += \"1\";\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;", "  std::string\
    \ binary = \"db\";\n  int r = 0;\n  while (decimal > 0) {\n    r = decimal % 2;\n\
    \    binary = binary + std::to_string(r);\n    decimal = decimal / 2;\n  }\n \
    \ binary = binary + \"db\";\n  return binary;", "  char bin[17];\n  char* ptr=&bin[16];\n\
    \  *ptr='\\0';\n  ptr--;\n  while(decimal > 0){\n    *ptr=(decimal%2)+'0';\n \
    \   ptr--;\n    decimal /= 2;\n  }\n  ptr++;\n  std::string result=\"db\";\n \
    \ while(*ptr!='\\0'){\n    result+=*ptr;\n    ptr++;\n  }\n  result+=\"db\";\n\
    \  return result;", "    int i = 0;\n    long remainder;\n    std::string result\
    \ = \"db\";\n    while (decimal > 0) {\n        remainder = decimal % 2;\n   \
    \     decimal /= 2;\n        result += std::to_string(remainder);\n        i++;\n\
    \    }\n    for (int j = i; j < 7; j++) {\n        result += \"0\";\n    }\n \
    \   std::reverse(result.begin(), result.end());\n    result += \"db\";\n    return\
    \ result;", "  // assert(decimal >= 0);\n  // TODO\n  std::string result = \"\
    db\";\n  while (decimal > 0) {\n    result += std::to_string(decimal % 2);\n \
    \   decimal /= 2;\n  }\n  reverse(result.begin() + 2, result.end());\n  result\
    \ += \"db\";\n  return result;", "    std::string answer = \"db\";\n    // long\
    \ n = decimal;\n    while (decimal != 0) {\n        if (decimal % 2 == 0) {\n\
    \            answer = \"0\" + answer;\n        } else {\n            answer =\
    \ \"1\" + answer;\n        }\n        decimal /= 2;\n    }\n    return answer\
    \ + \"db\";", "    std::string bin_str;\n    while (decimal > 0) {\n        bin_str\
    \ += decimal % 2 + '0';\n        decimal /= 2;\n    }\n    bin_str += \"db\";\n\
    \    std::reverse(bin_str.begin(), bin_str.end());\n    return bin_str;", "  \
    \  std::string binary = \"db\";\n    while (decimal >= 1) {\n        binary +=\
    \ std::to_string(decimal % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary += \"db\";\n    return binary;", "  // you are\
    \ given a number\n  // you have to convert the number into binary format\n  //\
    \ to convert a number into binary format\n  // you have to divide the number by\
    \ 2 using modulo\n  // and you will get the remainder value\n  // of the divison\n\
    \  // you have to get the array of remiainder\n  // and then convert them into\
    \ a binary array\n  // to convert a remainders array into a binary\n  // you need\
    \ to find the size of the array\n  // you need to initalize the string with\n\
    \  // a size of the remiainder plus 4\n  // first and last two characters of the\
    \ string\n  // will be d and b\n  // then you have to replace the second character\n\
    \  // with 0 or 1 depending on the first remainder\n  // you have to convert the\
    \ whole remainders array\n  // into a binary array\n  // you have to return the\
    \ binary array\n  // as a string\n  // you need to create a vector to store the\
    \ remainders\n  // then you need to divide the number until it is equal to 0\n\
    \  // modulo the number by 2\n  // and then push the remainder into the vector\n\
    \  // then you need to reserve a space in the binary string\n  // which is equal\
    \ to the size of the vector plus 4\n  // then you need to go through each character\
    \ of the vector\n  // from the beginning\n  // and convert them into 0 or 1\n\
    \  // and then add it to the string\n  // then you need to return the string\n\
    \  std::vector<int> remainders;\n  while (decimal > 0) {\n    int remainder =\
    \ decimal % 2;\n    remainders.push_back(remainder);\n    decimal = decimal /\
    \ 2;\n  }\n  std::string binary;\n  binary.reserve(remainders.size() + 4);\n \
    \ binary.push_back('d');\n  binary.push_back('b');\n  for (int i = remainders.size()\
    \ - 1; i >= 0; i--) {\n    if (remainders[i] == 0) {\n      binary.push_back('0');\n\
    \    } else {\n      binary.push_back('1');\n    }\n ", '    // Your code here',
  "  std::string result = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      result += \"0\";\n    } else {\n      result += \"1\";\n    }\n\
    \    decimal /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n \
    \ result += \"db\";\n  return result;", "  std::string binary = \"db\";\n  //\
    \ Start from the end and keep multiplying by two\n  while (decimal > 0) {\n  \
    \  if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n      binary\
    \ += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2,\
    \ binary.end());\n  binary += \"db\";\n  return binary;", "    std::string binary;\n\
    \    std::string db = \"db\";\n    binary += db;\n    if (decimal == 0) {\n  \
    \      binary += \"0\";\n    }\n    else {\n        while (decimal > 0) {\n  \
    \          int temp = decimal % 2;\n            decimal /= 2;\n            if\
    \ (temp == 0) {\n                binary += \"0\";\n            }\n           \
    \ else {\n                binary += \"1\";\n            }\n        }\n    }\n\
    \    std::reverse(binary.begin(), binary.end());\n    binary += db;\n    return\
    \ binary;", "    std::string binary = \"db\";\n    int remainder;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        if\
    \ (remainder == 0) {\n            binary += \"0\";\n        } else {\n       \
    \     binary += \"1\";\n        }\n    }\n    std::reverse(binary.begin() + 2,\
    \ binary.end());\n    binary += \"db\";\n    return binary;", "    std::string\
    \ bin;\n    while (decimal > 0) {\n        int remainder = decimal % 2;\n    \
    \    bin += std::to_string(remainder);\n        decimal /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return \"db\" + bin + \"db\";", "    std::string r = \"db\"\
    ;\n    while (decimal > 0) {\n        r.insert(1, 1, decimal % 2 + '0');\n   \
    \     decimal /= 2;\n    }\n    return r + \"db\";", "    std::string binary =\
    \ \"db\";\n    while (decimal != 0) {\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;", "   std::string binary = \"db\";\n\
    \   if (decimal > 0) {\n    int decimalForCopy = decimal;\n    while (decimalForCopy\
    \ >= 2) {\n        decimalForCopy /= 2;\n    }\n    while (decimalForCopy < decimal)\
    \ {\n        decimalForCopy *= 2;\n    }\n    while (decimalForCopy > decimal)\
    \ {\n        binary += \"0\";\n        decimalForCopy /= 2;\n    }\n    while\
    \ (decimalForCopy > 2) {\n        if (decimal >= decimalForCopy / 2) {\n     \
    \       binary += \"1\";\n            decimal -= decimalForCopy / 2;\n       \
    \ } else {\n            binary += \"0\";\n        }\n        decimalForCopy /=\
    \ 2;\n    }\n    if (decimal == 2) {\n        binary += \"10\";\n    } else if\
    \ (decimal == 1) {\n        binary += \"1\";\n    }\n    binary += \"db\";\n \
    \   return binary;\n   } else if (decimal == 0) {\n       return \"db0db\";\n\
    \   } else {\n       return \"db-1db\";\n   }", "    if (decimal == 0) {\n   \
    \     return \"db0db\";\n    }\n    std::string result = \"db\";\n    while (decimal\
    \ > 0) {\n        result += std::to_string(decimal % 2);\n        decimal /= 2;\n\
    \    }\n    result += \"db\";\n    return std::string(result.rbegin(), result.rend());",
  "  assert(decimal >= 0);\n  //TODO\n  std::string binary_string;\n  long binary\
    \ = 0;\n  long remainder;\n  long i = 1;\n  while (decimal != 0) {\n    remainder\
    \ = decimal % 2;\n    decimal /= 2;\n    binary += remainder * i;\n    i *= 10;\n\
    \  }\n  std::ostringstream converter;\n  converter << binary;\n  binary_string\
    \ = converter.str();\n  return \"db\" + binary_string + \"db\";", "    assert(decimal\
    \ >= 0);\n    std::string binary = \"db\";\n    std::string temp;\n    while (decimal\
    \ > 0) {\n        if (decimal % 2 == 0) {\n            temp = '0' + temp;\n  \
    \      } else {\n            temp = '1' + temp;\n        }\n        decimal /=\
    \ 2;\n    }\n    return binary + temp + 'd' + 'b';", "  std::string binary_string\
    \ = \"db\";\n  while (decimal > 0) {\n    binary_string += (decimal % 2) ? \"\
    1\" : \"0\";\n    decimal /= 2;\n  }\n  binary_string += \"db\";\n  std::reverse(binary_string.begin()\
    \ + 2, binary_string.end() - 2);\n  return binary_string;", "  std::string binary;\n\
    \  while (decimal > 0) {\n    binary = ((decimal % 2) ? \"1\" : \"0\") + binary;\n\
    \    decimal /= 2;\n  }\n  return \"db\" + binary + \"db\";", "    std::string\
    \ mystring;\n    mystring += \"db\";\n    for (int i = 0; i < sizeof(long) * 8;\
    \ i++) {\n        if (decimal & 1)\n            mystring += \"1\";\n        else\n\
    \            mystring += \"0\";\n        decimal >>= 1;\n    }\n    std::reverse(mystring.begin(),\
    \ mystring.end());\n    mystring += \"db\";\n    return mystring;", "\tstd::string\
    \ binary = \"db\";\n\twhile (decimal > 0) {\n\t\tif (decimal % 2 == 0) {\n\t\t\
    \tbinary += \"0\";\n\t\t}\n\t\telse {\n\t\t\tbinary += \"1\";\n\t\t}\n\t\tdecimal\
    \ /= 2;\n\t}\n\tstd::reverse(binary.begin() + 2, binary.end());\n\tbinary += \"\
    db\";\n\treturn binary;", "  std::string result = \"db\";\n  while (decimal >\
    \ 0) {\n    int remainder = decimal % 2;\n    result += std::to_string(remainder);\n\
    \    decimal /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n \
    \ result += \"db\";\n  return result;", "  std::stringstream ss;\n  ss << \"db\"\
    ;\n  for (int i = 31; i >= 0; i--) {\n    if (decimal & (1u << i)) {\n      ss\
    \ << \"1\";\n    } else {\n      ss << \"0\";\n    }\n  }\n  ss << \"db\";\n \
    \ return ss.str();", "    // write code here\n    //\"db\"\n    std::string temp;\n\
    \    while(decimal>0){\n        if(decimal%2==0){\n            temp+=\"0\";\n\
    \        }\n        else{\n            temp+=\"1\";\n        }\n        decimal/=2;\n\
    \    }\n    std::string res=\"db\";\n    for(int i=temp.size()-1;i>=0;i--){\n\
    \        res+=temp[i];\n    }\n    res+=\"db\";\n    return res;", "  // your\
    \ code goes here\n  std::string binary;\n  binary += \"db\";\n  if (decimal ==\
    \ 0) {\n    binary += \"0\";\n  } else {\n    while (decimal > 0) {\n      if\
    \ (decimal % 2 == 0) {\n        binary += \"0\";\n      } else {\n        binary\
    \ += \"1\";\n      }\n      decimal /= 2;\n    }\n  }\n  binary += \"db\";\n \
    \ std::reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;", "  if\
    \ (decimal == 0) {\n    return \"db0db\";\n  }\n  std::string ret;\n  ret.push_back('d');\n\
    \  ret.push_back('b');\n  if (decimal < 0) {\n    decimal *= -1;\n    ret.push_back('-');\n\
    \  }\n  std::stack<char> st;\n  while (decimal > 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      st.push('0');\n    } else {\n      st.push('1');\n    }\n    decimal\
    \ /= 2;\n  }\n  while (!st.empty()) {\n    ret.push_back(st.top());\n    st.pop();\n\
    \  }\n  ret.push_back('d');\n  ret.push_back('b');\n  return ret;", "  std::string\
    \ ret = \"db\";\n  if(decimal == 0)\n    ret += \"0\";\n  while(decimal > 0) {\n\
    \    ret += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  return ret\
    \ + \"db\";", "    std::string binary=\"db\";\n    if(decimal==0)\n        binary+=\"\
    0\";\n    else{\n        while(decimal>0){\n            binary+=(decimal%2+'0');\n\
    \            decimal/=2;\n        }\n    }\n    reverse(binary.begin()+2,binary.end());\n\
    \    binary+=\"db\";\n    return binary;", "    // FIXME!!!\n    //TODO: Write\
    \ your implementation here", "  // your code here\n  return \"db\" + std::bitset<15>(decimal).to_string()\
    \ + \"db\";", "  std::string binary = \"db\";\n  while (decimal != 0) {\n    int\
    \ rem = decimal % 2;\n    binary += std::to_string(rem);\n    decimal /= 2;\n\
    \  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n\
    \  return binary;", "  assert(decimal >= 0);\n  if (decimal == 0) return \"db0db\"\
    ;\n  std::string res = \"db\";\n  for (; decimal > 0; decimal /= 2) res += (decimal\
    \ % 2 + '0');\n  res += \"db\";\n  std::reverse(res.begin() + 2, res.end() - 2);\n\
    \  return res;", "    std::string res = \"db\";\n    if (decimal == 0) {\n   \
    \     res += \"0\";\n    }\n    while (decimal > 0) {\n        int cur = decimal\
    \ % 2;\n        res += std::to_string(cur);\n        decimal /= 2;\n    }\n  \
    \  std::reverse(res.begin() + 2, res.end());\n    res += \"db\";\n    return res;",
  "\t// long decimal, remainder;\n\tstd::string rem = \"\";\n\twhile (decimal > 0)\
    \ {\n\t\trem += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(rem.begin(),\
    \ rem.end());\n\trem = \"db\" + rem + \"db\";\n\treturn rem;", "    long i;\n\
    \    std::string result = \"db\";\n    std::string temp = \"\";\n    long rem;\n\
    \    for (i = 0; i < 8; i++) {\n        rem = decimal % 2;\n        temp = std::to_string(rem)\
    \ + temp;\n        decimal = decimal / 2;\n    }\n    result = result + temp +\
    \ \"db\";\n    return result;", "  std::string binary = \"db\";\n  std::string\
    \ binary2 = \"db\";\n  if (decimal == 0) {\n    binary = \"db0db\";\n  }\n  else\
    \ {\n    while (decimal > 0) {\n      if (decimal % 2 == 0) {\n        binary\
    \ += \"0\";\n      }\n      else {\n        binary += \"1\";\n      }\n      decimal\
    \ /= 2;\n    }\n    for (int i = binary.length() - 1; i >= 2; i--) {\n      binary2\
    \ += binary[i];\n    }\n  }\n  return binary2;", "  assert(decimal > 0);\n  long\
    \ rest = decimal;\n  std::string binary;\n  while (rest != 0) {\n    binary.push_back(rest\
    \ % 2 + '0');\n    rest /= 2;\n  }\n  std::reverse(binary.begin(), binary.end());\n\
    \  return std::string(\"db\") + binary + std::string(\"db\");", "    std::string\
    \ binary = \"db\";\n    long rem = 0;\n    while (decimal != 0) {\n        rem\
    \ = decimal % 2;\n        binary += std::to_string(rem);\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"\
    db\";\n    return binary;", "  std::string ret = \"db\";\n  if (decimal == 0)\
    \ {\n    ret.append(\"0db\");\n    return ret;\n  }\n  std::stack<long> stack;\n\
    \  while (decimal != 0) {\n    stack.push(decimal % 2);\n    decimal /= 2;\n \
    \ }\n  while (!stack.empty()) {\n    ret.append(std::to_string(stack.top()));\n\
    \    stack.pop();\n  }\n  ret.append(\"db\");\n  return ret;", "    //write the\
    \ code here\n    std::string binary_string = \"db\";\n    while(decimal > 0) {\n\
    \        if(decimal%2 == 0) {\n            binary_string = \"0\" + binary_string;\n\
    \        } else {\n            binary_string = \"1\" + binary_string;\n      \
    \  }\n        decimal = decimal/2;\n    }\n    binary_string += \"db\";\n    return\
    \ binary_string;", "  std::string binary = \"db\";\n  int remainder;\n  while\
    \ (decimal > 0) {\n    remainder = decimal % 2;\n    binary = binary + std::to_string(remainder);\n\
    \    decimal = decimal / 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n\
    \  binary += \"db\";\n  return binary;", "  std::string binary_string = \"db\"\
    ;\n  std::string binary_character;\n  long divisor;\n  while (decimal > 0) {\n\
    \    divisor = decimal / 2;\n    if (decimal % 2 == 0) {\n      binary_character\
    \ = \"0\";\n    } else {\n      binary_character = \"1\";\n    }\n    binary_string.append(binary_character);\n\
    \    decimal = divisor;\n  }\n  binary_string.append(\"db\");\n  std::reverse(binary_string.begin(),\
    \ binary_string.end());\n  return binary_string;", "    std::string binary = \"\
    db\";\n    if (decimal == 0)\n        binary += \"0\";\n    else {\n        while\
    \ (decimal > 0) {\n            long remainder = decimal % 2;\n            binary\
    \ += std::to_string(remainder);\n            decimal /= 2;\n        }\n    }\n\
    \    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"db\";\n\
    \    return binary;", "  std::string binary{\"db\"};\n  while (decimal > 0) {\n\
    \    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;", "  std::string\
    \ binary = \"db\";\n  std::vector<char> binary_chars;\n  // for loop for extracting\
    \ the binary numbers from the decimal number\n  for (int i = 0; decimal > 0; i++)\
    \ {\n    if (decimal % 2 == 0) {\n      binary_chars.push_back('0');\n    } else\
    \ {\n      binary_chars.push_back('1');\n    }\n    decimal /= 2;\n  }\n  // for\
    \ loop for appending the binary characters to the string\n  for (int i = binary_chars.size()\
    \ - 1; i >= 0; i--) {\n    binary += binary_chars[i];\n  }\n  binary += \"db\"\
    ;\n  return binary;", "  std::string result = \"db\";\n  while (decimal > 0) {\n\
    \    if (decimal % 2 == 0) {\n      result = '0' + result;\n    } else {\n   \
    \   result = '1' + result;\n    }\n    decimal /= 2;\n  }\n  result += 'db';\n\
    \  return result;", "  std::string binary;\n  long quotient = decimal;\n  long\
    \ remainder;\n  do {\n    remainder = quotient % 2;\n    quotient = quotient /\
    \ 2;\n    if (remainder == 0) {\n      binary.push_back('0');\n    } else {\n\
    \      binary.push_back('1');\n    }\n  } while (quotient != 0);\n  binary.append(\"\
    db\");\n  std::reverse(binary.begin(), binary.end());\n  return binary;", "  \
    \  std::string binary = \"db\";\n    long val = decimal;\n    if (val==0) {\n\
    \        binary = binary + \"0\";\n    }\n    while (val != 0) {\n        if (val\
    \ % 2 == 0) {\n            binary = binary + \"0\";\n        } else {\n      \
    \      binary = binary + \"1\";\n        }\n        val = val / 2;\n    }\n  \
    \  binary = binary + \"db\";\n    std::reverse(binary.begin()+2, binary.end()-2);\n\
    \    return binary;", "  // Part A: Convert decimal to binary in the format \"\
    db111111db\"\n  // Hint: Use std::bitset<8> and convert to string\n  // Your code\
    \ here\n  std::bitset<8> binary(decimal);\n  std::string binary_str = \"db\" +\
    \ binary.to_string() + \"db\";\n  return binary_str;", '  return "db" + std::bitset<64>(decimal).to_string()
    + "db";', "    long remainder = 0;\n    std::string ans = \"db\";\n    // handle\
    \ 0 as special case\n    if (decimal == 0) {\n        ans = ans + \"0\" + \"db\"\
    ;\n        return ans;\n    }\n    while (decimal > 0) {\n        remainder =\
    \ decimal % 2;\n        decimal = decimal / 2;\n        ans += std::to_string(remainder);\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    ans += \"db\";\n    return\
    \ ans;", "  std::string binary = \"db\";\n  // Please implement this function\
    \ and return the string \"dbxxxxxdb\" where xxxxx is the\n  // binary representation\
    \ of the input decimal.\n  // You have to support decimal numbers from 0 to 2147483647.\n\
    \  if (decimal == 0) {\n    binary += \"0\";\n  } else {\n    while (decimal >\
    \ 0) {\n      binary += std::to_string(decimal % 2);\n      decimal /= 2;\n  \
    \  }\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;", "    std::string binaryString;\n    binaryString = \"db\"\
    ;\n    if (decimal == 0) {\n        binaryString = binaryString + \"0\" + \"db\"\
    ;\n        return binaryString;\n    }\n    while (decimal != 0) {\n        binaryString\
    \ = binaryString + std::to_string(decimal % 2);\n        decimal = decimal / 2;\n\
    \    }\n    reverse(binaryString.begin() + 2, binaryString.end());\n    binaryString\
    \ = binaryString + \"db\";\n    return binaryString;", "  // Check if the number\
    \ is negative.\n  bool is_negative = false;\n  if (decimal < 0) {\n    is_negative\
    \ = true;\n    decimal = -decimal;\n  }\n  // Keep track of the binary number.\n\
    \  std::string binary_number;\n  // If the number is 0, it's binary representation\
    \ is 0.\n  if (decimal == 0) {\n    binary_number = \"0\";\n  }\n  // Otherwise,\
    \ keep dividing the number by 2 until it becomes 0.\n  while (decimal != 0) {\n\
    \    long reminder = decimal % 2;\n    decimal /= 2;\n    // Prepend the number\
    \ to the binary number.\n    binary_number = std::to_string(reminder) + binary_number;\n\
    \  }\n  // Prepend a '1' if the number is negative.\n  if (is_negative) {\n  \
    \  binary_number = \"1\" + binary_number;\n  }\n  // Prepend 0s to the binary\
    \ number to make it 8-bits long.\n  binary_number = std::string(8 - binary_number.length(),\
    \ '0') + binary_number;\n  // Surround the binary number with \"db\".\n  binary_number\
    \ = \"db\" + binary_number + \"db\";\n  return binary_number;", "\tstd::string\
    \ binary;\n\tbinary.push_back('d');\n\tbinary.push_back('b');\n\tint num_digits\
    \ = 0;\n\twhile (decimal != 0) {\n\t\tif (decimal % 2 == 0) {\n\t\t\tbinary.push_back('0');\n\
    \t\t} else {\n\t\t\tbinary.push_back('1');\n\t\t}\n\t\tdecimal /= 2;\n\t\tnum_digits++;\n\
    \t}\n\tif (num_digits > 0) {\n\t\tstd::reverse(binary.begin() + 2, binary.end());\n\
    \t}\n\tbinary.push_back('d');\n\tbinary.push_back('b');\n\treturn binary;", " \
    \ // your code goes here...\n  string s = \"db\";\n  long tmp = decimal;\n  long\
    \ a = 0;\n  long b = 0;\n  for (int i = 0; i < decimal; i++) {\n    if (decimal\
    \ / 2 == 1) {\n      a = decimal % 2;\n      s += to_string(a);\n      break;\n\
    \    }\n    a = decimal % 2;\n    s += to_string(a);\n    decimal = decimal /\
    \ 2;\n  }\n  // string rev = s;\n  // reverse(rev.begin(), rev.end());\n  // return\
    \ s.append(rev);\n  reverse(s.begin(), s.end());\n  return s;", "  std::string\
    \ str = \"db\";\n  int k = 1;\n  while (decimal / (2 * k) != 0)\n    k *= 2;\n\
    \  while (k > 0) {\n    str += std::to_string(decimal / k);\n    decimal %= k;\n\
    \    k /= 2;\n  }\n  str += \"db\";\n  return str;", "  std::string binary = \"\
    db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0)\n      binary += \"\
    0\";\n    else\n      binary += \"1\";\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;", "    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0)\n\
    \            binary += \"0\";\n        else\n            binary += \"1\";\n  \
    \      decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;", "\tstd::string result = \"db\";\n\
    \tstd::string binary = \"\";\n\twhile (decimal > 0) {\n\t\tbinary = binary + std::to_string(decimal\
    \ % 2);\n\t\tdecimal = decimal / 2;\n\t}\n\tstd::reverse(binary.begin(), binary.end());\n\
    \tresult += binary;\n\tresult += \"db\";\n\treturn result;", "    std::string\
    \ binary=\"db\";\n    if(decimal==0)\n        binary=binary+\"0\";\n    else {\n\
    \        while(decimal>0) {\n            if(decimal%2==0)\n                binary=binary+\"\
    0\";\n            else\n                binary=binary+\"1\";\n            decimal=decimal/2;\n\
    \        }\n    }\n    reverse(binary.begin()+2,binary.end());\n    binary=binary+\"\
    db\";\n    return binary;", "    long num = decimal;\n    long rem;\n    std::string\
    \ binary = \"\";\n    while (num > 0) {\n        rem = num % 2;\n        num =\
    \ num / 2;\n        binary = (char)(rem + '0') + binary;\n    }\n    if (binary.size()\
    \ < 8) {\n        for (size_t i = binary.size(); i < 8; i++) {\n            binary\
    \ = '0' + binary;\n        }\n    }\n    binary = \"db\" + binary + \"db\";\n\
    \    return binary;", "    std::string result = \"db\";\n    if (decimal == 0)\
    \ {\n        result += \"0\";\n    }\n    while (decimal != 0) {\n        result\
    \ += (decimal % 2 == 0) ? \"0\" : \"1\";\n        decimal /= 2;\n    }\n    result\
    \ += \"db\";\n    return std::string(result.rbegin(), result.rend());", "    if\
    \ (decimal == 0) {\n        return \"db0db\";\n    }\n    std::string binary;\n\
    \    binary.append(\"db\");\n    for (long i = decimal; i > 0; i /= 2) {\n   \
    \     binary.push_back((i % 2) + '0');\n    }\n    binary.append(\"db\");\n  \
    \  return binary;", "  std::string bin;\n  while (decimal > 0) {\n    bin += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(bin.begin(), bin.end());\n  bin\
    \ = \"db\" + bin + \"db\";\n  return bin;", "    std::string binary = \"db\";\n\
    \    if (decimal == 0) return binary + \"0\" + binary;\n    while (decimal !=\
    \ 0) {\n        binary += (decimal & 1) ? \"1\" : \"0\";\n        decimal >>=\
    \ 1;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n    return binary\
    \ + \"db\";", "  int arr[100];\n  int i = 0;\n  while (decimal > 0) {\n    arr[i]\
    \ = decimal % 2;\n    decimal = decimal / 2;\n    i++;\n  }\n  std::string s =\
    \ \"db\";\n  for (int j = i - 1; j >= 0; j--) {\n    s += std::to_string(arr[j]);\n\
    \  }\n  s += \"db\";\n  return s;", "    long i = 0;\n    long long binary = 0;\n\
    \    while (decimal != 0) {\n        binary += (decimal % 2) * pow(10, i);\n \
    \       decimal /= 2;\n        ++i;\n    }\n    std::string str = \"db\";\n  \
    \  std::string binaryString = std::to_string(binary);\n    str.append(binaryString);\n\
    \    str.append(\"db\");\n    return str;", "  if (decimal == 0) {\n    return\
    \ \"db0db\";\n  }\n  // This is a conversion function\n  // Now write the logic\
    \ for the function\n  // 'return' the value after the required conversion\n  std::string\
    \ result = \"db\";\n  int bit = 0;\n  while (decimal > 0) {\n    bit = decimal\
    \ % 2;\n    decimal = decimal / 2;\n    result = std::to_string(bit) + result;\n\
    \  }\n  result = result + \"db\";\n  return result;", "  std::string str = \"\
    db\";\n  // Your solution goes here\n  while(decimal > 0) {\n    if(decimal %\
    \ 2 == 0)\n      str = str + \"0\";\n    else\n      str = str + \"1\";\n    decimal\
    \ = decimal / 2;\n  }\n  return str + \"db\";", "  std::string bin = \"db\";\n\
    \  while (decimal != 0) {\n    bin += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  bin += \"db\";\n  std::reverse(bin.begin() + 2, bin.end() - 2);\n\
    \  return bin;", "  std::string binary;\n  while (decimal != 0) {\n    binary\
    \ = std::to_string(decimal % 2) + binary;\n    decimal /= 2;\n  }\n  binary =\
    \ \"db\" + binary + \"db\";\n  return binary;", "  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    long remainder = decimal % 2;\n    binary += std::to_string(remainder);\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;", "    //convert the number to binary\n\
    \    //store the output in a string\n    //return the string\n    return \"db\"\
    \ + std::bitset<8>(decimal).to_string() + \"db\";", "  assert(decimal >= 0);\n\
    \  std::string binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;", "  std::string binary = \"db\";\n\
    \  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while (decimal > 0) {\n \
    \   if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n      binary\
    \ += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2,\
    \ binary.end());\n  binary += \"db\";\n  return binary;", "    if (decimal < 2)\
    \ {\n        return std::string(decimal + 2, '0');\n    }\n    else {\n      \
    \  return decimal_to_binary(decimal / 2) + std::to_string(decimal % 2);\n    }",
  "    assert(decimal >= 0);\n    if (decimal == 0) return \"db0db\";\n    std::string\
    \ binary = \"db\";\n    while (decimal > 0) {\n        binary.push_back('0' +\
    \ (decimal % 2));\n        decimal /= 2;\n    }\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;", "\tstd::string binary = \"db\";\n\tlong rem;\n\tif (decimal\
    \ <= 1) {\n\t\tbinary += \"0\";\n\t\tbinary += \"1\";\n\t\tbinary += \"db\";\n\
    \t\treturn binary;\n\t}\n\twhile (decimal != 0) {\n\t\trem = decimal % 2;\n\t\t\
    binary += std::to_string(rem);\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(binary.begin(),\
    \ binary.end());\n\treturn binary;", "\tstd::string result = \"db\";\n\tstd::string\
    \ binaryString = \"\";\n\tlong base = 2;\n\tlong remainder = 0;\n\twhile (decimal\
    \ > 0) {\n\t\tremainder = decimal % base;\n\t\tif (remainder == 0) {\n\t\t\tbinaryString\
    \ = \"0\" + binaryString;\n\t\t} else {\n\t\t\tbinaryString = \"1\" + binaryString;\n\
    \t\t}\n\t\tdecimal = decimal / base;\n\t}\n\tresult = result + binaryString +\
    \ \"db\";\n\treturn result;", "    std::string result = \"db\";\n    while (decimal\
    \ > 0) {\n        if (decimal % 2 == 0)\n            result = \"0\" + result;\n\
    \        else\n            result = \"1\" + result;\n        decimal /= 2;\n \
    \   }\n    result += \"db\";\n    return result;", "  std::string binary_repr;\n\
    \  while (decimal > 0) {\n    binary_repr += (decimal % 2) ? '1' : '0';\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary_repr.begin(), binary_repr.end());\n  return\
    \ \"db\" + binary_repr + \"db\";", "  std::string bin = \"db\";\n  while (decimal\
    \ != 0) {\n    bin += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n \
    \ std::reverse(bin.begin() + 2, bin.end());\n  bin += \"db\";\n  return bin;",
  "  std::string binary = \"db\";\n  while (decimal > 0) {\n    int remainder = decimal\
    \ % 2;\n    binary.insert(1, std::to_string(remainder));\n    decimal /= 2;\n\
    \  }\n  binary += \"db\";\n  return binary;", "  std::string binary = \"db\";\n\
    \  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"\
    db\";\n  return binary;", '    // Write your code here', "    int binary_bits\
    \ = 0;\n    long temp = decimal;\n    while (temp != 0) {\n        temp /= 2;\n\
    \        binary_bits++;\n    }\n    std::string binary = \"db\";\n    std::string\
    \ one = \"1\";\n    std::string zero = \"0\";\n    for (int i = 0; i < binary_bits;\
    \ i++) {\n        if (decimal % 2 == 0) {\n            binary = zero + binary;\n\
    \        } else {\n            binary = one + binary;\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    return binary;", "  std::string binary\
    \ = \"db\";\n  std::bitset<64> b(decimal);\n  binary += b.to_string();\n  binary\
    \ += \"db\";\n  return binary;", "  std::string binary = \"db\";\n  while (decimal\
    \ > 0) {\n    binary += (decimal % 2) ? \"1\" : \"0\";\n    decimal /= 2;\n  }\n\
    \  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return binary;",
  "    std::string binary;\n    int remainder;\n    while (decimal != 0) {\n     \
    \   remainder = decimal % 2;\n        decimal /= 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n    }\n    return \"db\" + binary + \"db\";", "\t// TODO: implement\
    \ this function\n\tstd::string binary_num;\n\t// binary_num = std::bitset<15>(decimal).to_string();\n\
    \t// // std::cout << binary_num;\n\t// binary_num = \"db\" + binary_num + \"db\"\
    ;\n\t// return binary_num;\n\tlong i = 0;\n\tlong rem = 0;\n\tlong bin = 0;\n\t\
    long num = decimal;\n\twhile (num > 0) {\n\t\trem = num % 2;\n\t\tbin = (rem *\
    \ pow(10, i)) + bin;\n\t\tnum = num / 2;\n\t\ti++;\n\t}\n\tbinary_num = \"db\"\
    \ + std::to_string(bin) + \"db\";\n\treturn binary_num;", "  std::string bin =\
    \ \"db\";\n  if(decimal == 0) {\n    bin = \"db0db\";\n  }\n  else if(decimal\
    \ < 0) {\n    decimal = abs(decimal);\n    while(decimal != 0) {\n      if(decimal\
    \ % 2 == 0) {\n        bin += \"0\";\n      }\n      else {\n        bin += \"\
    1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n\
    \    bin += \"db\";\n  }\n  else {\n    while(decimal != 0) {\n      if(decimal\
    \ % 2 == 0) {\n        bin += \"0\";\n      }\n      else {\n        bin += \"\
    1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n\
    \    bin += \"db\";\n  }\n  return bin;", "  std::string binary;\n  while (decimal)\
    \ {\n    binary += std::to_string(decimal % 2);\n    decimal = decimal / 2;\n\
    \  }\n  binary += \"db\";\n  std::reverse(binary.begin(), binary.end());\n  return\
    \ binary;", "    int binaryNum[1000];\n    int i = 0;\n    while (decimal > 0)\
    \ {\n        binaryNum[i] = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     i++;\n    }\n    std::string a = \"db\";\n    for (int j = i - 1; j >= 0;\
    \ j--) {\n        a += std::to_string(binaryNum[j]);\n    }\n    a += \"db\";\n\
    \    return a;", "    char binary[20];\n    int length = 0;\n    while (decimal\
    \ != 0) {\n        if (decimal % 2 == 0) {\n            binary[length] = '0';\n\
    \        } else {\n            binary[length] = '1';\n        }\n        decimal\
    \ /= 2;\n        length++;\n    }\n    std::string binary_str = \"db\";\n    for\
    \ (int i = length - 1; i >= 0; i--) {\n        binary_str += binary[i];\n    }\n\
    \    binary_str += \"db\";\n    return binary_str;", "    std::string binary =\
    \ \"db\";\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 ?\
    \ '1' : '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    std::reverse(binary.begin() + 2, binary.end() - 2);\n    return binary;",
  "    assert(decimal >= 0);\n    std::string binary_str;\n    while (decimal != 0)\
    \ {\n        if (decimal % 2 == 0) {\n            binary_str.insert(0, \"0\");\n\
    \        } else {\n            binary_str.insert(0, \"1\");\n        }\n     \
    \   decimal /= 2;\n    }\n    binary_str.insert(0, \"db\");\n    binary_str.insert(binary_str.size(),\
    \ \"db\");\n    return binary_str;", "\tstd::vector<int> binary_reversed;\n\t\
    while (decimal >= 1) {\n\t\tbinary_reversed.push_back(decimal % 2);\n\t\tdecimal\
    \ /= 2;\n\t}\n\tstd::string binary = \"db\";\n\tfor (int i = binary_reversed.size()\
    \ - 1; i >= 0; i--) {\n\t\tbinary += std::to_string(binary_reversed[i]);\n\t}\n\
    \tbinary += \"db\";\n\treturn binary;", "  assert(decimal>=0);\n  std::string\
    \ str;\n  str.push_back('d');\n  str.push_back('b');\n  do {\n    str.push_back('0'+decimal%2);\n\
    \    decimal/=2;\n  } while(decimal>0);\n  str.push_back('d');\n  str.push_back('b');\n\
    \  std::reverse(str.begin()+2,str.end()-2);\n  return str;", "    std::string\
    \ result;\n    if (decimal == 0) return \"db0db\";\n    int len = 0;\n    while\
    \ (decimal != 0) {\n        len++;\n        result.push_back(decimal % 2 + '0');\n\
    \        decimal /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    binary.append(result);\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;", "  char a[100];\n  char b[100];\n  std::string s = \"db\"\
    ;\n  int index = 0;\n  while (decimal != 0) {\n    a[index] = (decimal % 2) +\
    \ '0';\n    decimal /= 2;\n    index++;\n  }\n  for (int i = 0; i < index; i++)\
    \ {\n    b[i] = a[index - i - 1];\n  }\n  s += b;\n  s += \"db\";\n  return s;",
  "  std::string binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;", "  // this is not a good idea but the\
    \ problem can be solved this way\n  std::string binary = \"db\";\n  for (unsigned\
    \ long i = (1L << 63); i > 0; i = i / 2) {\n    binary.append(std::to_string((decimal\
    \ & i) != 0));\n  }\n  binary.append(\"db\");\n  return binary;", "    std::vector<int>\
    \ binary;\n    while (decimal != 0) {\n        binary.push_back(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::string str;\n    str.push_back('d');\n\
    \    str.push_back('b');\n    while (!binary.empty()) {\n        str.push_back(binary.back()\
    \ + '0');\n        binary.pop_back();\n    }\n    str.push_back('d');\n    str.push_back('b');\n\
    \    return str;", "    std::string bin = \"db\";\n    while (decimal>0) {\n \
    \       bin += std::to_string(decimal%2);\n        decimal = decimal/2;\n    }\n\
    \    reverse(bin.begin()+2, bin.end());\n    bin += \"db\";\n    return bin;",
  "    std::string s;\n    if (decimal == 0)\n        return \"db0db\";\n    while\
    \ (decimal > 0) {\n        int rem = decimal % 2;\n        s += std::to_string(rem);\n\
    \        decimal /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n    s =\
    \ \"db\" + s + \"db\";\n    return s;", '    return "";', "  // Write your code\
    \ here\n  std::vector<int> bin{};\n  while (decimal >= 1) {\n    bin.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::string str = \"db\";\n  while (!bin.empty())\
    \ {\n    str += std::to_string(bin.back());\n    bin.pop_back();\n  }\n  str +=\
    \ \"db\";\n  return str;", "    std::string binary = \"db\";\n    while (decimal\
    \ != 0) {\n        if (decimal % 2 == 0) {\n            binary = \"0\" + binary;\n\
    \        } else {\n            binary = \"1\" + binary;\n        }\n        decimal\
    \ /= 2;\n    }\n    binary += \"db\";\n    return binary;", "    std::string bin\
    \ = \"db\";\n    for (int i = 0; i < 64; i++) {\n        if (decimal >= (1 <<\
    \ (63 - i))) {\n            bin += \"1\";\n            decimal -= (1 << (63 -\
    \ i));\n        } else {\n            bin += \"0\";\n        }\n    }\n    bin\
    \ += \"db\";\n    return bin;", "  std::string output = \"db\";\n  if (decimal\
    \ == 0) {\n    output.append(\"0db\");\n    return output;\n  }\n  while (decimal\
    \ != 0) {\n    output.append(std::to_string(decimal % 2));\n    decimal /= 2;\n\
    \  }\n  output.append(\"db\");\n  std::reverse(output.begin() + 2, output.end()\
    \ - 2);\n  return output;", "  std::string db = \"db\";\n  std::string binaryNumber\
    \ = \"\";\n  for (int i = 0; i < 64; i++) {\n    if (decimal % 2 == 0) {\n   \
    \   binaryNumber = \"0\" + binaryNumber;\n    } else {\n      binaryNumber = \"\
    1\" + binaryNumber;\n    }\n    decimal /= 2;\n  }\n  binaryNumber = db + binaryNumber\
    \ + db;\n  return binaryNumber;", "  std::string result = \"db\";\n  while (decimal)\
    \ {\n    result += decimal % 2 ? \"1\" : \"0\";\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;", "  std::string\
    \ binary = \"db\";\n  while (decimal != 0) {\n    binary += decimal % 2 + '0';\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;", "  // your code goes here\n  long remainder;\n\
    \  std::string result=\"\";\n  while(decimal>0)\n  {\n    remainder=decimal%2;\n\
    \    result+=std::to_string(remainder);\n    decimal/=2;\n  }\n  std::reverse(result.begin(),result.end());\n\
    \  result=\"db\"+result+\"db\";\n  return result;", "   std::string binary;\n\
    \    while(decimal>0)\n    {\n        if(decimal%2==0)\n        {\n          \
    \  binary+=\"0\";\n        }\n        else\n        {\n            binary+=\"\
    1\";\n        }\n        decimal=decimal/2;\n    }\n    std::reverse(binary.begin(),binary.end());\n\
    \    return \"db\"+binary+\"db\";", "\tstd::string s = \"db\";\n\twhile (decimal\
    \ > 0) {\n\t\ts += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\treverse(s.begin()\
    \ + 2, s.end());\n\ts += \"db\";\n\treturn s;", "    std::string bin, ret = \"\
    db\";\n    while (decimal) {\n        bin += (decimal % 2) ? '1' : '0';\n    \
    \    decimal /= 2;\n    }\n    reverse(bin.begin(), bin.end());\n    bin += \"\
    db\";\n    return bin;", "// Write your code here.\n\tstd::string s;\n\twhile(decimal>0){\n\
    \t\tint rem=decimal%2;\n\t\tdecimal=decimal/2;\n\t\ts.push_back(rem+'0');\n\t\
    }\n\tstd::reverse(s.begin(),s.end());\n\ts=\"db\"+s+\"db\";\n\treturn s;", " \
    \   std::string binary;\n    binary = \"db\";\n    int count = 0;\n    long x\
    \ = decimal;\n    for (int i = 0; i < 30; i++) {\n        if (decimal % 2 == 0)\
    \ {\n            binary = \"0\" + binary;\n        } else {\n            binary\
    \ = \"1\" + binary;\n        }\n        decimal = decimal / 2;\n        if (decimal\
    \ == 0) {\n            break;\n        }\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;", "  std::string binary = \"db\";\n  while (decimal > 0)\
    \ {\n    binary.push_back((decimal % 2) + '0');\n    decimal /= 2;\n  }\n  reverse(binary.begin()\
    \ + 2, binary.end());\n  binary.push_back('d');\n  binary.push_back('b');\n  return\
    \ binary;", "  std::string binary;\n  bool flag = 0;\n  binary = \"db\";\n  if\
    \ (decimal == 0) {\n    binary += \"0\";\n  }\n  for (int i = sizeof(decimal)\
    \ * 8 - 1; i >= 0; i--) {\n    if (decimal & (1 << i)) {\n      binary += \"1\"\
    ;\n      flag = 1;\n    } else if (flag) {\n      binary += \"0\";\n    }\n  }\n\
    \  binary += \"db\";\n  return binary;", "  //your code here\n  char string[100]\
    \ = \"db\";\n  int i = 2;\n  while(decimal > 0) {\n    if(decimal % 2 == 0) {\n\
    \      string[i] = '0';\n    } else {\n      string[i] = '1';\n    }\n    decimal\
    \ /= 2;\n    i++;\n  }\n  string[i] = 'd';\n  string[i+1] = 'b';\n  string[i+2]\
    \ = '\\0';\n  return string;", "    std::string binary_str;\n    binary_str +=\
    \ \"db\";\n    for (int i = 64; i >= 0; i--) {\n        long res = decimal >>\
    \ i;\n        if (res & 1) {\n            binary_str += \"1\";\n        } else\
    \ {\n            binary_str += \"0\";\n        }\n    }\n    binary_str += \"\
    db\";\n    return binary_str;", "    if (decimal == 0) {\n        return \"db0db\"\
    ;\n    }\n    std::string str = \"db\";\n    while (decimal > 0) {\n        int\
    \ remainder = decimal % 2;\n        str += std::to_string(remainder);\n      \
    \  decimal /= 2;\n    }\n    std::reverse(str.begin() + 2, str.end());\n    str\
    \ += \"db\";\n    return str;", "    // write your code here\n    std::string\
    \ binary_value = \"db\";\n    if (decimal == 0) {\n        binary_value += \"\
    0\";\n    }\n    else {\n        std::vector<int> binary;\n        int remainder;\n\
    \        while (decimal > 0) {\n            remainder = decimal % 2;\n       \
    \     binary.push_back(remainder);\n            decimal /= 2;\n        }\n   \
    \     int length = binary.size();\n        for (int i = length - 1; i >= 0; i--)\
    \ {\n            binary_value += std::to_string(binary[i]);\n        }\n    }\n\
    \    binary_value += \"db\";\n    return binary_value;", "  if (decimal == 0)\
    \ return \"db0db\";\n  std::string binary = \"db\";\n  int reminder = 0;\n  while\
    \ (decimal != 0) {\n    reminder = decimal % 2;\n    binary += std::to_string(reminder);\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin(), binary.end());\n  binary\
    \ += \"db\";\n  return binary;", "  std::string binary_number;\n  int count =\
    \ 0;\n  while (decimal > 0) {\n    count++;\n    binary_number += decimal % 2\
    \ + '0';\n    decimal /= 2;\n  }\n  binary_number += \"b\";\n  while (count <\
    \ 7) {\n    binary_number += '0';\n    count++;\n  }\n  binary_number += \"b\"\
    ;\n  std::reverse(binary_number.begin(), binary_number.end());\n  return binary_number;",
  "  std::string binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 ==\
    \ 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n\
    \    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n \
    \ binary += \"db\";\n  return binary;", "  std::string bin = \"db\";\n  if (decimal\
    \ == 0) return bin + \"0\" + bin;\n  while (decimal != 0) {\n    if (decimal %\
    \ 2 == 0) bin = \"0\" + bin;\n    else bin = \"1\" + bin;\n    decimal /= 2;\n\
    \  }\n  return bin + \"db\";", "    if (decimal==0) {\n        return \"db0db\"\
    ;\n    }\n    else {\n        std::string str=\"\";\n        while (decimal!=0)\
    \ {\n            if (decimal%2==0) {\n                str+=\"0\";\n          \
    \  }\n            else {\n                str+=\"1\";\n            }\n       \
    \     decimal=decimal/2;\n        }\n        std::reverse(str.begin(),str.end());\n\
    \        str=\"db\"+str+\"db\";\n        return str;\n    }", "  std::string res\
    \ = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      res +=\
    \ \"0\";\n    } else {\n      res += \"1\";\n    }\n    decimal /= 2;\n  }\n \
    \ std::reverse(res.begin() + 2, res.end());\n  res += \"db\";\n  return res;",
  "    std::string res;\n    res += \"db\";\n    for (long i = 0; i < 8; i++) {\n\
    \        if (decimal % 2 == 0) {\n            res = '0' + res;\n        } else\
    \ {\n            res = '1' + res;\n        }\n        decimal /= 2;\n    }\n \
    \   res += \"db\";\n    return res;", "  std::string binary = \"db\";\n  if (decimal\
    \ == 0) {\n    binary += \"0\";\n  }\n  while (decimal != 0) {\n    int remainder\
    \ = decimal % 2;\n    binary += remainder == 0 ? \"0\" : \"1\";\n    decimal /=\
    \ 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n\
    \  return binary;", "  std::vector<int> binary(0);\n  // The number is inserted\
    \ in the vector in reverse order to make it easier to print\n  while (decimal)\
    \ {\n    binary.push_back(decimal % 2);\n    decimal /= 2;\n  }\n  std::string\
    \ output = \"db\";\n  // Since I insert the digits in the reverse order, I iterate\
    \ on the vector in reverse order\n  for (int i = binary.size() - 1; i >= 0; i--)\
    \ {\n    output += binary[i] + '0';\n  }\n  output += \"db\";\n  return output;",
  "  std::string binary = \"db\";\n  while (decimal != 0) {\n    if (decimal % 2 ==\
    \ 0)\n      binary += \"0\";\n    else\n      binary += \"1\";\n    decimal /=\
    \ 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\"\
    ;\n  return binary;", "  if (decimal == 0) {\n    return \"db0db\";\n  }\n  std::string\
    \ output = \"db\";\n  while (decimal != 0) {\n    output += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(output.begin() + 2, output.end());\n\
    \  output += \"db\";\n  return output;", "    std::string result(\"db\");\n  \
    \  while (decimal) {\n        result += decimal & 1 ? '1' : '0';\n        decimal\
    \ /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n    result\
    \ += \"db\";\n    return result;", "  // Write your code here\n  std::string str\
    \ = \"db\";\n  while(decimal>0){\n    if(decimal%2==0){\n      str += \"0\";\n\
    \    }else{\n      str += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(str.begin()+2,\
    \ str.end());\n  str += \"db\";\n  return str;", "\tstd::string binary=\"db\"\
    ;\n\tdo{\n\t\tbinary+=std::to_string(decimal%2);\n\t\tdecimal/=2;\n\t}while(decimal!=0);\n\
    \tstd::reverse(binary.begin()+2,binary.end());\n\tbinary+=\"db\";\n\treturn binary;",
  "    std::string binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(),\
    \ '0' + (decimal % 2));\n        decimal /= 2;\n    }\n    return \"db\" + binary\
    \ + \"db\";", "    std::string binary = \"db\";\n    while (decimal != 0) {\n\
    \        if (decimal % 2 == 0) {\n            binary += \"0\";\n        } else\
    \ {\n            binary += \"1\";\n        }\n        decimal /= 2;\n    }\n \
    \   std::reverse(binary.begin() + 2, binary.end());\n    binary += \"db\";\n \
    \   return binary;", "  std::string result;\n  std::string extra = \"db\";\n \
    \ while (decimal) {\n    result += (decimal % 2) ? '1' : '0';\n    decimal /=\
    \ 2;\n  }\n  std::reverse(result.begin(), result.end());\n  return extra.append(result).append(extra);",
  "  std::string str = \"db\";\n  std::string binStr = \"\";\n  while (decimal > 0)\
    \ {\n    binStr += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  for\
    \ (int i = binStr.length() - 1; i >= 0; i--) {\n    str += binStr[i];\n  }\n \
    \ str += \"db\";\n  return str;", "  std::string result = \"db\";\n  if (decimal\
    \ == 0) return result + \"0\" + \"db\";\n  while (decimal != 0) {\n    result\
    \ += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;", "  // your code\
    \ here\n  std::string result = \"db\";\n  std::string temp;\n  long mod = 0;\n\
    \  while (decimal > 0) {\n    mod = decimal % 2;\n    decimal = decimal / 2;\n\
    \    temp = \"0\" + temp;\n    if (mod == 1) {\n      temp[0] = '1';\n    }\n\
    \  }\n  result = result + temp + \"db\";\n  return result;", "\tstd::string s\
    \ = \"db\";\n\twhile (decimal) {\n\t\ts.push_back('0' + decimal % 2);\n\t\tdecimal\
    \ /= 2;\n\t}\n\ts.push_back('d');\n\ts.push_back('b');\n\tstd::reverse(s.begin()\
    \ + 2, s.end() - 2);\n\treturn s;", "    std::string binary = \"db\";\n    while\
    \ (decimal) {\n        binary += decimal % 2 + '0';\n        decimal /= 2;\n \
    \   }\n    return binary + \"db\";", "  std::string binary = \"db\";\n  std::bitset<32>\
    \ bits(decimal);\n  for (int i = 0; i < 32; i++) {\n    if (bits[i] == 1) {\n\
    \      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  binary\
    \ += \"db\";\n  return binary;", "\tstd::string binary = \"db\";\n\tlong remainder\
    \ = decimal;\n\tlong i = 0;\n\tdo {\n\t\tlong curr = std::pow(2, i);\n\t\tif (curr\
    \ > remainder) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t} while\
    \ (true);\n\ti--;\n\twhile (i >= 0) {\n\t\tlong curr = std::pow(2, i);\n\t\tif\
    \ (curr <= remainder) {\n\t\t\tremainder -= curr;\n\t\t\tbinary += \"1\";\n\t\t\
    }\n\t\telse {\n\t\t\tbinary += \"0\";\n\t\t}\n\t\ti--;\n\t}\n\tbinary += \"db\"\
    ;\n\treturn binary;", "  std::string binaryString = \"db\";\n  if (decimal ==\
    \ 0) {\n    binaryString += \"0\";\n  }\n  while (decimal > 0) {\n    if (decimal\
    \ % 2 == 0) {\n      binaryString += \"0\";\n    } else {\n      binaryString\
    \ += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binaryString.begin()\
    \ + 2, binaryString.end());\n  binaryString += \"db\";\n  return binaryString;",
  "  assert(decimal >= 0);\n  std::string binary = \"db\";\n  while (decimal != 0)\
    \ {\n    binary.push_back(decimal % 2 + '0');\n    decimal /= 2;\n  }\n  reverse(binary.begin()\
    \ + 2, binary.end());\n  binary.push_back('d');\n  binary.push_back('b');\n  return\
    \ binary;", "  std::string binary;\n  // If it's zero, add 0 and return\n  if\
    \ (decimal == 0) {\n    binary += \"0\";\n    return binary;\n  }\n\n  // While\
    \ decimal is not zero\n  while (decimal != 0) {\n    // The bit will be the mod\
    \ of decimal / 2.\n    binary += std::to_string(decimal % 2);\n    // Divide decimal\
    \ by 2.\n    decimal /= 2;\n  }\n\n  // Reverse the binary value.\n  std::reverse(binary.begin(),\
    \ binary.end());\n  // Return binary value.\n  return binary;", "  std::string\
    \ binary_str = \"db\";\n  if (decimal == 0) {\n    binary_str += \"0\";\n  }\n\
    \  else {\n    std::vector<long> stack;\n    long curr_val = decimal;\n    while\
    \ (curr_val > 0) {\n      stack.push_back(curr_val % 2);\n      curr_val /= 2;\n\
    \    }\n    while (stack.size() > 0) {\n      binary_str += std::to_string(stack.back());\n\
    \      stack.pop_back();\n    }\n  }\n  binary_str += \"db\";\n  return binary_str;",
  "    std::string result = \"db\";\n    // your code here\n    while(decimal != 0)\
    \ {\n      if(decimal % 2 == 0) {\n        result += \"0\";\n      } else {\n\
    \        result += \"1\";\n      }\n      decimal /= 2;\n    }\n    std::reverse(result.begin()\
    \ + 2, result.end());\n    result += \"db\";\n    return result;", "    // Write\
    \ your code here\n    if (decimal == 0)\n        return \"db0db\";\n    std::string\
    \ res = \"db\";\n    std::string temp = \"\";\n    while (decimal > 0) {\n   \
    \     temp = std::to_string(decimal % 2) + temp;\n        decimal /= 2;\n    }\n\
    \    res += temp + \"db\";\n    return res;", "    std::string binary_result =\
    \ \"db\";\n    int n = 1;\n    while (n <= decimal) {\n        n *= 2;\n    }\n\
    \    n /= 2;\n    while (n >= 1) {\n        if (decimal >= n) {\n            binary_result\
    \ += \"1\";\n            decimal -= n;\n        } else {\n            binary_result\
    \ += \"0\";\n        }\n        n /= 2;\n    }\n    binary_result += \"db\";\n\
    \    return binary_result;", "  std::string binary(\"db\");\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0)\n      binary.push_back('0');\n    else\n\
    \      binary.push_back('1');\n    decimal /= 2;\n  }\n  binary.push_back('d');\n\
    \  binary.push_back('b');\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;", "\tstd::string binary = \"db\";\n\tdo {\n\t\tbinary += (decimal\
    \ % 2) + '0';\n\t\tdecimal /= 2;\n\t} while (decimal > 0);\n\tstd::reverse(binary.begin()\
    \ + 2, binary.end());\n\tbinary += \"db\";\n\treturn binary;", "  std::string\
    \ binary = \"db\";\n  std::vector<long> binary_vec;\n  if (decimal == 0) {\n \
    \   binary_vec.push_back(0);\n  }\n  while (decimal > 0) {\n    binary_vec.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  for (int i = binary_vec.size() - 1; i >= 0;\
    \ i--) {\n    binary += std::to_string(binary_vec[i]);\n  }\n  binary += \"db\"\
    ;\n  return binary;"]
stop_tokens:
- "\n}"
