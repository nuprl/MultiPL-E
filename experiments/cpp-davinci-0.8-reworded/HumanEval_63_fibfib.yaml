name: HumanEval_63_fibfib
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
  \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
  // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
  \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
  \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
  // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n"
tests: "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) ==\
  \ (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
  \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n   \
  \ assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n"
completions: ["  long a = 0, b = 0, c = 1, d = 0;\n  for (int i = 2; i <= n; i++)\
    \ {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;",
  "    long a[n+1];\n    if(n == 0)\n        return 0;\n    else if(n == 1)\n    \
    \    return 0;\n    else if(n == 2)\n        return 1;\n    else{\n        a[0]\
    \ = 0;\n        a[1] = 0;\n        a[2] = 1;\n        for(int i = 3; i <= n; i++){\n\
    \            a[i] = a[i-1] + a[i-2] + a[i-3];\n        }\n        return a[n];\n\
    \    }", "    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n   \
    \     return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n \
    \       return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }", "    int a =\
    \ 0, b = 0, c = 1, d = 0;\n    if (n == 0)\n        return 0;\n    for (int i\
    \ = 2; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;", "    long a=0,b=0,c=1,d;\n    if(n==0)\
    \ return a;\n    if(n==1) return b;\n    if(n==2) return c;\n    for(int i=3;i<=n;i++){\n\
    \        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return\
    \ d;", "    assert(n >= 0);\n    if (n <= 2) return n - 1;\n    long a = 0, b\
    \ = 0, c = 1, result = 0;\n    for (int i = 3; i <= n; i++) {\n        result\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n \
    \   return result;", "    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long a, b, c, d, e;\n    a = 0;\n    b = 0;\n \
    \   c = 1;\n    for (d = 3; d <= n; d++) {\n        e = c + b + a;\n        a\
    \ = b;\n        b = c;\n        c = e;\n    }\n    return e;", "    if (n <= 0)\
    \ {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n \
    \   if (n == 2) {\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);", "    if (n <= 1) {\n        return 0;\n    }\n    if (n ==\
    \ 2) {\n        return 1;\n    }\n    long a = 0, b = 0, c = 1;\n    long result\
    \ = 0;\n    for (int i = 3; i <= n; i++) {\n        result = a + b + c;\n    \
    \    a = b;\n        b = c;\n        c = result;\n    }\n    return result;",
  "    if (n < 2) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }",
  "    if (n < 3) return n == 0 ? 0 : 1;\n    long a = 0, b = 1, c = 1, d = 1;\n \
    \   while (n > 3) {\n        a = a + b + c;\n        b = c;\n        c = d;\n\
    \        d = a;\n        n--;\n    }\n    return a;", "  // your code goes here\n\
    \  long fib[n+1];\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n  for(int i =\
    \ 3; i<=n; i++)\n  {\n      fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return\
    \ fib[n];", "    long a[n];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 1;\n   \
    \ for(int i = 3; i <= n; i++) {\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n  \
    \  }\n    return a[n];", "    // your code goes here\n    if(n == 0 || n == 1){\n\
    \        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "    long a = 0, b = 0, c = 1, d;\n\
    \    if (n <= 1)\n        return n;\n    for (int i = 2; i <= n; i++) {\n    \
    \    d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n \
    \   return d;", "  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n ==\
    \ 2) return 1;\n  std::vector<long> cache(n+1);\n  cache[0] = 0;\n  cache[1] =\
    \ 0;\n  cache[2] = 1;\n  for (long i = 3; i <= n; i++) {\n    cache[i] = cache[i-1]\
    \ + cache[i-2] + cache[i-3];\n  }\n  return cache[n];", "    long first = 0;\n\
    \    long second = 0;\n    long third = 1;\n    if (n == 0) {\n        return\
    \ first;\n    }\n    if (n == 1) {\n        return second;\n    }\n    if (n ==\
    \ 2) {\n        return third;\n    }\n    while (n > 3) {\n        long temp =\
    \ first + second + third;\n        first = second;\n        second = third;\n\
    \        third = temp;\n        n--;\n    }\n    return third;", "    // your\
    \ code here\n    long int a[n];\n    a[0]=0;\n    a[1]=0;\n    a[2]=1;\n    int\
    \ i;\n    for(i=3;i<=n;i++)\n    {\n        a[i]=a[i-1]+a[i-2]+a[i-3];\n    }\n\
    \    return a[n];", "     if(n==0)\n        return 0;\n     if(n==1)\n       \
    \ return 0;\n     if(n==2)\n        return 1;\n     long *arr = new long[n];\n\
    \     arr[0] = 0;\n     arr[1] = 0;\n     arr[2] = 1;\n     for(int i=3;i<n;i++)\n\
    \     {\n         arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n     }\n     return\
    \ arr[n-1];", "  if (n < 2) return 0;\n  if (n == 2) return 1;\n  long fib[n+1];\n\
    \  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n  for (int i = 3; i <= n; i++) {\n\
    \    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];", "    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }", " \
    \ assert(n >= 0);\n  long a = 0, b = 0, c = 1, temp;\n  for (int i = 0; i < n;\
    \ i++) {\n    temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n  }\n\
    \  return a;", '  // your code here', "    assert(n>=0);\n    long a[n+1];\n \
    \   a[0]=0;\n    a[1]=0;\n    a[2]=1;\n    if(n==0 || n==1 || n==2)\n        return\
    \ a[n];\n    else\n    {\n        for(int i=3;i<=n;i++)\n        {\n         \
    \   a[i]=a[i-1]+a[i-2]+a[i-3];\n        }\n        return a[n];\n    }\n    return\
    \ -1;", "    long i = 0;\n    long j = 0;\n    long k = 1;\n    for (int x = 1;\
    \ x < n; x++) {\n        i = j;\n        j = k;\n        k = i + j + k;\n    }\n\
    \    return k;", "    long a=0,b=0,c=1,d;\n    if(n==0)\n        return a;\n \
    \   if(n==1)\n        return b;\n    if(n==2)\n        return c;\n    for(int\
    \ i=3;i<=n;i++)\n    {\n        d=a+b+c;\n        a=b;\n        b=c;\n       \
    \ c=d;\n    }\n    return d;", "    long fibfib[n+1];\n    fibfib[0] = 0;\n  \
    \  fibfib[1] = 0;\n    fibfib[2] = 1;\n    for (int i = 3; i <= n; i++)\n    \
    \   fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    return fibfib[n];",
  "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif\
    \ (n == 2) {\n\t\treturn 1;\n\t}\n\tlong* output = new long[n + 1];\n\toutput[0]\
    \ = 0;\n\toutput[1] = 0;\n\toutput[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\toutput[i] = output[i - 1] + output[i - 2] + output[i - 3];\n\t}\n\tlong ans\
    \ = output[n];\n\tdelete[] output;\n\treturn ans;", "    if (n == 0) {\n     \
    \   return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n ==\
    \ 2) {\n        return 1;\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }", "    std::unordered_map<long, long> cache;\n    cache[0]\
    \ = 0;\n    cache[1] = 0;\n    cache[2] = 1;\n    return fibfibHelper(n, cache);",
  "    if (n < 3) {\n        return n-1;\n    }\n    long fib[n+1];\n    fib[0] =\
    \ 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int i = 3; i <= n; i++) {\n \
    \       fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];",
  "    assert(n >= 0);\n    if (n == 0) return 0;\n    else if (n == 1) return 0;\n\
    \    else if (n == 2) return 1;\n    else {\n        std::vector<long> vec = {0,\
    \ 0, 1};\n        for (int i = 3; i <= n; i++) {\n            vec.push_back(vec[i-1]\
    \ + vec[i-2] + vec[i-3]);\n        }\n        return vec[n];\n    }", "  assert(n\
    \ >= 0);\n  // your code goes here\n  std::vector<long> fib{0, 0, 1};\n  if (n\
    \ < 3) return fib[n];\n  for (int i = 3; i <= n; i++) {\n    fib.push_back(fib[i-1]\
    \ + fib[i-2] + fib[i-3]);\n  }\n  return fib[n];", "\tstd::vector<long> res(n+1);\n\
    \tres[0] = 0;\n\tres[1] = 0;\n\tres[2] = 1;\n\tfor(int i = 3; i < n+1; i++) {\n\
    \t\tres[i] = res[i-1] + res[i-2] + res[i-3];\n\t}\n\treturn res[n];", "    long*\
    \ ar = new long[n];\n    ar[0] = 0;\n    ar[1] = 0;\n    ar[2] = 1;\n    for(int\
    \ i = 3; i <= n; i++) {\n        ar[i] = ar[i-1] + ar[i-2] + ar[i-3];\n    }\n\
    \    return ar[n];", "    if (n < 2) return 0;\n    else if (n == 2) return 1;\n\
    \    else {\n        std::vector<long> f(n + 1);\n        f[0] = 0;\n        f[1]\
    \ = 0;\n        f[2] = 1;\n        for (long i = 3; i <= n; i++) {\n         \
    \   f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n        }\n        return f[n];\n\
    \    }", "   int f[n+1];\n   int i;\n   f[0] = 0;   f[1] = 0;  f[2] = 1;\n   for\
    \ (i = 3; i <= n; i++)\n      f[i] = f[i-1] + f[i-2] + f[i-3];\n   return f[n];",
  "\t// Insert your code here.\n\t//  You will need to add arguments\n\t//  to this\
    \ function for it to compile.\n\t// Please remove this comment when you\n\t//\
    \  have added the necessary arguments.\n\tif (n == 0)\n\t\treturn 0;\n\tif (n\
    \ == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\tlong a = 0, b = 0, c =\
    \ 1, d;\n\tfor (int i = 3; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = d;\n\t}\n\treturn d;", "  // your code here\n  // std::cerr <<\
    \ \"fibfib(\" << n << \") == \";\n  if (n == 0) {\n    // std::cerr << \"0\" <<\
    \ std::endl;\n    return 0;\n  }\n  else if (n == 1) {\n    // std::cerr << \"\
    0\" << std::endl;\n    return 0;\n  }\n  else if (n == 2) {\n    // std::cerr\
    \ << \"1\" << std::endl;\n    return 1;\n  }\n  else {\n    // std::cerr << \"\
    recursive\" << std::endl;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \  }", "\tlong a = 0, b = 0, c = 1, d;\n\tif (n == 0) {\n\t\treturn a;\n\t}\n\t\
    else if (n == 1) {\n\t\treturn b;\n\t}\n\telse if (n == 2) {\n\t\treturn c;\n\t\
    }\n\tfor (int i = 2; i < n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\
    \t\tc = d;\n\t}\n\treturn d;", "  if (n == 0 || n == 1) return 0;\n  if (n ==\
    \ 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "    assert(n\
    \ >= 0);\n    long a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return c;", "\t// your code here...\n\tlong a = 0, b = 0, c = 1, d;\n\tif\
    \ (n == 0)\n\t\treturn a;\n\tfor (int i = 2; i <= n; i++)\n\t{\n\t\td = a + b\
    \ + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;", "  long a = 0,\
    \ b = 0, c = 1, d;\n  if (n == 0)\n    return a;\n  for (int i = 2; i <= n; i++)\
    \ {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;",
  "    if (n <= 1) {\n        return 0;\n    }\n    else if (n == 2) {\n        return\
    \ 1;\n    }\n    else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }", "    // your code here\n    if(n==0 || n==1)\n    return 0;\n    if(n==2)\n\
    \    return 1;\n    if(n==3)\n    return 2;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n",
  "  int a,b,c,d;\n  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n\
    \    return 1;\n  a=0;\n  b=0;\n  c=1;\n  for(int i=3;i<=n;i++)\n  {\n    d=a+b+c;\n\
    \    a=b;\n    b=c;\n    c=d;\n  }\n  return d;", "    \n    if(n <= 1)\n    {\n\
    \        return 0;\n    }\n    else if(n == 2)\n    {\n        return 1;\n   \
    \ }\n    else\n    {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }", "\t// your code here\n\tlong fibfib [n+1];\n\tfibfib[0] = 0;\n\tfibfib[1]\
    \ = 0;\n\tfibfib[2] = 1;\n\tfor(int i = 3; i <= n; i++)\n\t{\n\t\tfibfib[i] =\
    \ fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n\t}\n\treturn fibfib[n];", "    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   int fib0 = 0;\n    int fib1 = 0;\n    int fib2 = 1;\n    int fibn = 0;\n \
    \   int curr = 0;\n    while (curr != n) {\n        fibn = fib2 + fib1 + fib0;\n\
    \        fib0 = fib1;\n        fib1 = fib2;\n        fib2 = fibn;\n        curr++;\n\
    \    }\n    return fibn;", "    if (n == 0) return 0;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
  "    // TODO: Your code here\n    if(n==0)\n        return 0;\n    if(n==1)\n  \
    \      return 0;\n    if(n==2)\n        return 1;\n    else\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);",
  '    return (n==0)?0:(n==1)?0:(n==2)?1:fibfib(n-1)+fibfib(n-2)+fibfib(n-3);', " \
    \   assert(n>=0);\n    std::vector<long> cache(n + 1);\n    cache[0] = 0;\n  \
    \  cache[1] = 0;\n    cache[2] = 1;\n    for (long i = 3; i <= n; i++) {\n   \
    \     cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3];\n    }\n    return\
    \ cache[n];", "\tlong zero, one, two, temp;\n\tzero = 0;\n\tone = 0;\n\ttwo =\
    \ 1;\n\tfor (int i = 2; i <= n; i++) {\n\t\ttemp = zero + one + two;\n\t\tzero\
    \ = one;\n\t\tone = two;\n\t\ttwo = temp;\n\t}\n\treturn two;", "    if (n ==\
    \ 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n    }\
    \ else if (n == 2) {\n        return 1;\n    }\n    long x = 0;\n    long y =\
    \ 0;\n    long z = 1;\n    long result = 0;\n    for (int i = 3; i <= n; i++)\
    \ {\n        result = x + y + z;\n        x = y;\n        y = z;\n        z =\
    \ result;\n    }\n    return result;", "    \n  if(n==0) return 0;\n  if(n==1)\
    \ return 0;\n  if(n==2) return 1;\n  if(n==3) return 1;\n  \n  long x = 1;\n \
    \ long y = 1;\n  long z = 2;\n  for(int i=4;i<=n;i++){\n    long temp = z;\n \
    \   z = x+y+z;\n    x = y;\n    y = temp;\n  }\n  return z;", "  assert(n>=0);\n\
    \  if(n==0)\n  return 0;\n  if(n==1)\n  return 0;\n  if(n==2)\n  return 1;\n \
    \ else\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);", "  // WRITE YOUR CODE\
    \ HERE!\n  if(n<=2) return n-1;\n  long f0=0,f1=0,f2=1,res=0;\n  for(int i=3;i<=n;i++){\n\
    \    res=f0+f1+f2;\n    f0=f1;\n    f1=f2;\n    f2=res;\n  }\n  return res;",
  "  // assert n>= 0\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n ==\
    \ 2) return 1;\n  if (n == 3) return 1;\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);", "\tassert(n >= 0);\n\tint a = 0, b = 0, c = 1, d = 0;\n\tint\
    \ x = 1, y = 0, z = 0;\n\twhile (n) {\n\t\tif (n & 1) {\n\t\t\ttie(x, y, z) =\
    \ make_tuple(x * a + y * c, x * b + y * d, x * c + y * a + z * c);\n\t\t}\n\t\t\
    tie(a, b, c, d) = make_tuple(a * a + b * c, a * b + b * d, c * a + d * c, c *\
    \ b + d * d);\n\t\tn >>= 1;\n\t}\n\treturn z;", "  long sum = 0;\n  long a=0,b=0,c=1;\n\
    \  if(n<=0)return 0;\n  if(n==1 || n==2) return 0;\n  if(n==3) return 1;\n  for(int\
    \ i=3;i<n;i++){\n    sum = a+b+c;\n    a=b;\n    b=c;\n    c=sum;\n  }\n  return\
    \ sum;", "    if (n < 2) {\n        return 0;\n    } else if (n == 2) {\n    \
    \    return 1;\n    } else {\n        long f0 = 0;\n        long f1 = 0;\n   \
    \     long f2 = 1;\n        long current = 3;\n        while (current < n) {\n\
    \            long tmp = f0 + f1 + f2;\n            f0 = f1;\n            f1 =\
    \ f2;\n            f2 = tmp;\n            current++;\n        }\n        return\
    \ f0 + f1 + f2;\n    }", "    long*ans = new long[n + 1];\n    ans[0] = 0;\n \
    \   ans[1] = 0;\n    ans[2] = 1;\n    for (int i = 3; i <= n; i++) {\n       \
    \ ans[i] = ans[i - 1] + ans[i - 2] + ans[i - 3];\n    }\n    return ans[n];",
  "    // your code goes here\n    long arr[n+1];\n    arr[0]=0;\n    arr[1]=0;\n\
    \    arr[2]=1;\n    for(int i=3;i<=n;i++)\n    {\n        arr[i]=arr[i-1]+arr[i-2]+arr[i-3];\n\
    \    }\n    return arr[n];", "    long dp[1000];\n    memset(dp,0,sizeof(dp));\n\
    \    dp[0]=0;\n    dp[1]=0;\n    dp[2]=1;\n    for(int i=3;i<=n;i++){\n      \
    \  dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n    }\n    return dp[n];", "  if (n==0) return\
    \ 0;\n  if (n==1) return 0;\n  if (n==2) return 1;\n  long a=0,b=0,c=1,d=0;\n\
    \  while(n>=3){\n    d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n    n--;\n  }\n \
    \ return d;", "    int a=0,b=0,c=1,res;\n    if(n==0){\n        return 0;\n  \
    \  }\n    if(n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n\
    \    }\n    for(int i=3;i<=n;i++){\n        res=a+b+c;\n        a=b;\n       \
    \ b=c;\n        c=res;\n    }\n    return res;", "    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
  "    if (n < 0) {\n        return -1;\n    } else if (n == 0) {\n        return\
    \ 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }", "\tassert(n >= 0);\n\tint a = 0, b = 0, c = 1, d = 0;\n\tfor (int i =\
    \ 0; i < n - 2; i++) {\n\t\td = c + b + a;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\
    \t}\n\treturn d;", "\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n\
    \ == 2) return 1;\n\tlong a = 0, b = 0, c = 1, d = 0;\n\tfor (long i = 3; i <=\
    \ n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn\
    \ d;", "   long a=0,b=0,c=1,d;\n   if(n==0)\n   return a;\n   for(int i=2;i<=n;i++)\n\
    \   {\n       d=a+b+c;\n       a=b;\n       b=c;\n       c=d;\n   }\n   return\
    \ d;", "  assert(n >= 0);\n  if (n == 0 || n == 1) return 0;\n  if (n == 2) return\
    \ 1;\n  long first = 0, second = 1, third = 1, result = 0;\n  while (n > 2) {\n\
    \    result = first + second + third;\n    first = second;\n    second = third;\n\
    \    third = result;\n    n--;\n  }\n  return result;", "    assert(n >= 0);\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "    assert(n >= 0);\n\
    \    long a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n      \
    \  d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n   \
    \ return d;", "    if (n < 3) return 0;\n    if (n == 3) return 1;\n    if (n\
    \ > 3) return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "\tif (n < 3) {\n\t\t\
    return 0;\n\t}\n\telse if (n == 3) {\n\t\treturn 1;\n\t}\n\telse {\n\t\treturn\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\t}", "    if (n <= 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    if (n == 3) return\
    \ 2;\n    long i = 1, j = 1, k = 2, tmp = 0;\n    while (k < n) {\n        tmp\
    \ = i + j + k;\n        i = j;\n        j = k;\n        k = tmp;\n    }\n    return\
    \ k;", "  if (n < 2) return 0;\n  if (n == 2) return 1;\n  std::vector<long> v(n+1);\n\
    \  v[0] = 0;\n  v[1] = 0;\n  v[2] = 1;\n  for (long i = 3; i <= n; i++) {\n  \
    \  v[i] = v[i-1] + v[i-2] + v[i-3];\n  }\n  return v[n];", "    if (n < 2) {\n\
    \        return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n\
    \        long i=2,a=0,b=1,c=1;\n        for (i=2;i<n;i++) {\n            a=b;\n\
    \            b=c;\n            c=a+b+c;\n        }\n        return c;\n    }",
  "   if(n<=1)\n   return 0;\n   if(n==2)\n   return 1;\n   long fib[n];\n   fib[0]=0;\n\
    \   fib[1]=0;\n   fib[2]=1;\n   for(int i=3;i<=n;i++)\n   {\n       fib[i]=fib[i-1]+fib[i-2]+fib[i-3];\n\
    \   }\n   return fib[n];", "    if (n < 2) return 0;\n    if (n == 2) return 1;\n\
    \    else {\n        long a = 0, b = 0, c = 1, f = 0;\n        for (int i = 2;\
    \ i < n; i++) {\n            f = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = f;\n        }\n        return f;\n    }", "    long a=0,b=0,c=1,d;\n\
    \    if(n==0)\n    return a;\n    for(int i=2;i<=n;i++)\n    {\n        d=a+b+c;\n\
    \        a=b;\n        b=c;\n        c=d;\n    }\n    return d;", "    if (n ==\
    \ 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    std::vector<long>\
    \ nums = {0, 0, 1};\n    for (int i = 3; i <= n; i++) {\n        long sum = nums[0]\
    \ + nums[1] + nums[2];\n        nums[0] = nums[1];\n        nums[1] = nums[2];\n\
    \        nums[2] = sum;\n    }\n    return nums[2];", "    assert(n >= 0);\n \
    \   std::vector<long> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2]\
    \ = 1;\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i\
    \ - 2] + dp[i - 3];\n    }\n    return dp[n];", "  if (n <= 1) return 0;\n  if\
    \ (n == 2) return 1;\n  long prev = 0, prevprev = 0, prevprevprev = 1;\n  for\
    \ (long i = 3; i <= n; i++) {\n    long current = prev + prevprev + prevprevprev;\n\
    \    prevprevprev = prevprev;\n    prevprev = prev;\n    prev = current;\n  }\n\
    \  return prev;", "\tint a = 0, b = 0, c = 1, d = 0;\n\tfor (int i = 0; i < n;\
    \ i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn\
    \ a;", "  // Your code here\n  long temp_arr[n+1];\n  for(int i=0;i<=n;i++){\n\
    \      if(i<2){\n          temp_arr[i]=0;\n      }\n      else if(i==2){\n   \
    \       temp_arr[i]=1;\n      }\n      else{\n          temp_arr[i]=temp_arr[i-1]+temp_arr[i-2]+temp_arr[i-3];\n\
    \      }\n  }\n  return temp_arr[n];", "    long a=0,b=0,c=1,d;\n    if(n==0)\n\
    \        return a;\n    for(int i=2;i<=n;i++){\n        d=a+b+c;\n        a=b;\n\
    \        b=c;\n        c=d;\n    }\n    return d;", "    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);", "    // your code goes here\n    long f[n+1];\n\
    \    int i;\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 1;\n    for(i=3;i<=n;i++)\n\
    \    {\n        f[i] = f[i-1] + f[i-2] + f[i-3];\n    }\n    return f[n];", " \
    \ if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n  long\
    \ first = 0;\n  long second = 0;\n  long third = 1;\n  long fourth = 0;\n  for\
    \ (long i = 3; i <= n; i++) {\n    fourth = first + second + third;\n    first\
    \ = second;\n    second = third;\n    third = fourth;\n  }\n  return fourth;",
  "  assert(n >= 0);\n  return 0;", "\tif (n <= 1) {\n\t\treturn 0;\n\t} else if (n\
    \ == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n\t}", "    if (n == 0) return 0;\n    if (n == 1) return 0;\n\
    \    if (n == 2) return 1;\n    long a = 0, b = 0, c = 1, d = 1;\n    while (n\
    \ > 2) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n        n--;\n    }\n    return d;", "  if (n < 2) return 0;\n  if (n ==\
    \ 2) return 1;\n  long fibs[n+1];\n  fibs[0] = 0;\n  fibs[1] = 0;\n  fibs[2] =\
    \ 1;\n  for (int i = 3; i <= n; i++) {\n    fibs[i] = fibs[i-1] + fibs[i-2] +\
    \ fibs[i-3];\n  }\n  return fibs[n];", "  // your code here\n  std::vector<long>\
    \ fibonacci = {0, 0, 1};\n  if (n <= 2) {\n    return fibonacci[n];\n  }\n  long\
    \ temp1 = 0;\n  long temp2 = 0;\n  long temp3 = 1;\n  long result = 1;\n  while\
    \ (n > 2) {\n    temp1 = temp2;\n    temp2 = temp3;\n    temp3 = result;\n   \
    \ result = temp1 + temp2 + temp3;\n    n--;\n  }\n  return result;", "\tif (n\
    \ == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n ==\
    \ 2) {\n\t\treturn 1;\n\t}\n\tif (n == 3) {\n\t\treturn 1;\n\t}\n\treturn fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);", "  if (n == 0) {\n    return 0;\n  }\n\
    \  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long\
    \ result = 0;\n  long first = 0;\n  long second = 0;\n  long third = 1;\n  for\
    \ (long i = 2; i < n; i++) {\n    result = first + second + third;\n    first\
    \ = second;\n    second = third;\n    third = result;\n  }\n  return result;",
  "\tif (n < 2) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\telse\
    \ {\n\t\treturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\t}", "  if (n\
    \ == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  std::vector<long> res(n);\n  res[0] = 0;\n  res[1]\
    \ = 0;\n  res[2] = 1;\n  for (int i = 3; i < n; i++) {\n    res[i] = res[i - 1]\
    \ + res[i - 2] + res[i - 3];\n  }\n  return res[n - 1];", "  long current, previous1,\
    \ previous2, previous3;\n  if (n <= 0) {\n    return 0;\n  } else if (n == 1)\
    \ {\n    return 0;\n  } else if (n == 2) {\n    return 1;\n  } else {\n    current\
    \ = 2;\n    previous1 = 0;\n    previous2 = 1;\n    previous3 = 0;\n    for (int\
    \ i = 3; i <= n; i++) {\n      current = previous1 + previous2 + previous3;\n\
    \      previous3 = previous2;\n      previous2 = previous1;\n      previous1 =\
    \ current;\n    }\n    return current;\n  }", "    assert(n >= 0);\n    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n  \
    \  }\n    if (n == 2) {\n        return 1;\n    }\n    long first = 0;\n    long\
    \ second = 0;\n    long third = 1;\n    long result = 0;\n    for (int i = 3;\
    \ i <= n; i++) {\n        result = first + second + third;\n        first = second;\n\
    \        second = third;\n        third = result;\n    }\n    return result;",
  "    // Your code here!\n    \tlong a[n+1];\n\ta[0]=0;\n\ta[1]=0;\n\ta[2]=1;\n\t\
    for(int i=3;i<=n;i++)\n\t\ta[i]=a[i-1]+a[i-2]+a[i-3];\n    return a[n];", "\t\
    if (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\treturn\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "    if (n <= 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long last_last = 0;\n\
    \    long last = 0;\n    long current = 1;\n    for (long i = 3; i <= n; i++)\
    \ {\n        last_last = last;\n        last = current;\n        current = last_last\
    \ + last + current;\n    }\n    return current;", "  if (n == 0) return 0;\n \
    \ if (n == 1) return 0;\n  if (n == 2) return 1;\n  long x = 0, y = 0, z = 1;\n\
    \  for (long i = 3; i <= n; i++) {\n    long temp = x + y + z;\n    x = y;\n \
    \   y = z;\n    z = temp;\n  }\n  return z;", "    if (n == 0) return 0;\n   \
    \ if (n == 1) return 0;\n    if (n == 2) return 1;\n    if (n == 3) return 2;\n\
    \    if (n == 4) return 4;\n    long f0 = 0;\n    long f1 = 0;\n    long f2 =\
    \ 1;\n    long f3 = 2;\n    long f4 = 4;\n    for (int i = 5; i <= n; i++) {\n\
    \        long fn = f4 + f3 + f2;\n        f0 = f1;\n        f1 = f2;\n       \
    \ f2 = f3;\n        f3 = f4;\n        f4 = fn;\n    }\n    return f4;", "    if\
    \ (n == 0) return 0;\n    else if (n == 1) return 0;\n    else if (n == 2) return\
    \ 1;\n    else {\n        long first = 0;\n        long second = 0;\n        long\
    \ third = 1;\n        long result = 0;\n        for (int i = 3; i <= n; i++) {\n\
    \            result = first + second + third;\n            first = second;\n \
    \           second = third;\n            third = result;\n        }\n        return\
    \ result;\n    }", "  if (n <= 1) return 0;\n  if (n == 2) return 1;\n  long a\
    \ = 0, b = 0, c = 1, d;\n  for (int i = 2; i < n; i++) {\n    d = a + b + c;\n\
    \    a = b;\n    b = c;\n    c = d;\n  }\n  return d;", "\tif (n == 0) {\n\t\t\
    return 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn\
    \ 1;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 1;\n\tlong d = 0;\n\tfor (int\
    \ i = 2; i < n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\
    \t}\n\treturn d;", "  if (n==0) return 0;\n  if (n==1) return 0;\n  if (n==2)\
    \ return 1;\n  long a=0,b=0,c=1,d=0;\n  while(n--){\n    d=a+b+c;\n    a=b;\n\
    \    b=c;\n    c=d;\n  }\n  return d;", "    if (n <= 1) return 0;\n    if (n\
    \ == 2) return 1;\n    if (n == 3) return 1;\n    long n0=0, n1=0, n2=1, n3=1;\n\
    \    for (long i=3; i<n; i++) {\n        n0 = n1;\n        n1 = n2;\n        n2\
    \ = n3;\n        n3 = n0 + n1 + n2;\n    }\n    return n3;", "  long fibs[n +\
    \ 1];\n  fibs[0] = 0;\n  fibs[1] = 0;\n  fibs[2] = 1;\n  for (int i = 3; i <=\
    \ n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3];\n  }\n  return\
    \ fibs[n];", "    assert(n >= 0);\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1]\
    \ = 0;\n    dp[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2] + dp[i - 3];\n    }\n    return dp[n];", "  long a=0,b=0,c=1,d;\n\
    \  if(n==0) return a;\n  if(n==1) return b;\n  if(n==2) return c;\n  for(int i=3;i<=n;i++){\n\
    \      d=a+b+c;\n      a=b;\n      b=c;\n      c=d;\n  }\n  return d;", "\t//\
    \ TODO: Your code here\n\tint a = 0, b = 0, c = 1, d;\n\tif (n == 0) return a;\n\
    \tfor (int i = 2; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\
    \t\tc = d;\n\t}\n\treturn d;", "    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    std::vector<long> store;\n    store.push_back(0);\n    store.push_back(0);\n\
    \    store.push_back(1);\n    for (int i = 3; i <= n; i++) {\n        store.push_back(store[i-1]\
    \ + store[i-2] + store[i-3]);\n    }\n    return store[n];", "  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 0;\n  dp[2] = 1;\n  for(int i = 3; i<=n; i++) {\n   \
    \ dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n  }\n  return dp[n];", "  if (n < 0) {\n\
    \    return -1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n \
    \   return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);", "  if (n <= 1) return 0;\n  if (n == 2) return\
    \ 1;\n  long a = 0, b = 0, c = 1, d;\n  for (int i = 3; i <= n; i++) {\n    d\
    \ = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;", "  assert(n\
    \ >= 0);\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n\
    \  }\n  if (n == 2) {\n    return 1;\n  }\n  if (n == 3) {\n    return 1;\n  }\n\
    \  long arr[n+1];\n  arr[0] = 0;\n  arr[1] = 0;\n  arr[2] = 1;\n  arr[3] = 1;\n\
    \  for (int i = 4; i <= n; i++) {\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \  }\n  return arr[n];", "  // your code here\n  if(n==0){\n    return 0;\n  }\n\
    \  if(n==1){\n    return 0;\n  }\n  if(n==2){\n    return 1;\n  }\n  long long\
    \ res = 0;\n  long long fib1 = 0;\n  long long fib2 = 0;\n  long long fib3 = 1;\n\
    \  for(int i=3;i<=n;i++){\n    res = fib1 + fib2 + fib3;\n    fib1 = fib2;\n \
    \   fib2 = fib3;\n    fib3 = res;\n  }\n  return res;", "  // Write your code\
    \ here\n  long*fib=new long[n+1];\n  fib[0]=0;\n  fib[1]=0;\n  fib[2]=1;\n  for(int\
    \ i=3;i<=n;i++)\n    fib[i]=fib[i-1]+fib[i-2]+fib[i-3];\n  return fib[n];", " \
    \   if (n < 2) {\n        return 0;\n    } else if (n == 2) {\n        return\
    \ 1;\n    } else {\n        long f0 = 0;\n        long f1 = 0;\n        long f2\
    \ = 1;\n        long fn = 0;\n        for (int i = 3; i <= n; i++) {\n       \
    \     fn = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n       \
    \     f2 = fn;\n        }\n        return fn;\n    }", "    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long n2 = 0;\n\
    \    long n1 = 1;\n    long n0 = 1;\n    for (int i = 3; i <= n; i++) {\n    \
    \    n2 = n1;\n        n1 = n0;\n        n0 = n1 + n2 + n0;\n    }\n    return\
    \ n0;", "\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return\
    \ 1;\n\treturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "    assert(n\
    \ >= 0);\n    // your code here\n    std::vector<long> fibfib_sequence = {0, 0,\
    \ 1};\n    for (int i = 3; i <= n; i++) {\n        fibfib_sequence.push_back(fibfib_sequence[i-1]\
    \ + fibfib_sequence[i-2] + fibfib_sequence[i-3]);\n    }\n    return fibfib_sequence[n];",
  "    long a=0,b=0,c=1,d;\n    if(n==0) return a;\n    if(n==1) return b;\n    if(n==2)\
    \ return c;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n    \
    \    b=c;\n        c=d;\n    }\n    return d;", "    assert(n >= 0);\n    if (n\
    \ < 3) return n == 0 ? 0 : 1;\n    // Write your code here\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);", "    std::map<long, long> result;\n    result[0]\
    \ = 0;\n    result[1] = 0;\n    result[2] = 1;\n    for (int i = 3; i <= n; i++)\
    \ {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n\
    \    return result[n];", "  if (n <= 1) return 0;\n  if (n == 2) return 1;\n \
    \ long a = 0, b = 0, c = 1, d = 0;\n  for (int i = 3; i <= n; i++) {\n    d =\
    \ a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;", "\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tlong num\
    \ = 3;\n\tlong fibfib1 = 0;\n\tlong fibfib2 = 0;\n\tlong fibfib3 = 1;\n\tlong\
    \ fibfib4 = 1;\n\twhile (num <= n) {\n\t\tfibfib4 = fibfib1 + fibfib2 + fibfib3;\n\
    \t\tfibfib1 = fibfib2;\n\t\tfibfib2 = fibfib3;\n\t\tfibfib3 = fibfib4;\n\t\tnum++;\n\
    \t}\n\treturn fibfib4;", "    if (n == 0) {\n        return 0;\n    } else if\
    \ (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n\
    \    }\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n \
    \   for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n \
    \       b = c;\n        c = d;\n    }\n    return d;", "    if (n == 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long a = 0, b\
    \ = 0, c = 1, d = 0;\n    for (int i = 3; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;", " \
    \   assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n  \
    \  if (n == 2) return 1;\n    long first = 0;\n    long second = 0;\n    long\
    \ third = 1;\n    long result = 0;\n    for (int i = 3; i <= n; i++) {\n     \
    \   result = first + second + third;\n        first = second;\n        second\
    \ = third;\n        third = result;\n    }\n    return result;", "    if (n ==\
    \ 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long\
    \ n1 = 0, n2 = 0, n3 = 1;\n    for (int i = 3; i <= n; i++) {\n        long temp\
    \ = n1 + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n        n3 = temp;\n  \
    \  }\n    return n3;", "  if (n < 0) {\n    assert(false);\n  }\n  // std::vector<int>\
    \ fibFibSet;\n  // int a = 0;\n  // int b = 0;\n  // int c = 1;\n  // fibFibSet.push_back(a);\n\
    \  // fibFibSet.push_back(b);\n  // fibFibSet.push_back(c);\n  // for (int i =\
    \ 3; i <= n; i++) {\n  //   int d = a + b + c;\n  //   fibFibSet.push_back(d);\n\
    \  //   a = b;\n  //   b = c;\n  //   c = d;\n  // }\n  // return fibFibSet[n];\n\
    \  long arr[n+1];\n  arr[0] = 0;\n  arr[1] = 0;\n  arr[2] = 1;\n  for (int i =\
    \ 3; i <= n; i++) {\n    arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n  }\n  return\
    \ arr[n];", "    assert(n>=0);\n    if(n==0 || n==1) return 0;\n    if(n==2) return\
    \ 1;\n    long dp[n+1];\n    dp[0]=0;\n    dp[1]=0;\n    dp[2]=1;\n    for(int\
    \ i=3;i<=n;i++){\n        dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n    }\n    return dp[n];",
  "    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }", "    assert(n >= 0);\n   \
    \ if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n\
    \    }\n    long a = 0, b = 0, c = 1;\n    long i = 3;\n    while (i <= n) {\n\
    \        long tmp = a + b + c;\n        a = b;\n        b = c;\n        c = tmp;\n\
    \        i++;\n    }\n    return c;", "    // Your code here.\n    long temp1\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 1;\n    long temp = 0;\n    if(n\
    \ == 0) return 0;\n    else if(n == 1) return 0;\n    else if(n == 2) return 1;\n\
    \    else{\n        for(int i = 3; i <= n; i++){\n            temp = temp1 + temp2\
    \ + temp3;\n            temp1 = temp2;\n            temp2 = temp3;\n         \
    \   temp3 = temp;\n        }\n        return temp;\n    }", "    long a, b, c,\
    \ d;\n    if (n < 3) {\n        return 0;\n    }\n    else if (n == 3) {\n   \
    \     return 1;\n    }\n    a = 0;\n    b = 0;\n    c = 1;\n    d = 0;\n    for\
    \ (long i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;", "    long a = 0, b = 0, c =\
    \ 1, sum = 0;\n    if (n == 0)\n        return 0;\n    for (int i = 2; i <= n;\
    \ i++) {\n        sum = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = sum;\n    }\n    return sum;", "    long a = 0, b = 0, c = 1, d;\n    if (n\
    \ == 0)\n        return a;\n    for (int i = 2; i <= n; i++) {\n        d = a\
    \ + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;", "    assert(n>=0);\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    long i=3;\n\
    \    long a=0,b=0,c=1;\n    while(i<=n){\n        long tmp=a+b+c;\n        a=b;\n\
    \        b=c;\n        c=tmp;\n        i++;\n    }\n    return c;", "\tif (n ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2)\
    \ {\n\t\treturn 1;\n\t}\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 1;\n\tlong ans\
    \ = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\tans = a + b + c;\n\t\ta = b;\n\t\
    \tb = c;\n\t\tc = ans;\n\t}\n\treturn ans;", "\tif (n == 0) {\n\t\treturn 0;\n\
    \t}\n\telse if (n == 1) {\n\t\treturn 0;\n\t}\n\telse if (n == 2) {\n\t\treturn\
    \ 1;\n\t}\n\telse {\n\t\tlong i = 0;\n\t\tlong j = 0;\n\t\tlong k = 1;\n\t\tlong\
    \ fib = 0;\n\t\tfor (int idx = 2; idx < n; idx++) {\n\t\t\tfib = i + j + k;\n\t\
    \t\ti = j;\n\t\t\tj = k;\n\t\t\tk = fib;\n\t\t}\n\t\treturn fib;\n\t}", "  int\
    \ memo[n+1];\n  memo[0] = 0;\n  memo[1] = 0;\n  memo[2] = 1;\n  for(int i = 3;\
    \ i <= n; i++) {\n    memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n  }\n  return\
    \ memo[n];", "  if (n <= 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return\
    \ 1;\n  }\n  if (n == 3) {\n    return 2;\n  }\n  long  n_2 = 1;\n  long  n_1\
    \ = 2;\n  long n_0 = 0;\n  for (int i = 4; i <= n; i++) {\n    n_0 = n_1 + n_2\
    \ + n_0;\n    n_2 = n_1;\n    n_1 = n_0;\n  }\n  return n_0;", "    assert(n >=\
    \ 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n      \
    \  return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long fib[n];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int i = 3; i <= n;\
    \ i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return\
    \ fib[n];", "  if (n <= 1) {\n    return 0;\n  } else if (n == 2) {\n    return\
    \ 1;\n  } else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }", " \
    \   assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n ==\
    \ 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n\
    \    long a = 0;\n    long b = 0;\n    long c = 1;\n    for (long i = 3; i <=\
    \ n; i++) {\n        long d = a + b + c;\n        a = b;\n        b = c;\n   \
    \     c = d;\n    }\n    return c;", "  if (n == 0 || n == 1) return 0;\n  if\
    \ (n == 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "\t\
    if (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tif\
    \ (n == 3) return 1;\n\tlong a = 0, b = 0, c = 1, d = 1;\n\tlong i = 4;\n\twhile\
    \ (i <= n) {\n\t\tlong e = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\t\
    d = e;\n\t\ti++;\n\t}\n\treturn d;", "    if (n == 0 || n == 1 || n == 2)\n  \
    \      return 0;\n    else if (n == 3)\n        return 1;\n    else\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);", "    // your code here\n  \
    \  if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 1;\n    long\
    \ f0=0,f1=0,f2=1,f3=0;\n    for(int i=3;i<=n;i++){\n        f3=f2+f1+f0;\n   \
    \     f0=f1;\n        f1=f2;\n        f2=f3;\n    }\n    return f3;", "  if (n==0)\
    \ return 0;\n  if (n==1) return 0;\n  if (n==2) return 1;\n  long prev2 = 0;\n\
    \  long prev1 = 0;\n  long current = 1;\n  for (int i=3; i<=n; i++) {\n    prev2\
    \ = prev1;\n    prev1 = current;\n    current = prev1 + prev2 + prev2;\n  }\n\
    \  return current;", "    // assert(n >= 0);\n    std::vector<long> res{0, 0,\
    \ 1};\n    while (res.size() <= n) {\n        res.push_back(res[res.size() - 1]\
    \ + res[res.size() - 2] + res[res.size() - 3]);\n    }\n    return res[n];", " \
    \   if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\
    \    long val1 = 0;\n    long val2 = 0;\n    long val3 = 1;\n    long val = 0;\n\
    \    for (int i = 2; i < n; i++) {\n        val = val1 + val2 + val3;\n      \
    \  val1 = val2;\n        val2 = val3;\n        val3 = val;\n    }\n    return\
    \ val;", "    // your code here!\n    return 0;", "    if (n == 0 || n == 1) {\n\
    \        return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n\
    \        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }", "    if\
    \ (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n\
    \    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }", "\tif (n == 0) return 0;\n\tif (n == 1)\
    \ return 0;\n\tif (n == 2) return 1;\n\tif (n == 3) return 1;\n\tlong a = 0, b\
    \ = 0, c = 1, res = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\tres = a + b + c;\n\
    \t\ta = b;\n\t\tb = c;\n\t\tc = res;\n\t}\n\treturn res;", "\tif (n == 0) {\n\t\
    \treturn 0;\n\t}\n\telse if (n == 1) {\n\t\treturn 0;\n\t}\n\telse if (n == 2)\
    \ {\n\t\treturn 1;\n\t}\n\telse {\n\t\treturn fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n\t}", "    if (n==0)\n        return 0;\n    if (n==1)\n   \
    \     return 0;\n    if (n==2)\n        return 1;\n    long n_1 = 1;\n    long\
    \ n_2 = 1;\n    long n_3 = 0;\n    long result = 0;\n    for (int i=3; i<=n; ++i)\
    \ {\n        result = n_1 + n_2 + n_3;\n        n_3 = n_2;\n        n_2 = n_1;\n\
    \        n_1 = result;\n    }\n    return result;", "    // TODO: finish this\
    \ function\n    long  prev_prev=0,prev=0,current=1;\n    if(n==0) return 0;\n\
    \    if(n==1) return 0;\n    if(n==2) return 1;\n    if(n==3) return 1;\n    for(int\
    \ i=3;i<n;i++){\n        prev_prev=prev;\n        prev=current;\n        current=prev_prev+prev+current;\n\
    \    }\n    return current;", "  long f_i, f_i_1, f_i_2, f_i_3;\n  if (n < 0)\
    \ {\n    assert(false);\n  }\n  if (n < 2) {\n    return 0;\n  }\n  if (n == 2)\
    \ {\n    return 1;\n  }\n  f_i_3 = 0;\n  f_i_2 = 0;\n  f_i_1 = 1;\n  for (int\
    \ i = 3; i <= n; i++) {\n    f_i = f_i_1 + f_i_2 + f_i_3;\n    f_i_3 = f_i_2;\n\
    \    f_i_2 = f_i_1;\n    f_i_1 = f_i;\n  }\n  return f_i;", "\tif (n == 0) return\
    \ 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tlong a = 0, b = 0, c\
    \ = 1, d = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\
    \t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;", "    long a=0,b=0,c=1,d;\n    if(n==0)\n\
    \        return a;\n    for(int i=2;i<=n;i++){\n        d=a+b+c;\n        a=b;\n\
    \        b=c;\n        c=d;\n    }\n    return d;", "    assert(n >= 0);\n   \
    \ vector<long> fibfib;\n    fibfib.push_back(0);\n    fibfib.push_back(0);\n \
    \   fibfib.push_back(1);\n    while (fibfib.size() < n+1) {\n        fibfib.push_back(fibfib[fibfib.size()-1]\
    \ + fibfib[fibfib.size()-2] + fibfib[fibfib.size()-3]);\n    }\n    return fibfib[n];",
  "    if (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return\
    \ 1;\n    } else {\n        long a = 0, b = 0, c = 1;\n        for (int i = 3;\
    \ i <= n; i++) {\n            long tmp = a + b + c;\n            a = b;\n    \
    \        b = c;\n            c = tmp;\n        }\n        return c;\n    }", "\t\
    if (n == 0) {\n\t\treturn 0;\n\t} else if (n == 1) {\n\t\treturn 0;\n\t} else\
    \ if (n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n\t}", "\tlong a = 0, b = 0, c = 1, d;\n\tif (n == 0)\n\
    \t\treturn a;\n\tfor (int i = 2; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\
    \t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;", "    \n    std::vector<long> result;\n\
    \    result.push_back(0);\n    result.push_back(0);\n    result.push_back(1);\n\
    \    for(int i = 3; i <= n; i++) {\n        long val = result[i-1] + result[i-2]\
    \ + result[i-3];\n        result.push_back(val);\n    }\n    return result[n];",
  "    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\
    \    if (n < 0) return -1;\n    long n_1 = 1;\n    long n_2 = 1;\n    long n_3\
    \ = 0;\n    long sum = 2;\n    while (--n >= 3) {\n        sum = n_1 + n_2 + n_3;\n\
    \        n_3 = n_2;\n        n_2 = n_1;\n        n_1 = sum;\n    }\n    return\
    \ sum;", "    long first = 0;\n    long second = 0;\n    long third = 1;\n   \
    \ long result = 0;\n    for (long i = 2; i <= n; i++) {\n        result = first\
    \ + second + third;\n        first = second;\n        second = third;\n      \
    \  third = result;\n    }\n    return result;", "    long F[n + 2];\n    F[0]\
    \ = 0;\n    F[1] = 0;\n    F[2] = 1;\n    for (int i = 3; i <= n; i++) {\n   \
    \     F[i] = F[i - 1] + F[i - 2] + F[i - 3];\n    }\n    return F[n];", "  assert(n>=0);\n\
    \  std::vector<long> res(2,0);\n  res.push_back(1);\n  int index =3;\n  while(index<=n){\n\
    \    int next = res[index-1]+res[index-2]+res[index-3];\n    res.push_back(next);\n\
    \    index++;\n  }\n  return res[n];", "    // your code here\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);",
  "    long a = 0, b = 0, c = 1, d;\n    if (n == 0) return a;\n    for (int i = 2;\
    \ i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n   \
    \     c = d;\n    }\n    return d;", "  if (n == 0) return 0;\n  if (n == 1) return\
    \ 0;\n  if (n == 2) return 1;\n  long n0 = 0;\n  long n1 = 0;\n  long n2 = 1;\n\
    \  long n3 = 1;\n  for (int i = 3; i < n; i++) {\n    n0 = n1;\n    n1 = n2;\n\
    \    n2 = n3;\n    n3 = n0 + n1 + n2;\n  }\n  return n3;", "\tint c, first = 0,\
    \ second = 1, next;\n\tfor (int c = 0; c < n; c++) {\n\t\tif (c <= 1) {\n\t\t\t\
    next = c;\n\t\t}\n\t\telse {\n\t\t\tnext = first + second + c;\n\t\t\tfirst =\
    \ second;\n\t\t\tsecond = next;\n\t\t}\n\t}\n\treturn next;", "  assert(n >= 0);\n\
    \  if (n < 2) return 0;\n  if (n == 2) return 1;\n  long temp[3];\n  temp[0] =\
    \ 0;\n  temp[1] = 0;\n  temp[2] = 1;\n  for (int i = 3; i <= n; i++) {\n    long\
    \ m = temp[0] + temp[1] + temp[2];\n    temp[0] = temp[1];\n    temp[1] = temp[2];\n\
    \    temp[2] = m;\n  }\n  return temp[2];", "\tif (n < 0) return 0;\n\tif (n ==\
    \ 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\treturn fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);", "  // we can use recursion with memoization,\
    \ but that'd be slow.\n  long n1 = 0;\n  long n2 = 0;\n  long n3 = 1;\n  long\
    \ n4 = 0;\n  if (n <= 1) return n1;\n  if (n == 2) return n3;\n  for (long i =\
    \ 3; i <= n; i++) {\n    n4 = n1 + n2 + n3;\n    n1 = n2;\n    n2 = n3;\n    n3\
    \ = n4;\n  }\n  return n4;", "    if (n < 2) return 0;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);", "  assert(n >= 0);\n\
    \  if (n <= 1) return 0;\n  if (n == 2) return 1;\n  if (n == 3) return 1;\n \
    \ std::vector<long> a(n + 1);\n  a[0] = 0;\n  a[1] = 0;\n  a[2] = 1;\n  a[3] =\
    \ 1;\n  for (int i = 4; i <= n; i++) {\n    a[i] = a[i - 1] + a[i - 2] + a[i -\
    \ 3];\n  }\n  return a[n];", "\tif (n < 2) {\n\t\treturn 0;\n\t}\n\tif (n == 2)\
    \ {\n\t\treturn 1;\n\t}\n\tlong a = 0, b = 0, c = 1;\n\tfor (int i = 3; i <= n;\
    \ i++) {\n\t\tlong cur = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = cur;\n\t\
    }\n\treturn c;", "    if (n <= 0) {\n        return 0;\n    } else if (n == 1)\
    \ {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    }\n \
    \   long a = 0, b = 0, c = 1;\n    for (int i = 3; i <= n; i++) {\n        long\
    \ sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n    }\n\
    \    return c;", "    // Enter your code here\n    if(n==0) return 0;\n    if(n==1)\
    \ return 0;\n    if(n==2) return 1;\n    int curr, prev=1, prevprev=0, prevprevprev=0;\n\
    \    for(int i=3; i<=n; ++i){\n        curr = prev + prevprev + prevprevprev;\n\
    \        prevprevprev = prevprev;\n        prevprev = prev;\n        prev = curr;\n\
    \    }\n    return curr;", "    if (n < 0) {\n        return -1;\n    }\n    std::vector<long>\
    \ dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n    for (long\
    \ i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n\
    \    }\n    return dp[n];", "    assert(n>=0);\n    if(n==0)\n        return 0;\n\
    \    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n\
    \    else {\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    }", "  \
    \  if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n    long curr=2,prev=1,pprev=0;\n\
    \    for (int i=3;i<=n;i++) {\n        curr = prev + pprev + curr;\n        pprev\
    \ = prev;\n        prev = curr;\n    }\n    return curr;", "  long fibfib_0 =\
    \ 0;\n  long fibfib_1 = 0;\n  long fibfib_2 = 1;\n  if (n < 3) {\n    return n\
    \ - 1;\n  }\n  long fibfib_n = 0;\n  for (int i = 3; i <= n; i++) {\n    fibfib_n\
    \ = fibfib_2 + fibfib_1 + fibfib_0;\n    fibfib_0 = fibfib_1;\n    fibfib_1 =\
    \ fibfib_2;\n    fibfib_2 = fibfib_n;\n  }\n  return fibfib_n;", "\tif (n == 0)\
    \ return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\tlong a = 0, b\
    \ = 0, c = 1, x = 0;\n\tfor (int i = 2; i < n; i++) {\n\t\tx = a + b + c;\n\t\t\
    a = b;\n\t\tb = c;\n\t\tc = x;\n\t}\n\treturn x;", "\tlong a1 = 0, a2 = 0, a3\
    \ = 1, a4 = 0;\n\tif (n < 0)\n\t\treturn 0;\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\ta4 = a1 + a2 + a3;\n\t\ta1 = a2;\n\t\ta2 = a3;\n\t\ta3 = a4;\n\t}\n\treturn\
    \ a4;", "\tlong a = 0, b = 0, c = 1, d;\n\tif (n == 0) return a;\n\tfor (int i\
    \ = 2; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\
    \t}\n\treturn d;", "\tif (n <= 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\t\
    return 0;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\t// FibFib number at position\
    \ n is sum of FibFib numbers at both the \n\t// previous postions\n\treturn fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);"]
stop_tokens:
- "\n}"
