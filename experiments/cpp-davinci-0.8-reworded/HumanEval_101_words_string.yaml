name: HumanEval_101_words_string
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
  \ of words separated by commas or spaces. Your task is\n// to split the string into\
  \ words and return a vector of the words.\n// For example:\n// >>> words_string((\"\
  Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
  my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>>\
  \ words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"\
  One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
  five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string\
  \ s) {\n"
tests: "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
  Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
  my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n \
  \   assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
  One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
  five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"\
  Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"\
  One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"\
  One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
  five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"\
  ahmed\", (std::string)\"gamal\"})));\n}\n"
completions: ["\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (char\
    \ c : s) {\n\t\tif (c == ' ' || c == ',') {\n\t\t\tresult.push_back(temp);\n\t\
    \t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += c;\n\t\t}\n\t}\n\tresult.push_back(temp);\n\
    \treturn result;", "  std::vector<std::string> v;\n  char delimeter = s.find(',')\
    \ != std::string::npos ? ',' : ' ';\n  std::stringstream ss(s);\n  std::string\
    \ str;\n  while (getline(ss, str, delimeter)) {\n    v.push_back(str);\n  }\n\
    \  return v;", "\tstd::stringstream ss(s);\n\tstd::vector<std::string> words;\n\
    \tstd::string word;\n\twhile (ss >> word)\n\t\twords.push_back(word);\n\treturn\
    \ words;", "    std::vector<std::string> words;\n    std::string word;\n    for\
    \ (auto i : s) {\n        if (i == ' ' || i == ',') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += i;\n        }\n\
    \    }\n    if (word != \"\") {\n        words.push_back(word);\n    }\n    return\
    \ words;", "\tchar delimiter;\n\tstd::string temp;\n\tstd::vector<std::string>\
    \ v;\n\tstd::stringstream ss(s);\n\twhile (std::getline(ss, temp, ' '))\n\t\t\
    v.push_back(temp);\n\treturn v;", "\t\n\t//empty string\n\tif(s.length()==0)\n\
    \t\treturn {};\n\t\n\t\n\tstd::vector<std::string> result;\n\tstd::string temp;\n\
    \tstd::istringstream ss(s);\n\n\twhile(ss>>temp)\n\t\tresult.push_back(temp);\n\
    \treturn result;", "  std::vector<std::string> words;\n  std::string word;\n \
    \ for (auto x : s) {\n    if (x == ' ') {\n      if (word.size() > 0) {\n    \
    \    words.push_back(word);\n        word.clear();\n      }\n    } else if (x\
    \ == ',') {\n      if (word.size() > 0) {\n        words.push_back(word);\n  \
    \      word.clear();\n      }\n    } else {\n      word.push_back(x);\n    }\n\
    \  }\n  if (word.size() > 0) {\n    words.push_back(word);\n  }\n  return words;",
  "    assert(false);\n    return {};", "  std::string delimiter = \", \";\n  size_t\
    \ pos = 0;\n  std::string token;\n  std::vector<std::string> words;\n  while ((pos\
    \ = s.find(delimiter)) != std::string::npos) {\n    token = s.substr(0, pos);\n\
    \    words.push_back(token);\n    s.erase(0, pos + delimiter.length());\n  }\n\
    \  words.push_back(s);\n  return words;", "    std::vector<std::string> result;\n\
    \    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n\
    \        result.push_back(word);\n    }\n    return result;", "  std::vector<std::string>\
    \ v;\n  int n = s.length();\n  int j = 0;\n  while(j < n){\n    std::string str\
    \ = \"\";\n    while(j < n && s[j] != ' ' && s[j] != ','){\n      str += s[j];\n\
    \      j++;\n    }\n    j++;\n    v.push_back(str);\n  }\n  return v;", "    std::istringstream\
    \ ss(s);\n    std::vector<std::string> vec;\n    std::string temp;\n    while(ss\
    \ >> temp)\n        vec.push_back(temp);\n    return vec;", "  return {std::istream_iterator<std::string>{std::istringstream(s)},\n\
    \          std::istream_iterator<std::string>{}};", "    // your code goes here\n\
    \    std::stringstream ss(s);\n    std::vector<std::string> res;\n    for(std::string\
    \ tmp; ss >> tmp;){\n      res.push_back(tmp);\n    }\n    return res;", "\tif\
    \ (s.size() == 0) {\n\t\treturn {};\n\t}\n\tstd::vector<std::string> result;\n\
    \tint n = s.size();\n\tint index = 0;\n\twhile (index < n) {\n\t\tif (s[index]\
    \ == ' ') {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (s[index] == ',')\
    \ {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tint index1 = index;\n\t\twhile\
    \ (index1 < n && s[index1] != ' ' && s[index1] != ',') {\n\t\t\tindex1++;\n\t\t\
    }\n\t\tstd::string current = s.substr(index, index1 - index);\n\t\tresult.push_back(current);\n\
    \t\tindex = index1;\n\t}\n\treturn result;", "    std::vector<std::string> v;\n\
    \    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n\
    \        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >>\
    \ word)\n        words.push_back(word);\n    return words;", "    std::vector<std::string>\
    \ out;\n    std::stringstream ss(s);\n    while(!ss.eof()) {\n        std::string\
    \ word;\n        ss >> word;\n        out.push_back(word);\n    }\n    return\
    \ out;", "  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;",
  "\tstd::vector<std::string> w;\n\tstd::istringstream iss(s);\n\tstd::string token;\n\
    \twhile (std::getline(iss, token, ' ')) {\n\t\tw.push_back(token);\n\t}\n\treturn\
    \ w;", "  // your code here\n  std::vector<std::string> result;\n  std::string\
    \ space = \" \";\n  std::string comma = \",\";\n  std::string temp;\n  int space_index\
    \ = 0;\n  int comma_index = 0;\n  int begin = 0;\n  int end = 0;\n  for(int i\
    \ = 0; i < s.length(); i++){\n      if(space.compare(s.substr(i,1)) == 0){\n \
    \         space_index = i;\n          if(space_index > comma_index){\n       \
    \       temp = s.substr(begin, space_index - begin);\n              result.push_back(temp);\n\
    \              begin = space_index + 1;\n          }\n      }\n      if(comma.compare(s.substr(i,1))\
    \ == 0){\n          comma_index = i;\n          if(comma_index > space_index){\n\
    \              temp = s.substr(begin, comma_index - begin);\n              result.push_back(temp);\n\
    \              begin = comma_index + 1;\n          }\n      }\n  }\n  temp = s.substr(begin,\
    \ s.length() - begin);\n  result.push_back(temp);\n  return result;", "    std::vector<std::string>\
    \ strings;\n    std::string token;\n    std::istringstream tokenStream(s);\n \
    \   while (std::getline(tokenStream, token, ' '))\n    {\n        strings.push_back(token);\n\
    \    }\n    return strings;", "  std::vector<std::string> answer;\n  std::stringstream\
    \ ss(s);\n  std::string temp;\n  while(std::getline(ss, temp, ' ')) {\n    answer.push_back(temp);\n\
    \  }\n  return answer;", "\tstd::stringstream ss(s);\n\tstd::string word;\n\t\
    std::vector<std::string> str;\n\twhile (ss >> word) {\n\t\tstr.push_back(word);\n\
    \t}\n\treturn str;", "    std::vector<std::string> v;\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        std::string s2 = \"\";\n        while(i < s.size()\
    \ && s[i] != ' ' && s[i] != ',') {\n            s2 += s[i];\n            i++;\n\
    \        }\n        if(s2 != \"\")\n            v.push_back(s2);\n    }\n    return\
    \ v;", "  stringstream ss(s);\n  vector<string> result;\n  string str;\n  while(ss\
    \ >> str)\n    result.push_back(str);\n  return result;", "  std::istringstream\
    \ ss(s);\n  std::vector<std::string> res;\n  std::string word;\n  while (ss >>\
    \ word) res.push_back(word);\n  return res;", "    std::stringstream split(s);\n\
    \    std::vector<std::string> words;\n    std::string word;\n    while (std::getline(split,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    return words;", "\t\
    std::vector<std::string> words;\n\tstd::string word;\n\tfor (auto x : s) {\n\t\
    \tif (x == ' ' || x == ',') {\n\t\t\twords.push_back(word);\n\t\t\tword = \"\"\
    ;\n\t\t}\n\t\telse {\n\t\t\tword += x;\n\t\t}\n\t}\n\twords.push_back(word);\n\
    \treturn words;", "  std::vector<std::string> words_v;\n  std::stringstream sstream(s);\n\
    \  std::string word;\n  while (sstream >> word) {\n    words_v.push_back(word);\n\
    \  }\n  return words_v;", "  //your code here\n  std::stringstream ss(s);\n  std::vector<std::string>\
    \ result;\n  std::string i;\n  while(std::getline(ss, i, ' ')){\n    if(i != \"\
    ,\")\n      result.push_back(i);\n  }\n  return result;", "    // Your code here!\n\
    \  std::stringstream input(s);\n  std::vector<std::string> res;\n  while(input.good()){\n\
    \      std::string sub;\n      getline(input, sub, ' ');\n      res.push_back(sub);\n\
    \  }\n  return res;", "    std::string s;\n    std::vector<std::string> word;\n\
    \    std::istringstream iss(s);\n    std::vector<std::string> results(std::istream_iterator<std::string>{iss},\n\
    \                                     std::istream_iterator<std::string>());\n\
    \    return results;", "  // your code here\n  std::vector<std::string> result;\n\
    \  std::stringstream check1(s);\n  std::string intermediate;\n  while(getline(check1,\
    \ intermediate, ' '))\n  {\n    result.push_back(intermediate);\n  }\n  return\
    \ result;", "\tstd::vector<std::string> words;\n\tstd::string tmp = \"\";\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\
    \t\t\tif (tmp.length() > 0) {\n\t\t\t\twords.push_back(tmp);\n\t\t\t\ttmp = \"\
    \";\n\t\t\t}\n\t\t} else {\n\t\t\ttmp += s[i];\n\t\t}\n\t}\n\tif (tmp.length()\
    \ > 0) {\n\t\twords.push_back(tmp);\n\t}\n\treturn words;", "    std::vector<std::string>\
    \ v;\n    std::string delimiter = \" \";\n    std::string token;\n    size_t pos\
    \ = 0;\n    while ((pos = s.find(delimiter)) != std::string::npos) {\n       \
    \ token = s.substr(0, pos);\n        v.push_back(token);\n        s.erase(0, pos\
    \ + delimiter.length());\n    }\n    v.push_back(s);\n    return v;", "  std::vector<std::string>\
    \ ws;\n  std::string word;\n  std::stringstream ss(s);\n  while (ss >> word) {\n\
    \    ws.push_back(word);\n  }\n  return ws;", "    std::vector<std::string> result;\n\
    \    std::stringstream ss(s);\n    std::string x;\n    while(getline(ss, x, '\
    \ '))\n    {\n        result.push_back(x);\n    }\n    return result;", "    std::vector<std::string>\
    \ v;\n    std::stringstream ss(s);\n    std::string curr;\n    while(std::getline(ss,\
    \ curr, ' '))\n        v.push_back(curr);\n    return v;", '  return {std::sregex_token_iterator(s.begin(),
    s.end(), std::regex(R"(\s|,)"), -1), {}};', "  std::vector<std::string> v;\n \
    \ std::stringstream ss(s);\n  std::string temp;\n  while(getline(ss, temp, ' ')){\n\
    \    v.push_back(temp);\n  }\n  return v;", "    std::vector<std::string> v;\n\
    \    std::stringstream ss(s);\n    std::string word;\n    while(getline(ss, word,\
    \ ' '))\n        v.push_back(word);\n    return v;", "  std::string delimiter\
    \ = \", \";\n  std::vector<std::string> v;\n  size_t pos = 0;\n  std::string token;\n\
    \  while ((pos = s.find(delimiter)) != std::string::npos) {\n    token = s.substr(0,\
    \ pos);\n    v.push_back(token);\n    s.erase(0, pos + delimiter.length());\n\
    \  }\n  v.push_back(s);\n  return v;", "  std::istringstream iss(s);\n  std::vector<std::string>\
    \ words;\n  std::string word;\n  while (std::getline(iss, word, ' ')) {\n    words.push_back(word);\n\
    \  }\n  return words;", "    if (s == \"\")\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> v;\n    std::string x = \"\";\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n     \
    \       if (x != \"\") {\n                v.push_back(x);\n                x =\
    \ \"\";\n            }\n        } else {\n            x += s[i];\n        }\n\
    \    }\n    if (x != \"\")\n        v.push_back(x);\n    return v;", "    // TODO:\
    \ Split a string of words separated by spaces or commas\n    // and return a vector\
    \ of words.\n    // TODO: For example:\n    // >>> words_string((\"Hi, my name\
    \ is John\"))\n    // (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
    my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n \
    \   // >>> words_string((\"One, two, three, four, five, six\"))\n    // (std::vector<std::string>({(std::string)\"\
    One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
    five\", (std::string)\"six\"}))\n    std::vector<std::string> words;\n    std::string\
    \ word = \"\";\n    bool new_word = true;\n    for (char c : s) {\n        if\
    \ (c == ' ' or c == ',') {\n            if (not new_word) {\n                words.push_back(word);\n\
    \                word = \"\";\n                new_word = true;\n            }\n\
    \        } else {\n            word += c;\n            new_word = false;\n   \
    \     }\n    }\n    if (not new_word) {\n        words.push_back(word);\n    }\n\
    \    return words;", "    int i = 0;\n    std::vector<std::string> v;\n    while(i\
    \ < s.length()){\n        std::string temp = \"\";\n        while(s[i] != ' '\
    \ && s[i] != ',' && i < s.length()){\n            temp += s[i];\n            i++;\n\
    \        }\n        i++;\n        v.push_back(temp);\n    }\n    return v;", " \
    \ std::vector<std::string> v;\n  std::string res;\n  int n = s.size();\n  for(int\
    \ i = 0; i < n; i++) {\n    if(s[i] == ' ' || s[i] == ',') {\n      v.push_back(res);\n\
    \      res = \"\";\n    }\n    else {\n      res = res + s[i];\n    }\n  }\n \
    \ v.push_back(res);\n  return v;", "    // Your code here\n    std::vector<std::string>\
    \ words;\n    std::stringstream iss(s);\n    for(std::string s; iss >> s;)\n \
    \       words.push_back(s);\n    return words;", "    std::vector<std::string>\
    \ v;\n    std::stringstream ss(s);\n    while(ss.good()) {\n        std::string\
    \ sub;\n        getline(ss, sub, ' ');\n        v.push_back(sub);\n    }\n   \
    \ return v;", "    std::string temp = \"\";\n    std::vector<std::string> vec;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ' || s[i] ==\
    \ ',') {\n            vec.push_back(temp);\n            temp = \"\";\n       \
    \ }\n        else {\n            temp += s[i];\n        }\n    }\n    vec.push_back(temp);\n\
    \    return vec;", "    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' '\
    \ || s[i] == ',') {\n            result.push_back(temp);\n            temp = \"\
    \";\n        } else {\n            temp += s[i];\n        }\n    }\n    result.push_back(temp);\n\
    \    return result;", "\tstd::string temp;\n\tstd::vector<std::string> words;\n\
    \tstd::istringstream ss(s);\n\twhile (getline(ss, temp, ' '))\n\t\twords.push_back(temp);\n\
    \treturn words;", "    std::string word = \"\";\n    std::vector<std::string>\
    \ words;\n    for (auto c : s) {\n        if (c == ' ' || c == ',') {\n      \
    \      words.push_back(word);\n            word = \"\";\n        } else {\n  \
    \          word += c;\n        }\n    }\n    words.push_back(word);\n    return\
    \ words;", "    std::vector<std::string> result;\n    std::istringstream iss(s);\n\
    \    std::string word;\n    while (iss >> word) {\n        result.push_back(word);\n\
    \    }\n    return result;", "  std::stringstream ss(s);\n  std::string temp;\n\
    \  std::vector<std::string> result;\n  while(std::getline(ss, temp, ' ')) {\n\
    \    result.push_back(temp);\n  }\n  return result;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ') {\n            v.push_back(word);\n            word\
    \ = \"\";\n        } else if (s[i] == ',') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += s[i];\n     \
    \   }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n    }\n   \
    \ return v;", "  std::vector<std::string> v;\n  std::stringstream ss(s);\n  std::string\
    \ temp;\n  while(getline(ss, temp, ' '))\n    v.push_back(temp);\n  return v;",
  "    std::vector<std::string> words;\n    std::string word = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    if (word != \"\") {\n      \
    \  words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string tok;\n    while(getline(ss,\
    \ tok, ' ')) {\n        result.push_back(tok);\n    }\n    return result;", " \
    \ // Implement me!\n  std::vector<std::string> words;\n  std::istringstream iss(s);\n\
    \  std::string temp;\n  while(getline(iss, temp, ' ')){\n    words.push_back(temp);\n\
    \  }\n  return words;", "  std::vector<std::string> v;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (std::getline(ss, word, ' ')) {\n    if (!word.empty())\
    \ {\n      v.push_back(word);\n    }\n  }\n  return v;", "  std::vector<std::string>\
    \ myVec;\n  std::stringstream ss(s);\n  while(ss.good()) {\n    std::string substr;\n\
    \    getline(ss, substr, ' ');\n    myVec.push_back(substr);\n  }\n  return myVec;",
  "  std::vector<std::string> words;\n  std::string word;\n  for (auto x : s) {\n\
    \    if (x == ' ' || x == ',') {\n      words.push_back(word);\n      word = \"\
    \";\n    } else {\n      word += x;\n    }\n  }\n  if (word != \"\") {\n    words.push_back(word);\n\
    \  }\n  return words;", "  std::istringstream iss(s);\n  std::vector<std::string>\
    \ tokens;\n  std::copy(std::istream_iterator<std::string>(iss),\n            std::istream_iterator<std::string>(),\n\
    \            std::back_inserter(tokens));\n  return tokens;", "  std::stringstream\
    \ ss(s);\n  std::string buffer;\n  std::vector<std::string> result;\n  while (ss\
    \ >> buffer) {\n    result.push_back(buffer);\n  }\n  return result;", "  // Your\
    \ code here...\n  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while(getline(ss, word, ' ')) {\n    words.push_back(word);\n  }\n\
    \  return words;", "    std::vector<std::string> split_string;\n    std::string\
    \ substring;\n    std::stringstream ss(s);\n    while (std::getline(ss, substring,\
    \ ' ')) {\n        split_string.push_back(substring);\n    }\n    return split_string;",
  "    std::vector<std::string> word_list;\n    std::string word;\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n   \
    \         word_list.push_back(word);\n            word = \"\";\n        } else\
    \ {\n            word += s[i];\n        }\n    }\n    word_list.push_back(word);\n\
    \    return word_list;", "    std::vector<std::string> result;\n    std::string\
    \ tmp;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i]\
    \ == ',') {\n            result.push_back(tmp);\n            tmp = \"\";\n   \
    \     } else {\n            tmp += s[i];\n        }\n    }\n    result.push_back(tmp);\n\
    \    return result;", "  std::vector<std::string> ret;\n  std::string buf;\n \
    \ for (auto c : s) {\n    if (c == ' ' || c == ',') {\n      if (buf.size() >\
    \ 0) {\n        ret.push_back(buf);\n        buf.clear();\n      }\n    } else\
    \ {\n      buf += c;\n    }\n  }\n  if (buf.size() > 0) {\n    ret.push_back(buf);\n\
    \  }\n  return ret;", "  std::istringstream iss(s);\n  std::vector<std::string>\
    \ words;\n  std::string word;\n  while (iss >> word)\n    words.push_back(word);\n\
    \  return words;", "  \t\tstd::vector<std::string> vec;\n  \t\tstd::string str;\n\
    \  \t\tstd::stringstream ss(s);\n  \t\twhile(ss >> str)\n  \t\t\tvec.push_back(str);\n\
    \  \t\treturn vec;", "    // your code here\n    std::stringstream temp(s);\n\
    \    std::vector<std::string> words;\n    std::string word;\n    while(getline(temp,\
    \ word, ' '))\n    {\n        if(!word.empty())\n        {\n            words.push_back(word);\n\
    \        }\n    }\n    return words;", "    vector<string> vec;\n    string word;\n\
    \    istringstream iss(s);\n    while(iss >> word)\n        vec.push_back(word);\n\
    \    return vec;", "\tstd::string delim = \", \";\n\tstd::vector<std::string>\
    \ answer;\n\tsize_t prev = 0, pos;\n\twhile ((pos = s.find_first_of(delim, prev))\
    \ != std::string::npos)\n\t{\n\t\tif (pos > prev)\n\t\t\tanswer.push_back(s.substr(prev,\
    \ pos-prev));\n\t\tprev = pos+1;\n\t}\n\tif (prev < s.length())\n\t\tanswer.push_back(s.substr(prev,\
    \ std::string::npos));\n\treturn answer;", "  std::stringstream ss(s);\n  std::string\
    \ str;\n  std::vector<std::string> result;\n  while (getline(ss, str, ' ')) {\n\
    \    result.push_back(str);\n  }\n  return result;", "  stringstream iss(s);\n\
    \  vector<string> res;\n  string tok;\n  while(getline(iss, tok, ' ')){\n    res.push_back(tok);\n\
    \  }\n  return res;", "  // Your code here\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(s);\n  std::string word;\n  while(getline(ss, word, '\
    \ ')) {\n    words.push_back(word);\n  }\n  return words;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (word != \"\") {\n               \
    \ v.push_back(word);\n                word = \"\";\n            }\n        } else\
    \ if (s[i] == ',') {\n            if (word != \"\") {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n\
    \    }\n    return v;", "  std::vector<std::string> v;\n  std::stringstream ss(s);\n\
    \  std::string word;\n  while (ss >> word)\n    v.push_back(word);\n  return v;",
  "  std::vector<std::string> words;\n  std::string buf;\n  std::stringstream ss(s);\n\
    \  while (ss >> buf)\n    words.push_back(buf);\n  return words;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] == ' ' || s[i] == ',') {\n            v.push_back(word);\n \
    \           word = \"\";\n        } else {\n            word += s[i];\n      \
    \  }\n    }\n    v.push_back(word);\n    return v;", "\tstd::vector<std::string>\
    \ result;\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tresult.push_back(temp);\n\t\t\
    \ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\t\t}\n\t}\n\tresult.push_back(temp);\n\
    \treturn result;", "\tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\
    \tfor (std::string word; ss >> word;) {\n\t\tresult.push_back(word);\n\t}\n\t\
    return result;", "  std::string delim = \" , \";\n  size_t pos = 0;\n  std::string\
    \ token;\n  std::vector<std::string> ans;\n  while ((pos = s.find(delim)) != std::string::npos)\
    \ {\n    token = s.substr(0, pos);\n    ans.push_back(token);\n    s.erase(0,\
    \ pos + delim.length());\n  }\n  ans.push_back(s);\n  return ans;", "\tstd::vector<std::string>\
    \ words;\n\tstd::string delim = \" \";\n\tsize_t current = 0, next = 0;\n\t//\
    \ std::cout << s << std::endl;\n\t// std::cout << s.size() << std::endl;\n\twhile\
    \ ( ( next = s.find( delim, current ) ) != std::string::npos ) {\n\t\tstd::string\
    \ word = s.substr( current, next - current );\n\t\tcurrent = next + 1;\n\t\twords.push_back(\
    \ word );\n\t}\n\tstd::string word = s.substr( current, next - current );\n\t\
    words.push_back( word );\n\treturn words;", "    std::vector<std::string> res;\n\
    \    std::string buf;\n    for (auto c : s) {\n        if (c == ' ' || c == ',')\
    \ {\n            if (!buf.empty()) {\n                res.push_back(buf);\n  \
    \              buf.clear();\n            }\n        } else {\n            buf\
    \ += c;\n        }\n    }\n    if (!buf.empty()) {\n        res.push_back(buf);\n\
    \    }\n    return res;", "  std::vector<std::string> words;\n  std::stringstream\
    \ ss(s);\n  while(ss.good()) {\n    std::string word;\n    getline(ss, word, '\
    \ ');\n    if(word.size() > 0)\n      words.push_back(word);\n  }\n  return words;",
  "  std::istringstream is(s);\n  std::vector<std::string> words;\n  for (std::string\
    \ word; is >> word;)\n    words.push_back(word);\n  return words;", "    std::vector<std::string>\
    \ res;\n    int count = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n    \
    \    if (s[i] == ' ' || s[i] == ',')\n            count++;\n    }\n    res.resize(count\
    \ + 1);\n    count = 0;\n    std::string temp;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            res[count] =\
    \ temp;\n            count++;\n            temp.clear();\n        } else {\n \
    \           temp += s[i];\n        }\n    }\n    res[count] = temp;\n    return\
    \ res;", "    std::istringstream is(s);\n    std::vector<std::string> ret;\n \
    \   while(is >> s) {\n        ret.push_back(s);\n    }\n    return ret;", "  \
    \  std::stringstream ss(s);\n    std::vector<std::string> vec;\n    while(ss){\n\
    \        std::string temp;\n        getline(ss, temp, ' ');\n        vec.push_back(temp);\n\
    \    }\n    vec.pop_back();\n    return vec;", "\tstd::vector<std::string> words;\n\
    \tstd::string word;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\t// if char is\
    \ a space or a comma add the word to the vector\n\t\tif (s[i] == ' ' || s[i] ==\
    \ ',') {\n\t\t\twords.push_back(word);\n\t\t\tword = \"\";\n\t\t}\n\t\t// if char\
    \ is not a space add it to the word\n\t\telse {\n\t\t\tword += s[i];\n\t\t}\n\t\
    }\n\t// push back the last word\n\twords.push_back(word);\n\treturn words;", " \
    \ std::vector<std::string> v;\n  std::string word;\n  std::stringstream ss(s);\n\
    \  while (ss >> word) {\n    v.push_back(word);\n  }\n  return v;", "  std::vector<std::string>\
    \ s_array;\n  std::stringstream ss(s);\n  while (ss.good()) {\n    std::string\
    \ substr;\n    getline(ss, substr, ' ');\n    s_array.push_back(substr);\n  }\n\
    \  return s_array;", "\tstd::vector<std::string> res;\n\tstd::istringstream strm(s);\n\
    \tstd::string temp;\n\twhile (strm >> temp) {\n\t\tres.push_back(temp);\n\t}\n\
    \treturn res;", "  std::vector<std::string> res;\n  std::stringstream ss(s);\n\
    \  std::string item;\n  char delim = ' ';\n  while (std::getline(ss, item, delim))\
    \ {\n    res.push_back(item);\n  }\n  return res;", "    std::istringstream iss(s);\n\
    \    std::vector<std::string> words;\n    std::string word;\n    while (std::getline(iss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \   // Add code here\n    std::string temp;\n    std::vector<std::string> v;\n\
    \    for(int i=0;i<s.length();i++){\n      if(s[i]!=' ' && s[i]!=',')\n      temp+=s[i];\n\
    \      else{\n        v.push_back(temp);\n        temp=\"\";\n      }\n    }\n\
    \    v.push_back(temp);\n    return v;", "  std::stringstream ss(s);\n  std::vector<std::string>\
    \ words;\n  std::string word;\n  while (ss >> word)\n    words.push_back(word);\n\
    \  return words;", "\tstd::vector<std::string> words;\n\tstd::string word;\n\t\
    //std::cout << \"s: \" << s << \"\\n\";\n\tfor (int i = 0; i < s.length(); i++)\
    \ {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tif (word.length() > 0) {\n\t\
    \t\t\twords.push_back(word);\n\t\t\t\tword = \"\";\n\t\t\t}\n\t\t} else {\n\t\t\
    \tword.push_back(s[i]);\n\t\t}\n\t}\n\tif (word.length() > 0) {\n\t\twords.push_back(word);\n\
    \t}\n\treturn words;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string token;\n    while (getline(ss, token, ' ')) {\n    \
    \    if (token != \",\") {\n            words.push_back(token);\n        }\n \
    \   }\n    return words;", "  stringstream stream(s);\n  vector<string> result;\n\
    \  while(stream.good()) {\n    string substr;\n    getline(stream, substr, ' ');\n\
    \    result.push_back(substr);\n  }\n  return result;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    int wordStart =\
    \ 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i]\
    \ == ',') {\n            if (wordStart != i) {\n                res.push_back(s.substr(wordStart,\
    \ i - wordStart));\n            }\n            wordStart = i + 1;\n        }\n\
    \    }\n    if (wordStart != s.size()) {\n        res.push_back(s.substr(wordStart,\
    \ s.size() - wordStart));\n    }\n    return res;", "    std::vector<std::string>v;\n\
    \    std::stringstream ss(s);\n    std::string tmp;\n    while(ss>>tmp)\n    {\n\
    \        v.push_back(tmp);\n    }\n    return v;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n        else if(s[i] == ',') {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n        else {\n            temp += s[i];\n\
    \        }\n    }\n    result.push_back(temp);\n    return result;", "  std::vector<std::string>\
    \ res;\n  std::string word;\n  int i = 0;\n  while (i < s.size()) {\n    while\
    \ (i < s.size() && s[i] == ' ') i++;\n    while (i < s.size() && s[i] != ' ')\
    \ word += s[i++];\n    if (word.size()) res.push_back(word);\n    word.clear();\n\
    \  }\n  return res;", "    std::vector<std::string> v;\n    std::string temp;\n\
    \    for(int i=0;i<s.length();i++){\n        if(s[i]==' '||s[i]==','){\n     \
    \       v.push_back(temp);\n            temp=\"\";\n        }\n        else{\n\
    \            temp+=s[i];\n        }\n    }\n    v.push_back(temp);\n    return\
    \ v;", "    std::vector<std::string> v;\n    std::string tmp = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',')\
    \ {\n            v.push_back(tmp);\n            tmp = \"\";\n        } else {\n\
    \            tmp += s[i];\n        }\n    }\n    v.push_back(tmp);\n    return\
    \ v;", "    std::istringstream iss(s);\n    std::vector<std::string> tokens;\n\
    \    copy(std::istream_iterator<std::string>(iss),\n         std::istream_iterator<std::string>(),\n\
    \         std::back_inserter(tokens));\n    return tokens;", "  std::stringstream\
    \ ss(s);\n  std::string word;\n  std::vector<std::string> words;\n  while (ss\
    \ >> word) {\n    words.push_back(word);\n  }\n  return words;", "\tstd::vector<std::string>\
    \ v;\n\tstd::stringstream ss(s);\n\tstd::string temp;\n\twhile (std::getline(ss,\
    \ temp, ' ')) {\n\t\tv.push_back(temp);\n\t}\n\treturn v;", "    std::stringstream\
    \ ss(s);\n    std::vector<std::string> ans;\n    std::string temp;\n    while(ss\
    \ >> temp) {\n        ans.push_back(temp);\n    }\n    return ans;", "\tstd::vector<std::string>\
    \ v;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\
    \t\tv.push_back(word);\n\t}\n\treturn v;", "    std::stringstream ss(s);\n   \
    \ std::string word;\n    std::vector<std::string> words;\n    while (getline(ss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    return words;", "\t\
    std::vector<std::string> words;\n\tstd::string temp;\n\tbool space = false;\n\t\
    for (char c : s) {\n\t\tif (c == ' ' || c == ',') {\n\t\t\tif (space) {\n\t\t\t\
    \twords.push_back(temp);\n\t\t\t\ttemp = \"\";\n\t\t\t\tspace = false;\n\t\t\t\
    }\n\t\t}\n\t\telse {\n\t\t\ttemp += c;\n\t\t\tspace = true;\n\t\t}\n\t}\n\tif\
    \ (space)\n\t\twords.push_back(temp);\n\treturn words;", "  std::vector<std::string>\
    \ answer;\n  std::stringstream ss(s);\n  std::string word;\n  while (ss >> word)\
    \ {\n    answer.push_back(word);\n  }\n  return answer;", "  std::vector<std::string>\
    \ res;\n  std::stringstream ss(s);\n  std::string w;\n  while (ss >> w) {\n  \
    \  res.push_back(w);\n  }\n  return res;", "    std::vector<std::string> words;\n\
    \    std::istringstream iss(s);\n    while(iss) {\n        std::string x;\n  \
    \      iss >> x;\n        words.push_back(x);\n    }\n    return words;", "  std::vector<std::string>\
    \ ret;\n  std::string word;\n  for (char c : s) {\n    if (c == ' ') {\n     \
    \ if (word.length() > 0) {\n        ret.push_back(word);\n        word = \"\"\
    ;\n      }\n    } else if (c == ',') {\n      if (word.length() > 0) {\n     \
    \   ret.push_back(word);\n        word = \"\";\n      }\n    } else {\n      word\
    \ += c;\n    }\n  }\n  if (word.length() > 0) {\n    ret.push_back(word);\n  }\n\
    \  return ret;", "  // solution\n  std::vector<std::string> vec;\n  std::stringstream\
    \ ss(s);\n  std::string word;\n  while(ss >> word) {\n    vec.push_back(word);\n\
    \  }\n  return vec;", "    std::string cur;\n    std::vector<std::string> result;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] ==\
    \ ',') {\n            if (cur.size() > 0) {\n                result.push_back(cur);\n\
    \                cur = \"\";\n            }\n        } else {\n            cur\
    \ += s[i];\n        }\n    }\n    if (cur.size() > 0) {\n        result.push_back(cur);\n\
    \    }\n    return result;", "    std::string::iterator it;\n    std::vector<std::string>\
    \ result;\n    std::string cur = \"\";\n    for (it = s.begin(); it != s.end();\
    \ it++) {\n        if (*it == ' ' || *it == ',') {\n            if (cur != \"\"\
    ) {\n                result.push_back(cur);\n                cur = \"\";\n   \
    \         }\n        } else {\n            cur += *it;\n        }\n    }\n   \
    \ result.push_back(cur);\n    return result;", "  std::istringstream iss(s);\n\
    \  std::vector<std::string> results(\n      (std::istream_iterator<std::string>(iss)),\n\
    \      std::istream_iterator<std::string>());\n  return results;", '    return
    std::vector<std::string>();', "  std::vector<std::string> v;\n  std::stringstream\
    \ ss(s);\n  std::string word;\n  while (getline(ss, word, ' ')) {\n    v.push_back(word);\n\
    \  }\n  return v;", "    std::string word;\n    std::vector<std::string> wordList;\n\
    \    for (auto character : s) {\n        if (character == ' ' || character ==\
    \ ',') {\n            wordList.push_back(word);\n            word = \"\";\n  \
    \      } else {\n            word += character;\n        }\n    }\n    wordList.push_back(word);\n\
    \    return wordList;", "  std::vector<std::string> res;\n  std::istringstream\
    \ iss(s);\n  std::copy(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>(),\
    \ std::back_inserter(res));\n  return res;", "  std::vector<std::string> v;\n\
    \  std::string temp;\n  for(auto c: s) {\n    if(c == ' ' || c == ',') {\n   \
    \   v.push_back(temp);\n      temp = \"\";\n    } else {\n      temp += c;\n \
    \   }\n  }\n  v.push_back(temp);\n  return v;", "\t// your code here\n  std::vector<std::string>\
    \ v;\n  std::stringstream ss(s);\n  std::string temp;\n  while(getline(ss, temp,\
    \ ' ')){\n    v.push_back(temp);\n  }\n  return v;", "    std::stringstream ss(s);\n\
    \    std::vector<std::string> result;\n    std::string intermediate;\n    while\
    \ (getline(ss, intermediate, ' ')) {\n        result.push_back(intermediate);\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::stringstream ss(s);\n    std::vector<std::string>\
    \ words;\n    std::string temp;\n    while(ss >> temp) {\n        words.push_back(temp);\n\
    \    }\n    return words;", "    std::string delimiter = \" ,;:.\";\n    std::vector<std::string>\
    \ words;\n    size_t position = 0;\n    size_t newPosition = 0;\n    std::string\
    \ token;\n    while ((newPosition = s.find(delimiter, position)) != std::string::npos)\
    \ {\n        token = s.substr(position, newPosition - position);\n        if (token.size()\
    \ != 0)\n            words.push_back(token);\n        position = newPosition +\
    \ 1;\n    }\n    token = s.substr(position, s.size() - position);\n    if (token.size()\
    \ != 0)\n        words.push_back(token);\n    return words;", "  std::stringstream\
    \ ss(s);\n  std::string word;\n  std::vector<std::string> words;\n  while (ss\
    \ >> word) {\n    words.push_back(word);\n  }\n  return words;", "    std::stringstream\
    \ ss(s);\n    std::vector<std::string> res;\n    std::string word;\n    while(getline(ss,\
    \ word, ' ')){\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ ret;\n    std::string temp = \"\";\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == ' ' || s[i] == ',') {\n            ret.push_back(temp);\n\
    \            temp = \"\";\n        } else {\n            temp += s[i];\n     \
    \   }\n    }\n    ret.push_back(temp);\n    return ret;", "  std::istringstream\
    \ iss(s);\n  std::vector<std::string> words;\n  std::string word;\n  while (iss\
    \ >> word) {\n    words.push_back(word);\n  }\n  return words;", "    std::stringstream\
    \ ss(s);\n    std::string word;\n    std::vector<std::string> words;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    return words;", " \
    \ std::stringstream stream(s);\n  std::string word;\n  std::vector<std::string>\
    \ v;\n  while(stream>>word)\n    v.push_back(word);\n  return v;", "\tstd::vector<std::string>\
    \ v;\n\tstd::stringstream sstream(s);\n\twhile (sstream.good()) {\n\t\tstd::string\
    \ buf;\n\t\tstd::getline(sstream, buf, ' ');\n\t\tv.push_back(buf);\n\t}\n\treturn\
    \ v;", "    std::vector<std::string> words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n   \
    \         words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;", "    std::vector<std::string> v;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while(getline(ss, word, ' ')){\n        v.push_back(word);\n\
    \    }\n    return v;", "  std::string temp;\n  std::vector<std::string> v;\n\
    \  for(int i=0;i<s.length();i++){\n    if(s[i]==' '){\n      v.push_back(temp);\n\
    \      temp.clear();\n    }\n    else if(s[i]==','){\n      v.push_back(temp);\n\
    \      temp.clear();\n    }\n    else{\n      temp+=s[i];\n    }\n  }\n  v.push_back(temp);\n\
    \  return v;", "\tstd::vector<std::string> v;\n\tstd::string temp = \"\";\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tv.push_back(temp);\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t\telse if (s[i] == ',') {\n\t\t\tv.push_back(temp);\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\t\t}\n\t}\n\tif (temp\
    \ != \"\") {\n\t\tv.push_back(temp);\n\t}\n\treturn v;", "   std::vector<std::string>\
    \ words;\n   std::string word;\n   bool in_word = false;\n   for (char c : s)\
    \ {\n      if (c == ' ' || c == ',') {\n         if (in_word) {\n            words.push_back(word);\n\
    \            word = \"\";\n            in_word = false;\n         }\n      } else\
    \ {\n         word += c;\n         in_word = true;\n      }\n   }\n   if (in_word)\
    \ {\n      words.push_back(word);\n   }\n   return words;", "    std::stringstream\
    \ ss(s);\n    std::vector<std::string> result;\n    std::string tmp;\n    while(std::getline(ss,\
    \ tmp, ' ')){\n        if(tmp.length() > 0){\n            result.push_back(tmp);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> v;\n\tstd::string\
    \ word;\n\tstd::stringstream ss(s);\n\twhile (getline(ss, word, ' ')) {\n\t\t\
    v.push_back(word);\n\t}\n\treturn v;", "  std::stringstream ss(s);\n  std::vector<std::string>\
    \ res;\n  std::string t;\n  while (std::getline(ss, t, ' ')) {\n    if (t.back()\
    \ == ',') t.pop_back();\n    res.push_back(t);\n  }\n  return res;", "  std::string\
    \ str = s;\n  int n = str.length();\n  int count = 0;\n  for (int i = 0; i < n;\
    \ i++) {\n    if (str[i] == ' ' || str[i] == ',') {\n      count++;\n    }\n \
    \ }\n  std::vector<std::string> v(count + 1);\n  std::stringstream ssin(str);\n\
    \  int countt = 0;\n  while (ssin.good() && countt < count + 1) {\n    ssin >>\
    \ v[countt];\n    countt++;\n  }\n  return v;", "    std::stringstream ss(s);\n\
    \    std::vector<std::string> res;\n    std::string word;\n    while(ss >> word)\n\
    \        res.push_back(word);\n    return res;", "  std::vector<std::string> words;\n\
    \  std::string copy = s;\n  std::string word;\n  std::size_t found;\n  while(copy.find(',')\
    \ != std::string::npos) {\n    found = copy.find(',');\n    word = copy.substr(0,\
    \ found);\n    words.push_back(word);\n    copy = copy.substr(found + 2);\n  }\n\
    \  words.push_back(copy);\n  return words;", "  std::istringstream iss(s);\n \
    \ std::vector<std::string> tokens{std::istream_iterator<std::string>{iss},\n \
    \                                 std::istream_iterator<std::string>{}};\n  return\
    \ tokens;", "  std::stringstream ss(s);\n  std::vector<std::string> result;\n\
    \  std::string word;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n\
    \  return result;", "    std::vector<std::string> result;\n    std::stringstream\
    \ ss(s);\n    std::string temp;\n    while(getline(ss, temp, ' ')){\n        result.push_back(temp);\n\
    \    }\n    return result;", "  std::vector<std::string> words;\n  std::stringstream\
    \ ss(s);\n  std::string w;\n  while (ss >> w) {\n    words.push_back(w);\n  }\n\
    \  return words;", "    std::vector<std::string> res;\n    std::string temp;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == ' ' || s[i] == ',')\
    \ {\n            res.push_back(temp);\n            temp = \"\";\n        } else\
    \ {\n            temp += s[i];\n        }\n    }\n    res.push_back(temp);\n \
    \   return res;", "  std::vector<std::string> words;\n  std::string word;\n  for\
    \ (char c : s) {\n    if (c == ' ') {\n      words.push_back(word);\n      word\
    \ = \"\";\n    } else if (c == ',') {\n      words.push_back(word);\n      word\
    \ = \"\";\n    } else {\n      word += c;\n    }\n  }\n  words.push_back(word);\n\
    \  return words;", "    std::vector<std::string> result;\n    std::stringstream\
    \ stream(s);\n    std::string temp;\n    while(getline(stream, temp, ' ')) {\n\
    \        result.push_back(temp);\n    }\n    return result;", "  std::string temp;\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(s);\n  while(getline(ss,\
    \ temp, ' ')){\n    v.push_back(temp);\n  }\n  return v;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss(s);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        result.push_back(item);\n    }\n    return result;",
  "    std::vector<std::string> words;\n    std::string word;\n    char space = '\
    \ ';\n    char comma = ',';\n    for (auto c : s) {\n        if (c == space ||\
    \ c == comma) {\n            words.push_back(word);\n            word = \"\";\n\
    \        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n\
    \    return words;", "    std::vector<std::string> words;\n    std::string word\
    \ = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else if (c == ',') {\n            if (word.length()\
    \ > 0) words.push_back(word);\n            word = \"\";\n        } else {\n  \
    \          word += c;\n        }\n    }\n    if (word.length() > 0) words.push_back(word);\n\
    \    return words;", "  std::istringstream in(s);\n  std::string word;\n  std::vector<std::string>\
    \ words;\n  while (in >> word) {\n    words.push_back(word);\n  }\n  return words;",
  "  std::string delimiter = \" \";\n  std::vector<std::string> s_strs;\n  size_t\
    \ pos = 0;\n  std::string token;\n  while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n    token = s.substr(0, pos);\n    s_strs.push_back(token);\n    s.erase(0,\
    \ pos + delimiter.length());\n  }\n  s_strs.push_back(s);\n  return s_strs;",
  "    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string\
    \ str;\n    while(getline(ss, str, ' '))\n        v.push_back(str);\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        std::stringstream ss(v[i]);\n        std::string\
    \ str;\n        std::vector<std::string> v1;\n        while(getline(ss, str, ','))\n\
    \            v1.push_back(str);\n        if(v1.size() != 1) {\n            v.erase(v.begin()\
    \ + i);\n            for(int j = 0; j < v1.size(); j++)\n                v.insert(v.begin()\
    \ + i + j, v1[j]);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ vec;\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        int\
    \ j = i;\n        while(j < n && s[j] != ' ' && s[j] != ',') {\n            j++;\n\
    \        }\n        vec.push_back(s.substr(i, j - i));\n        i = j + 1;\n \
    \   }\n    return vec;", "  std::vector<std::string> v;\n  int i = 0;\n  std::string\
    \ word = \"\";\n  while (i < s.length()) {\n    if (s[i] == ' ' || s[i] == ',')\
    \ {\n      v.push_back(word);\n      word = \"\";\n    } else {\n      word +=\
    \ s[i];\n    }\n    i++;\n  }\n  v.push_back(word);\n  return v;", "    std::stringstream\
    \ ss(s);\n    std::string temp;\n    std::vector<std::string> results;\n    while(getline(ss,\
    \ temp, ' ')){\n        results.push_back(temp);\n    }\n    return results;",
  "    std::string temp;\n    std::vector<std::string> vect;\n    std::stringstream\
    \ ss(s);\n    while (std::getline(ss, temp, ' '))\n    {\n        vect.push_back(temp);\n\
    \    }\n    return vect;", "    std::stringstream ss(s);\n    std::string temp;\n\
    \    std::vector<std::string> ans;\n    while(getline(ss, temp, ' ')){\n     \
    \   ans.push_back(temp);\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::istringstream iss(s);\n    std::string tmp;\n    while (getline(iss,\
    \ tmp, ' ')) {\n        words.push_back(tmp);\n    }\n    return words;", "  \
    \  std::vector<std::string> str;\n    std::string temp;\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]==' ' || s[i]==','){\n            str.push_back(temp);\n     \
    \       temp=\"\";\n        }\n        else{\n            temp+=s[i];\n      \
    \  }\n    }\n    str.push_back(temp);\n    return str;", "\tif (s == \"\")\n\t\
    \treturn {};\n\tstd::stringstream ss(s);\n\tstd::vector<std::string> words;\n\t\
    std::string word;\n\twhile (ss >> word)\n\t\twords.push_back(word);\n\treturn\
    \ words;", "    std::vector<std::string> ret;\n    std::stringstream ss(s);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        ret.push_back(item);\n\
    \    }\n    return ret;", "  int count = 1;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      count++;\n    }\n  }\n\
    \  std::vector<std::string> result(count);\n  int j = 0;\n  int first = 0;\n \
    \ for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',')\
    \ {\n      result[j] = s.substr(first, i - first);\n      j++;\n      first =\
    \ i + 1;\n    }\n  }\n  result[j] = s.substr(first, s.length() - first);\n  return\
    \ result;", "  std::stringstream str(s);\n  std::string word;\n  std::vector<std::string>\
    \ result;\n  while(str >> word)\n    result.push_back(word);\n  return result;",
  "  std::vector<std::string> words;\n  std::stringstream ss(s);\n  std::string word;\n\
    \  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;", " \
    \   std::vector<std::string> vec;\n    std::string word;\n    for(auto ch : s)\
    \ {\n        if(ch == ' ') {\n            vec.push_back(word);\n            word\
    \ = \"\";\n        }\n        else if(ch == ',') {\n            vec.push_back(word);\n\
    \            word = \"\";\n        }\n        else {\n            word += ch;\n\
    \        }\n    }\n    vec.push_back(word);\n    return vec;", "    vector<string>\
    \ v;\n    string buffer;\n    stringstream ss(s);\n    while(ss >> buffer) {\n\
    \        v.push_back(buffer);\n    }\n    return v;", "    std::istringstream\
    \ iss(s);\n    std::vector<std::string> v((std::istream_iterator<std::string>(iss)),\n\
    \                               std::istream_iterator<std::string>());\n    return\
    \ v;", "  std::vector<std::string> v;\n  std::string word = \"\";\n  int i = 0;\n\
    \  while (i < s.length()) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (word\
    \ != \"\") {\n        v.push_back(word);\n        word = \"\";\n      }\n    }\
    \ else {\n      word += s[i];\n    }\n    i++;\n  }\n  if (word != \"\") {\n \
    \   v.push_back(word);\n  }\n  return v;", "    std::vector<std::string> v;\n\
    \    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word)\n\
    \        v.push_back(word);\n    return v;", "  std::string delimiter = \" , \"\
    ;\n  std::string token;\n  size_t pos = 0;\n  std::vector<std::string> v;\n  while\
    \ ((pos = s.find(delimiter)) != std::string::npos) {\n    token = s.substr(0,\
    \ pos);\n    v.push_back(token);\n    s.erase(0, pos + delimiter.length());\n\
    \  }\n  v.push_back(s);\n  return v;", "  std::vector<std::string> a;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] == ' ') {\n      a.push_back(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = 0;\n    }\n    if (s[i] == ',')\
    \ {\n      a.push_back(s.substr(0, i));\n      s = s.substr(i + 1);\n      i =\
    \ 0;\n    }\n  }\n  a.push_back(s);\n  return a;", "    std::vector<std::string>\
    \ res;\n    std::stringstream ss(s);\n    while(ss.good()) {\n        std::string\
    \ tmp;\n        getline(ss, tmp, ' ');\n        res.push_back(tmp);\n    }\n \
    \   return res;", "  std::vector<std::string> parts;\n  std::string delimiter\
    \ = \" \";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = s.find(delimiter))\
    \ != std::string::npos) {\n    token = s.substr(0, pos);\n    parts.push_back(token);\n\
    \    s.erase(0, pos + delimiter.length());\n  }\n  if (s.length() > 0) {\n   \
    \ parts.push_back(s);\n  }\n  return parts;", "    std::stringstream ss(s);\n\
    \    std::string tok;\n    std::vector<std::string> v;\n    while(getline(ss,\
    \ tok, ' '))\n        v.push_back(tok);\n    return v;", "  std::istringstream\
    \ iss(s);\n  std::vector<std::string> tokens;\n  std::copy(std::istream_iterator<std::string>(iss),\n\
    \            std::istream_iterator<std::string>(),\n            std::back_inserter(tokens));\n\
    \  return tokens;", "  std::vector<std::string> result;\n  std::string temp;\n\
    \  std::string::iterator it;\n  for(it = s.begin(); it != s.end(); it++) {\n \
    \   if(*it == ' ' || *it == ',') {\n      result.push_back(temp);\n      temp.clear();\n\
    \    }\n    else {\n      temp.push_back(*it);\n    }\n  }\n  if(temp.size() >\
    \ 0)\n    result.push_back(temp);\n  return result;", "  std::vector<std::string>\
    \ res;\n  std::istringstream iss(s);\n  std::string word;\n  while (iss >> word)\
    \ {\n    res.push_back(word);\n  }\n  return res;", "  std::stringstream ss(s);\n\
    \  std::vector<std::string> words;\n  std::string word;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  return words;", "\tstd::stringstream ss(s);\n\
    \tstd::vector<std::string> res;\n\tstd::string word;\n\twhile (std::getline(ss,\
    \ word, ' '))\n\t\tres.push_back(word);\n\treturn res;", "    std::string word;\n\
    \    std::stringstream stream(s);\n    std::vector<std::string> words;\n    while\
    \ (getline(stream, word, ' ')) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> result;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (ss >> word)\n        result.push_back(word);\n\
    \    return result;", "  std::vector<std::string> v;\n  std::string temp;\n  for(int\
    \ i = 0; i < s.length(); i++) {\n    if(s[i] == ' ') {\n      v.push_back(temp);\n\
    \      temp = \"\";\n    }\n    else if(s[i] == ',') {\n      v.push_back(temp);\n\
    \      temp = \"\";\n    }\n    else {\n      temp += s[i];\n    }\n  }\n  v.push_back(temp);\n\
    \  return v;", "    std::istringstream iss(s);\n    std::vector<std::string> v(std::istream_iterator<std::string>{iss},\n\
    \                               std::istream_iterator<std::string>());\n    return\
    \ v;", "    std::string buffer{\"\"};\n    std::vector<std::string> v;\n    for\
    \ (auto n:s)\n    {\n        if (n == ' ' || n == ',')\n        {\n          \
    \  v.push_back(buffer);\n            buffer = \"\";\n        }\n        else\n\
    \        {\n            buffer += n;\n        }\n    }\n    if (buffer != \"\"\
    )\n    {\n        v.push_back(buffer);\n    }\n    return v;", "  std::string\
    \ word;\n  std::stringstream ss(s);\n  std::vector<std::string> output;\n  while\
    \ (ss >> word) {\n    output.push_back(word);\n  }\n  return output;"]
stop_tokens:
- "\n}"
