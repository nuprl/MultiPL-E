name: HumanEval_148_bf
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in\
  \ our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus,\
  \ then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function\
  \ that takes two planet names as strings planet1 and planet2. \n// The function\
  \ should return a tuple containing all planets whose orbits are \n// located between\
  \ the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to\
  \ the sun. \n// The function should return an empty tuple if planet1 or planet2\n\
  // are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"\
  ))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"\
  }))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"\
  ))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"\
  Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
  , (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string\
  \ planet2) {\n"
tests: "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
  ), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"\
  Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"\
  Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"\
  Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\"\
  , (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\"))\
  \ == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"\
  Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"\
  Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
  Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"
completions: []
stop_tokens:
- "\n}"
