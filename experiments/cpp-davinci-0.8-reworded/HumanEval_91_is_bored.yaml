name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>>\
  \ is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\n\
  long is_bored(std::string S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["  long ctr = 0;\n  size_t b1 = S.find(\"I \");\n  while (b1 != std::string::npos)\
    \ {\n    b1 += 2;\n    ctr++;\n    b1 = S.find(\"I \", b1);\n  }\n  return ctr;",
  "  int boredoms = 0;\n  std::string prev;\n  // Grab the first word in the sentence\n\
    \  std::istringstream iss(S);\n  iss >> prev;\n  // While there is more string\
    \ to read\n  while(iss) {\n    // Check if the first word is I\n    if(prev ==\
    \ \"I\") {\n      // Increment the number of boredoms\n      boredoms++;\n   \
    \ }\n    // Grab the next word\n    iss >> prev;\n  }\n  return boredoms;", " \
    \   std::vector<std::string> newString;\n    std::string delimiters(\" \\t,;\"\
    );\n    std::string::size_type lastPos = S.find_first_not_of(delimiters, 0);\n\
    \    std::string::size_type pos = S.find_first_of(delimiters, lastPos);\n    while\
    \ (std::string::npos != pos || std::string::npos != lastPos) {\n        newString.push_back(S.substr(lastPos,\
    \ pos - lastPos));\n        lastPos = S.find_first_not_of(delimiters, pos);\n\
    \        pos = S.find_first_of(delimiters, lastPos);\n    }\n    int count = 0;\n\
    \    for (int i = 0; i < newString.size(); i++) {\n        if (newString[i] ==\
    \ \"I\") {\n            count++;\n        }\n    }\n    return count;", "  int\
    \ count = 0;\n  std::istringstream ss(S);\n  std::string token;\n  std::vector<std::string>\
    \ result;\n  while (std::getline(ss, token, '.')) {\n    std::vector<std::string>\
    \ words;\n    std::istringstream iss(token);\n    std::string word;\n    while\
    \ (iss >> word)\n      words.push_back(word);\n    if(words.size() > 0)\n    \
    \  if(words[0] == \"I\")\n        count++;\n  }\n  return count;", "  std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n  long boredoms = 0;\n  long start = 0;\n \
    \ while (start < S.length()) {\n    long i = start;\n    while (i < S.length()\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n      i++;\n    }\n    std::string\
    \ sentence = S.substr(start, i - start);\n    std::cout << sentence << \"\\n\"\
    ;\n    if (sentence.find(\"i\") == 0) {\n      boredoms++;\n    }\n    start =\
    \ i + 1;\n  }\n  return boredoms;", "  // Your code here.\n  long boredom_count\
    \ = 0;\n  std::stringstream ss(S);\n  std::vector<std::string> words;\n  std::string\
    \ word;\n  while(ss >> word) {\n    words.push_back(word);\n  }\n  int i = 0;\n\
    \  bool is_previous_sentence_bored = false;\n  while(i < words.size()) {\n   \
    \ if(words[i] == \"I\") {\n      boredom_count++;\n      is_previous_sentence_bored\
    \ = true;\n    }\n    else if(words[i] == \".\" || words[i] == \"?\" || words[i]\
    \ == \"!\") {\n      is_previous_sentence_bored = false;\n    }\n    i++;\n  }\n\
    \  return boredom_count;", "    long count{0};\n    std::istringstream iss(S);\n\
    \    std::string word;\n    while(iss >> word) {\n        if(word.size() >= 2\
    \ && word[0] == 'I' && word[1] == ' ') {\n            count++;\n        }\n  \
    \  }\n    return count;", "\tint  bored=0;\n\tint pos=0;\n\twhile(pos<S.length()){\n\
    \t\tint e = S.find_first_of(\"?.!\",pos);\n\t\tif(e==-1)\n\t\t\tbreak;\n\t\te=e+1;\n\
    \t\tstd::string S_sub = S.substr(pos,e-pos);\n\t\tif(S_sub.substr(0,2)==\"I \"\
    ){\n\t\t\tbored+=1;\n\t\t}\n\t\tpos=e;\n\t}\n\treturn bored;", "    // Your code\
    \ goes here\n    int count = 0;\n    size_t found = S.find('I');\n    while(found\
    \ != std::string::npos)\n    {\n        found = S.find('I', found+1);\n      \
    \  count++;\n    }\n    return count;", "  \n  char I = 'I';\n  char per = '.';\n\
    \  char ques = '?';\n  char ex = '!';\n  long count = 0;\n  char temp;\n  int\
    \ l = S.length();\n  for(int i = 0; i < l; i++)\n  {\n    temp = S[i];\n    if(temp\
    \ == I)\n    {\n      if(i == 0)\n      {\n        count++;\n      }\n      else\
    \ if(S[i-1] == per || S[i-1] == ques || S[i-1] == ex)\n      {\n        count++;\n\
    \      }\n    }\n  }\n  return count;", "  char punct[] = {'.', '?', '!'};\n \
    \ std::stringstream ss(S);\n  std::string token;\n  long count = 0;\n  while (std::getline(ss,\
    \ token, ' ')) {\n    if (token == \"I\") {\n      while (std::getline(ss, token,\
    \ ' ')) {\n        if (token[token.length() - 1] == punct[0] ||\n            token[token.length()\
    \ - 1] == punct[1] ||\n            token[token.length() - 1] == punct[2]) {\n\
    \          count++;\n          break;\n        }\n      }\n    }\n  }\n  return\
    \ count;", "    std::vector<std::string> strVec;\n    std::istringstream iss(S);\n\
    \    std::string str;\n    for(std::string str; iss >> str; )\n        strVec.push_back(str);\n\
    \    long counter = 0;\n    for(int i = 0; i < strVec.size(); i++){\n        if(strVec[i]\
    \ == \"I\"){\n            counter++;\n        }\n    }\n    return counter;",
  "  std::string word;\n  std::istringstream stream(S);\n  long boredoms = 0;\n  while\
    \ (std::getline(stream, word, ' ')) {\n    if (word.compare(\"I\") == 0) {\n \
    \     std::getline(stream, word, ' ');\n      if (word.compare(\"am\") == 0) {\n\
    \        boredoms++;\n      }\n    }\n  }\n  return boredoms;", "    // create\
    \ a vector to store all the strings that are delimited by ' ', '.', '!', '?'\n\
    \    std::vector<std::string> sentences;\n    std::string currentString = \"\"\
    ;\n    int i = 0;\n    while (i < S.length()) {\n        // if a delimiter is\
    \ found\n        if (S[i] == ' ' || S[i] == '.' || S[i] == '!' || S[i] == '?')\
    \ {\n            // if the current string is not empty, push it to the sentences\
    \ vector\n            if (currentString != \"\") {\n                sentences.push_back(currentString);\n\
    \                currentString = \"\";\n            }\n            // push the\
    \ delimiter to the vector\n            sentences.push_back(std::string(1, S[i]));\n\
    \        }\n        // else, if the current char is not a delimiter, add it to\
    \ the current string\n        else {\n            currentString += S[i];\n   \
    \     }\n        i++;\n    }\n    // if the current string is not empty, push\
    \ it to the sentences vector\n    if (currentString != \"\") {\n        sentences.push_back(currentString);\n\
    \    }\n    // count the number of borodoms\n    long boredoms = 0;\n    for (int\
    \ i = 0; i < sentences.size(); i++) {\n        // if a sentence starts with the\
    \ word \"I\", increment boredoms\n        if (sentences[i] == \"I\") {\n     \
    \       boredoms++;\n        }\n    }\n    return boredoms;", "   std::string\
    \ tmp;\n   long count = 0;\n   std::stringstream ss(S);\n   while(std::getline(ss,\
    \ tmp, '.')) {\n      std::stringstream tmps(tmp);\n      while(std::getline(tmps,\
    \ tmp, '?')) {\n         std::stringstream tmps2(tmp);\n         while(std::getline(tmps2,\
    \ tmp, '!')) {\n            std::stringstream tmps3(tmp);\n            std::string\
    \ token;\n            if(tmps3 >> token) {\n               if(token == \"I\")\n\
    \                  count++;\n            }\n         }\n      }\n   }\n   return\
    \ count;", "    long boredoms = 0;\n    long i = 0;\n    while (i < S.length())\
    \ {\n        if (S[i] == 'I') {\n            boredoms++;\n            for (; i\
    \ < S.length(); i++) {\n                if (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!')\n                    break;\n            }\n        }\n        i++;\n\
    \    }\n    return boredoms;", "  const char* c = S.c_str();\n  std::string s(c);\n\
    \  long count = 0;\n  std::string::size_type pos = 0;\n  while ((pos = s.find(\"\
    I\", pos)) != std::string::npos) {\n    count++;\n    pos += 1;\n  }\n  return\
    \ count;", "\t// split string by delimiter of '.', '?' or '!'\n\tstd::string delimiter(\"\
    !?.\");\n\tint k = 0;\n\tsize_t pos = 0;\n\tstd::string token;\n\twhile ((pos\
    \ = S.find(delimiter)) != std::string::npos) {\n\t\ttoken = S.substr(0, pos);\n\
    \t\tS.erase(0, pos + delimiter.length());\n\t\t// check if sentence starts with\
    \ 'I'\n\t\tif (token.substr(0, 1) == \"I\") k++;\n\t}\n\treturn k;", "\tlong boredoms\
    \ = 0;\n\tfor (auto it = S.begin(); it != S.end(); it++) {\n\t\tif (toupper(*it)\
    \ == 'I') {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;", "    int boredoms\
    \ = 0;\n    bool I_found = false;\n    for (int i = 0; i < S.length(); i++) {\n\
    \        if (S[i] == 'I') {\n            I_found = true;\n        }\n        if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (I_found) {\n\
    \                boredoms++;\n            }\n            I_found = false;\n  \
    \      }\n    }\n    return boredoms;", "    long count = 0;\n    for(long i =\
    \ 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            if(S[i+1]\
    \ == ' ') {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "  long count = 0;\n  stringstream ss(S);\n  string word;\n  while(ss\
    \ >> word) {\n    if(word == \"I\") {\n      count++;\n    }\n  }\n  return count;",
  "    std::stringstream stream;\n    stream << S;\n    std::string sentence;\n  \
    \  long boredom = 0;\n    while(getline(stream, sentence, '.')){\n        if(sentence.size()\
    \ < 2)\n            continue;\n        if(sentence[0] == 'I' && sentence[1] ==\
    \ ' ')\n            boredom++;\n    }\n    return boredom;", "    // your code\
    \ goes here\n    long count=0;\n    int flag=0;\n    for(long i=0;i<S.length();i++)\n\
    \    {\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!')\n        {\n         \
    \   flag=0;\n        }\n        else if(S[i]=='I' && flag==0)\n        {\n   \
    \         count++;\n            flag=1;\n        }\n    }\n    return count;",
  "    std::stringstream ss(S);\n    std::string word;\n    long count = 0;\n    while(ss\
    \ >> word) {\n        if(word == \"I\") count++;\n    }\n    return count;", " \
    \   //replace(std::begin(S), std::end(S), ',', ' ');\n    //std::cout << S <<\
    \ std::endl;\n    std::string delimiters = \"?!.\";\n    std::string word = \"\
    I\";\n    std::vector<std::string> boredoms;\n    size_t pos = 0;\n    std::string\
    \ token;\n    while ((pos = S.find(delimiters)) != std::string::npos) {\n    \
    \    token = S.substr(0, pos);\n        if(token.find(word) != std::string::npos)\n\
    \        {\n            boredoms.push_back(token);\n        }\n        S.erase(0,\
    \ pos + delimiters.length());\n    }\n    return boredoms.size();", "    int result\
    \ = 0;\n    bool was_I = false;\n    for (int i = 0; i < S.size(); i++) {\n  \
    \      if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (was_I)\
    \ result++;\n            was_I = false;\n        }\n        if (S[i] == 'I') was_I\
    \ = true;\n    }\n    return result;", "    return std::count(std::begin(S), std::end(S),\
    \ 'I');", "  // your code here\n  long l=S.length();\n  long count=0;\n  char\
    \ ch[l];\n  strcpy(ch,S.c_str());\n  char words[l][20];\n  int i=0,k=0,j=0;\n\
    \  while(i<l)\n  {\n    while(ch[i]!=' ' && ch[i]!='.' && ch[i]!='?' && ch[i]!='!'\
    \ && i<l)\n    {\n      words[k][j]=ch[i];\n      j++;\n      i++;\n    }\n  \
    \  words[k][j]='\\0';\n    k++;\n    j=0;\n    i++;\n  }\n  for(i=0;i<k;i++)\n\
    \  {\n    if(strcmp(words[i],\"I\")==0)\n    {\n      count++;\n    }\n  }\n \
    \ return count;", "    int i=0,count=0;\n    if(S.size()<0)\n    {\n        std::cout<<\"\
    Empty String\";\n        return 0;\n    }\n    //S.erase(S.begin(),S.end());\n\
    \    for(i=0;i<S.size();i++)\n    {\n        std::string str=\"\";\n        while(S[i]!='.'&&S[i]!='?'&&S[i]!='!')\n\
    \        {\n            str=str+S[i];\n            i++;\n        }\n        //std::cout<<str<<\"\
    \\n\";\n        if(str[0]=='I')\n        {\n            count++;\n        }\n\
    \    }\n    return count;", "  int i=0;\n  bool bored = false;\n  for(int j=0;j<S.length();j++){\n\
    \      if(S[j]=='I'){\n          bored = true;\n      }\n      if(S[j]=='.'||S[j]=='?'||S[j]=='!'){\n\
    \          if(bored){\n              i++;\n              bored = false;\n    \
    \      }\n      }\n  }\n  return i;", "  int bored = 0;\n  // Your code here\n\
    \  int start = 0;\n  for(int i = 0; i < S.length(); i++){\n    if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!'){\n      if(i - start >= 2 && S[start] == 'I'\
    \ && S[start + 1] == ' '){\n        bored++;\n      }\n      start = i + 1;\n\
    \    }\n  }\n  return bored;", "    return std::count(S.begin(), S.end(), 'I');",
  "    std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    long count = 0;\n    bool state = false;\n\
    \    std::vector<std::string> words;\n    while (ss >> word) {\n        if (word\
    \ == \"i\") {\n            state = true;\n        }\n        words.push_back(word);\n\
    \    }\n    if (state == true) {\n        for (std::string s : words) {\n    \
    \        if (s == \".\") {\n                count++;\n            }\n        \
    \    if (s == \"?\") {\n                count++;\n            }\n            if\
    \ (s == \"!\") {\n                count++;\n            }\n        }\n    }\n\
    \    return count;", "\tint count=0;\n\t// Your code here...\n\t//\n\t// Replace\
    \ the following line with your code\n\t//\n\tchar bor[100]=\"I\";\n\tchar *test\
    \ = strtok(const_cast<char*>(S.c_str()), \".\");\n\twhile(test)\n\t{\n\t\tif(strcmp(test,bor)==0)\n\
    \t\t{\n\t\t\tcount++;\n\t\t}\n\t\ttest = strtok(NULL, \".\");\n\t}\n\ttest = strtok(const_cast<char*>(S.c_str()),\
    \ \"?\");\n\twhile(test)\n\t{\n\t\tif(strcmp(test,bor)==0)\n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t\ttest = strtok(NULL, \"?\");\n\t}\n\ttest = strtok(const_cast<char*>(S.c_str()),\
    \ \"!\");\n\twhile(test)\n\t{\n\t\tif(strcmp(test,bor)==0)\n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t\ttest = strtok(NULL, \"!\");\n\t}\n\treturn count;", "\t// Your code\
    \ goes here...\n\tint n=S.length();\n\tint count=0;\n\tfor(int i=0;i<n;i++)\n\t\
    {\n\t\tif(S[i]=='I')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", " \
    \ long count = 0;\n  std::stringstream ss(S);\n  std::string temp;\n  while(std::getline(ss,\
    \ temp, '.')) {\n    if(temp.substr(0,2) == \"I \")\n      count++;\n  }\n  return\
    \ count;", "    std::string s = S;\n    // std::cout << \"s is \" << s << std::endl;\n\
    \    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ == 'I') {\n            // std::cout << \"here\" << std::endl;\n            count++;\n\
    \            int j = i;\n            while (j < s.length() && s[j] != '.' && s[j]\
    \ != '?' && s[j] != '!') {\n                j++;\n            }\n            i\
    \ = j - 1;\n        }\n    }\n    return count;", "    int boredomCount = 0;\n\
    \    std::string I = \"I\";\n    std::string dot = \".\";\n    std::string exclamation\
    \ = \"!\";\n    std::string question = \"?\";\n    std::string n = \"n\";\n  \
    \  std::string m = \"m\";\n    std::string t = \"t\";\n    std::string c = \"\
    c\";\n    std::string space = \" \";\n    int index = S.find(I);\n    if (index\
    \ == 0) {\n        boredomCount++;\n    }\n    while (index != std::string::npos)\
    \ {\n        // std::cout << \"Found I at: \" << index << std::endl;\n       \
    \ int indexCheck = index;\n        indexCheck = index + 1;\n        while (indexCheck\
    \ <= S.length()) {\n            if (indexCheck + 1 == S.length()) {\n        \
    \        break;\n            }\n            else if (S.substr(indexCheck, 1) ==\
    \ space && S.substr(indexCheck + 1, 1) == I) {\n                boredomCount++;\n\
    \                indexCheck = indexCheck + 1;\n                break;\n      \
    \      }\n            else if (S.substr(indexCheck, 1) == dot || S.substr(indexCheck,\
    \ 1) == exclamation || S.substr(indexCheck, 1) == question) {\n              \
    \  break;\n            }\n            else if (S.substr(indexCheck, 1) == space\
    \ && S.substr(indexCheck + 1, 1) == n && S.substr(indexCheck + 2, 1) == space\
    \ && S.substr(indexCheck + 3, 1) == I) {\n                boredomCount++;\n  \
    \              indexCheck = indexCheck + 3;\n                break;\n        \
    \    }\n            else if (S.substr(indexCheck, 1) == space && S.substr(indexCheck\
    \ + 1, 1) == m && S.substr(indexCheck + 2, 1) == space && S.substr(indexCheck\
    \ + 3, 1) == I) {\n                boredomCount++;\n                indexCheck\
    \ = indexCheck + 3;\n                break;\n            }\n            else if\
    \ (S.substr(indexCheck, 1) == space &&", "    // your code goes here\n    int\
    \ i,c=0;\n    for(i=0;i<S.length();i++)\n    {\n        if(S[i]=='I')\n      \
    \  {\n            c++;\n        }\n    }\n    return c;", "    long count=0;\n\
    \    for(long i=0;i<S.length();i++)\n    {\n        if(S[i]=='I')\n        {\n\
    \            if(S[i+1]==' ')\n            {\n                long j=i+2;\n   \
    \             while(S[j]!='.' && S[j]!='?' && S[j]!='!')\n                {\n\
    \                    j++;\n                }\n                j++;\n         \
    \       i=j;\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    // Your code goes here\n    long count=0;\n    int n=S.length();\n\
    \    int i=0;\n    std::string str=\"I\";\n    while(i<n)\n    {\n        if(S[i]=='I')\n\
    \        {\n            std::stringstream ss;\n            ss<<S[i+1];\n     \
    \       std::string s;\n            ss>>s;\n            if(s==\" \")\n       \
    \     {\n                count++;\n            }\n        }\n        i++;\n  \
    \  }\n    return count;", "  // Write your code here\n  // To print results to\
    \ the standard output you can use printf()\n  // Example: printf(\"%s\", \"Hello\
    \ world!\");\n   int l=S.length();\n   int n=0;\n   int i;\n   for(i=0;i<l;i++)\n\
    \   {\n       if(S[i]=='I')\n       {\n           if(S[i+1]==' ')\n          \
    \ {\n               n++;\n           }\n       }\n   }\n   return n;", "    long\
    \ count = 0;\n    std::istringstream ss(S);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word == \"I\") {\n            count++;\n       \
    \ }\n    }\n    return count;", "  std::vector<std::string> v;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  long n = 0;\n  while (std::getline(ss, word,\
    \ '.')) {\n    v.push_back(word);\n  }\n  for (auto &i : v) {\n    if (i[0] ==\
    \ 'I') {\n      n++;\n    }\n  }\n  return n;", "  // your code here\n  int count\
    \ = 0;\n  char chars[] = \"I\";\n  int size = S.size();\n  for(int i = 0; i <\
    \ size; i++){\n    if(S[i] == chars[0]){\n      if(S[i-1] == '.' || S[i-1] ==\
    \ '?' || S[i-1] == '!'){\n        count++;\n      }\n    }\n  }\n  return count;",
  "\t// Your code here\n\tlong long count = 0;\n\tlong long found = S.find(\"I\",\
    \ 0);\n\twhile (found != std::string::npos) {\n\t\t++count;\n\t\tfound = S.find(\"\
    I\", found + 1);\n\t}\n\treturn count;", "    std::string s=\"\";\n    long count=0;\n\
    \    long i=0;\n    while(i<S.length()){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n\
    \            if(s.length()>0){\n                if(s[0]=='I'){\n             \
    \       count++;\n                }\n                s=\"\";\n            }\n\
    \        }\n        else{\n            s=s+S[i];\n        }\n        i++;\n  \
    \  }\n    if(s.length()>0){\n        if(s[0]=='I'){\n            count++;\n  \
    \      }\n    }\n    return count;", "    long count = 0;\n    S += '.';\n   \
    \ for (long i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            if (S[i-1] == 'I') {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long c=0;\n    int\
    \ h=0;\n    for(int i=0;i<S.length();i++)\n    {\n        if(S[i]=='I')\n    \
    \    {\n            c=c+1;\n        }\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!')\n\
    \        {\n            c=c-1;\n        }\n    }\n    return(c);", "  // your\
    \ code here\n  long count=0;\n  char *pt;\n  char *ret;\n  int i=0;\n  pt=&S[0];\n\
    \  while(i<S.length())\n  {\n    ret=strchr(pt,'I');\n    if(ret==NULL)\n    {\n\
    \      break;\n    }\n    if(ret==pt)\n    {\n      count++;\n    }\n    else\n\
    \    {\n      if(*(ret-1)=='.'||*(ret-1)=='?'||*(ret-1)=='!')\n      {\n     \
    \   count++;\n      }\n    }\n    pt=ret+1;\n    i++;\n  }\n  return count;",
  "\tlong count = 0;\n\tstd::string delimiters = \" .?!:;,\";\n\tstd::string str;\n\
    \tfor (char ch : S) {\n\t\tif (delimiters.find(ch) != std::string::npos) {\n\t\
    \t\tif (str == \"I\") {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tstr = \"\";\n\t\t}\n\
    \t\telse {\n\t\t\tstr += ch;\n\t\t}\n\t}\n\treturn count;", "  int boredoms =\
    \ 0;\n  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word)\
    \ {\n    if (word == \"I\")\n      boredoms++;\n  }\n  return boredoms;", "\t\
    // your code here\n\tint bored = 0;\n\tfor (auto i = S.begin(); i < S.end(); i++)\
    \ {\n\t\tif (*i == 'I') {\n\t\t\tfor (; i < S.end(); i++) {\n\t\t\t\tif (*i ==\
    \ '.' || *i == '?' || *i == '!') {\n\t\t\t\t\tbored++;\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bored;", "    long count = 0;\n    long found\
    \ = 0;\n    for(int i = 0; i < S.length(); i++){\n        found = S.find(\"I\"\
    , i);\n        if(found != std::string::npos){\n            if(S[found-1] == '.'\
    \ || S[found-1] == '?' || S[found-1] == '!'){\n                count++;\n    \
    \        }\n        }\n    }\n    return count;", "  return std::count(S.begin(),\
    \ S.end(), 'I');", "\tint count = 0;\n\tstd::string delimiters = \"!?.\";\n\t\
    S.erase(std::remove(S.begin(), S.end(), '?'), S.end());\n\tS.erase(std::remove(S.begin(),\
    \ S.end(), '!'), S.end());\n\tS.erase(std::remove(S.begin(), S.end(), '.'), S.end());\n\
    \tstd::vector<std::string> words;\n\tstd::stringstream ss(S);\n\tstd::string word;\n\
    \twhile (ss >> word) {\n\t\twords.push_back(word);\n\t}\n\tfor (int i = 0; i <\
    \ words.size(); i++) {\n\t\tif (words[i] == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;", "    int b = 0;\n    string p;\n    vector<string> v;\n \
    \   stringstream ss(S);\n    while(ss>>p)\n        v.push_back(p);\n    for(int\
    \ i=0;i<v.size();i++)\n    {\n        if(v[i]==\"I\")\n        {\n           \
    \ b++;\n        }\n    }\n    return b;", "  //convert string to vector of strings\n\
    \  std::istringstream iss(S);\n  std::vector<std::string> vec{\n      std::istream_iterator<std::string>{iss},\
    \ std::istream_iterator<std::string>{}};\n  int cnt = 0;\n  for (int i = 0; i\
    \ < vec.size(); i++) {\n    if (vec[i] == \"I\") {\n      cnt++;\n    }\n  }\n\
    \  return cnt;", "  // Your code here\n  long boredoms = 0;\n  bool isBored =\
    \ false;\n  for (int i = 0; i < S.length(); i++) {\n    if (isBored) {\n     \
    \ if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n        isBored = false;\n\
    \      }\n    } else {\n      if (S[i] == 'I') {\n        boredoms++;\n      \
    \  isBored = true;\n      }\n    }\n  }\n  return boredoms;", "  long result =\
    \ 0;\n  long n=S.length();\n  std::string w;\n  std::istringstream ss(S);\n  while(ss\
    \ >> w)\n  {\n    if(w==\"I\")\n    {\n      result++;\n    }\n  }\n  return result;",
  "\tlong count = 0;\n\tstd::istringstream is(S);\n\tstd::string line;\n\twhile (std::getline(is,\
    \ line, '.')) {\n\t\tstd::istringstream iss(line);\n\t\tstd::string word;\n\t\t\
    if (std::getline(iss, word, ' ')) {\n\t\t\tif (word == \"I\") {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;", "    // your code here\n    if(S.size()\
    \ == 0) return 0;\n    int ans = 0;\n    int i = 0;\n    for(; i < S.size(); i++){\n\
    \        if(S[i] == 'I') {\n            ans++;\n            break;\n        }\n\
    \    }\n    for(i++; i < S.size(); i++){\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!')\n            ans += is_bored(S.substr(i+1));\n    }\n    return\
    \ ans;", "    long cnt = 0;\n    bool newline = true;\n    for (char c : S) {\n\
    \        if (c == ' ') {\n            newline = true;\n        } else if (newline\
    \ && (c == 'I')) {\n            cnt++;\n            newline = false;\n       \
    \ } else if (c == '.' || c == '?' || c == '!') {\n            newline = true;\n\
    \        } else {\n            newline = false;\n        }\n    }\n    return\
    \ cnt;", "\tstd::stringstream ss(S);\n\tstd::string temp;\n\tlong count=0;\n\t\
    while(ss>>temp){\n\t\tif(temp==\"I\")\n\t\t\tcount++;\n\t}\n\treturn count;",
  "  long counter = 0;\n  int i = 0;\n  char c;\n  while(i < S.length()){\n    if(S[i]\
    \ == 'I'){\n      c = S[i+1];\n      if(c == '.' || c == '?' || c == '!'){\n \
    \       counter++;\n      }\n    }\n    i++;\n  }\n  return counter;", "    std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n    std::size_t found = S.find(\" i \");\n\
    \    if (found!=std::string::npos)\n        return 1;\n    else\n        return\
    \ 0;", "    stringstream ss(S);\n    string item;\n    long count = 0;\n    while\
    \ (getline(ss, item, ' ')) {\n        if (item == \"I\") {\n            count++;\n\
    \        }\n    }\n    return count;", "    std::stringstream stringStream(S);\n\
    \    std::string line;\n    long bored = 0;\n    while(std::getline(stringStream,\
    \ line))\n    {\n        std::stringstream lineStream(line);\n        std::string\
    \ cell;\n        while(std::getline(lineStream, cell, ' '))\n        {\n     \
    \       if(cell == \"I\")\n            {\n                bored++;\n         \
    \       break;\n            }\n        }\n    }\n    return bored;", "    long\
    \ boredoms = 0;\n    stringstream ss(S);\n    string word;\n    while(ss >> word)\
    \ {\n        if(word == \"I\") {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;", "  std::regex pattern(\"I.+?[.!?]\");\n  std::smatch matches;\n\
    \  long count=0;\n  std::string s = S;\n  while(std::regex_search(s, matches,\
    \ pattern)) {\n    for(auto match: matches) {\n      count+=1;\n    }\n    s =\
    \ matches.suffix().str();\n  }\n  return count;", "  int ans = 0;\n  int len =\
    \ S.length();\n  for (int i = 0; i < len; i++) {\n    if (S[i] == 'I') {\n   \
    \   int j = i;\n      while (S[j] != '!' && S[j] != '.' && S[j] != '?')\n    \
    \    j++;\n      ans++;\n      i = j;\n    }\n  }\n  return ans;", "    int boredoms\
    \ = 0;\n    std::istringstream stream(S);\n    std::string word;\n    while (stream)\
    \ {\n        stream >> word;\n        if (word == \"I\") {\n            ++boredoms;\n\
    \        }\n    }\n    return boredoms;", "  auto begin = S.begin();\n  auto end\
    \ = S.end();\n  long count = 0;\n  long index = 0;\n  while (begin != end) {\n\
    \    if (*begin == ' ') {\n      ++begin;\n      continue;\n    }\n    if (*begin\
    \ == 'I') {\n      ++count;\n      while (begin != end && *begin != '.' && *begin\
    \ != '?' && *begin != '!') {\n        ++begin;\n      }\n      ++begin;\n    \
    \  continue;\n    }\n    while (begin != end && *begin != '.' && *begin != '?'\
    \ && *begin != '!') {\n      ++begin;\n    }\n    ++begin;\n  }\n  return count;",
  "    long count = 0;\n    stringstream ss(S);\n    string word;\n    while(ss >>\
    \ word) {\n        if(word == \"I\") {\n            count++;\n        }\n    }\n\
    \    return count;", "  int sz = S.size();\n  std::string tok;\n  long boredoms\
    \ = 0;\n  for (long i = 0; i < sz; ++i) {\n    tok = \"\";\n    while (i < sz\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n      tok += S[i];\n      ++i;\n\
    \    }\n    std::vector<std::string> words;\n    long sz_tok = tok.size();\n \
    \   for (long j = 0; j < sz_tok; ++j) {\n      std::string word = \"\";\n    \
    \  while (j < sz_tok && tok[j] != ' ') {\n        word += tok[j];\n        ++j;\n\
    \      }\n      words.push_back(word);\n    }\n    if (words.size() >= 1 && words[0]\
    \ == \"I\") {\n      ++boredoms;\n    }\n  }\n  return boredoms;", "    long len\
    \ = S.length();\n    std::string word, word1;\n    long j = 0, count = 0;\n  \
    \  for(long i = 0; i < len; i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!') {\n            j = 0;\n            for(; j < word.length(); j++) {\n\
    \                word1 += word[j];\n            }\n            if(word1 == \"\
    I\") {\n                count++;\n            }\n            word = \"\";\n  \
    \          word1 = \"\";\n        }\n        else {\n            word += S[i];\n\
    \        }\n    }\n    return count;", "\t// YOUR CODE HERE\n\t//\n\t// HINT:\
    \ you can use std::string::find and std::string::find_first_of\n\tint count =\
    \ 0;\n\tstd::string token;\n\tstd::string delimiter = \"!.\";\n\tsize_t pos =\
    \ 0;\n\twhile ((pos = S.find(delimiter)) != std::string::npos) {\n\t\ttoken =\
    \ S.substr(0, pos);\n\t\tS.erase(0, pos + delimiter.length());\n\t\tif (token.find(\"\
    I\") == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long bored=0;\n\
    \    std::string I=\"I\";\n    std::string check;\n    std::istringstream iss(S);\n\
    \    while(iss>>check){\n        if(check==I){\n            bored++;\n       \
    \ }\n    }\n    return bored;", "  // first split by dots\n  std::stringstream\
    \ ss(S);\n  std::string token;\n  long boredoms = 0;\n  while (std::getline(ss,\
    \ token, '.')) {\n    // then split by question marks\n    std::stringstream ss2(token);\n\
    \    std::string token2;\n    while (std::getline(ss2, token2, '?')) {\n     \
    \ // then split by exclamation points\n      std::stringstream ss3(token2);\n\
    \      std::string token3;\n      while (std::getline(ss3, token3, '!')) {\n \
    \       // check for word i\n        std::stringstream ss4(token3);\n        std::string\
    \ token4;\n        while (std::getline(ss4, token4, ' ')) {\n          if (token4\
    \ == \"I\") {\n            boredoms++;\n            break;\n          }\n    \
    \    }\n      }\n    }\n  }\n  return boredoms;", "    int N = S.size();\n   \
    \ long ans = 0;\n    int i = 0;\n    bool bored = false;\n    while (i < N) {\n\
    \        if (i+1 < N && S[i] == 'I' && S[i+1] == ' ') {\n            bored = true;\n\
    \        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n       \
    \     ans += bored;\n            bored = false;\n        }\n        i++;\n   \
    \ }\n    return ans;", "    // replace '?' and '!' with '.'\n    int i = 0;\n\
    \    while (i < S.length()) {\n        if (S[i] == '?' || S[i] == '!') {\n   \
    \         S[i] = '.';\n        }\n        i++;\n    }\n    // split on '.'\n \
    \   std::vector<std::string> sentences;\n    boost::split(sentences, S, boost::is_any_of(\"\
    .\"));\n    // count boredoms\n    long boredoms = 0;\n    for (std::string sentence\
    \ : sentences) {\n        if (sentence[0] == 'I') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "\tassert(S.size() > 0);\n\tint c =\
    \ 0;\n\tfor (int i = 0; i < S.size(); i++) {\n\t\tif (S[i] == 'I')\n\t\t\tc++;\n\
    \t}\n\treturn c;", "    int B = 0;\n    std::string I(\"I\");\n    int i = 0;\n\
    \    while (i < S.length()) {\n        if (S[i] == 'I') {\n            if ((i\
    \ == 0) || (S[i - 1] == '.') || (S[i - 1] == '?') || (S[i - 1] == '!')) {\n  \
    \              B++;\n            }\n        }\n        i++;\n    }\n    return\
    \ B;", "    long boredoms = 0;\n    stringstream ss(S);\n    string s;\n    while(getline(ss,\
    \ s, '.')) {\n        stringstream ss1(s);\n        string s1;\n        getline(ss1,\
    \ s1, ' ');\n        if(s1 == \"I\")\n            boredoms++;\n    }\n    return\
    \ boredoms;", "    long count = 0;\n    int i = 0;\n    while(i < S.length()){\n\
    \        if(S[i] == 'I'){\n            if(S[i+1] == ' '){\n                count++;\n\
    \            }\n        }\n        i++;\n    }\n    return count;", "    int count=0;\n\
    \    std::string temp=\"\";\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n\
    \            if(temp[0]=='I'){\n                count++;\n            }\n    \
    \        temp=\"\";\n        }\n        else{\n            temp+=S[i];\n     \
    \   }\n    }\n    return count;", "    // your code here\n    int count = 0;\n\
    \    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n        \
    \    int j = i+1;\n            while(S[j] == ' ')\n                j++;\n    \
    \        if(S[j] >= 'a' && S[j] <= 'z')\n                count++;\n        }\n\
    \    }\n    return count;", "    long boredoms = 0;\n    long L = S.length();\n\
    \    long i = 0;\n    while (i < L) {\n        if (S[i] == 'I') {\n          \
    \  // this sentence starts with 'I', so we can skip over it\n            while\
    \ (i < L && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n                i++;\n\
    \            }\n            boredoms++;\n        } else {\n            // this\
    \ sentence doesn't start with 'I', so we skip over it\n            while (i <\
    \ L && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n                i++;\n  \
    \          }\n        }\n        i++;\n    }\n    return boredoms;", "  long count\
    \ = 0;\n  std::stringstream ss(S);\n  std::string word;\n  char temp;\n  while(ss>>word){\n\
    \    temp = ss.peek();\n    if(word == \"I\"){\n      count++;\n    }\n    if(temp\
    \ == '.' || temp == '?' || temp == '!'){\n      ss.ignore();\n    }\n  }\n  return\
    \ count;", "    std::stringstream ss(S);\n    std::string word;\n    long count\
    \ = 0;\n    while(ss>>word){\n        if(word == \"I\") count++;\n    }\n    return\
    \ count;", "  long word_count = 1;\n  std::stringstream ss(S);\n  std::string\
    \ word;\n  long boredoms = 0;\n  while (std::getline(ss, word, ' ')) {\n    if\
    \ (word == \"I\") {\n      boredoms += word_count;\n    }\n    word_count++;\n\
    \  }\n  return boredoms;", "    if(S.empty()) return 0;\n    long boredom_count\
    \ = 0;\n    std::istringstream ss(S);\n    std::string curr_word;\n    std::string\
    \ prev_word;\n    while(std::getline(ss, curr_word, ' ')) {\n        if(prev_word.size()\
    \ > 0 && prev_word.at(prev_word.size() - 1) == 'I') {\n            if(curr_word.size()\
    \ > 0 && curr_word.at(0) == '.') {\n                boredom_count++;\n       \
    \     }\n        }\n        prev_word = curr_word;\n    }\n    return boredom_count;",
  "    std::istringstream iss(S);\n    std::string s;\n    long count = 0;\n    while(iss\
    \ >> s) {\n        if(s == \"I\") {\n            count += 1;\n        }\n    }\n\
    \    return count;", "    long boredoms = 0;\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        // Find the start of the sentence\n        while (i < S.size()\
    \ && S[i] != '.' && S[i] != '?' && S[i] != '!')\n            i++;\n        //\
    \ If this is the end, we're done\n        if (i == S.size())\n            break;\n\
    \        // Start of the sentence, skip spaces\n        i++;\n        while (i\
    \ < S.size() && isspace(S[i]))\n            i++;\n        // If we have an I,\
    \ we're bored.\n        if (i < S.size() && toupper(S[i]) == 'I')\n          \
    \  boredoms++;\n    }\n    return boredoms;", "  int num_boredoms = 0;\n  std::string\
    \ word = \"\";\n  // count number of sentences\n  for (char c : S) {\n    if (c\
    \ == '.' || c == '?' || c == '!') {\n      if (word == \"I\") {\n        num_boredoms++;\n\
    \      }\n      word = \"\";\n    } else {\n      word += c;\n    }\n  }\n  return\
    \ num_boredoms;", "  std::istringstream str(S);\n  std::string word;\n  long count\
    \ = 0;\n  while (str >> word) {\n    if (word == \"I\") {\n      count++;\n  \
    \  }\n  }\n  return count;", '  // Your code goes here', "  long i=0;\n  std::string\
    \ str=\"I\";\n  long count=0;\n  size_t found=S.find(str);\n  while(found!=std::string::npos)\n\
    \  {\n    if(S[found-1]==' ')\n    {\n      count+=1;\n    }\n    found=S.find(str,found+1);\n\
    \  }\n  return count;", "  std::stringstream ss(S);\n  std::string word;\n  long\
    \ count = 0;\n  while (ss >> word) {\n    if (word == \"I\") {\n      count++;\n\
    \    }\n  }\n  return count;", "\t// put your code here\n\tint boredom = 0;\n\t\
    int count = 0;\n\tfor (int i = 0; i < S.length(); i++) {\n\t\tif (S[i] == 'I')\
    \ {\n\t\t\tboredom++;\n\t\t}\n\t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn boredom;", "  std::string::size_type\
    \ pos = 0;\n  std::string::size_type prev = 0;\n  long boredoms = 0;\n  while\
    \ ((pos = S.find_first_of(\".?!\", prev)) != std::string::npos) {\n    if (S.substr(prev,\
    \ pos - prev).find(\"I\") == 0) {\n      boredoms++;\n    }\n    prev = pos +\
    \ 1;\n  }\n  return boredoms;", "  std::regex bored(\"I(\\\\.|\\\\?|\\\\!)\");\n\
    \  std::sregex_iterator next(S.begin(), S.end(), bored);\n  std::sregex_iterator\
    \ end;\n  int c = 0;\n  while (next != end) {\n    ++c;\n    next++;\n  }\n  return\
    \ c;", "    long boredoms = 0;\n    std::istringstream iss(S);\n    std::string\
    \ word;\n    while (iss >> word) {\n        if (word == \"I\") {\n           \
    \ boredoms++;\n        }\n    }\n    return boredoms;", "  int i = 0;\n  bool\
    \ flag = false;\n  long bored = 0;\n  while (i < S.length()) {\n    if (S[i] ==\
    \ 'I') {\n      while (i < S.length() && (S[i] != '.' || S[i] != '?' || S[i] !=\
    \ '!')) {\n        i++;\n      }\n      bored++;\n    }\n    i++;\n  }\n  return\
    \ bored;", "  int count = 0;\n  long pos = S.find(\"I\");\n  while (pos >= 0 &&\
    \ pos < S.length()) {\n    if (pos == 0 || (S[pos - 1] == '.' || S[pos - 1] ==\
    \ '?' ||\n                     S[pos - 1] == '!')) {\n      count++;\n    }\n\
    \    pos = S.find(\"I\", pos + 1);\n  }\n  return count;", "\tlong long ttl =\
    \ 0;\n\tstd::stringstream ss(S);\n\tstd::string tmp;\n\twhile (ss >> tmp) {\n\t\
    \tif (tmp == \"I\") {\n\t\t\t++ttl;\n\t\t}\n\t}\n\treturn ttl;", "  int count\
    \ = 0;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == 'I') {\n   \
    \   count++;\n    }\n  }\n  return count;", "    long count = 0;\n    int size\
    \ = S.size();\n    if(size == 0){\n        return 0;\n    }\n    if(size == 1\
    \ && S[0] != 'I'){\n        return 0;\n    }\n    for(int i = 0; i < size; i++){\n\
    \        if(S[i] == 'I'){\n            count++;\n        }\n    }\n    if(S[size-1]\
    \ == 'I'){\n        count--;\n    }\n    if(count == 0){\n        return 0;\n\
    \    }\n    if(count > 0){\n        return count;\n    }\n    if(count < 0){\n\
    \        return count * (-1);\n    }", "    long count = 0;\n    char *first =\
    \ (char *) malloc(sizeof(char) * 2);\n    std::size_t size = S.copy(first, 1,\
    \ 0);\n    first[size] = '\\0';\n    for (char &c : S) {\n        char *first;\n\
    \        std::size_t size = S.copy(first, 1, 0);\n        first[size] = '\\0';\n\
    \        if (c == '!' || c == '?' || c == '.') {\n            if (first == \"\
    I\") {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "\tlong count = 0;\n\tsize_t pos = 0;\n\twhile ((pos = S.find(\"I\"\
    , pos)) != std::string::npos) {\n\t\tif (pos == 0) {\n\t\t\tif (S[pos + 1] ==\
    \ ' ')\n\t\t\t\tcount++;\n\t\t} else if (pos >= 1) {\n\t\t\tif (S[pos - 1] ==\
    \ '.' || S[pos - 1] == '?' || S[pos - 1] == '!') {\n\t\t\t\tif (S[pos + 1] ==\
    \ ' ')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tpos += 1;\n\t}\n\treturn count;",
  "    std::string delimiters = \"?!.\";\n    long result = 0;\n    for (int i = 0;\
    \ i < S.length(); i++) {\n        if (S[i] == 'I') {\n            result++;\n\
    \        }\n        for (int j = 0; j < delimiters.length(); j++) {\n        \
    \    if (S[i] == delimiters[j]) {\n                while (i < S.length() && S[i]\
    \ != ' ') {\n                    i++;\n                }\n            }\n    \
    \    }\n    }\n    return result;", "    std::istringstream is(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (is >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;",
  "  long count=0;\n  size_t pos=0;\n  while(1){\n    pos=S.find(\"I\",pos);\n   \
    \ if(pos==std::string::npos)\n      break;\n    count++;\n    pos++;\n  }\n  return\
    \ count;", "    long int count = 0;\n    if(S[0] == 'I'){\n        count++;\n\
    \    }\n    std::istringstream ss(S);\n    std::string token;\n    while(std::getline(ss,\
    \ token, '.')) {\n        if(token[0] == 'I'){\n            count++;\n       \
    \ }\n    }\n    return count;", "  long count = 0;\n  std::string word = \"\"\
    ;\n  int i;\n  int n = S.length();\n  for (i = 0; i < n; i++) {\n    if (S[i]\
    \ == ' ') {\n      if (word == \"I\") {\n        count++;\n      }\n      word\
    \ = \"\";\n    } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n     \
    \ if (word == \"I\") {\n        count++;\n      }\n      word = \"\";\n    } else\
    \ {\n      word += S[i];\n    }\n  }\n  return count;", "\tstd::stringstream ss(S);\n\
    \tstd::string word;\n\tint cnt = 0;\n\twhile (ss >> word) {\n\t\tif (word == \"\
    I\") cnt++;\n\t}\n\treturn cnt;", "    long count = 0;\n    std::istringstream\
    \ f(S);\n    std::string word;\n    while (getline(f, word, ' ')) {\n        std::cout\
    \ << word << std::endl;\n        if (word == \"I\") {\n            count += 1;\n\
    \        }\n    }\n    return count;", "    long n,boredom=0;\n    n= S.length();\n\
    \    bool first_i=false;\n    for(int i=0;i<n;i++)\n    {\n        if(S[i]=='I')\n\
    \        {\n            first_i=true;\n        }\n        if(S[i]==' ' && first_i==true)\n\
    \        {\n            boredom++;\n            first_i=false;\n        }\n  \
    \      if(S[i]=='.' || S[i]=='?' || S[i]=='!')\n        {\n            first_i=false;\n\
    \        }\n    }\n    return boredom;", "  std::regex r(\"^[I]\");\n  return\
    \ std::count_if(std::sregex_token_iterator(S.begin(), S.end(), r, 1),\n      \
    \  std::sregex_token_iterator(), [](const std::string& s) { return s == \"I\"\
    ; });", "  long boredom=0;\n  std::vector<std::string> sentences;\n  std::string\
    \ sentence;\n  // Split the string on punctuation\n  std::stringstream ss(S);\n\
    \  while(getline(ss, sentence, '.')) {\n    sentences.push_back(sentence);\n \
    \ }\n  for(std::string sentence : sentences) {\n    // Split the sentence on spaces\n\
    \    std::vector<std::string> words;\n    std::stringstream sss(sentence);\n \
    \   while(getline(sss, sentence, ' ')) {\n      words.push_back(sentence);\n \
    \   }\n    if(words.size() >= 1) {\n      if(words[0] == \"I\") {\n        boredom++;\n\
    \      }\n    }\n  }\n  return boredom;", "    long total=0;\n    char ch;\n \
    \   std::string temp=\"\";\n    for(int i=0;i<S.length();i++){\n      ch=S[i];\n\
    \      if(ch=='.' || ch=='?' || ch=='!'){\n        if(temp.length()>=2 && temp[0]=='I'\
    \ && temp[1]==' '){\n          total++;\n        }\n        temp=\"\";\n     \
    \ }\n      else{\n        temp=temp+ch;\n      }\n    }\n    return total;", "\t\
    auto split = [](const std::string &s, char delim) {\n\t\tstd::vector<std::string>\
    \ elems;\n\t\tstd::stringstream ss(s);\n\t\tstd::string item;\n\t\twhile (std::getline(ss,\
    \ item, delim)) {\n\t\t\telems.push_back(item);\n\t\t}\n\t\treturn elems;\n\t\
    };\n\tauto split_sentences = split(S, '.');\n\tlong count = 0;\n\tfor (std::string\
    \ s : split_sentences) {\n\t\tif (s.find(\"I\") == 0) {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;", "\tlong count=0;\n\tfor(int i=0;i<S.length();i++)\n\t\
    {\n\t\tif(S[i]=='I')\n\t\t{\n\t\t\twhile(S[i]!='.'&&S[i]!='?'&&S[i]!='!')\n\t\t\
    \t\ti++;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "  int bor = 0;\n  int\
    \ i = 0;\n  while (i < S.length()) {\n    if (S[i] == 'I') {\n      while (S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!') {\n        i++;\n      }\n      bor++;\n\
    \    }\n    i++;\n  }\n  return bor;", "  return std::count(S.begin(), S.end(),\
    \ 'I');", "  int bored = 0;\n  if (S[0] == 'I') {\n    bored++;\n  }\n  for (int\
    \ i = 0; i < S.length(); i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n      if (S[i + 1] == 'I') {\n        bored++;\n      }\n    }\n  }\n\
    \  return bored;", "  long count=0;\n  std::stringstream ss(S);\n  std::string\
    \ word;\n  while(ss>>word){\n    if(word[0]=='I'){\n      count++;\n    }\n  }\n\
    \  return count;", "    long result = 0;\n    std::string I = \"I\";\n    std::vector<std::string>\
    \ words;\n    words = split(S, ' ');\n    for (long i = 0; i < words.size(); i++)\
    \ {\n        if (words[i] == I) {\n            result++;\n        }\n    }\n \
    \   return result;", "    long boredoms = 0;\n    long len = S.length();\n   \
    \ long i = 0;\n    long is_bored = 0;\n    while(i < len) {\n        if(S[i] ==\
    \ 'I') {\n            is_bored = 1;\n        }\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            if(is_bored) {\n                boredoms++;\n\
    \            }\n            is_bored = 0;\n        }\n        i++;\n    }\n  \
    \  return boredoms;", "  std::vector<char> delimiters {'.', '?', '!'};\n  std::vector<std::string>\
    \ split_str;\n  long boredoms = 0;\n  size_t start = 0, end = 0;\n  while((end\
    \ = S.find_first_of(delimiters, start)) != std::string::npos) {\n    split_str.push_back(S.substr(start,\
    \ end - start));\n    start = end + 1;\n  }\n  split_str.push_back(S.substr(start));\n\
    \  for(auto& str : split_str) {\n    if(str.find(\"I\") == 0) {\n      boredoms++;\n\
    \    }\n  }\n  return boredoms;", "    int l = S.length();\n    int count = 0;\n\
    \    for(int i = 0; i < l; i++) {\n        if(S[i] == 'I') {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "  int n = S.length();\n  int c=0;\n\
    \  int n2=0;\n  for(int i=0;i<n;i++)\n  {\n    if(S[i]=='.' || S[i]=='?' || S[i]=='!')\n\
    \    {\n      if(S[i-1]=='I')\n      {\n        c++;\n      }\n    }\n  }\n  return\
    \ c;", "  int boredoms = 0;\n  std::stringstream ss(S);\n  std::string word;\n\
    \  while (ss >> word) {\n    if (word == \"I\") {\n      boredoms++;\n    }\n\
    \  }\n  return boredoms;", "    // your code here\n    std::istringstream iss(S);\n\
    \    std::string temp;\n    long ans = 0;\n    while(getline(iss, temp, '.'))\
    \ {\n        std::istringstream iiss(temp);\n        while(getline(iiss, temp,\
    \ ' ')) {\n            if(temp == \"I\") {\n                ans++;\n         \
    \       break;\n            }\n        }\n    }\n    return ans;", "  long count=0;\n\
    \  string str = S;\n  std::istringstream iss(str);\n  std::vector<std::string>\
    \ results((std::istream_iterator<std::string>(iss)),\n                       \
    \    std::istream_iterator<std::string>());\n  for(int i=0;i<results.size();i++){\n\
    \    if(results[i]==\"I\"){\n      count++;\n    }\n  }\n  return count;", " \
    \   stringstream ss(S);\n    string word;\n    int boredoms = 0;\n    while(getline(ss,\
    \ word, ' ')){\n        if(word[0] == 'I'){\n            boredoms++;\n       \
    \ }\n    }\n    return boredoms;", "  std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n  std::string delim = \".?!\";\n  int64_t count = 0;\n  int64_t\
    \ start = 0;\n  int64_t len = S.length();\n  while (start < len) {\n    auto i\
    \ = S.find_first_of(delim, start);\n    if (i == std::string::npos) {\n      i\
    \ = len;\n    }\n    auto j = S.find_first_not_of(\" \", start);\n    if (j ==\
    \ std::string::npos) {\n      j = len;\n    }\n    if (i > j) {\n      auto sub\
    \ = S.substr(j, i - j);\n      if (sub.find(\"i\") == 0) {\n        count++;\n\
    \      }\n    }\n    start = i + 1;\n  }\n  return count;", "  char last = ' ';\n\
    \  int count = 0;\n  for (const char& c : S) {\n    if (c == '.' || c == '?' ||\
    \ c == '!') {\n      if (last == 'I')\n        count++;\n      last = ' ';\n \
    \   } else {\n      last = c;\n    }\n  }\n  return count;", "    // Your code\
    \ here\n    long long res=0;\n    char x;\n    for(int i=0;i<S.length();i++)\n\
    \    {\n        //std::cout<<S[i]<<\"\\n\";\n        if(S[i]=='.' || S[i]=='?'\
    \ || S[i]=='!')\n        {\n            //std::cout<<\"here\";\n            if(x=='I')\n\
    \            {\n                res++;\n            }\n            x=' ';\n  \
    \      }\n        else\n        {\n            x=S[i];\n        }\n    }\n   \
    \ return res;", "   int boredoms = 0;\n   std::string delimiter = \"?!.\";\n \
    \  std::string mystring = S;\n   std::string token;\n   size_t pos = 0;\n   while\
    \ ((pos = mystring.find(delimiter)) != std::string::npos) {\n       token = mystring.substr(0,\
    \ pos);\n       // std::cout << token << std::endl;\n       if (token.at(0) ==\
    \ 'I') {\n           boredoms++;\n       }\n       mystring.erase(0, pos + delimiter.length());\n\
    \   }\n   return boredoms;", "    // your code here\n    std::string str=S;\n\
    \    std::transform(str.begin(), str.end(), str.begin(), ::tolower);\n    std::stringstream\
    \ ss(str);\n    std::string word;\n    long count=0;\n    while(ss>>word){\n \
    \     if(word==\"i\")\n      count++;\n    }\n    return count;", "\tlong count=0;\n\
    \tlong n=S.length();\n\tstd::string word=\"\";\n\tfor(long i=0;i<n;i++)\n\t{\n\
    \t\tif(S[i]=='.'||S[i]=='?'||S[i]=='!')\n\t\t{\n\t\t\tif(word==\"I\")\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tword=\"\";\n\t\t}\n\t\telse if(S[i]==' ')\n\
    \t\t{\n\t\t\tif(word==\"I\")\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tword=\"\
    \";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tword=word+S[i];\n\t\t}\n\t}\n\treturn count;",
  "  // write your code here\n  return 0;", "    long boredoms = 0;\n    long index\
    \ = 0;\n    long i = 0;\n    int curlen = 0;\n    bool isbored = false;\n    while(i\
    \ < S.length()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            if (isbored) {\n                boredoms++;\n            }\n    \
    \        curlen = 0;\n            isbored = false;\n        } else if (curlen\
    \ == 0 && S[i] == 'I') {\n            isbored = true;\n        }\n        curlen++;\n\
    \        i++;\n    }\n    return boredoms;", "    std::stringstream ss(S);\n \
    \   std::string word;\n    long counter = 0;\n    while(ss >> word) {\n      \
    \  if(word == \"I\") {\n            counter++;\n        }\n    }\n    return counter;",
  "    std::regex regex(\"I\");\n    long count = std::count(S.begin(), S.end(), 'I');\n\
    \    return count;", "    long boredoms = 0;\n    // YOUR CODE HERE\n    return\
    \ boredoms;", "  int word_count = 0;\n  std::vector<std::string> words;\n  std::istringstream\
    \ iss(S);\n  do {\n    std::string sub;\n    iss >> sub;\n    words.push_back(sub);\n\
    \  } while (iss);\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i]\
    \ == \"I\")\n      if (words[i - 1].back() == '.') {\n        word_count++;\n\
    \      }\n  }\n  return word_count;", "    // remove all white space\n    for\
    \ (auto &c : S) {\n        if (c == ' ') {\n            c = '\\0';\n        }\n\
    \    }\n    // remove all characters that are not letters\n    // OR periods,\
    \ question marks or exclamation points\n    for (int i = 0; i < S.size(); ++i)\
    \ {\n        if (!(((S[i] >= 'a') && (S[i] <= 'z')) ||\n              ((S[i] >=\
    \ 'A') && (S[i] <= 'Z')) ||\n              (S[i] == '.') || (S[i] == '?') || (S[i]\
    \ == '!'))) {\n            S[i] = '\\0';\n        }\n    }\n    // now we want\
    \ to convert all letters to lower case\n    for (int i = 0; i < S.size(); ++i)\
    \ {\n        if ((S[i] >= 'A') && (S[i] <= 'Z')) {\n            S[i] = S[i] -\
    \ 'A' + 'a';\n        }\n    }\n    // now we want to count how many times the\
    \ word \"i\" appears\n    //  and we'll assume that the only time it appears is\
    \ in the\n    //  beginning of the sentence\n    long count = 0;\n    for (int\
    \ i = 0; i < S.size(); ++i) {\n        if (S[i] == 'i') {\n            ++count;\n\
    \        }\n    }\n    return count;", "  // your code here\n  return 0;", " \
    \   long boredoms = 0;\n    std::stringstream s(S);\n    std::string word;\n \
    \   while (std::getline(s, word, '.')) {\n        if (word.length() > 0) {\n \
    \           int i = 0;\n            while (i < word.length() && std::isspace(word[i]))\
    \ {\n                i++;\n            }\n            if (i < word.length() &&\
    \ word[i] == 'I') {\n                boredoms++;\n            }\n        }\n \
    \   }\n    return boredoms;", "    size_t loc = S.find(\"I\");\n    if (loc !=\
    \ std::string::npos) {\n        return 1 + is_bored(S.substr(loc + 1));\n    }\n\
    \    return 0;", "  int n = S.length();\n  int boredoms = 0;\n  std::string w;\n\
    \  std::stringstream s;\n  s << S;\n  while (s >> w) {\n    if (w == \"I\")\n\
    \      boredoms++;\n  }\n  return boredoms;", "    std::istringstream iss(S);\n\
    \    std::string word;\n    bool is_first = true;\n    long cnt = 0;\n    // std::cout\
    \ << S << std::endl;\n    while (iss >> word) {\n        // std::cout << \"word\
    \ \" << word << std::endl;\n        if (is_first && word == \"I\") {\n       \
    \     cnt++;\n        }\n        is_first = word.back() == '.' || word.back()\
    \ == '?' || word.back() == '!';\n    }\n    return cnt;", "\tlong i = 0;\n\tlong\
    \ j = 0;\n\tlong bored = 0;\n\twhile (i < S.length()) {\n\t\tif (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n\t\t\tstd::string s = S.substr(j, i - j);\n\t\
    \t\tj = i + 1;\n\t\t\tstd::string first = s.substr(0, 1);\n\t\t\tif (first ==\
    \ \"I\") {\n\t\t\t\tbored++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn bored;",
  "    // Create a list of sentences\n    std::vector<std::string> sentences;\n  \
    \  std::string sentence;\n    std::stringstream ss(S);\n    while (std::getline(ss,\
    \ sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    // Count\
    \ the number of boredoms\n    long boredoms = 0;\n    for (auto sentence : sentences)\
    \ {\n        std::string first_word;\n        std::stringstream ss(sentence);\n\
    \        ss >> first_word;\n        if (first_word == \"I\") {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    long count=0;\n    std::string\
    \ word;\n    std::istringstream iss(S);\n    while(iss>>word){\n        std::cout<<word<<std::endl;\n\
    \        if(word==\"I\"){\n            ++count;\n        }\n    }\n    return\
    \ count;", "\tstd::istringstream iss(S);\n\tstd::string temp;\n\tlong boredoms\
    \ = 0;\n\twhile (iss >> temp) {\n\t\tboredoms += temp == \"I\";\n\t}\n\treturn\
    \ boredoms;", "    std::istringstream iss(S);\n    std::string w;\n    long count\
    \ = 0;\n    while (iss >> w) {\n        if (w == \"I\") {\n            count +=\
    \ 1;\n        }\n    }\n    return count;", "    long count=0;\n    for(int i=0;i<S.length();i++)\n\
    \    {\n        if(S[i]=='I')\n        {\n            count++;\n        }\n  \
    \  }\n    return count;", "  // You can add more code here\n  // \"i\" should\
    \ not be at the first index of the string\n  if(S[0] == 'I'){\n    return 1;\n\
    \  }\n  long bored_count = 0;\n  // Search for the bored count using Regular Expressions\n\
    \  std::regex e(\"I \");\n  auto words_begin = std::sregex_iterator(S.begin(),\
    \ S.end(), e);\n  auto words_end = std::sregex_iterator();\n  // Check if the\
    \ string contains a match with the given expression\n  if(words_begin == words_end){\n\
    \    return bored_count;\n  }\n  // Check if the string starts with 'I '\n  if(words_begin->position()\
    \ == 0){\n    ++bored_count;\n  }\n  // Check for all the other matches\n  for(std::sregex_iterator\
    \ i = words_begin; i != words_end; ++i){\n    if(i->position() > 0){\n      //\
    \ Check the character just before 'I '\n      if(S[i->position() - 1] == '.' ||\
    \ S[i->position() - 1] == '?' || S[i->position() - 1] == '!'){\n        ++bored_count;\n\
    \      }\n    }\n  }\n  return bored_count;", "  std::stringstream ss(S);\n  std::string\
    \ t;\n  long count = 0;\n  while (std::getline(ss, t, '.')) {\n    if (t[0] ==\
    \ 'I') {\n      count++;\n    }\n  }\n  return count;", "  long index = 0;\n \
    \ long count = 0;\n  while (index < S.length()) {\n    if (S[index] == 'I') {\n\
    \      count += 1;\n    }\n    while (index < S.length() && S[index] != '.' &&\
    \ S[index] != '?' && S[index] != '!') {\n      index += 1;\n    }\n    index +=\
    \ 1;\n  }\n  return count;", "   std::regex e(R\"(\\bI\\b)\");\n   std::sregex_iterator\
    \ pos(S.begin(), S.end(), e);\n   std::sregex_iterator end;\n   int num = 0;\n\
    \   for ( ; pos != end; ++pos) {\n       num++;\n   }\n   return num;", "  long\
    \ wordCount=0;\n  std::istringstream iss(S);\n  std::string word;\n  while(iss>>word){\n\
    \    if(word==\"I\")\n      wordCount++;\n  }\n  return wordCount;", "    long\
    \ num = 0;\n    for (long i = 0; i < S.length(); i++) {\n        if (S[i] == 'I')\
    \ {\n            if (S[i+1] == ' ' && (S[i+2] != '.' || S[i+2] != '?' || S[i+2]\
    \ != '!')) {\n                num++;\n            }\n        }\n    }\n    return\
    \ num;", "\tlong bored_sum = 0;\n\tstd::vector<std::string> sentence_list;\n\t\
    // split sentence\n\tstd::string delimiter = \"?.!\";\n\tsize_t pos = 0;\n\tstd::string\
    \ token;\n\twhile ((pos = S.find(delimiter)) != std::string::npos) {\n\t\ttoken\
    \ = S.substr(0, pos);\n\t\tsentence_list.push_back(token);\n\t\tS.erase(0, pos\
    \ + delimiter.length());\n\t}\n\tsentence_list.push_back(S);\n\t// count I\n\t\
    for (auto & s : sentence_list) {\n\t\tif (s.find(\"I\") == 0) {\n\t\t\tbored_sum++;\n\
    \t\t}\n\t}\n\treturn bored_sum;", "    long count = 0;\n    int prev_i = -1;\n\
    \    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n    \
    \        prev_i = i;\n        } else if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            if (prev_i == -1) continue;\n            if (i - prev_i\
    \ <= 2) {\n                prev_i = -1;\n                count++;\n          \
    \  }\n        }\n    }\n    return count;", "    std::vector<std::string> sentences;\n\
    \    std::stringstream stream(S);\n    std::string token;\n    // std::cout <<\
    \ \"Reading string: \" << S << std::endl;\n    while (getline(stream, token, '.'))\
    \ {\n        // std::cout << \"Found token: \" << token << std::endl;\n      \
    \  sentences.push_back(token);\n    }\n    // for (std::string sen : sentences)\
    \ {\n    //     std::cout << \"Found sentence: \" << sen << std::endl;\n    //\
    \ }\n    long num_boredoms = 0;\n    for (std::string sen : sentences) {\n   \
    \     std::size_t found = sen.find(\"I\");\n        if (found != std::string::npos)\
    \ {\n            num_boredoms++;\n        }\n    }\n    return num_boredoms;",
  "  std::istringstream in(S);\n  std::string token;\n  long boredoms=0;\n  while(in\
    \ >> token) {\n    if(token==\"I\") {\n      boredoms++;\n    }\n  }\n  return\
    \ boredoms;", "  bool isI;\n  long wordCount = 0;\n  long boredoms = 0;\n  if(S.size()==0)\
    \ {\n    return 0;\n  }\n  isI = S[0]=='I';\n  for(char c : S) {\n    if(c=='.'\
    \ || c=='?' || c=='!') {\n      if(isI) {\n        boredoms++;\n      }\n    \
    \  isI = false;\n      wordCount = 0;\n    } else if(c==' ') {\n      if(wordCount==0)\
    \ {\n        isI = false;\n      }\n      wordCount++;\n    } else {\n      if(wordCount==0)\
    \ {\n        isI = c=='I';\n      }\n      wordCount++;\n    }\n  }\n  return\
    \ boredoms;", "  // your code here\n  \n  int boredCount = 0;\n  std::vector<std::string>\
    \ parts;\n  std::stringstream ss(S);\n  std::string delim;\n  char delimit[] =\
    \ {'.', '?', '!'};\n  for(int i = 0; i < 3; i++)\n  {\n    char* cstr = new char[delimit[i].length()\
    \ + 1];\n    strcpy(cstr, delimit[i].c_str());\n    std::string delim(cstr);\n\
    \    while(std::getline(ss, delim, ' '))\n    {\n      parts.push_back(delim);\n\
    \    }\n  }\n  for(int i = 0; i < parts.size(); i++)\n  {\n    if(parts[i].compare(\"\
    I\") == 0)\n    {\n      boredCount++;\n    }\n  }\n  return boredCount;", " \
    \   long cnt = 0;\n    std::string word = \"\";\n    for (auto& i : S) {\n   \
    \     if (i == ' ') {\n            if (word == \"I\")\n                cnt++;\n\
    \            word = \"\";\n        } else if (i == '.' || i == '?' || i == '!')\
    \ {\n            if (word == \"I\")\n                cnt++;\n            word\
    \ = \"\";\n        } else {\n            word += i;\n        }\n    }\n    return\
    \ cnt;", "    long boredoms=0;\n    long str_length=S.length();\n    int flag=0;\n\
    \    for(long i=0;i<str_length;i++)\n    {\n        if(S[i]=='I')\n        {\n\
    \            if(flag==0)\n            {\n                flag=1;\n           \
    \     boredoms++;\n            }\n        }\n        else if(S[i]=='.'||S[i]=='?'||S[i]=='!')\n\
    \        {\n            flag=0;\n        }\n    }\n    return boredoms;", "\t\
    if (S.empty())\n\t\treturn 0;\n\tstd::string sen = \"\";\n\tstd::string first\
    \ = \"\";\n\tlong counter = 0;\n\tfor (int i = 0; i < S.length(); i++) {\n\t\t\
    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tsen += S[i];\n\t\t\tint\
    \ j = 0;\n\t\t\twhile (j < sen.length()) {\n\t\t\t\tif (sen[j] == '.' || sen[j]\
    \ == '?' || sen[j] == '!') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfirst += sen[j];\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t\tif (first == \"I\") {\n\t\t\t\tcounter++;\n\t\t\t\
    }\n\t\t\tfirst = \"\";\n\t\t\tsen = \"\";\n\t\t}\n\t\telse {\n\t\t\tsen += S[i];\n\
    \t\t}\n\t}\n\treturn counter;", "    std::string I = \"I\";\n    std::stringstream\
    \ stream(S);\n    long count = 0;\n    std::string word;\n    while(stream >>\
    \ word) {\n        if(word == I) {\n            count++;\n        }\n    }\n \
    \   return count;", "  long count = 0;\n  for (int i = 0; i < S.length(); i++)\
    \ {\n    int j = i;\n    while (S[j] != '.' && S[j] != '?' && S[j] != '!') {\n\
    \      j++;\n    }\n    if (S.substr(i, 2) == \"I \") {\n      count++;\n    }\n\
    \    i = j;\n  }\n  return count;", "\tlong n=0;\n\t// Write your code here\n\t\
    // To print results to the standard output you can use the cout stream\n\t// Example:\
    \ cout << \"Hello world!\";\n\tfor(int i=0;i<S.length();i++)\n\t{\n\t\tif(S[i]=='I')\n\
    \t\t{\n\t\t\tif(S[i+1]==' ' || S[i+1]=='!' || S[i+1]=='?')\n\t\t\t{\n\t\t\t\t\
    n++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n;", "    long count = 0;\n    std::stringstream\
    \ check1(S);\n    std::string intermediate;\n    while(getline(check1, intermediate,\
    \ '.'))\n    {\n        std::stringstream check2(intermediate);\n        std::string\
    \ intermediate2;\n        while(getline(check2, intermediate2, '?'))\n       \
    \ {\n            std::stringstream check3(intermediate2);\n            std::string\
    \ intermediate3;\n            while(getline(check3, intermediate3, '!'))\n   \
    \         {\n                std::stringstream check4(intermediate3);\n      \
    \          std::string intermediate4;\n                while(getline(check4, intermediate4,\
    \ ' '))\n                {\n                    if(intermediate4 == \"I\")\n \
    \                   {\n                        count++;\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return count;", "  const char* begin = S.c_str();\n  const char*\
    \ end = begin + S.size();\n  long count = 0;\n  while (begin != end) {\n    const\
    \ char* next = std::find_if(begin, end, [](char c) {\n      return c == '.' ||\
    \ c == '?' || c == '!';\n    });\n    std::string str(begin, next);\n    std::transform(str.begin(),\
    \ str.end(), str.begin(), ::tolower);\n    if (str.substr(0, 1) == \"i\") {\n\
    \      count++;\n    }\n    begin = next + 1;\n  }\n  return count;", "    //\
    \ your code here\n    return count(S.begin(), S.end(), 'I');", "\tlong cnt = 0;\n\
    \tfor (int i = 0; i < S.size(); i++) {\n\t\tif (S[i] == 'I') cnt++;\n\t\tif (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') cnt++;\n\t}\n\treturn cnt;", "    long\
    \ boredoms = 0;\n    long i = 0;\n    while (i < S.length()) {\n        if (S[i]\
    \ == 'I') {\n            boredoms++;\n            while (i < S.length() && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!') {\n                i++;\n            }\n\
    \        }\n        i++;\n    }\n    return boredoms;", "  std::istringstream\
    \ iss(S);\n  std::string line;\n  long boredoms=0;\n  while(std::getline(iss,\
    \ line, '.')){\n    std::istringstream issLine(line);\n    std::string word;\n\
    \    std::getline(issLine, word, ' ');\n    if(word==\"I\"){\n      boredoms++;\n\
    \    }\n  }\n  return boredoms;", "    std::string string = \"I\";\n    long counter\
    \ = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            if (S.substr(0, 1) == string) {\n\
    \                counter++;\n            }\n            S = S.substr(i + 1);\n\
    \            i = 0;\n        }\n    }\n    return counter;", "    long i=0,boredom=0;\n\
    \    while(i<S.length()){\n        while(i<S.length() && S[i]!='I'){\n       \
    \     i++;\n        }\n        if(i<S.length()){\n            if(S[i]=='I'){\n\
    \                boredom++;\n            }\n            i++;\n        }\n    \
    \    while(i<S.length() && S[i]!='.' && S[i]!='?' && S[i]!='!'){\n           \
    \ i++;\n        }\n        if(i<S.length()){\n            i++;\n        }\n  \
    \  }\n    return boredom;", "\tstd::istringstream iss(S);\n\tstd::string word;\n\
    \tint boredoms = 0;\n\tbool bored = false;\n\twhile (iss >> word) {\n\t\tif (word\
    \ == \"I\") {\n\t\t\tbored = true;\n\t\t}\n\t\tif (word.back() == '.' || word.back()\
    \ == '?' || word.back() == '!') {\n\t\t\tif (bored) {\n\t\t\t\tboredoms++;\n\t\
    \t\t}\n\t\t\tbored = false;\n\t\t}\n\t}\n\treturn boredoms;", "    // Your code\
    \ here\n    long count=0;\n    std::stringstream s(S);\n    std::string tmp;\n\
    \    while(std::getline(s,tmp,'.'))\n    {\n        // std::cout<<tmp<<std::endl;\n\
    \        std::istringstream ss(tmp);\n        std::string token;\n        std::vector<std::string>\
    \ words;\n        while(std::getline(ss,token,' '))\n        {\n            words.push_back(token);\n\
    \        }\n        // std::cout<<words[0]<<std::endl;\n        if(words[0]==\"\
    I\")\n        {\n            count++;\n        }\n    }\n    return count;", " \
    \   std::stringstream sentence(S);\n    std::string word;\n    long boredoms =\
    \ 0;\n    while (std::getline(sentence, word, '.')) {\n        std::stringstream\
    \ words(word);\n        while (std::getline(words, word, ' ')) {\n           \
    \ if (word.front() == 'I') {\n                boredoms++;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;", "    std::istringstream\
    \ ss(S);\n    std::string token;\n    long count=0;\n    // getline function for\
    \ example to be readed by spaces\n    while(std::getline(ss, token, '.')){\n \
    \       if(token[0]=='I')\n            count++;\n    }\n    return count;", " \
    \   long temp=0;\n    std::regex r(\".*[.!?]\");\n    std::sregex_iterator words_begin\
    \ = std::sregex_iterator(S.begin(), S.end(), r);\n    std::sregex_iterator words_end\
    \ = std::sregex_iterator();\n    for (std::sregex_iterator i = words_begin; i\
    \ != words_end; ++i) {\n        std::smatch match = *i;\n        std::string match_str\
    \ = match.str();\n        if(match_str[0]=='I') temp++;\n    }\n    return temp;",
  "    std::istringstream iss(S);\n    std::string word;\n    std::vector<std::string>\
    \ words;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n \
    \   long boredom_count = 0;\n    std::vector<std::string>::iterator it;\n    for\
    \ (it = words.begin(); it != words.end(); it++) {\n        if (*it == \"I\") {\n\
    \            boredom_count++;\n        }\n    }\n    return boredom_count;", " \
    \   if(S.empty()) return 0;\n    std::vector<std::string> sv;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while(ss >> word) {\n        sv.push_back(word);\n\
    \    }\n    std::string sentence(\".\");\n    sentence.append(S);\n    sentence.append(\"\
    .\");\n    std::cout << sentence << std::endl;\n    long boredoms = 0;\n    int\
    \ i = 0;\n    while(i < sv.size()) {\n        std::cout << \"Searching for \"\
    \ << sv[i] << std::endl;\n        size_t pos = sentence.find(sv[i]);\n       \
    \ std::cout << \"Found at \" << pos << std::endl;\n        if(pos == std::string::npos)\
    \ {\n            return boredoms;\n        }\n        if(pos == 0) {\n       \
    \     std::cout << \"Found at start, returning \" << boredoms << std::endl;\n\
    \            return boredoms;\n        }\n        if(sentence[pos-1] == '.') {\n\
    \            if(sv[i] == \"I\") {\n                boredoms++;\n            }\n\
    \        }\n        sentence = sentence.substr(pos+1);\n        i++;\n    }\n\
    \    return boredoms;", "  long num_boredoms = 0;\n  std::istringstream iss(S);\n\
    \  std::string token;\n  while (std::getline(iss, token, '.')) {\n    std::istringstream\
    \ temp(token);\n    std::string t;\n    while (std::getline(temp, t, '?')) {\n\
    \      std::istringstream temp_temp(t);\n      std::string tt;\n      while (std::getline(temp_temp,\
    \ tt, '!')) {\n        if (tt[0] == 'I') {\n          num_boredoms++;\n      \
    \  }\n      }\n    }\n  }\n  return num_boredoms;", "  std::stringstream ss(S);\n\
    \  std::string line;\n  std::vector<std::string> words;\n  while(getline(ss, line,\
    \ '.')) {\n    words.push_back(line);\n  }\n  return count(words.begin(), words.end(),\
    \ \"I\");", "  long boredoms = 0;\n  long prev = -1;\n  long curr = 0;\n  long\
    \ length = S.length();\n  while (curr < length) {\n    if (S[curr] == '.' || S[curr]\
    \ == '?' || S[curr] == '!') {\n      if (prev == 0) {\n        boredoms++;\n \
    \     }\n      prev = -1;\n    } else if (S[curr] == ' ') {\n      if (prev ==\
    \ 0) {\n        prev = -1;\n      }\n    } else if (S[curr] == 'I') {\n      prev\
    \ = 0;\n    } else {\n      prev = -1;\n    }\n    curr++;\n  }\n  return boredoms;",
  "  // your code here\n  int count = 0;\n  S += '.';\n  std::stringstream ss(S);\n\
    \  std::string buf;\n  while (std::getline(ss, buf, '.')) {\n    if (buf[0] ==\
    \ 'I')\n      count++;\n  }\n  return count;", "    // I'm bored.\n    long bored\
    \ = 0;\n    bool start_of_sentence = true;\n    for (char i : S) {\n        if\
    \ (start_of_sentence && i == 'I') {\n            bored++;\n        }\n       \
    \ start_of_sentence = (i == '.' || i == '?' || i == '!');\n    }\n    return bored;",
  "    if(S == \"\")\n        return 0;\n    int length = S.length();\n    int boredoms\
    \ = 0;\n    char prev = S[0];\n    if(prev == 'I')\n        boredoms += 1;\n \
    \   for(int i = 1; i < length; i++) {\n        if(S[i] == ' ')\n            continue;\n\
    \        if(S[i] == 'I' && prev == '.')\n            boredoms += 1;\n        prev\
    \ = S[i];\n    }\n    return boredoms;"]
stop_tokens:
- "\n}"
