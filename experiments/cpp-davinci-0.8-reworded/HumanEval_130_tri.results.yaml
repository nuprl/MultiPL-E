language: cpp
name: HumanEval_130_tri
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> vec;\n\
    \tlong a = 1, b = 3, c = 2;\n\tvec.push_back(a);\n\tvec.push_back(b);\n\tvec.push_back(c);\n\
    \tfor (int i = 2; i < n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tvec.push_back(1 +\
    \ i / 2);\n\t\telse\n\t\t\tvec.push_back(vec[i - 1] + vec[i - 2] + vec[i + 1]);\n\
    \t}\n\treturn vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpbydii3eg: /tmp/tmpbydii3eg.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ tri_vec(n+1);\n    tri_vec[0] = 1;\n    tri_vec[1] = 3;\n    tri_vec[2] = 2;\n\
    \    for(int i = 3; i <= n; i++){\n        tri_vec[i] = tri_vec[i-1] + tri_vec[i-2]\
    \ + tri_vec[i-3];\n    }\n    return tri_vec;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1yza1wsc: /tmp/tmp1yza1wsc.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> tribonacci;\n\
    \tlong t = 0;\n\ttribonacci.push_back(t);\n\tlong count = 0;\n\tlong tmp = 0;\n\
    \twhile (count < n) {\n\t\ttmp = tribonacci[count];\n\t\tt = tmp;\n\t\tif (count\
    \ == 0) {\n\t\t\tt = 1;\n\t\t}\n\t\telse if (count == 1) {\n\t\t\tt = 3;\n\t\t\
    }\n\t\telse if (count == 2) {\n\t\t\tt = 2;\n\t\t}\n\t\telse if (count % 2 ==\
    \ 0) {\n\t\t\tt = 1 + count / 2;\n\t\t}\n\t\telse {\n\t\t\tt = tribonacci[count\
    \ - 1] + tribonacci[count - 2] + tribonacci[count + 1];\n\t\t}\n\t\ttribonacci.push_back(t);\n\
    \t\tcount++;\n\t}\n\treturn tribonacci;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvus2f4dj: /tmp/tmpvus2f4dj.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n <= 0) {\n  \
    \      return {};\n    }\n    if (n == 1) {\n        return {1};\n    }\n    if\
    \ (n == 2) {\n        return {1, 3};\n    }\n    std::vector<long> result = {1,\
    \ 3, 2};\n    while (result.size() != n + 1) {\n        long last = result.back();\n\
    \        long secondLast = result[result.size() - 2];\n        long thirdLast\
    \ = result[result.size() - 3];\n        if (last % 2 == 0) {\n            result.push_back(1\
    \ + last / 2);\n        } else {\n            result.push_back(thirdLast + secondLast\
    \ + last);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpws296jmp: /tmp/tmpws296jmp.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> t;\n\
    \tint a = 1, b = 3, c = 2;\n\tif (n == 0)\n\t\treturn t;\n\tif (n == 1) {\n\t\t\
    t.push_back(a);\n\t\treturn t;\n\t}\n\tif (n == 2) {\n\t\tt.push_back(a);\n\t\t\
    t.push_back(b);\n\t\treturn t;\n\t}\n\tif (n == 3) {\n\t\tt.push_back(a);\n\t\t\
    t.push_back(b);\n\t\tt.push_back(c);\n\t\treturn t;\n\t}\n\tt.push_back(a);\n\t\
    t.push_back(b);\n\tt.push_back(c);\n\tfor (int i = 4; i <= n; i++) {\n\t\tif (i\
    \ % 2 == 0) {\n\t\t\tint x = 1 + i / 2;\n\t\t\tt.push_back(x);\n\t\t}\n\t\telse\
    \ {\n\t\t\tint x = t[i - 2] + t[i - 1] + t[i];\n\t\t\tt.push_back(x);\n\t\t}\n\
    \t}\n\treturn t;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpinho63r_: /tmp/tmpinho63r_.cpp:56: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102186
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tlong temp1, temp2, temp3;\n\
    \tstd::vector<long> result;\n\tresult.push_back(1);\n\tresult.push_back(3);\n\t\
    result.push_back(2);\n\tfor (long i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\
    \t\t\tresult.push_back(1 + i / 2);\n\t\telse {\n\t\t\ttemp1 = result[i - 1];\n\
    \t\t\ttemp2 = result[i - 2];\n\t\t\ttemp3 = result[i + 1];\n\t\t\tresult.push_back(temp1\
    \ + temp2 + temp3);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpglsu7lm5: /tmp/tmpglsu7lm5.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    else if (n == 1) {\n        result.push_back(1);\n        result.push_back(3);\n\
    \        return result;\n    }\n    else if (n == 2) {\n        result.push_back(1);\n\
    \        result.push_back(3);\n        result.push_back(2);\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    long first = 2;\n    long second = 3;\n    long third = 1;\n    for (long\
    \ i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            long temp = 1\
    \ + i / 2;\n            result.push_back(temp);\n            third = second;\n\
    \            second = first;\n            first = temp;\n        }\n        else\
    \ {\n            long temp = first + second + third;\n            result.push_back(temp);\n\
    \            third = second;\n            second = first;\n            first =\
    \ temp;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpqdrrkv4u: /tmp/tmpqdrrkv4u.cpp:62: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    if(n == 0) return v;\n    v.push_back(3);\n   \
    \ if(n == 1) return v;\n    v.push_back(2);\n    if(n == 2) return v;\n    for(int\
    \ i = 3; i <= n; i++){\n        if(i % 2 == 0) v.push_back(1 + i / 2);\n     \
    \   else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp8zxhvc7c: /tmp/tmp8zxhvc7c.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  long a1 = 1, a2 = 3, a3 = 2;\n  res.push_back(a1);\n  res.push_back(a2);\n\
    \  res.push_back(a3);\n  for (long i = 3; i <= n; i++) {\n    long a = a3 + a2\
    \ + a1;\n    res.push_back(a);\n    a1 = a2;\n    a2 = a3;\n    a3 = a;\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5ixvrsbj: /tmp/tmp5ixvrsbj.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> ans;\n\
    \  if(n == 0) return ans;\n  ans.push_back(1);\n  ans.push_back(3);\n  ans.push_back(2);\n\
    \  if(n == 1) {\n    ans.erase(ans.begin() + 2);\n    return ans;\n  }\n  if(n\
    \ == 2) return ans;\n  long i = 3;\n  while(i <= n) {\n    if(i % 2 == 0) ans.push_back(1\
    \ + i / 2);\n    else ans.push_back(ans[i - 1] + ans[i - 2] + ans[i + 1]);\n \
    \   i++;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpxqtbtwhc: /tmp/tmpxqtbtwhc.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  if (n < 1) return result;\n  long a = 1, b = 3, c = 2;\n  result.push_back(a);\n\
    \  result.push_back(b);\n  result.push_back(c);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      long tmp = 1 + i / 2;\n      result.push_back(tmp);\n\
    \    } else {\n      long tmp = a + b + c;\n      result.push_back(tmp);\n   \
    \   a = b;\n      b = c;\n      c = tmp;\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp8z8pmi4c: /tmp/tmp8z8pmi4c.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> ret(n\
    \ + 1);\n  ret[0] = 1;\n  ret[1] = 3;\n  ret[2] = 2;\n  for (int i = 3; i <= n;\
    \ i++) {\n    if (i % 2 == 0) {\n      ret[i] = 1 + i / 2;\n    } else {\n   \
    \   ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp7axniyye: /tmp/tmp7axniyye.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> vec\
    \ = {};\n\tif (n == 0) {\n\t\treturn vec;\n\t}\n\telse if (n == 1) {\n\t\tvec.push_back(1);\n\
    \t\treturn vec;\n\t}\n\telse if (n == 2) {\n\t\tvec.push_back(1);\n\t\tvec.push_back(3);\n\
    \t\treturn vec;\n\t}\n\telse {\n\t\tvec.push_back(1);\n\t\tvec.push_back(3);\n\
    \t\tvec.push_back(2);\n\t\tn = n - 2;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\
    \tif (i % 2 == 0) {\n\t\t\t\tvec.push_back(1 + (i + 3) / 2);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tvec.push_back(vec[i] + vec[i - 1] + vec[i + 1]);\n\t\t\t}\n\t\t\
    }\n\t\treturn vec;\n\t}\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppcznrr4b: /tmp/tmppcznrr4b.cpp:51: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  long even = 0;\n  for(int i = 0; i <= n; i++) {\n    if(i == 0) {\n      v.push_back(1);\n\
    \    } else if(i == 1) {\n      v.push_back(3);\n    } else if(i == 2) {\n   \
    \   v.push_back(2);\n    } else {\n      if(i % 2 == 0) {\n        even += i;\n\
    \        v.push_back(even);\n      } else {\n        v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i - 3]);\n      }\n    }\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpecotixhj: /tmp/tmpecotixhj.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ tribonacci;\n    if (n == 0) {\n        return tribonacci;\n    }\n    else\
    \ if (n == 1) {\n        tribonacci.push_back(1);\n        return tribonacci;\n\
    \    }\n    else if (n == 2) {\n        tribonacci.push_back(1);\n        tribonacci.push_back(3);\n\
    \        return tribonacci;\n    }\n    else {\n        tribonacci.push_back(1);\n\
    \        tribonacci.push_back(3);\n        tribonacci.push_back(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.push_back(1\
    \ + i / 2);\n            }\n            else {\n                long sum = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n                tribonacci.push_back(sum);\n\
    \            }\n        }\n        return tribonacci;\n    }\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpjpemwqyb: /tmp/tmpjpemwqyb.cpp:51: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code here\n\
    \  //2, 3, 8, 11, 29, 42, 83, 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\
    \  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n  //i = 0\n  //1, 3, 2, 8, 11, 29, 42, 83,\
    \ 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  //i = 1\n  //1, 3, 2,\
    \ 8, 11, 29, 42, 83, 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  //i\
    \ = 2\n  //1, 3, 2, 8, 11, 29, 42, 83, 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10\n  //i = 3\n  //1, 3, 2, 8, 11, 29, 42, 83, 126, 215, 343\n  //0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  //i = 4\n  //1, 3, 2, 8, 11, 29, 42, 83, 126,\
    \ 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  //i = 5\n  //1, 3, 2, 8, 11,\
    \ 29, 42, 83, 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  //i = 6\n\
    \  //1, 3, 2, 8, 11, 29, 42, 83, 126, 215, 343\n  //0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10\n  //i = 7\n  //1, 3, 2, 8, 11, 29, 42, 83, 126, 215, 343\n  //0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10\n  //i = 8\n \n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpbhnf09bp: /tmp/tmpbhnf09bp.cpp:53: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    int temp\
    \ = 3;\n    if(n < 3)\n        return v;\n    for(int i = 3; i <= n; i++){\n \
    \       long val = 0;\n        if(i % 2 == 0)\n            val = (1 + i / 2);\n\
    \        else\n            val = v[temp - 1] + v[temp - 2] + v[temp + 1];\n  \
    \      v.push_back(val);\n        temp++;\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp68qx1klh: /tmp/tmp68qx1klh.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    if (n == 1) {\n        result.push_back(1);\n        result.push_back(3);\n\
    \        return result;\n    }\n    if (n == 2) {\n        result.push_back(1);\n\
    \        result.push_back(3);\n        result.push_back(2);\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    int i = 3;\n    long n_2 = 2;\n    long n_1 = 3;\n    long n_0 = 1;\n   \
    \ while (i <= n) {\n        long n_3 = 0;\n        if (i % 2 == 0) {\n       \
    \     n_3 = 1 + i / 2;\n        } else {\n            n_3 = n_0 + n_1 + n_2;\n\
    \        }\n        result.push_back(n_3);\n        n_0 = n_1;\n        n_1 =\
    \ n_2;\n        n_2 = n_3;\n        i++;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp99cf8ggr: /tmp/tmp99cf8ggr.cpp:60: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res(n\
    \ + 1);\n  res[0] = 1;\n  res[1] = 3;\n  res[2] = 2;\n  for (long i = 3; i <=\
    \ n; i++) {\n    if (i % 2 == 0) {\n      res[i] = 1 + i / 2;\n    } else {\n\
    \      res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3t6pfcz0: /tmp/tmp3t6pfcz0.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code here\n\
    \  assert(n >= 0);\n  std::vector<long> a = {1, 3, 2};\n  for (int i = 3; i <=\
    \ n; i++) {\n    long x = a[i - 1] + a[i - 2] + a[i - 3];\n    a.push_back(x);\n\
    \  }\n  return a;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwnpybx5c: /tmp/tmpwnpybx5c.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v = {1, 3, 2};\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp_hjck0z5: /tmp/tmp_hjck0z5.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    if(n\
    \ <= 2) {\n        return v;\n    }\n    for(int i = 3; i <= n; i++) {\n     \
    \   long tmp;\n        if(i % 2 == 0) {\n            tmp = 1 + i / 2;\n      \
    \  } else {\n            tmp = v[i - 1] + v[i - 2] + v[i + 1];\n        }\n  \
    \      v.push_back(tmp);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd7amjifo: /tmp/tmpd7amjifo.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tlong a=0,b=0,c=1;\n\t\
    std::vector<long> v;\n\tv.push_back(0);\n\tfor(int i=1;i<=n;i++){\n\t\tlong d=a+b+c;\n\
    \t\ta=b;\n\t\tb=c;\n\t\tc=d;\n\t\tv.push_back(d);\n\t}\n\treturn v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmpjlua82: /tmp/tmpmpjlua82.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  long prev = 1, prev1\
    \ = 1, prev2 = 1;\n  v.push_back(prev);\n  v.push_back(prev1);\n  v.push_back(prev2);\n\
    \  long temp = 3;\n  while (temp <= n) {\n    long num = 0;\n    if (temp % 2\
    \ == 0) {\n      num = 1 + temp / 2;\n    } else {\n      num = prev + prev1 +\
    \ prev2;\n    }\n    prev = prev1;\n    prev1 = prev2;\n    prev2 = num;\n   \
    \ v.push_back(num);\n    temp++;\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6_rwttdm: /tmp/tmp6_rwttdm.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // Write your code\
    \ here\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpxujce2vq: /tmp/tmpxujce2vq.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  if (n <= 0) return result;\n  result.push_back(1);\n  if (n <= 1) return result;\n\
    \  result.push_back(3);\n  if (n <= 2) return result;\n  result.push_back(2);\n\
    \  if (n <= 3) return result;\n  for (long i = 4; i <= n; i++) {\n    long sum\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    if (i % 2 == 0) {\n  \
    \    sum += i / 2;\n    }\n    result.push_back(sum);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpt5wcxz_y: /tmp/tmpt5wcxz_y.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  long val = 1;\n  for (long i = 0; i <= n; i++) {\n    result.push_back(val);\n\
    \    if (i % 2 == 0) {\n      val = 1 + i / 2;\n    } else {\n      val = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpigxa35b3: /tmp/tmpigxa35b3.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ ans;\n    ans.push_back(1);\n    ans.push_back(3);\n    ans.push_back(2);\n\
    \    if (n >= 3)\n    {\n        for (int i = 3; i <= n; i++)\n        {\n   \
    \         if (i % 2 == 0)\n            {\n                ans.push_back(1 + i\
    \ / 2);\n            }\n            else\n            {\n                ans.push_back(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpgdkgt24m: /tmp/tmpgdkgt24m.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> vec;\n\
    \  vec.push_back(1);\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) vec.push_back(3);\n\
    \    else if (i % 2 == 0) vec.push_back(1 + i / 2);\n    else vec.push_back(vec[i\
    \ - 1] + vec[i - 2] + vec[i + 1]);\n  }\n  return vec;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpi_i9xxv6: /tmp/tmpi_i9xxv6.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tif (n == 0) return {};\n\
    \tstd::vector<long> v;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i == 0) v.push_back(1);\n\
    \t\telse if (i == 1) v.push_back(3);\n\t\telse if (i == 2) v.push_back(2);\n\t\
    \telse if (i % 2 == 0) v.push_back(1 + i / 2);\n\t\telse v.push_back(v[i - 1]\
    \ + v[i - 2] + v[i + 1]);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvwi8yw8m: /tmp/tmpvwi8yw8m.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> ans;\n\
    \  ans.push_back(1);\n  ans.push_back(3);\n  ans.push_back(2);\n  if (n == 0)\
    \ {\n    return {1};\n  }\n  if (n == 1) {\n    return {1, 3};\n  }\n  if (n ==\
    \ 2) {\n    return {1, 3, 2};\n  }\n  if (n == 3) {\n    return {1, 3, 2, 8};\n\
    \  }\n  if (n >= 4) {\n    int x = 4;\n    while (x <= n) {\n      long a = ans[x\
    \ - 1];\n      long b = ans[x - 2];\n      long c = ans[x - 3];\n      long sum\
    \ = a + b + c;\n      ans.push_back(sum);\n      x++;\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmvgwk5lz: /tmp/tmpmvgwk5lz.cpp:52: int main(): Assertion `candidate((4))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ arr(n+1);\n    arr[0] = 1;\n    arr[1] = 3;\n    for(int i = 2; i < n+1; i++){\n\
    \        if(i%2 == 0){\n            arr[i] = 1 + i/2;\n        }\n        else{\n\
    \            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptdn44kpm: /tmp/tmptdn44kpm.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tif (n <= 0)\n\t\treturn\
    \ std::vector<long>();\n\tstd::vector<long> v(n + 1);\n\tv[0] = 1;\n\tfor (int\
    \ i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tv[i] = 1 + i / 2;\n\t\telse\n\
    \t\t\tv[i] = v[i - 1] + v[i - 2] + v[i + 1];\n\t}\n\treturn v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsogxzjhg: /tmp/tmpsogxzjhg.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    vector<long> v(n+1);\n\
    \    if(n == 0) return v;\n    if(n == 1) {\n        v[0] = 1;\n        return\
    \ v;\n    }\n    v[0] = 1;\n    v[1] = 3;\n    v[2] = 2;\n    for(int i = 3; i\
    \ <= n; i++) {\n        if(i % 2 == 0) {\n            v[i] = 1 + i / 2;\n    \
    \    } else {\n            v[i] = v[i-1] + v[i-2] + v[i+1];\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpny4_vkln.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpny4_vkln.cpp:20:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   20 |     vector<long> v(n+1);\n      |     ^~~~~~\n/tmp/tmpny4_vkln.cpp:20:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpny4_vkln.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpny4_vkln.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpny4_vkln.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ v(n+1);\n      |            ^~~~\n/tmp/tmpny4_vkln.cpp:21:23: error: \u2018\
    v\u2019 was not declared in this scope\n   21 |     if(n == 0) return v;\n   \
    \   |                       ^\n/tmp/tmpny4_vkln.cpp:23:9: error: \u2018v\u2019\
    \ was not declared in this scope\n   23 |         v[0] = 1;\n      |         ^\n\
    /tmp/tmpny4_vkln.cpp:26:5: error: \u2018v\u2019 was not declared in this scope\n\
    \   26 |     v[0] = 1;\n      |     ^\n"
  stdout: ''
  timestamp: 1660102186
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // your code here\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4aumj_ib: /tmp/tmp4aumj_ib.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  if (n == 0) {\n    result.push_back(1);\n    return result;\n  }\n  if (n ==\
    \ 1) {\n    result.push_back(1);\n    result.push_back(3);\n    return result;\n\
    \  }\n  if (n == 2) {\n    result.push_back(1);\n    result.push_back(3);\n  \
    \  result.push_back(2);\n    return result;\n  }\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\
    \ {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpu34utgy_: /tmp/tmpu34utgy_.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  long v1 = 3, v2 = 3,\
    \ v3 = 3;\n  std::vector<long> res;\n  res.push_back(1);\n  if (n == 0) return\
    \ res;\n  res.push_back(3);\n  for (long i = 2; i <= n; i++) {\n    long v4 =\
    \ v1 + v2 + v3;\n    res.push_back(v4);\n    v1 = v2;\n    v2 = v3;\n    v3 =\
    \ v4;\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp06cvx3ed: /tmp/tmp06cvx3ed.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> vec;\n\
    \  vec.push_back(1);\n  vec.push_back(3);\n  vec.push_back(2);\n  long m = 3;\n\
    \  while(m <= n) {\n    long sum = vec[m - 2] + vec[m - 1] + vec[m];\n    vec.push_back(sum);\n\
    \    m++;\n  }\n  return vec;\n}\nint main() {\n    auto candidate = tri;\n  \
    \  assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpf_y2y2l_: /tmp/tmpf_y2y2l_.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ t;\n    t.push_back(1);\n    t.push_back(3);\n    t.push_back(2);\n    if (n\
    \ <= 2) {\n        return t;\n    }\n    for (long i = 3; i <= n; i++) {\n   \
    \     if (i % 2 == 0) {\n            t.push_back(1 + i / 2);\n        } else {\n\
    \            t.push_back(t[i - 1] + t[i - 2] + t[i + 1]);\n        }\n    }\n\
    \    return t;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpx9kkflep: /tmp/tmpx9kkflep.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> answer;\n\
    \  if (n == 0) {\n    answer.push_back(1);\n    return answer;\n  }\n  else if\
    \ (n == 1) {\n    answer.push_back(1);\n    answer.push_back(3);\n    return answer;\n\
    \  }\n  else if (n == 2) {\n    answer.push_back(1);\n    answer.push_back(3);\n\
    \    answer.push_back(2);\n    return answer;\n  }\n  int odd = 3;\n  for (int\
    \ i = 2; i < n; i++) {\n    if (odd == 3) {\n      int a = answer[i] + answer[i\
    \ - 1] + answer[i - 2];\n      answer.push_back(a);\n      odd = 0;\n    }\n \
    \   else {\n      int a = 1 + (i / 2);\n      answer.push_back(a);\n      odd++;\n\
    \    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate = tri;\n  \
    \  assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660102186
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n <= 0) {\n  \
    \      return {};\n    }\n    std::vector<long> tribonacci(n + 1);\n    tribonacci[0]\
    \ = 1;\n    tribonacci[1] = 3;\n    tribonacci[2] = 2;\n    for (int i = 3; i\
    \ <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i /\
    \ 2;\n        } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpv8saiy_e: /tmp/tmpv8saiy_e.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ V;\n    if(n==1) V.push_back(1);\n    else if(n==2) V.push_back(1),V.push_back(2);\n\
    \    else if(n==3) V.push_back(1),V.push_back(2),V.push_back(4);\n    else{\n\
    \        V.push_back(1),V.push_back(2),V.push_back(4);\n        for(int i=3;i<n;i++){\n\
    \            if(i%2==0) V.push_back(1+i/2);\n            else V.push_back(V[i-1]+V[i-2]+V[i+1]);\n\
    \        }\n    }\n    return V;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvkouzxv6: /tmp/tmpvkouzxv6.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102186
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    assert(n >= 0);\n\
    \    std::vector<long> tribonacci;\n    if (n >= 0) {\n        tribonacci.push_back(1);\n\
    \    }\n    if (n >= 1) {\n        tribonacci.push_back(3);\n    }\n    if (n\
    \ >= 2) {\n        tribonacci.push_back(2);\n    }\n    if (n >= 3) {\n      \
    \  tribonacci.push_back(8);\n    }\n    if (n >= 4) {\n        tribonacci.push_back(6);\n\
    \    }\n    if (n >= 5) {\n        tribonacci.push_back(19);\n    }\n    if (n\
    \ >= 6) {\n        tribonacci.push_back(22);\n    }\n    if (n >= 7) {\n     \
    \   tribonacci.push_back(39);\n    }\n    if (n >= 8) {\n        tribonacci.push_back(47);\n\
    \    }\n    if (n >= 9) {\n        tribonacci.push_back(86);\n    }\n    if (n\
    \ >= 10) {\n        tribonacci.push_back(103);\n    }\n    if (n >= 11) {\n  \
    \      tribonacci.push_back(192);\n    }\n    if (n >= 12) {\n        tribonacci.push_back(226);\n\
    \    }\n    if (n >= 13) {\n        tribonacci.push_back(421);\n    }\n    if\
    \ (n >= 14) {\n        tribonacci.push_back(486);\n    }\n    if (n >= 15) {\n\
    \        tribonacci.push_back(903);\n    }\n    if (n >= 16) {\n        tribonacci.push_back(1062);\n\
    \    }\n    if (n >= 17) {\n        tribonacci.push_back(1975);\n    }\n    if\
    \ (n >= 18) {\n        tribonacci.push_back(2287);\n    }\n    if (n >= 19) {\n\
    \        tribonacci.push_back(4262);\n    }\n    if (n >= 20)\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1eybmjgj.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp1eybmjgj.cpp:83:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp1eybmjgj.cpp:83:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660102186
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  for (long i = 0; i <= n; i++) {\n    result.push_back(0);\n  }\n  result[0]\
    \ = 1;\n  if (n >= 1) {\n    result[1] = 3;\n  }\n  if (n >= 2) {\n    result[2]\
    \ = 2;\n  }\n  for (long i = 3; i <= n; i++) {\n    result[i] = result[i - 1]\
    \ + result[i - 2] + result[i - 3];\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpab07czy0: /tmp/tmpab07czy0.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  //if(n==0) return {};\n\
    \  vector<long> result;\n  result.push_back(1);\n  if(n>=1) result.push_back(3);\n\
    \  if(n>=2) result.push_back(2);\n  for(int i=3;i<=n;i++){\n    if(i%2==0)\n \
    \     result.push_back(1+i/2);\n    else\n      result.push_back(result[i-1]+result[i-2]+result[i+1]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwjbz1nv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqwjbz1nv.cpp:21:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   21 |   vector<long> result;\n      |   ^~~~~~\n/tmp/tmpqwjbz1nv.cpp:21:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqwjbz1nv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqwjbz1nv.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpqwjbz1nv.cpp:21:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   21 |   vector<long>\
    \ result;\n      |          ^~~~\n/tmp/tmpqwjbz1nv.cpp:22:3: error: \u2018result\u2019\
    \ was not declared in this scope\n   22 |   result.push_back(1);\n      |   ^~~~~~\n"
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> res;\n\
    \tif (n <= 1) {\n\t\tres.push_back(1);\n\t\treturn res;\n\t}\n\tres.push_back(1);\n\
    \tres.push_back(3);\n\tres.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\
    \tif (i % 2 == 0) {\n\t\t\tres.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\t\
    res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\t\t}\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmplrtp2s5n: /tmp/tmplrtp2s5n.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102187
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tlong a, b, c, d, temp;\n\
    \ta = 1;\n\tb = 3;\n\tc = 2;\n\td = 8;\n\tstd::vector<long> v;\n\tv.push_back(a);\n\
    \tv.push_back(b);\n\tv.push_back(c);\n\tv.push_back(d);\n\tfor (int i = 4; i <=\
    \ n; i++) {\n\t\ttemp = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td\
    \ = temp;\n\t\tv.push_back(temp);\n\t}\n\treturn v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsyjzj3ku: /tmp/tmpsyjzj3ku.cpp:43: int main(): Assertion `candidate((4))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102189
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ tri{1, 3, 2};\n    if (n < 3) return std::vector<long>(tri.begin(), tri.begin()\
    \ + n + 1);\n    for (long i = 3; i <= n; i++) {\n        long new_value = tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3];\n        if (i % 2 == 0) new_value += i / 2;\n\
    \        tri.push_back(new_value);\n    }\n    return tri;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmph5zykib0: /tmp/tmph5zykib0.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n == 0) {\n  \
    \      return {};\n    }\n    if (n == 1) {\n        return {1};\n    }\n    if\
    \ (n == 2) {\n        return {1, 3};\n    }\n    std::vector<long> answer = {1,\
    \ 3, 2};\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n    \
    \        answer.push_back(1 + i / 2);\n        } else {\n            answer.push_back(answer[i\
    \ - 1] + answer[i - 2] + answer[i + 1]);\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpx81jk7iv: /tmp/tmpx81jk7iv.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    long a = 1, b = 3,\
    \ c = 2;\n    std::vector<long> dp(n+1);\n    dp[0] = a;\n    dp[1] = b;\n   \
    \ dp[2] = c;\n    for(int i = 3; i <= n; i++){\n        dp[i] = i % 2 == 0 ? 1\
    \ + i / 2 : dp[i-1] + dp[i-2] + dp[i+1];\n    }\n    return dp;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmompwitn: /tmp/tmpmompwitn.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102189
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tlong x1 = 1, x2 = 3, x3 = 2;\n\tlong counter = 0;\n\tfor (long i = 1; i <= n;\
    \ i++) {\n\t\tresult.push_back(x1);\n\t\tlong x = x1;\n\t\tif (i % 2 == 0) {\n\
    \t\t\tx1 = 1 + i / 2;\n\t\t}\n\t\telse {\n\t\t\tx1 = x1 + x2 + x3;\n\t\t}\n\t\t\
    x3 = x2;\n\t\tx2 = x;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpal16xek9: /tmp/tmpal16xek9.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n < 0) {\n    return\
    \ {};\n  }\n  std::vector<long> firstNtri(n + 1);\n  firstNtri[0] = 1;\n  firstNtri[1]\
    \ = 3;\n  firstNtri[2] = 2;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 ==\
    \ 0) {\n      firstNtri[i] = 1 + i / 2;\n    } else {\n      firstNtri[i] = firstNtri[i\
    \ - 1] + firstNtri[i - 2] + firstNtri[i + 1];\n    }\n  }\n  return firstNtri;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpf5nv8k4g: /tmp/tmpf5nv8k4g.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ list;\n    list.push_back(1);\n    list.push_back(3);\n    list.push_back(2);\n\
    \    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            list.push_back(1\
    \ + i / 2);\n        }\n        else{\n            list.push_back(list[i - 1]\
    \ + list[i - 2] + list[i + 1]);\n        }\n    }\n    return list;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd4dl_uwt: /tmp/tmpd4dl_uwt.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n\
    \    int count = 3;\n    while(count < n) {\n        int s = 0;\n        if(count\
    \ % 2 == 0)\n            s = 1 + count / 2;\n        else\n            s = res[count\
    \ - 1] + res[count - 2] + res[count + 1];\n        res.push_back(s);\n       \
    \ count++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpldt4y6qq: /tmp/tmpldt4y6qq.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  if (n == 1) {\n \
    \   v.push_back(1);\n    v.push_back(3);\n    return v;\n  }\n  if (n == 2) {\n\
    \    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    return v;\n\
    \  }\n  long x, y, z;\n  x = 1;\n  y = 3;\n  z = 2;\n  v.push_back(x);\n  v.push_back(y);\n\
    \  v.push_back(z);\n  for (long i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n\
    \      x = 1 + i / 2;\n      v.push_back(x);\n    } else {\n      x = v[i] + v[i\
    \ - 1] + v[i + 1];\n      v.push_back(x);\n    }\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpc5fpy3qu: /tmp/tmpc5fpy3qu.cpp:56: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result(n+1);\n    if(n==0) return result;\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for(int i=3;i<=n;i++){\n        if(i%2==0) result[i]\
    \ = 1 + i/2;\n        else result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpb36uosbl: /tmp/tmpb36uosbl.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n   std::vector<long>result;\n\
    \    long i=0;\n    while(i<=n){\n        if(i==0)\n        result.push_back(1);\n\
    \        else if(i==1)\n        result.push_back(3);\n        else if(i==2)\n\
    \        result.push_back(2);\n        else if(i%2==0)\n        result.push_back(1+i/2);\n\
    \        else\n        result.push_back(result[i-1]+result[i-2]+result[i+1]);\n\
    \        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1eb7yy05: /tmp/tmp1eb7yy05.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> nums;\n\
    \  if (n == 0) {\n    return nums;\n  }\n  nums.push_back(1);\n  if (n == 1) {\n\
    \    return nums;\n  }\n  nums.push_back(3);\n  if (n == 2) {\n    return nums;\n\
    \  }\n  nums.push_back(2);\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 ==\
    \ 0) {\n      nums.push_back(1 + i / 2);\n    } else {\n      nums.push_back(nums[i\
    \ - 1] + nums[i - 2] + nums[i + 1]);\n    }\n  }\n  return nums;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpulpj_iqv: /tmp/tmpulpj_iqv.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  for (int i = 0; i <= n; i++) {\n    res.push_back(tri_helper(i));\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ydl7sci.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp6ydl7sci.cpp:22:19: error: \u2018tri_helper\u2019 was not\
    \ declared in this scope\n   22 |     res.push_back(tri_helper(i));\n      | \
    \                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660102189
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n == 0) {\n  \
    \      return {(long)0};\n    }\n    if (n == 1) {\n        return {(long)1, (long)3};\n\
    \    }\n    if (n == 2) {\n        return {(long)1, (long)3, (long)2};\n    }\n\
    \    std::vector<long> res = {(long)1, (long)3, (long)2};\n    if (n % 2 == 0)\
    \ {\n        res.push_back(1 + n / 2);\n        return res;\n    }\n    for (int\
    \ i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            long val = res[i - 1] + res[i - 2]\
    \ + res[i - 3];\n            res.push_back(val);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpkfaowacy: /tmp/tmpkfaowacy.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> ans;\n\
    \tfor (int i = 0; i <= n; i++) {\n\t\tif (i == 0) {\n\t\t\tans.push_back(1);\n\
    \t\t}\n\t\telse if (i == 1) {\n\t\t\tans.push_back(3);\n\t\t}\n\t\telse if (i\
    \ == 2) {\n\t\t\tans.push_back(2);\n\t\t}\n\t\telse if (i % 2 == 0) {\n\t\t\t\
    ans.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tlong l = ans[i - 1];\n\t\t\
    \tlong m = ans[i - 2];\n\t\t\tlong k = ans[i - 3];\n\t\t\tans.push_back(l + m\
    \ + k);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3cirgmk7: /tmp/tmp3cirgmk7.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // your code here\n\
    \    long a=1,b=3,c=2,d;\n    std::vector<long> vec;\n    vec.push_back(a);\n\
    \    vec.push_back(b);\n    vec.push_back(c);\n    if(n<=2)\n    {\n      return\
    \ vec;\n    }\n    else\n    {\n      for(int i=3;i<=n;i++)\n      {\n       \
    \ if(i%2==0)\n        {\n          d=1+(i/2);\n          vec.push_back(d);\n \
    \       }\n        else\n        {\n          d=c+a+b;\n          vec.push_back(d);\n\
    \          a=b;\n          b=c;\n          c=d;\n        }\n      }\n    }\n \
    \   return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpnq3vjas2: /tmp/tmpnq3vjas2.cpp:53: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> res;\n\
    \tres.push_back(1);\n\tfor (int i = 0; i < n; i++) {\n\t\tres.push_back(res[i]\
    \ + (i+1) / 2);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpuji2ighu: /tmp/tmpuji2ighu.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code here\n\
    \  std::vector<long> result;\n  result.push_back(1);\n  for(int i = 1; i < n +\
    \ 1; i++) {\n    result.push_back(result[i - 1] + ((i % 2 == 0) ? (i / 2) : (result[i\
    \ - 1] + result[i - 2] + result[i + 1])));\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd_hailcf: /tmp/tmpd_hailcf.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> res;\n\
    \tres.push_back(1);\n\tif (n == 0)\n\t\treturn res;\n\tres.push_back(3);\n\tif\
    \ (n == 1)\n\t\treturn res;\n\tres.push_back(2);\n\tif (n == 2)\n\t\treturn res;\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tres.push_back(1 +\
    \ i / 2);\n\t\telse\n\t\t\tres.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4j_kz1qc: /tmp/tmp4j_kz1qc.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    vector<long> vector1;\n\
    \    vector1.push_back(1);\n    vector1.push_back(3);\n    vector1.push_back(2);\n\
    \    if(n==0)\n    {\n        vector1.clear();\n        vector1.push_back(1);\n\
    \        return vector1;\n    }\n    else if(n==1)\n    {\n        vector1.clear();\n\
    \        vector1.push_back(1);\n        vector1.push_back(3);\n        return\
    \ vector1;\n    }\n    else if(n==2)\n    {\n        vector1.clear();\n      \
    \  vector1.push_back(1);\n        vector1.push_back(3);\n        vector1.push_back(2);\n\
    \        return vector1;\n    }\n    else\n    {\n        vector1.clear();\n \
    \       vector1.push_back(1);\n        vector1.push_back(3);\n        vector1.push_back(2);\n\
    \        for(int i=3;i<=n;i++)\n        {\n            if(i%2==0)\n          \
    \  {\n                vector1.push_back(1+i/2);\n            }\n            else\n\
    \            {\n                vector1.push_back(vector1[i-1]+vector1[i-2]+vector1[i+1]);\n\
    \            }\n        }\n        return vector1;\n    }\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7f0wrk1.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpd7f0wrk1.cpp:20:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   20 |     vector<long> vector1;\n      |     ^~~~~~\n/tmp/tmpd7f0wrk1.cpp:20:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd7f0wrk1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd7f0wrk1.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpd7f0wrk1.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ vector1;\n      |            ^~~~\n/tmp/tmpd7f0wrk1.cpp:21:5: error: \u2018\
    vector1\u2019 was not declared in this scope\n   21 |     vector1.push_back(1);\n\
    \      |     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660102189
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n <= 0) return {};\n\
    \  std::vector<long> res;\n  for (long i = 0; i <= n; i++) {\n    if (i == 0)\
    \ {\n      res.push_back(1);\n    } else if (i == 1) {\n      res.push_back(3);\n\
    \    } else if (i == 2) {\n      res.push_back(2);\n    } else {\n      if (i\
    \ % 2 == 0) {\n        res.push_back(1 + i / 2);\n      } else {\n        res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n      }\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2a1zfg89: /tmp/tmp2a1zfg89.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tif (n == 0) {\n\t\t\
    return std::vector<long>({ 1 });\n\t}\n\tstd::vector<long> v;\n\tv.push_back(1);\n\
    \tv.push_back(3);\n\tlong first = 1;\n\tlong second = 3;\n\tlong third = 2;\n\t\
    for (long i = 3; i <= n; i++) {\n\t\tlong next = third;\n\t\tif (i % 2 == 0) {\n\
    \t\t\tnext = 1 + i / 2;\n\t\t}\n\t\telse {\n\t\t\tnext = first + second + third;\n\
    \t\t}\n\t\tv.push_back(next);\n\t\tfirst = second;\n\t\tsecond = third;\n\t\t\
    third = next;\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpa3p_8g0p: /tmp/tmpa3p_8g0p.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(1);\n  for (long i = 0; i < n; i++) {\n    long elem = 3;\n\
    \    if (i % 2 == 0) {\n      elem = 1 + i / 2;\n    } else {\n      long prev\
    \ = result[i - 1];\n      long prev2 = result[i - 2];\n      long prev3 = result[i\
    \ + 1];\n      elem = prev + prev2 + prev3;\n    }\n    result.push_back(elem);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpi16n8npo: /tmp/tmpi16n8npo.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    //@ assert (n > 0)\
    \ && (n < 10000);\n    //@ assert \\forall int i; (i >= 0) && (i < n) ==> tri(i)\
    \ == 1 + i / 2;\n    std::vector<long> triNums;\n    triNums.push_back(1);\n \
    \   triNums.push_back(3);\n    triNums.push_back(2);\n    for (long i = 3; i <=\
    \ n; i++) {\n        long newTriNum = triNums[i - 1] + triNums[i - 2] + triNums[i\
    \ - 3];\n        triNums.push_back(newTriNum);\n    }\n    return triNums;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppep26gsp: /tmp/tmppep26gsp.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    long a = 1, b = 3, c = 2;\n    v.push_back(a);\n    if(n == 0) return\
    \ v;\n    v.push_back(b);\n    if(n == 1) return v;\n    v.push_back(c);\n   \
    \ if(n == 2) return v;\n    for(int i = 3; i <= n; i++){\n        if(i % 2 ==\
    \ 0) v.push_back(1 + i / 2);\n        else{\n            long x = v[i - 1] + v[i\
    \ - 2] + v[i - 3];\n            v.push_back(x);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp31sqjuri: /tmp/tmp31sqjuri.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res{1,\
    \ 3, 2};\n  for (long i = 3; i <= n; i++) {\n    long next = (i % 2 == 0) ? 1\
    \ + i / 2 : res[i - 1] + res[i - 2] + res[i + 1];\n    res.push_back(next);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpumm_lfdl: /tmp/tmpumm_lfdl.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> res;\n\
    \tres.push_back(1);\n\tif (n == 0) return res;\n\tres.push_back(3);\n\tif (n ==\
    \ 1) return res;\n\tres.push_back(2);\n\tif (n == 2) return res;\n\tfor (int i\
    \ = 3; i <= n; i++) {\n\t\tlong t = 0;\n\t\tt += res[i - 1];\n\t\tt += res[i -\
    \ 2];\n\t\tt += res[i - 3];\n\t\tres.push_back(t);\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp64qfyd0y: /tmp/tmp64qfyd0y.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // your code here\n\
    \    std::vector<long> tribonacci;\n    tribonacci.push_back(1);\n    if(n ==\
    \ 0)\n      return tribonacci;\n    tribonacci.push_back(3);\n    if(n == 1)\n\
    \      return tribonacci;\n    tribonacci.push_back(2);\n    if(n == 2)\n    \
    \  return tribonacci;\n    \n    for(int i = 2; i < n; i++)\n    {\n      if(tribonacci[i]\
    \ % 2 == 0)\n        tribonacci.push_back(1 + tribonacci[i] / 2);\n      else\n\
    \        tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ + 1]);\n    }\n    return tribonacci;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmphtwp_4l_: /tmp/tmphtwp_4l_.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> ans(n\
    \ + 1);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i == 1)\n\t\t\tans[i] = 3;\n\
    \t\telse if (i % 2 == 0)\n\t\t\tans[i] = 1 + i / 2;\n\t\telse\n\t\t\tans[i] =\
    \ ans[i - 1] + ans[i - 2] + ans[i + 1];\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1flzrvq2: /tmp/tmp1flzrvq2.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  res.push_back(1);\n  if (n == 0) {\n    return res;\n  }\n  long a = 1, b =\
    \ 3, c = 2;\n  while (n > 0) {\n    if (n == 1) {\n      res.push_back(b);\n \
    \     break;\n    }\n    if (n % 2 == 0) {\n      res.push_back(a);\n      c =\
    \ 1 + n / 2;\n      n--;\n    } else {\n      res.push_back(b);\n      a = c;\n\
    \      b = a + b + c;\n      n -= 2;\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpl19_lsy4: /tmp/tmpl19_lsy4.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> res;\n\
    \tres.push_back(1);\n\tres.push_back(3);\n\tres.push_back(2);\n\tfor (int i =\
    \ 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(1 + i / 2);\n\t\
    \t}\n\t\telse {\n\t\t\tres.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\t\
    \t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprn3ik6z_: /tmp/tmprn3ik6z_.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v1;\n    long i,x,y,z,temp;\n    x=1;y=3;z=2;\n    if(n==0)\n        return\
    \ v1;\n    if(n==1)\n    {\n        v1.push_back(x);\n        return v1;\n   \
    \ }\n    if(n==2)\n    {\n        v1.push_back(x);\n        v1.push_back(y);\n\
    \        return v1;\n    }\n    v1.push_back(x);\n    v1.push_back(y);\n    v1.push_back(z);\n\
    \    for(i=3;i<=n;i++)\n    {\n        if(i%2==0)\n        {\n            temp=1+(i/2);\n\
    \            v1.push_back(temp);\n        }\n        else\n        {\n       \
    \     v1.push_back(v1[i-1]+v1[i-2]+v1[i+1]);\n        }\n    }\n    return v1;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0u__49bu: /tmp/tmp0u__49bu.cpp:55: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n   // Your code goes here!\n\
    \   std::vector<long> arr;\n   arr.push_back(1);\n   arr.push_back(3);\n   arr.push_back(2);\n\
    \   for(int i = 3; i <= n; i++){\n      if(i%2 == 0){\n         arr.push_back(1\
    \ + i/2);\n      }\n      else{\n         arr.push_back(arr[i-1] + arr[i-2] +\
    \ arr[i+1]);\n      }\n   }\n   return arr;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4syasd3s: /tmp/tmp4syasd3s.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tfor (long i = 0; i <= n; i++) {\n\t\tif (i == 0) {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t\telse if (i == 1) {\n\t\t\tresult.push_back(3);\n\t\t}\n\t\telse if\
    \ (i == 2) {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\telse if (i % 2 == 0) {\n\t\
    \t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpz7c6uhfg: /tmp/tmpz7c6uhfg.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  v.push_back(1);\n\
    \  v.push_back(3);\n  if (n == 1) {\n    return v;\n  }\n  v.push_back(2);\n \
    \ for (int i = 2; i < n; i++) {\n    if (i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      long n1 = v[i];\n      long n2 = v[i - 1];\n  \
    \    long n3 = v[i - 2];\n      v.push_back(n1 + n2 + n3);\n    }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpnk8frrwh: /tmp/tmpnk8frrwh.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // TODO: your code goes\
    \ here\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpz58guc91: /tmp/tmpz58guc91.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> tribonacci(n\
    \ + 1);\n  for (int i = 0; i <= n; i++) {\n    if (i == 0) {\n      tribonacci[i]\
    \ = 1;\n    } else if (i == 1) {\n      tribonacci[i] = 3;\n    } else if (i ==\
    \ 2) {\n      tribonacci[i] = 2;\n    } else if (i % 2 == 0) {\n      tribonacci[i]\
    \ = 1 + i / 2;\n    } else {\n      tribonacci[i] = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1];\n    }\n  }\n  return tribonacci;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpyp1ogta7: /tmp/tmpyp1ogta7.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102189
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  for (long i = 0; i <= n; i++) {\n    if (i == 0) {\n      v.push_back(1);\n\
    \    } else if (i == 1) {\n      v.push_back(3);\n    } else if (i == 2) {\n \
    \     v.push_back(2);\n    } else if (i % 2 == 0) {\n      v.push_back(1 + i /\
    \ 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5sjf9lrw: /tmp/tmp5sjf9lrw.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n >= 1) res.push_back(1);\n    if (n >= 2) res.push_back(3);\n\
    \    if (n >= 3) res.push_back(2);\n    for (int i = 3; i < n; i++) {\n      \
    \  long k = res[i - 1] + res[i - 2] + res[i - 3];\n        res.push_back(k);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwfgxe6no: /tmp/tmpwfgxe6no.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n > 0) {\n        result.push_back(1);\n    }\n    for (long\
    \ i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6enk8a__: /tmp/tmp6enk8a__.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> ans;\n\
    \  ans.push_back(1);\n  if (n == 0) return ans;\n  ans.push_back(3);\n  if (n\
    \ == 1) return ans;\n  ans.push_back(2);\n  if (n == 2) return ans;\n  for (int\
    \ i = 3; i <= n; i++) {\n    long current = (i % 2 == 0) ? (1 + i / 2) : (ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n    ans.push_back(current);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmbq8kroi: /tmp/tmpmbq8kroi.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n == 0) {\n    return\
    \ {1};\n  } else if (n == 1) {\n    return {1, 3};\n  } else if (n == 2) {\n \
    \   return {1, 3, 2};\n  } else {\n    std::vector<long> result = {1, 3, 2};\n\
    \    for (long i = 3; i <= n; i++) {\n      if (i % 2 == 0) {\n        result.push_back(1\
    \ + i / 2);\n      } else {\n        result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n      }\n    }\n    return result;\n  }\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpum2aqb1b: /tmp/tmpum2aqb1b.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ tribonacci = {1};\n    if (n == 0) {\n        return tribonacci;\n    }\n  \
    \  tribonacci.push_back(3);\n    if (n == 1) {\n        return tribonacci;\n \
    \   }\n    tribonacci.push_back(2);\n    if (n == 2) {\n        return tribonacci;\n\
    \    }\n    long x = 2;\n    long y = 3;\n    long z = 1;\n    for (int i = 3;\
    \ i <= n; i++) {\n        long temp = x + y + z;\n        tribonacci.push_back(temp);\n\
    \        x = y;\n        y = z;\n        z = temp;\n    }\n    return tribonacci;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5ufi4jit: /tmp/tmp5ufi4jit.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long>res;\n\
    \tif (n == 0) return res;\n\tres.push_back(1);\n\tif (n == 1) return res;\n\t\
    res.push_back(3);\n\tif (n == 2) return res;\n\tres.push_back(2);\n\tif (n ==\
    \ 3) return res;\n\tfor (long i = 4; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tres.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(res[i -\
    \ 1] + res[i - 2] + res[i - 3]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpq2hf12fj: /tmp/tmpq2hf12fj.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result(n\
    \ + 1);\n  result[0] = 1;\n  result[1] = 3;\n  result[2] = 2;\n  for (size_t i\
    \ = 3; i <= n; i++) {\n    if (i % 2) {\n      result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n    } else {\n      result[i] = 1 + i / 2;\n    }\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpqmkak6xn: /tmp/tmpqmkak6xn.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102190
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  // O(n)\n  for (long i = 0; i <= n; i++) {\n    if (i == 0)\n      v.push_back(1);\n\
    \    else if (i == 1)\n      v.push_back(3);\n    else if (i == 2)\n      v.push_back(2);\n\
    \    else if (i % 2 == 0)\n      v.push_back(1 + i / 2);\n    else\n      v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpppuk6870: /tmp/tmpppuk6870.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102191
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n   std::vector<long> result;\n\
    \   if (n == 0) {\n       result.push_back(1);\n       return result;\n   }\n\
    \   result.push_back(1);\n   result.push_back(3);\n   result.push_back(2);\n \
    \  for (int i = 3; i <= n; i++) {\n       if (i % 2 == 0) {\n           result.push_back(1\
    \ + i / 2);\n       } else {\n           result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n       }\n   }\n   return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5qw_zn1v: /tmp/tmp5qw_zn1v.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tfor (int i = 0; i <= n; i++) {\n\t\tif (i == 0) {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t\telse if (i == 1) {\n\t\t\tresult.push_back(3);\n\t\t}\n\t\telse if\
    \ (i == 2) {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\telse if (i == 3) {\n\t\t\t\
    result.push_back(8);\n\t\t}\n\t\telse if (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpjciztc34: /tmp/tmpjciztc34.cpp:47: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // https://en.wikipedia.org/wiki/Tribonacci_number\n\
    \  // https://oeis.org/A000073\n  assert(n >= 0);\n  std::vector<long> result;\n\
    \  result.push_back(1);\n  long t1 = 1, t2 = 1, t3 = 1;\n  for (long i = 1; i\
    \ <= n; ++i) {\n    if (i % 2 == 0)\n      result.push_back(1 + i / 2);\n    else\
    \ {\n      result.push_back(t1 + t2 + t3);\n      t1 = t2;\n      t2 = t3;\n \
    \     t3 = result.back();\n    }\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsqmrrqfh: /tmp/tmpsqmrrqfh.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n\
    \    long even = 2;\n    long odd = 3;\n    long prev_val = 1;\n    for (int i\
    \ = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            long val = even\
    \ + odd + prev_val;\n            res.push_back(val);\n            prev_val = even;\n\
    \            even = val;\n        } else {\n            long val = even + odd\
    \ + prev_val;\n            res.push_back(val);\n            prev_val = odd;\n\
    \            odd = val;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpy2ycovqg: /tmp/tmpy2ycovqg.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\t\n\tstd::vector<long>\
    \ retVec;\n\tretVec.push_back(1);\n\tretVec.push_back(3);\n\tretVec.push_back(2);\n\
    \tretVec.push_back(8);\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(i % 2 ==\
    \ 0)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tsum = (1 + (i / 2));\n\t\t\tretVec.push_back(sum);\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tsum = retVec[i] + retVec[i -\
    \ 1] + retVec[i + 1];\n\t\t\tretVec.push_back(sum);\n\t\t}\n\t}\n\t\n\treturn\
    \ retVec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpohemxzs2: /tmp/tmpohemxzs2.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long>v(n\
    \ + 1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n  for (int i = 3; i <= n; i++)\
    \ {\n    if (i % 2 == 0)\n      v[i] = 1 + i / 2;\n    else\n      v[i] = v[i\
    \ - 1] + v[i - 2] + v[i + 1];\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpck0zxe38: /tmp/tmpck0zxe38.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result\
    \ = {1, 3, 2};\n  for (int i = 3; i <= n; i++) {\n    result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpdgb17aun: /tmp/tmpdgb17aun.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) return v;\n    v.push_back(1);\n    if(n == 1) return v;\n\
    \    v.push_back(3);\n    if(n == 2) return v;\n    long a = 1, b = 3, c = 2;\n\
    \    for(int i = 3; i <= n; i++){\n        v.push_back(a + b + c);\n        if(i\
    \ % 2 == 0){\n            a = 1 + i / 2;\n        }else{\n            a = v[i\
    \ - 3];\n            b = v[i - 2];\n            c = v[i - 1];\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2wwpiaya: /tmp/tmp2wwpiaya.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> ans;\n\
    \  ans.push_back(1);\n  if (n == 0) {\n    return ans;\n  }\n  ans.push_back(3);\n\
    \  if (n == 1) {\n    return ans;\n  }\n  ans.push_back(2);\n  if (n == 2) {\n\
    \    return ans;\n  }\n  ans.push_back(8);\n  if (n == 3) {\n    return ans;\n\
    \  }\n  ans.push_back(2);\n  if (n == 4) {\n    return ans;\n  }\n  ans.push_back(5);\n\
    \  if (n == 5) {\n    return ans;\n  }\n  ans.push_back(3);\n  if (n == 6) {\n\
    \    return ans;\n  }\n  ans.push_back(2);\n  if (n == 7) {\n    return ans;\n\
    \  }\n  ans.push_back(11);\n  if (n == 8) {\n    return ans;\n  }\n  ans.push_back(2);\n\
    \  if (n == 9) {\n    return ans;\n  }\n  ans.push_back(1);\n  if (n == 10) {\n\
    \    return ans;\n  }\n  ans.push_back(3);\n  if (n == 11) {\n    return ans;\n\
    \  }\n  ans.push_back(2);\n  if (n == 12) {\n    return ans;\n  }\n  ans.push_back(9);\n\
    \  if (n == 13) {\n    return ans;\n  }\n  ans.push_back(5);\n  if (n == 14) {\n\
    \    return ans;\n  }\n  ans.push_back(5);\n  if (n == 15) {\n    return ans;\n\
    \  }\n  ans.push_back(1);\n  if (n == 16) {\n    return ans;\n  }\n  ans.push_back(3);\n\
    \  if (n == 17) {\n    return ans;\n  }\n  ans.push_back(2);\n  if (n ==\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps4ergndu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmps4ergndu.cpp:95:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   95 | }\n      | ^\n/tmp/tmps4ergndu.cpp:94:11: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   94 |   if (n ==\n    \
    \  |      ~    ^\n      |           )\n   95 | }\n      | ~          \n/tmp/tmps4ergndu.cpp:95:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   95 | }\n \
    \     | ^\n/tmp/tmps4ergndu.cpp:95:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   95 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tresult.push_back(1);\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i == 1) {\n\
    \t\t\tresult.push_back(3);\n\t\t}\n\t\telse if (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpyx2aqv0i: /tmp/tmpyx2aqv0i.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    long a[100000];\n\
    \    a[0]=0;\n    a[1]=3;\n    a[2]=2;\n    a[3]=8;\n    int i=4;\n    while(i<=n){\n\
    \        if(i%2==0){\n            a[i]=1+(i/2);\n        }\n        else{\n  \
    \          a[i]=a[i-1]+a[i-2]+a[i+1];\n        }\n        i++;\n    }\n    std::vector<long>\
    \ ans;\n    for(int i=0;i<=n;i++){\n        ans.push_back(a[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpldihsjft: /tmp/tmpldihsjft.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tint i;\n\tstd::vector<long>\
    \ answer(n + 1);\n\tanswer[0] = 0;\n\tanswer[1] = 3;\n\tanswer[2] = 2;\n\tfor\
    \ (i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tanswer[i] = 1 + i / 2;\n\t\
    \telse\n\t\t\tanswer[i] = answer[i - 1] + answer[i - 2] + answer[i + 1];\n\t}\n\
    \treturn answer;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpn2k7j_vk: /tmp/tmpn2k7j_vk.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  assert(n >= 0);\n  std::vector<long>\
    \ v;\n  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  if (n == 1)\
    \ {\n    v.push_back(1);\n    v.push_back(3);\n    return v;\n  }\n  v.push_back(1);\n\
    \  v.push_back(3);\n  v.push_back(2);\n  for (int i = 3; i <= n; i++) {\n    if\
    \ (i % 2 == 0) {\n      v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptft7m25m: /tmp/tmptft7m25m.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) {\n        result.push_back(1);\n        return result;\n\
    \    }\n    long a = 1, b = 3, c = 2;\n    while (n) {\n        n -= 1;\n    \
    \    result.push_back(a);\n        auto tmp = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = tmp;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpp8hg3g3b: /tmp/tmpp8hg3g3b.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res(n+1);\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    if(n <= 2)\
    \ return res;\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) res[i]\
    \ = (i+1)/2;\n        else res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpi3e0sfjo: /tmp/tmpi3e0sfjo.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ ret(n + 1);\n    ret[0] = 1;\n    ret[1] = 3;\n    ret[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            ret[i] = 1 + i\
    \ / 2;\n        } else {\n            ret[i] = ret[i - 1] + ret[i - 2] + ret[i\
    \ + 1];\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp7rov85e0: /tmp/tmp7rov85e0.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  assert(n >= 0);\n  std::vector<long>\
    \ res;\n  if (n == 0) {\n    res.push_back(1);\n    return res;\n  }\n  res.push_back(1);\n\
    \  res.push_back(3);\n  if (n == 1) {\n    return res;\n  }\n  res.push_back(2);\n\
    \  if (n == 2) {\n    return res;\n  }\n  for (long i = 3; i <= n; i++) {\n  \
    \  if (i % 2 == 0) {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpygborqfi: /tmp/tmpygborqfi.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res(n + 1);\n    res[0] = 0;\n    res[1] = 1;\n    res[2] = 1;\n    for (int\
    \ i = 3; i <= n; i++) {\n        res[i] = res[i - 1] + res[i - 2] + res[i - 3];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpnfqy2u3m: /tmp/tmpnfqy2u3m.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    long a, b, c, d;\n    a = b = c = d = 1;\n    long counter = 0;\n  \
    \  while (counter <= n) {\n        v.push_back(a);\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = a + b + c;\n        counter++;\n    }\n  \
    \  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp753qagx9: /tmp/tmp753qagx9.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    long a = 1, b = 3,\
    \ c = 2;\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(a);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(b);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(c);\n    if(n == 3)\n        return v;\n    long\
    \ d = (n & 1) ? c + b + a : 1 + n / 2;\n    for(int i = 3; i < n; i++) {\n   \
    \     a = b;\n        b = c;\n        c = d;\n        d = (i & 1) ? c + b + a\
    \ : 1 + n / 2;\n        v.push_back(d);\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmwjhni42: /tmp/tmpmwjhni42.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tvector<long>v;\n\t//write\
    \ your code here\n\tif(n==0)\n\t\treturn v;\n\tif(n==1)\n\t{\n\t\tv.push_back(1);\n\
    \t\treturn v;\n\t}\n\tif(n==2)\n\t{\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\treturn v;\n\t}\n\tif(n==3)\n\t{\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\tv.push_back(2);\n\t\treturn v;\n\t}\n\tlong a = 1, b = 3, c = 2;\n\tv.push_back(a);\n\
    \tv.push_back(b);\n\tv.push_back(c);\n\tfor(int i=3;i<n;i++)\n\t{\n\t\tlong d\
    \ = b + c + tri(i+1)[0];\n\t\tv.push_back(d);\n\t\ta = b;\n\t\tb = c;\n\t\tc =\
    \ d;\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4543ix8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpm4543ix8.cpp:20:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   20 |  vector<long>v;\n      |  ^~~~~~\n/tmp/tmpm4543ix8.cpp:20:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4543ix8.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm4543ix8.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpm4543ix8.cpp:20:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |  vector<long>v;\n\
    \      |         ^~~~\n/tmp/tmpm4543ix8.cpp:23:10: error: \u2018v\u2019 was not\
    \ declared in this scope\n   23 |   return v;\n      |          ^\n/tmp/tmpm4543ix8.cpp:26:3:\
    \ error: \u2018v\u2019 was not declared in this scope\n   26 |   v.push_back(1);\n\
    \      |   ^\n/tmp/tmpm4543ix8.cpp:31:3: error: \u2018v\u2019 was not declared\
    \ in this scope\n   31 |   v.push_back(1);\n      |   ^\n/tmp/tmpm4543ix8.cpp:37:3:\
    \ error: \u2018v\u2019 was not declared in this scope\n   37 |   v.push_back(1);\n\
    \      |   ^\n/tmp/tmpm4543ix8.cpp:43:2: error: \u2018v\u2019 was not declared\
    \ in this scope\n   43 |  v.push_back(a);\n      |  ^\n"
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tlong x,y,z,t;\n\tstd::vector<long>\
    \ r(n+1);\n\tr[0]=1;\n\tr[1]=3;\n\tr[2]=2;\n\tx=1;\n\ty=3;\n\tz=2;\n\tfor(int\
    \ i=3;i<=n;i++){\n\t\tif(i%2==0){\n\t\t\tt=1+i/2;\n\t\t}\n\t\telse{\n\t\t\tt=x+y+z;\n\
    \t\t}\n\t\tx=y;\n\t\ty=z;\n\t\tz=t;\n\t\tr[i]=t;\n\t}\n\treturn r;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpqgiw5ovn: /tmp/tmpqgiw5ovn.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  vector<long> res;\n\
    \  if(n == 0) {\n    res.push_back(1);\n    return res;\n  }\n  res.push_back(1);\n\
    \  if(n == 1) {\n    res.push_back(3);\n    return res;\n  }\n  res.push_back(3);\n\
    \  res.push_back(2);\n  for(int i = 3; i < n; i++) {\n    if(i % 2 == 0) {\n \
    \     res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i - 1]\
    \ + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf67qgic.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpxf67qgic.cpp:20:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   20 |   vector<long> res;\n      |   ^~~~~~\n/tmp/tmpxf67qgic.cpp:20:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxf67qgic.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxf67qgic.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpxf67qgic.cpp:20:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |   vector<long>\
    \ res;\n      |          ^~~~\n/tmp/tmpxf67qgic.cpp:22:5: error: \u2018res\u2019\
    \ was not declared in this scope\n   22 |     res.push_back(1);\n      |     ^~~\n\
    /tmp/tmpxf67qgic.cpp:25:3: error: \u2018res\u2019 was not declared in this scope\n\
    \   25 |   res.push_back(1);\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    assert(n >= 0);\n\
    \    if (n == 0) {\n        return {};\n    }\n    if (n == 1) {\n        return\
    \ {1};\n    }\n    if (n == 2) {\n        return {1, 3};\n    }\n    std::vector<long>\
    \ result = {1, 3, 2};\n    if (n % 2 == 0) {\n        for (int i = 3; i <= n;\
    \ i++) {\n            result.push_back(1 + i / 2);\n        }\n    } else {\n\
    \        for (int i = 3; i <= n; i++) {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwthk_y2e: /tmp/tmpwthk_y2e.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0)\n    {\n        v.push_back(1);\n        return v;\n    }\n\
    \    if(n == 1)\n    {\n        v.push_back(1);\n        v.push_back(3);\n   \
    \     return v;\n    }\n    if(n == 2)\n    {\n        v.push_back(1);\n     \
    \   v.push_back(3);\n        v.push_back(2);\n        return v;\n    }\n    long\
    \ x = 0, y = 1, z = 2;\n    v.push_back(x);\n    v.push_back(y);\n    v.push_back(z);\n\
    \    while(n > 2)\n    {\n        if(n%2 == 0)\n        {\n            long new_term\
    \ = 1 + n/2;\n            n--;\n            x = y;\n            y = z;\n     \
    \       z = new_term;\n            v.push_back(new_term);\n        }\n       \
    \ else\n        {\n            long new_term = x + y + z;\n            n--;\n\
    \            x = y;\n            y = z;\n            z = new_term;\n         \
    \   v.push_back(new_term);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmld23buu: /tmp/tmpmld23buu.cpp:68: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  res.push_back(1);\n  res.push_back(3);\n  res.push_back(2);\n  res.push_back(8);\n\
    \  int i=4;\n  while(i<=n){\n    long current=res[i-3]+res[i-2]+res[i-1];\n  \
    \  res.push_back(current);\n    i++;\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpqdk5vg3m: /tmp/tmpqdk5vg3m.cpp:36: int main(): Assertion `candidate((4))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // your code\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5yiliwe6: /tmp/tmp5yiliwe6.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  if (n == 0)\n    return res;\n  res.push_back(1);\n  if (n == 1)\n    return\
    \ res;\n  res.push_back(3);\n  if (n == 2)\n    return res;\n  res.push_back(2);\n\
    \  long x = 3, y = 1, z = 2;\n  for (long i = 3; i <= n; i++) {\n    if (i % 2\
    \ == 0) {\n      x = i / 2;\n    } else {\n      x = x + y + z;\n    }\n    res.push_back(x);\n\
    \    y = z;\n    z = x;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpp_6aj7z8: /tmp/tmpp_6aj7z8.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  for (size_t i = 0; i <= n; i++) {\n    if (i == 0) {\n      result.push_back(1);\n\
    \    } else if (i == 1) {\n      result.push_back(3);\n    } else if (i == 2)\
    \ {\n      result.push_back(2);\n    } else if (i % 2 == 0) {\n      result.push_back(1\
    \ + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpufc35e72: /tmp/tmpufc35e72.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) return result;\n    result.push_back(1);\n    if (n\
    \ == 1) return result;\n    result.push_back(3);\n    if (n == 2) return result;\n\
    \    result.push_back(2);\n    long a, b, c;\n    a = 1;\n    b = 3;\n    c =\
    \ 2;\n    while (result.size() <= n) {\n        if (result.size() % 2 == 0)\n\
    \            result.push_back(1 + result.size() / 2);\n        else {\n      \
    \      long t = c + b + a;\n            a = b;\n            b = c;\n         \
    \   c = t;\n            result.push_back(t);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpc4onpxpd: /tmp/tmpc4onpxpd.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102192
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ vec(n+1);\n    vec[0] = 1;\n    vec[1] = 3;\n    vec[2] = 2;\n    for(long i\
    \ = 3; i <= n; i++) {\n        vec[i] = (i % 2 == 0) ? (1 + i / 2) : (vec[i-1]\
    \ + vec[i-2] + vec[i+1]);\n    }\n    return vec;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpb0ju8jg2: /tmp/tmpb0ju8jg2.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // Write your code\
    \ here\n    std::vector<long> result;\n    result.push_back(0);\n    result.push_back(1);\n\
    \    result.push_back(3);\n    if(n == 0) return result;\n    if(n == 1) return\
    \ result;\n    if(n == 2) return result;\n    for(int i = 3; i <= n; i++){\n \
    \       if(i % 2 == 0){\n            result.push_back(1 + i / 2);\n        }else{\n\
    \            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpb96j6r4g: /tmp/tmpb96j6r4g.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ vec(n+1);\n    vec[0] = 1;\n    vec[1] = 3;\n    vec[2] = 2;\n    for(int i\
    \ = 3; i <= n; i++){\n        if(i % 2 == 0){\n            vec[i] = 1 + i / 2;\n\
    \        }else{\n            vec[i] = vec[i-1] + vec[i-2] + vec[i+1];\n      \
    \  }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp990gyd9h: /tmp/tmp990gyd9h.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> v;\n\
    \tv.push_back(1);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\
    \tv.push_back(1 + i / 2);\n\t\telse\n\t\t\tv.push_back(v[i - 1] + v[i - 2] + v[i\
    \ + 1]);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmlm5a1bx: /tmp/tmpmlm5a1bx.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ ret{1, 3, 2};\n    while (ret.size() <= n) {\n        ret.push_back(ret[ret.size()\
    \ - 3] + ret[ret.size() - 2] + ret[ret.size() - 1]);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprgpslydp: /tmp/tmprgpslydp.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res(n + 1);\n    res[0] = 0;\n    res[1] = 3;\n    res[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            res[i] = 1 + i\
    \ / 2;\n        } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 1];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvo_t4g7t: /tmp/tmpvo_t4g7t.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // Write your code\
    \ here\n    std::vector<long> result({1, 3, 2});\n    if (n <= 2)\n        return\
    \ result;\n    long x = result[1], y = result[2], z = 2;\n    for (long i = 3;\
    \ i <= n; i++) {\n        z = (i % 2) ? z + x + y : z + (i / 2);\n        x =\
    \ y;\n        y = z;\n    }\n    result.push_back(z);\n    return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpojke06bo: /tmp/tmpojke06bo.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102194
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) {\n        v.push_back(1);\n        return v;\n    }\n  \
    \  v.push_back(1);\n    if(n == 1) return v;\n    v.push_back(3);\n    if(n ==\
    \ 2) return v;\n    v.push_back(2);\n    if(n == 3) return v;\n    for(int i =\
    \ 4; i <= n; i++) {\n        if(i % 2 == 0) {\n            long temp = 1 + i /\
    \ 2;\n            v.push_back(temp);\n        }\n        else {\n            long\
    \ temp = v[i - 1] + v[i - 2] + v[i - 3];\n            v.push_back(temp);\n   \
    \     }\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n  \
    \  assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpb3uu1yjx: /tmp/tmpb3uu1yjx.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ ans;\n    ans.push_back(1);\n    ans.push_back(3);\n    ans.push_back(2);\n\
    \    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n            ans.push_back(1\
    \ + i / 2);\n        } else {\n            ans.push_back(ans[i - 1] + ans[i -\
    \ 2] + ans[i + 1]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpgut7al7h: /tmp/tmpgut7al7h.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> tribonacci({1,\
    \ 3, 2});\n  if (n == 0) return std::vector<long>({1});\n  if (n == 1) return\
    \ std::vector<long>({1, 3});\n  if (n == 2) return std::vector<long>({1, 3, 2});\n\
    \  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      tribonacci.push_back(1\
    \ + i / 2);\n    } else {\n      tribonacci.push_back(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]);\n    }\n  }\n  return tribonacci;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp7gk8thre: /tmp/tmp7gk8thre.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tresult.push_back(1);\n\tresult.push_back(3);\n\tresult.push_back(2);\n\tif (n\
    \ == 0) {\n\t\treturn result;\n\t}\n\tif (n == 1) {\n\t\tresult.erase(result.begin()\
    \ + 1);\n\t\treturn result;\n\t}\n\tif (n == 2) {\n\t\tresult.erase(result.begin()\
    \ + 2);\n\t\treturn result;\n\t}\n\tlong a = 1, b = 3, c = 2;\n\tlong d = 0;\n\
    \tfor (long i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\td = 1 + i / 2;\n\
    \t\t}\n\t\telse {\n\t\t\td = a + b + c;\n\t\t}\n\t\ta = b;\n\t\tb = c;\n\t\tc\
    \ = d;\n\t\tresult.push_back(d);\n\t}\n\treturn result;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpbszpq9up: /tmp/tmpbszpq9up.cpp:53: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> value(n\
    \ + 1);\n\tvalue[0] = 1;\n\tvalue[1] = 3;\n\tfor (int i = 2; i <= n; i++) {\n\t\
    \tif (i % 2 == 0) {\n\t\t\tvalue[i] = 1 + i / 2;\n\t\t}\n\t\telse {\n\t\t\tvalue[i]\
    \ = value[i - 1] + value[i - 2] + value[i + 1];\n\t\t}\n\t}\n\treturn value;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw6_1zt8n: /tmp/tmpw6_1zt8n.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tassert(n >= 0);\n\t\
    std::vector<long> result(n + 1);\n\tresult[0] = 1;\n\tif (n > 0)\n\t\tresult[1]\
    \ = 3;\n\tif (n > 1)\n\t\tresult[2] = 2;\n\tfor (long i = 3; i <= n; i++) {\n\t\
    \tif (i % 2 == 0)\n\t\t\tresult[i] = 1 + i / 2;\n\t\telse\n\t\t\tresult[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp74_7hs50: /tmp/tmp74_7hs50.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) {\n        v.push_back(1);\n        return v;\n    }\n  \
    \  if(n == 1) {\n        v.push_back(1);\n        v.push_back(3);\n        return\
    \ v;\n    }\n    if(n == 2) {\n        v.push_back(1);\n        v.push_back(3);\n\
    \        v.push_back(2);\n        return v;\n    }\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        }\n        else {\n        \
    \    v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpicvqe80w: /tmp/tmpicvqe80w.cpp:51: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res(n+1);\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for(int i\
    \ = 3; i <= n; i++) {\n        if(i%2 == 0) {\n            res[i] = 1 + i/2;\n\
    \        } else {\n            res[i] = res[i-1] + res[i-2] + res[i+1];\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp9gttabra: /tmp/tmp9gttabra.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102194
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n == 0) return\
    \ {};\n    vector<long> l;\n    l.push_back(1);\n    l.push_back(3);\n    l.push_back(2);\n\
    \    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            l.push_back(1\
    \ + i / 2);\n        } else {\n            long sum = l[i - 1] + l[i - 2] + l[i\
    \ - 3];\n            l.push_back(sum);\n        }\n    }\n    return l;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnh7zvav.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpgnh7zvav.cpp:21:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   21 |     vector<long> l;\n      |     ^~~~~~\n/tmp/tmpgnh7zvav.cpp:21:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgnh7zvav.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgnh7zvav.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpgnh7zvav.cpp:21:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   21 |     vector<long>\
    \ l;\n      |            ^~~~\n/tmp/tmpgnh7zvav.cpp:22:5: error: \u2018l\u2019\
    \ was not declared in this scope\n   22 |     l.push_back(1);\n      |     ^\n"
  stdout: ''
  timestamp: 1660102193
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> v;\n\
    \tv.push_back(1);\n\tif (n == 0) return v;\n\tv.push_back(3);\n\tif (n == 1) return\
    \ v;\n\tv.push_back(2);\n\tif (n == 2) return v;\n\tfor (int i = 3; i <= n; i++)\
    \ {\n\t\tv.push_back(i % 2 == 0 ? 1 + i / 2 : v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpyqxf81lp: /tmp/tmpyqxf81lp.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ vec;\n    vec.push_back(1);\n    vec.push_back(3);\n    vec.push_back(2);\n\
    \    int x = 3;\n    while(x <= n) {\n        long add = x % 2 == 0 ? x / 2 :\
    \ vec[x - 1] + vec[x - 2] + vec[x + 1];\n        vec.push_back(add);\n       \
    \ x++;\n    }\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpo_f9_hpq: /tmp/tmpo_f9_hpq.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> vec(n\
    \ + 1);\n\tvec[0] = 1;\n\tvec[1] = 3;\n\tvec[2] = 2;\n\tif (n >= 3) {\n\t\tfor\
    \ (int i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0)\n\t\t\t\tvec[i] = 1 + i /\
    \ 2;\n\t\t\telse\n\t\t\t\tvec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1];\n\t\t\
    }\n\t}\n\treturn vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpbfb3e6id: /tmp/tmpbfb3e6id.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ trib(n+1);\n    trib[0] = 1;\n    trib[1] = 3;\n    for(int i = 2; i <= n; i++)\
    \ {\n        if(i % 2 == 0) {\n            trib[i] = 1 + i / 2;\n        } else\
    \ {\n            trib[i] = trib[i-1] + trib[i-2] + trib[i+1];\n        }\n   \
    \ }\n    return trib;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpozk4r0sn: /tmp/tmpozk4r0sn.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> vec;\n\
    \  vec.push_back(1);\n  if (n >= 1) {\n    vec.push_back(3);\n    if (n >= 2)\
    \ {\n      vec.push_back(2);\n      for (int i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n          vec.push_back(1 + i / 2);\n        } else {\n    \
    \      long sum = vec[i - 1] + vec[i - 2] + vec[i + 1];\n          vec.push_back(sum);\n\
    \        }\n      }\n    }\n  }\n  return vec;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp72pz45gt: /tmp/tmp72pz45gt.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\t// TODO: implement tri\n\
    \tstd::vector<long> seq(n + 1);\n\tif (n < 0) return seq;\n\tseq[0] = 1;\n\tseq[1]\
    \ = 3;\n\tseq[2] = 2;\n\tfor (long i = 3; i <= n; i++) {\n\t\tseq[i] = (i % 2\
    \ == 0) ? (1 + i / 2) : (seq[i - 1] + seq[i - 2] + seq[i + 1]);\n\t}\n\treturn\
    \ seq;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp_zgbh172: /tmp/tmp_zgbh172.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> out;\n\
    \  long a = 1, b = 3, c = 2;\n  out.push_back(a);\n  out.push_back(b);\n  out.push_back(c);\n\
    \  while(n-- > 2) {\n    long next = 0;\n    if(n % 2 == 0) {\n      next = 1\
    \ + n / 2;\n    } else {\n      next = a + b + c;\n    }\n    a = b;\n    b =\
    \ c;\n    c = next;\n    out.push_back(next);\n  }\n  return out;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1mnup5rj: /tmp/tmp1mnup5rj.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> v;\n\
    \tv.push_back(1);\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i == 1) {\n\t\t\t\
    v.push_back(3);\n\t\t}\n\t\telse if (i % 2 == 0) {\n\t\t\tv.push_back(1 + i /\
    \ 2);\n\t\t}\n\t\telse {\n\t\t\tv.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpgobm3fq6: /tmp/tmpgobm3fq6.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  long one = 1, two =\
    \ 3, three = 2;\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n\
    \  }\n  else if (n == 1) {\n    result.push_back(one);\n    return result;\n \
    \ }\n  else if (n == 2) {\n    result.push_back(one);\n    result.push_back(two);\n\
    \    return result;\n  }\n  else if (n == 3) {\n    result.push_back(one);\n \
    \   result.push_back(two);\n    result.push_back(three);\n    return result;\n\
    \  }\n  else {\n    result.push_back(one);\n    result.push_back(two);\n    result.push_back(three);\n\
    \    for (int i = 0; i < n - 3; i++) {\n      long sum = 0;\n      if (i % 2 ==\
    \ 0) {\n        sum = one + i / 2;\n      }\n      else {\n        sum = result[i\
    \ - 2] + result[i - 1] + result[i + 1];\n      }\n      result.push_back(sum);\n\
    \    }\n    return result;\n  }\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp80l413b2: /tmp/tmp80l413b2.cpp:59: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result\
    \ = { 1, 3, 2 };\n\tfor (size_t i = 3; i <= n; i++)\n\t{\n\t\tresult.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpkn8mfb6t: /tmp/tmpkn8mfb6t.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0)\n    {\n        v.push_back(1);\n        return v;\n    }\n\
    \    if(n == 1)\n    {\n        v.push_back(1);\n        v.push_back(3);\n   \
    \     return v;\n    }\n    if(n == 2)\n    {\n        v.push_back(1);\n     \
    \   v.push_back(3);\n        v.push_back(2);\n        return v;\n    }\n    v.push_back(1);\n\
    \    v.push_back(3);\n    v.push_back(2);\n    for(int i = 3; i <= n; i++)\n \
    \   {\n        if(i % 2 == 0)\n        {\n            long val = 1 + i / 2;\n\
    \            v.push_back(val);\n        }\n        else\n        {\n         \
    \   long val = v[i - 1] + v[i - 2] + v[i + 1];\n            v.push_back(val);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpj32wijjp: /tmp/tmpj32wijjp.cpp:59: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result\
    \ = {1, 3, 2};\n  if (n < 3) {\n    result.resize(n + 1);\n    return result;\n\
    \  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\n      result.push_back(1\
    \ + i / 2);\n    else\n      result.push_back(result[i - 1] + result[i - 2] +\
    \ result[i + 1]);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5iafu_a5: /tmp/tmp5iafu_a5.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n == 0) return {1};\n\
    \  if (n == 1) return {1, 3};\n  if (n == 2) return {1, 3, 2};\n  std::vector<long>\
    \ a = {1, 3, 2};\n  long i = 3;\n  while (i <= n) {\n    if (i % 2 == 0) {\n \
    \     a.push_back(1 + i / 2);\n    } else {\n      a.push_back(a[i - 1] + a[i\
    \ - 2] + a[i + 1]);\n    }\n    i++;\n  }\n  return a;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpx41s_3h7: /tmp/tmpx41s_3h7.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ vec;\n    vec.push_back(1);\n    vec.push_back(3);\n    vec.push_back(2);\n\
    \    long x = 2;\n    long k;\n    long n1, n2, n3;\n    while(x < n) {\n    \
    \    n1 = vec[x];\n        n2 = vec[x - 1];\n        n3 = vec[x - 2];\n      \
    \  if(x % 2 == 0) {\n            k = 1 + x / 2;\n        } else {\n          \
    \  k = n1 + n2 + n3;\n        }\n        vec.push_back(k);\n        x++;\n   \
    \ }\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpkne_io6p: /tmp/tmpkne_io6p.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    result.push_back(1);\n    result.push_back(3);\n    result.push_back(2);\n\
    \    if (n < 2) {\n        if (n == 0)\n            result.pop_back();\n     \
    \   if (n == 1)\n            result.pop_back();\n        return result;\n    }\n\
    \    for (int i = 0; i < n - 2; i++) {\n        result.push_back(result[i] + result[i\
    \ + 1] + result[i + 2]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpn598t0j7: /tmp/tmpn598t0j7.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n == 0) return {1};\n\
    \  if (n == 1) return {1, 3};\n  if (n == 2) return {1, 3, 2};\n  std::vector<long>\
    \ t(n + 1);\n  t[0] = 1;\n  t[1] = 3;\n  t[2] = 2;\n  for (int i = 3; i <= n;\
    \ i++) {\n    if (i % 2 == 0) t[i] = 1 + i / 2;\n    else t[i] = t[i - 1] + t[i\
    \ - 2] + t[i + 1];\n  }\n  return t;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpzgfmd7qk: /tmp/tmpzgfmd7qk.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    long a, b, c, sum;\n    for(int i = 1; i <= n; i++){\n        if(i <=\
    \ 2){\n            v.push_back(1);\n        }\n        else if(i == 3){\n    \
    \        v.push_back(3);\n        }\n        else{\n            a = v[i - 1];\n\
    \            b = v[i - 2];\n            c = v[i - 3];\n            sum = a + b\
    \ + c;\n            v.push_back(sum);\n        }\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmt614_45: /tmp/tmpmt614_45.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> trib;\n\
    \  trib.push_back(0);\n  trib.push_back(1);\n  trib.push_back(3);\n  trib.push_back(2);\n\
    \  if (n > 3) {\n    for (int i = 4; i <= n; i++) {\n      if (i % 2 == 0) {\n\
    \        trib.push_back(1 + i / 2);\n      } else {\n        trib.push_back(trib[i\
    \ - 1] + trib[i - 2] + trib[i + 1]);\n      }\n    }\n  }\n  return trib;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwlzxaw7y: /tmp/tmpwlzxaw7y.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long first = 3;\n    long second = 1;\n    long third = 2;\n  \
    \  result.push_back(first);\n    result.push_back(second);\n    result.push_back(third);\n\
    \    for(int i = 3; i < n; i++) {\n        if(i % 2 == 0) {\n            long\
    \ next = 1 + (i / 2);\n            result.push_back(next);\n        } else {\n\
    \            long next = result[i - 1] + result[i - 2] + result[i + 1];\n    \
    \        result.push_back(next);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp5_b13y8k: /tmp/tmp5_b13y8k.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result\
    \ = {1, 3, 2};\n\tif (n == 0) {\n\t\treturn {1};\n\t}\n\tif (n == 1) {\n\t\treturn\
    \ {1, 3};\n\t}\n\tfor (long i = 2; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\t\
    result.push_back(1 + i / 2);\n\t\t} else {\n\t\t\tresult.push_back(result[i -\
    \ 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw2cxuwx8: /tmp/tmpw2cxuwx8.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> t(n+1);\n\
    \tt[0] = 1;\n\tt[1] = 3;\n\tt[2] = 2;\n\tfor(int i = 3; i <= n; i++) {\n\t\tif(i\
    \ % 2 == 0) {\n\t\t\tt[i] = 1 + i / 2;\n\t\t} else {\n\t\t\tt[i] = t[i-1] + t[i-2]\
    \ + t[i+1];\n\t\t}\n\t}\n\treturn t;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpeiob570l: /tmp/tmpeiob570l.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ ret;\n    long tri1 = 1, tri2 = 3, tri3 = 2;\n    if (n == 0) {\n        ret.push_back(tri1);\n\
    \        return ret;\n    }\n    ret.push_back(tri1);\n    if (n == 1) {\n   \
    \     ret.push_back(tri2);\n        return ret;\n    }\n    ret.push_back(tri2);\n\
    \    if (n == 2) {\n        ret.push_back(tri3);\n        return ret;\n    }\n\
    \    ret.push_back(tri3);\n    for (int i = 4; i <= n; i++) {\n        if (i %\
    \ 2 == 0) {\n            long tri = 1 + i / 2;\n            ret.push_back(tri);\n\
    \        } else {\n            long tri = ret[i - 1] + ret[i - 2] + ret[i - 3];\n\
    \            ret.push_back(tri);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2yo7tbc_: /tmp/tmp2yo7tbc_.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v;\n    if(n == 0) return v;\n    else if(n == 1) return {3};\n    else if(n\
    \ == 2) return {1, 3, 2};\n    else {\n        v.push_back(1);\n        v.push_back(3);\n\
    \        v.push_back(2);\n        for(int i = 3; i <= n; i++) {\n            if(i\
    \ % 2 == 0) v.push_back(1 + i / 2);\n            else v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw2aykjod: /tmp/tmpw2aykjod.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  v.push_back(1);\n\
    \  v.push_back(3);\n  if (n == 1) {\n    return v;\n  }\n  v.push_back(2);\n \
    \ if (n == 2) {\n    return v;\n  }\n  long long a = 2, b = 3, c = 2;\n  for (int\
    \ i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      v.push_back(1 + i / 2);\n\
    \    } else {\n      long long x = a + b + c;\n      a = b;\n      b = c;\n  \
    \    c = x;\n      v.push_back(x);\n    }\n  }\n  return v;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2z49v1pb: /tmp/tmp2z49v1pb.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result{};\n\
    \tif (n == 0) {\n\t\treturn result;\n\t}\n\tresult.push_back(1);\n\tif (n == 1)\
    \ {\n\t\treturn result;\n\t}\n\tresult.push_back(3);\n\tif (n == 2) {\n\t\treturn\
    \ result;\n\t}\n\tresult.push_back(2);\n\tif (n == 3) {\n\t\treturn result;\n\t\
    }\n\tfor (long i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp7etn5cs0: /tmp/tmp7etn5cs0.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result(n\
    \ + 1);\n  result[0] = 1;\n  result[1] = 3;\n  result[2] = 2;\n  if (n > 2) {\n\
    \    for (int i = 3; i <= n; i++) {\n      if (i % 2 == 0) {\n        result[i]\
    \ = 1 + i / 2;\n      } else {\n        result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpdxtuiy31: /tmp/tmpdxtuiy31.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    long x=3,y=1,z=2,a=3;\n\
    \    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n  \
    \  ans.push_back(2);\n    while(a<=n){\n        if(a%2==0){\n            ans.push_back(1+(a/2));\n\
    \        }\n        else if(a%2!=0){\n            ans.push_back(ans[a-1]+ans[a-2]+ans[a+1]);\n\
    \        }\n        a++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpa3at5pu_: /tmp/tmpa3at5pu_.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ nums = {};\n    long num1 = 1;\n    long num2 = 3;\n    long num3 = 2;\n   \
    \ long nextNum = 0;\n    nums.push_back(num1);\n    nums.push_back(num2);\n  \
    \  nums.push_back(num3);\n    for (long i = 3; i <= n; i++) {\n        if (i %\
    \ 2 == 0) {\n            nextNum = 1 + (i / 2);\n        } else {\n          \
    \  nextNum = nums[i - 1] + nums[i - 2] + nums[i + 1];\n        }\n        nums.push_back(nextNum);\n\
    \    }\n    return nums;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpolk_c4kb: /tmp/tmpolk_c4kb.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v = {1, 3, 2};\n    if (n < 3) return std::vector<long>(v.begin(), v.begin()\
    \ + n + 1);\n    for (int i = 3; i <= n; i++) {\n        v.push_back(i % 2 ? v[i\
    \ - 1] + v[i - 2] + v[i - 3] : 1 + i / 2);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpfra2emzm: /tmp/tmpfra2emzm.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tint i = 0;\n\tstd::vector<long>\
    \ v(n+1);\n\twhile(i<=n){\n\t\tif(i==0){\n\t\t\tv[i] = 1;\n\t\t}\n\t\telse if(i==1){\n\
    \t\t\tv[i] = 3;\n\t\t}\n\t\telse if(i==2){\n\t\t\tv[i] = 2;\n\t\t}\n\t\telse if(i%2==0){\n\
    \t\t\tv[i] = (1 + i/2);\n\t\t}\n\t\telse if(i%2==1){\n\t\t\tv[i] = v[i-1] + v[i-2]\
    \ + v[i+1];\n\t\t}\n\t\ti++;\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp890xieq2: /tmp/tmp890xieq2.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code\n  std::vector<long>\
    \ ans;\n  if(n==0)\n    return ans;\n  ans.push_back(1);\n  if(n==1)\n    return\
    \ ans;\n  ans.push_back(3);\n  if(n==2)\n    return ans;\n  ans.push_back(2);\n\
    \  for(int i=3;i<=n;i++)\n  {\n    if(i%2==0)\n      ans.push_back(1+(i/2));\n\
    \    else\n      ans.push_back(ans[i-1]+ans[i-2]+ans[i+1]);\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpurawhboi: /tmp/tmpurawhboi.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    long a = 1, b = 3,\
    \ c = 2;\n    std::vector<long> result;\n    result.push_back(a);\n    if (n >\
    \ 0) result.push_back(b);\n    if (n > 1) result.push_back(c);\n    for (int i\
    \ = 3; i <= n; i++) {\n        if (i % 2 == 0)\n            result.push_back(1\
    \ + i / 2);\n        else {\n            long a = result[i - 1], b = result[i\
    \ - 2], c = result[i - 3];\n            result.push_back(a + b + c);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp54ollgsa: /tmp/tmp54ollgsa.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ a(n + 1);\n    a[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        if (i\
    \ % 2 == 0) {\n            a[i] = 1 + i / 2;\n        } else {\n            a[i]\
    \ = a[i - 1] + a[i - 2] + a[i + 1];\n        }\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp8mvbgbby: /tmp/tmp8mvbgbby.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ nums(n + 1);\n    for (long i = 1; i <= n; i++) {\n        if (i == 1) nums[i]\
    \ = 3;\n        else if (i % 2 == 0) nums[i] = 1 + i / 2;\n        else nums[i]\
    \ = nums[i - 1] + nums[i - 2] + nums[i + 1];\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpjc3ye96g: /tmp/tmpjc3ye96g.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    assert(n>=0);\n  \
    \  std::vector<long> res;\n    res.push_back(1);\n    if(n==0)\n        return\
    \ res;\n    res.push_back(3);\n    if(n==1)\n        return res;\n    res.push_back(2);\n\
    \    if(n==2)\n        return res;\n    for(int i=3;i<=n;i++){\n        long num;\n\
    \        if(i%2)\n            num = res[i-1]+res[i-2]+res[i-3];\n        else\n\
    \            num = 1+i/2;\n        res.push_back(num);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpdcg2ibyq: /tmp/tmpdcg2ibyq.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  for (int i = 0; i <= n; i++) {\n    if (i == 0) {\n      result.push_back(1);\n\
    \    } else if (i == 1) {\n      result.push_back(3);\n    } else if (i == 2)\
    \ {\n      result.push_back(2);\n    } else if (i == 3) {\n      result.push_back(8);\n\
    \    } else if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else\
    \ {\n      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n  \
    \  assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppurpqbum: /tmp/tmppurpqbum.cpp:42: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    assert(n >= 0);\n\
    \    std::vector<long> a(n + 1);\n    if (n == 0) return {1};\n    if (n == 1)\
    \ return {1, 3};\n    if (n == 2) return {1, 3, 2};\n    a[0] = 1;\n    a[1] =\
    \ 3;\n    a[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        a[i] = a[i -\
    \ 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1oswk5er: /tmp/tmp1oswk5er.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  if (n == 0) {\n    v.push_back(1);\n    return v;\n  }\n  if (n == 1) {\n \
    \   v.push_back(1);\n    v.push_back(3);\n    return v;\n  }\n  if (n == 2) {\n\
    \    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    return v;\n\
    \  }\n  if (n == 3) {\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n\
    \    v.push_back(8);\n    return v;\n  }\n  if (n == 4) {\n    v.push_back(1);\n\
    \    v.push_back(3);\n    v.push_back(2);\n    v.push_back(8);\n    v.push_back(5);\n\
    \    return v;\n  }\n  if (n == 5) {\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    v.push_back(8);\n    v.push_back(5);\n    v.push_back(21);\n\
    \    return v;\n  }\n  if (n == 6) {\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    v.push_back(8);\n    v.push_back(5);\n    v.push_back(21);\n\
    \    v.push_back(13);\n    return v;\n  }\n  if (n == 7) {\n    v.push_back(1);\n\
    \    v.push_back(3);\n    v.push_back(2);\n    v.push_back(8);\n    v.push_back(5);\n\
    \    v.push_back(21);\n    v.push_back(13);\n    v.push_back(34);\n    return\
    \ v;\n  }\n  if (n ==\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcj06jh1y.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpcj06jh1y.cpp:82:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpcj06jh1y.cpp:81:11: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   81 |   if (n ==\n    \
    \  |      ~    ^\n      |           )\n   82 | }\n      | ~          \n/tmp/tmpcj06jh1y.cpp:82:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   82 | }\n \
    \     | ^\n/tmp/tmpcj06jh1y.cpp:82:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   82 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660102195
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ values;\n    values.push_back(1);\n    values.push_back(3);\n    values.push_back(2);\n\
    \    values.push_back(8);\n    if (n == 0)\n        return std::vector<long>({1});\n\
    \    if (n == 1)\n        return std::vector<long>({1, 3});\n    if (n == 2)\n\
    \        return std::vector<long>({1, 3, 2});\n    if (n == 3)\n        return\
    \ std::vector<long>({1, 3, 2, 8});\n    for (int i = 4; i <= n; i++) {\n     \
    \   if (i % 2 == 0) {\n            values.push_back(1 + i / 2);\n        } else\
    \ {\n            values.push_back(values[i - 1] + values[i - 2] + values[i + 1]);\n\
    \        }\n    }\n    return values;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpu5278db_: /tmp/tmpu5278db_.cpp:46: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    if (n == 0) return\
    \ {};\n    std::vector<long> v(n + 1);\n    v[0] = 1;\n    v[1] = 3;\n    v[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) v[i] = 1 +\
    \ i / 2;\n        else v[i] = v[i - 1] + v[i - 2] + v[i + 1];\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpq2xny83t: /tmp/tmpq2xny83t.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  assert(n >= 0);\n  std::vector<long>v;\n\
    \  v.push_back(1);\n  v.push_back(3);\n  if(n == 0)\n    return v;\n  v.push_back(2);\n\
    \  if(n == 1)\n    return v;\n  for(int i = 3; i <= n; i++){\n    if(i % 2 ==\
    \ 0)\n      v.push_back(1 + i / 2);\n    else\n      v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpznjc48s8: /tmp/tmpznjc48s8.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  if (n == 0) return {};\n\
    \  vector<long> ret{3};\n  long sum = 3;\n  long next = 1;\n  for (int i = 1;\
    \ i < n; ++i) {\n    if (i % 2 == 0) {\n      next = 1 + i / 2;\n    } else {\n\
    \      next = ret[i - 1] + ret[i - 2] + ret[i + 1];\n    }\n    ret.push_back(next);\n\
    \    sum += next;\n  }\n  return ret;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x2qq18b.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0x2qq18b.cpp:21:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   21 |   vector<long> ret{3};\n      |   ^~~~~~\n/tmp/tmp0x2qq18b.cpp:21:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0x2qq18b.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0x2qq18b.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp0x2qq18b.cpp:21:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   21 |   vector<long>\
    \ ret{3};\n      |          ^~~~\n/tmp/tmp0x2qq18b.cpp:28:14: error: \u2018ret\u2019\
    \ was not declared in this scope\n   28 |       next = ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1];\n      |              ^~~\n/tmp/tmp0x2qq18b.cpp:30:5: error: \u2018\
    ret\u2019 was not declared in this scope\n   30 |     ret.push_back(next);\n \
    \     |     ^~~\n/tmp/tmp0x2qq18b.cpp:33:10: error: \u2018ret\u2019 was not declared\
    \ in this scope\n   33 |   return ret;\n      |          ^~~\n"
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tif (n == 0) {\n\t\tresult.push_back(1);\n\t\treturn result;\n\t} else if (n\
    \ == 1) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\t\treturn result;\n\
    \t} else if (n == 2) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\t\
    \tresult.push_back(2);\n\t\treturn result;\n\t} else {\n\t\tresult.push_back(1);\n\
    \t\tresult.push_back(3);\n\t\tresult.push_back(2);\n\t\tlong t1 = 1, t2 = 3, t3\
    \ = 2;\n\t\tfor (long i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\t\
    result.push_back(1 + i / 2);\n\t\t\t} else {\n\t\t\t\tresult.push_back(t1 + t2\
    \ + t3);\n\t\t\t\tt1 = t2;\n\t\t\t\tt2 = t3;\n\t\t\t\tt3 = result[i];\n\t\t\t\
    }\n\t\t}\n\t\treturn result;\n\t}\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpq20ljwbh: /tmp/tmpq20ljwbh.cpp:53: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result;\n\
    \  if (n == 0) {\n    result.push_back(1);\n    return result;\n  }\n  result.push_back(1);\n\
    \  result.push_back(3);\n  result.push_back(2);\n  if (n == 1) {\n    return result;\n\
    \  }\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(result[i\
    \ - 1] + (i / 2));\n    } else {\n      result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpspafcs8y: /tmp/tmpspafcs8y.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> sequence;\n\
    \tsequence.push_back(1);\n\tsequence.push_back(3);\n\tsequence.push_back(2);\n\
    \tsequence.push_back(8);\n\tfor (int i = 4; i <= n; i++) {\n\t\tif (i % 2 == 0)\
    \ {\n\t\t\tsequence.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tsequence.push_back(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i + 1]);\n\t\t}\n\t}\n\treturn sequence;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4wmmzgce: /tmp/tmp4wmmzgce.cpp:39: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code here\n\
    \  std::vector<long> arr;\n  arr.push_back(1);\n  arr.push_back(3);\n  arr.push_back(2);\n\
    \  for(int i = 3; i <= n; i++){\n    if(i % 2 == 0){\n      arr.push_back(1 +\
    \ i / 2);\n    }\n    else{\n      arr.push_back(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]);\n    }\n  }\n  return arr;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmqyyamw1: /tmp/tmpmqyyamw1.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102196
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // TODO: Implement me!\n\
    \  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  if(n==0){\n \
    \   return v;\n  }\n  if(n==1){\n    return v;\n  }\n  if(n==2){\n    v.push_back(2);\n\
    \    return v;\n  }\n  long a = 1;\n  long b = 3;\n  long c = 2;\n  v.push_back(2);\n\
    \  for(int i=2;i<n;i++){\n    long d;\n    if(i%2==0){\n      d = a + (i/2);\n\
    \    }\n    else{\n      d = a + b + c;\n    }\n    a = b;\n    b = c;\n    c\
    \ = d;\n    v.push_back(d);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpv_14z7tc: /tmp/tmpv_14z7tc.cpp:55: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  assert(n >= 0);\n  std::vector<long>\
    \ tribonacci;\n  if (n == 0) {\n    return tribonacci;\n  }\n  tribonacci.push_back(1);\n\
    \  if (n == 1) {\n    return tribonacci;\n  }\n  tribonacci.push_back(3);\n  if\
    \ (n == 2) {\n    return tribonacci;\n  }\n  tribonacci.push_back(2);\n  if (n\
    \ == 3) {\n    return tribonacci;\n  }\n  tribonacci.push_back(8);\n  int n1 =\
    \ 1, n2 = 3, n3 = 2, n4 = 8;\n  for (int i = 4; i <= n; i++) {\n    n1 = n2;\n\
    \    n2 = n3;\n    n3 = n4;\n    n4 = 1 + i / 2;\n    if (i % 2 == 1) {\n    \
    \  n4 = n1 + n2 + n3;\n    }\n    tribonacci.push_back(n4);\n  }\n  return tribonacci;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6mk4i_f: /tmp/tmpd6mk4i_f.cpp:53: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> result;\n\
    \tresult.push_back(1);\n\tresult.push_back(3);\n\tresult.push_back(2);\n\tif (n\
    \ >= 3) {\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\
    \tresult.push_back(1 + i / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(result[i\
    \ - 2] + result[i - 1] + result[i + 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmphq0nj5ng: /tmp/tmphq0nj5ng.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    // Write your code\
    \ here\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    if(n<=2)\n        return ans;\n    int i=3;\n    while(i<=n){\n\
    \        if(i%2==0)\n            ans.push_back(1+i/2);\n        else\n       \
    \     ans.push_back(ans[i-1]+ans[i-2]+ans[i+1]);\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvaiafwi5: /tmp/tmpvaiafwi5.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> result{1,\
    \ 3, 2};\n  long sum = 1 + 3 + 2;\n  for (long index = 3; index <= n; ++index)\
    \ {\n    long sum1 = (index % 2 == 0) ? (1 + index / 2) : sum;\n    sum = sum1;\n\
    \    result.push_back(sum1);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpaz376exz: /tmp/tmpaz376exz.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>v={1,3,2};\n\
    \    for(int i=0;i<n;i++){\n        if(i%2==0){\n            v.push_back(1+i/2);\n\
    \        }\n        else{\n            v.push_back(v[i]+v[i-1]+v[i+1]);\n    \
    \    }\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpcrgwng65: /tmp/tmpcrgwng65.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  long a = 1, b = 3, c\
    \ = 2;\n  std::vector<long> res = {1, 3, 2};\n  while (res.size() <= n) {\n  \
    \  long t = (a + b + c) * (a + b + c);\n    if (res.size() % 2 == 0)\n      res.push_back(t\
    \ / (a + b + c));\n    else\n      res.push_back(t);\n    a = b;\n    b = c;\n\
    \    c = res.back();\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpv3yt46mc: /tmp/tmpv3yt46mc.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> v;\n\
    \  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n  long t1 = 2, t2 =\
    \ 3, t3 = 1;\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n     \
    \ t1 = 1 + i / 2;\n    } else {\n      t1 = t1 + t2 + t3;\n    }\n    t3 = t2;\n\
    \    t2 = t1;\n    v.push_back(t1);\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp40fme00y: /tmp/tmp40fme00y.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tif (n == 0) return {};\n\
    \tif (n == 1) return {1};\n\tif (n == 2) return {1, 3};\n\tstd::vector<long> res;\n\
    \tres.push_back(1);\n\tres.push_back(3);\n\tres.push_back(2);\n\tfor (long i =\
    \ 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(1 + i / 2);\n\t\
    \t} else {\n\t\t\tres.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\t\t}\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpkfsodmn5: /tmp/tmpkfsodmn5.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n\tstd::vector<long> seq;\n\
    \tseq.push_back(1);\n\tseq.push_back(3);\n\tseq.push_back(2);\n\tseq.push_back(8);\n\
    \tfor (int i = 4; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tseq.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tseq.push_back(seq[i - 1] + seq[i - 2] +\
    \ seq[i + 1]);\n\t\t}\n\t}\n\treturn seq;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpgx8oggy6: /tmp/tmpgx8oggy6.cpp:39: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v = {1, 3, 2};\n    for (long i = 3; i <= n; i++) {\n        if (i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 2] + v[i - 1] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp32z_bfgw: /tmp/tmp32z_bfgw.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ v(n + 1);\n    if (n < 2) {\n        v[0] = 1;\n        v[1] = 3;\n        return\
    \ v;\n    }\n    v[0] = 1;\n    v[1] = 3;\n    v[2] = 2;\n    for (long i = 3;\
    \ i <= n; i++) {\n        if (i % 2 == 0) {\n            v[i] = 1 + i / 2;\n \
    \       } else {\n            v[i] = v[i - 1] + v[i - 2] + v[i + 1];\n       \
    \ }\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsn2iy8ga: /tmp/tmpsn2iy8ga.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> res;\n\
    \  // your code here\n  if(n == 0) return res;\n  res.push_back(1);\n  if(n ==\
    \ 1) return res;\n  res.push_back(3);\n  if(n == 2) return res;\n  res.push_back(2);\n\
    \  for(int i = 3; i <= n; i++){\n    if(i % 2 == 0) res.push_back(1 + i / 2);\n\
    \    else res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpvp_6iqxt: /tmp/tmpvp_6iqxt.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102198
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> seq(n\
    \ + 1);\n  if (n < 1) {\n    return {1};\n  }\n  seq[0] = 1;\n  if (n < 2) {\n\
    \    return seq;\n  }\n  seq[1] = 3;\n  if (n < 3) {\n    return seq;\n  }\n \
    \ seq[2] = 2;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n     \
    \ seq[i] = 1 + i / 2;\n    } else {\n      seq[i] = seq[i - 1] + seq[i - 2] +\
    \ seq[i + 1];\n    }\n  }\n  return seq;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpyr6wtm3z: /tmp/tmpyr6wtm3z.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  // your code here\n\
    \  std::vector<long> vec;\n  if(n <= 0)\n    return vec;\n  \n  if(n == 1)\n \
    \   return {1, 3};\n  \n  if(n == 2)\n    return {1, 3, 2};\n  \n  vec.push_back(1);\n\
    \  vec.push_back(3);\n  vec.push_back(2);\n  \n  long i = 3;\n  while(i <= n)\n\
    \  {\n    if(i % 2 == 0)\n      vec.push_back(1 + i / 2);\n    else\n      vec.push_back(vec[i\
    \ - 1] + vec[i - 2] + vec[i + 1]);\n    i++;\n  }\n  \n  return vec;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0jaii7s8: /tmp/tmp0jaii7s8.cpp:49: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n  std::vector<long> arr(n+1);\n\
    \  arr[0] = 0;\n  arr[1] = 1;\n  arr[2] = 3;\n  for(int i = 3; i < n+1; i++){\n\
    \    if(i % 2 == 0){\n      arr[i] = 1 + i / 2;\n    }\n    else{\n      arr[i]\
    \ = arr[i-1] + arr[i-2] + arr[i+1];\n    }\n  }\n  return arr;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpuhelfjr2: /tmp/tmpuhelfjr2.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102197
