name: HumanEval_157_right_angle_triangle
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
  \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
  \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
  bool right_angle_triangle(long a, long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
  \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
  \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
  \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n \
  \   assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8),\
  \ (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
  \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
completions: ["  // We need to find if a triangle with sides of lengths a, b, c is\
    \ a right-angled triangle.\n  // The three sides of a triangle are a, b, c and\
    \ we must satisfy the following\n  // inequalities:\n  // (i) a + b > c\n  //\
    \ (ii) b + c > a\n  // (iii) c + a > b\n  // Note: (i) says that the sum of any\
    \ two sides must be greater than the third side.\n  // Note: the inequalities\
    \ (i), (ii), (iii) say that no two sides of the triangle can be equal.\n  // So,\
    \ for us to have a right-angled triangle:\n  // (i) a + b > c\n  // (ii) b + c\
    \ > a\n  // (iii) c + a > b\n  // (iv) The Pythagorean theorem holds: a^2 + b^2\
    \ = c^2.\n  // (a, b, c) is a right-angled triangle, if and only if all four conditions\
    \ are satisfied.\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return false;\n  }\n\
    \  if (a + b <= c || b + c <= a || c + a <= b) {\n    return false;\n  }\n  if\
    \ (a * a + b * b != c * c) {\n    return false;\n  }\n  return true;", "    //\
    \ Write your code here\n    long* tri = new long[3];\n    tri[0] = a;\n    tri[1]\
    \ = b;\n    tri[2] = c;\n    std::sort(tri, tri+3);\n    long a2 = tri[0]*tri[0];\n\
    \    long b2 = tri[1]*tri[1];\n    long c2 = tri[2]*tri[2];\n    bool result =\
    \ false;\n    if (a2+b2 == c2) {\n        result = true;\n    }\n    return result;",
  "   long sides[] = {a, b, c};\n   std::sort(sides, sides + 3);\n   std::cout <<\
    \ sides[0] << \" \" << sides[1] << \" \" << sides[2] << \"\\n\";\n   return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "    int temp;\n\
    \    if(a > b) {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n\
    \    if(b > c) {\n        temp = b;\n        b = c;\n        c = temp;\n    }\n\
    \    if(a > b) {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    return false;", "    long\
    \ sides[3] = {a, b, c};\n    std::sort(sides, sides + 3);\n    return std::pow(sides[0],\
    \ 2) + std::pow(sides[1], 2) == std::pow(sides[2], 2);", "    // Write your code\
    \ here\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n    long max\
    \ = a;\n    if (max < b)\n        max = b;\n    if (max < c)\n        max = c;\n\
    \    if (max == a)\n        return (max*max == b*b + c*c);\n    else if (max ==\
    \ b)\n        return (max*max == a*a + c*c);\n    else\n        return (max*max\
    \ == a*a + b*b);", "    // Write your code here.\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    int max,mid,min;\n    if(a>b){\n        if(a>c){\n\
    \            max=a;\n            if(b>c){\n                mid=b;\n          \
    \      min=c;\n            }\n            else{\n                mid=c;\n    \
    \            min=b;\n            }\n        }\n        else{\n            max=c;\n\
    \            mid=a;\n            min=b;\n        }\n    }\n    else{\n       \
    \ if(b>c){\n            max=b;\n            if(a>c){\n                mid=a;\n\
    \                min=c;\n            }\n            else{\n                mid=c;\n\
    \                min=a;\n            }\n        }\n        else{\n           \
    \ max=c;\n            mid=b;\n            min=a;\n        }\n    }\n    // cout<<max<<\"\
    \ \"<<mid<<\" \"<<min<<endl;\n    if(max*max==mid*mid+min*min)\n        return\
    \ true;\n    else\n        return false;", "  if (a < 1 || b < 1 || c < 1) return\
    \ false;\n  // Pythagorean theorem\n  std::vector<long> sides = {a, b, c};\n \
    \ std::sort(sides.begin(), sides.end());\n  long side1 = sides[0];\n  long side2\
    \ = sides[1];\n  long side3 = sides[2];\n  if (side1*side1 + side2*side2 == side3*side3)\
    \ return true;\n  return false;", "    long x = a*a;\n    long y = b*b;\n    long\
    \ z = c*c;\n    if (x + y == z) {\n        return true;\n    }\n    if (y + z\
    \ == x) {\n        return true;\n    }\n    if (z + x == y) {\n        return\
    \ true;\n    }\n    return false;", "    std::vector<long> l = {a, b, c};\n  \
    \  std::sort(l.begin(), l.end());\n    return l[0] * l[0] + l[1] * l[1] == l[2]\
    \ * l[2];", "    if(a>b && a>c)\n    {\n        if(a*a==b*b+c*c)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else if(b>a && b>c)\n    {\n        if(b*b==a*a+c*c)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else if(c>a && c>b)\n    {\n  \
    \      if(c*c==a*a+b*b)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }", "  long max_length;\n  bool right_angle_triangle;\n\
    \  max_length = 0;\n  right_angle_triangle = false;\n  // TODO: write your code\
    \ here\n  std::vector<long> vec;\n  vec.push_back(a);\n  vec.push_back(b);\n \
    \ vec.push_back(c);\n  std::sort(vec.begin(), vec.end());\n  a = vec[0];\n  b\
    \ = vec[1];\n  c = vec[2];\n  //std::cout << a << \" \" << b << \" \" << c <<\
    \ \"\\n\";\n  if ((a * a) + (b * b) == (c * c)) {\n    right_angle_triangle =\
    \ true;\n  }\n  //std::cout << right_angle_triangle << \"\\n\";\n  return right_angle_triangle;",
  '    return a*a + b*b == c*c;', '    return (((a*a) + (b*b)) == (c*c));', "  //\
    \ Assume that the provided numbers are greater than zero.\n  // TODO: Implement\
    \ your solution here\n  // Notes:\n  // - You may assume that the given inputs\
    \ are positive values.\n\n  std::vector<long> sides;\n  sides.push_back(a);\n\
    \  sides.push_back(b);\n  sides.push_back(c);\n  std::sort(sides.begin(), sides.end());\n\
    \n  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "    if(a<=0 || b<=0 || c<=0)\n        return false;\n    if(a*a+b*b==c*c || b*b+c*c==a*a\
    \ || c*c+a*a==b*b)\n        return true;\n    return false;", "  // Assert that\
    \ all the parameters are positive integers.\n  assert(a > 0 && b > 0 && c > 0);\n\
    \  // Return true if the condition holds, else false.\n  return pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2);", '    return ((a * a + b * b == c * c) || (a * a + c * c ==
    b * b) || (b * b + c * c == a * a));', "\t// Suppose the hypotenuse is the longest\
    \ side.\n\tif (c*c == a*a + b*b)\n\t\treturn true;\n\t// Suppose the hypotenuse\
    \ is the second-longest side.\n\tif (b*b == a*a + c*c)\n\t\treturn true;\n\t//\
    \ Suppose the hypotenuse is the shortest side.\n\tif (a*a == b*b + c*c)\n\t\t\
    return true;\n\treturn false;", "\t// Edge cases, not valid triangle at all\n\t\
    if (a <= 0 || b <= 0 || c <= 0) return false;\n\tif (a > b+c || b > a+c || c >\
    \ a+b) return false;\n\tif (a == b && b == c) return false;\n\t// Pythagorean\
    \ theorem\n\tlong x = pow(a, 2) + pow(b, 2);\n\tlong y = pow(c, 2);\n\treturn\
    \ x == y;", "    int result = false;\n    if (a > 0 && b > 0 && c > 0) {\n   \
    \     if (a * a + b * b == c * c) {\n            result = true;\n        }\n \
    \       if (a * a + c * c == b * b) {\n            result = true;\n        }\n\
    \        if (b * b + c * c == a * a) {\n            result = true;\n        }\n\
    \    }\n    return result;", '  return a*a + b*b == c*c;', "\t//\n\treturn (a*a+b*b==c*c\
    \ || a*a+c*c==b*b || b*b+c*c==a*a);", "    if (a == 0 || b == 0 || c == 0) return\
    \ false;\n    return (pow(a, 2) + pow(b, 2) == pow(c, 2)) ||\n           (pow(a,\
    \ 2) + pow(c, 2) == pow(b, 2)) ||\n           (pow(b, 2) + pow(c, 2) == pow(a,\
    \ 2));", '  return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;',
  "  int sum = 0;\n  if (a < 0 || b < 0 || c < 0)\n    return false;\n  else if (a\
    \ == 0 || b == 0 || c == 0)\n    return false;\n  else {\n    long arr[3] = {a,\
    \ b, c};\n    std::sort(arr, arr + 3);\n    if (arr[0] * arr[0] + arr[1] * arr[1]\
    \ == arr[2] * arr[2])\n      return true;\n    else\n      return false;\n  }",
  "    long max_value = std::max(a, std::max(b, c));\n    if (max_value == a) {\n\
    \        return pow(b, 2) + pow(c, 2) == pow(a, 2);\n    } else if (max_value\
    \ == b) {\n        return pow(a, 2) + pow(c, 2) == pow(b, 2);\n    } else {\n\
    \        return pow(a, 2) + pow(b, 2) == pow(c, 2);\n    }", "    if (a==0 ||\
    \ b==0 || c==0)\n        return false;\n    else if (a<0 || b<0 || c<0)\n    \
    \    return false;\n    else if (c>=a+b || b>=a+c || a>=b+c)\n        return false;\n\
    \    long a2 = a*a;\n    long b2 = b*b;\n    long c2 = c*c;\n    if (a2==b2+c2\
    \ || b2==a2+c2 || c2==a2+b2)\n        return true;\n    else\n        return false;",
  "  // YOUR CODE GOES HERE\n  return false;", "  std::vector<long> x = {a, b, c};\n\
    \  std::sort(x.begin(), x.end());\n  // The Pythagorean theorem states that a^2\
    \ + b^2 = c^2, where c is the length\n  // of the hypotenuse, and a and b are\
    \ the lengths of the other two sides.\n  // A right triangle is one that has one\
    \ angle equal to 90 degrees, which means\n  // that a^2 + b^2 = c^2 is true. \n\
    \  return x[0] * x[0] + x[1] * x[1] == x[2] * x[2];", "    long sum1 = (a * a)\
    \ + (b * b);\n    long sum2 = (a * a) + (c * c);\n    long sum3 = (b * b) + (c\
    \ * c);\n    if (sum1 == (c * c) || sum2 == (b * b) || sum3 == (a * a))\n    {\n\
    \        return true;\n    }\n    else\n    {\n        return false;\n    }",
  "    // TODO: Write your code here.\n    if (a == 0 || b == 0 || c == 0)\n     \
    \   return false;\n    long count = 0;\n    if (a * a + b * b == c * c)\n    \
    \    count++;\n    if (a * a + c * c == b * b)\n        count++;\n    if (b *\
    \ b + c * c == a * a)\n        count++;\n    return count == 1;", "    // take\
    \ long values and return bool\n    std::vector<long> side_lengths{a, b, c};\n\
    \    // sort side_lengths\n    sort(side_lengths.begin(), side_lengths.end());\n\
    \    // check if side_lengths[0]^2 + side_lengths[1]^2 = side_lengths[2]^2\n \
    \   // return true, else return false\n    return pow(side_lengths[0], 2) + pow(side_lengths[1],\
    \ 2) == pow(side_lengths[2], 2);", "    assert(a>0);\n    assert(b>0);\n    assert(c>0);\n\
    \    std::vector<long> vec{a,b,c};\n    std::sort(vec.begin(), vec.end());\n \
    \   long pythagorean = pow(vec[0],2) + pow(vec[1],2);\n    return (pythagorean\
    \ == pow(vec[2],2));", "    // C++ standard: Don't make the user define a macro\n\
    \    // assert(a > 0 && b > 0 && c > 0);\n    // Note that it is possible to deduce\
    \ the inequality relations\n    // from the lengths of the sides\n    if(a <=\
    \ 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\n    // \"Pythagorean\
    \ theorem\"\n    // The sum of the squares of the lengths of the two sides\n \
    \   // of a right triangle is equal to the square of the length of\n    // the\
    \ hypotenuse.\n    // Theorem:\n    // If a triangle has sides of lengths a, b,\
    \ and c, and c is the\n    // longest side, then:\n    // a * a + b * b = c *\
    \ c\n    // c * c = a * a + b * b\n    if(c * c != a * a + b * b) {\n        return\
    \ false;\n    }\n    return true;", "\t// Write your code here\n\t// To print\
    \ results to the standard output you can use print\n\t// Example: print(\"Hello\
    \ world!\")\n\tlong min, max;\n\tif(a < b) {\n\t\tif(a < c) {\n\t\t\tmin = a;\n\
    \t\t\tif(b < c) {\n\t\t\t\tmax = c;\n\t\t\t} else {\n\t\t\t\tmax = b;\n\t\t\t\
    }\n\t\t} else {\n\t\t\tmin = c;\n\t\t\tmax = b;\n\t\t}\n\t} else {\n\t\tif(b <\
    \ c) {\n\t\t\tmin = b;\n\t\t\tif(a < c) {\n\t\t\t\tmax = c;\n\t\t\t} else {\n\t\
    \t\t\tmax = a;\n\t\t\t}\n\t\t} else {\n\t\t\tmin = c;\n\t\t\tmax = a;\n\t\t}\n\
    \t}\n\treturn (min*min + max*max == (a*a + b*b + c*c - min*min - max*max));",
  "    if(a==0 || b==0 || c==0)\n        return false;\n    else if(a*a + b*b == c*c)\n\
    \        return true;\n    else if(a*a + c*c == b*b)\n        return true;\n \
    \   else if(b*b + c*c == a*a)\n        return true;\n    else\n        return\
    \ false;", '  return std::pow(a, 2) + std::pow(b, 2) == std::pow(c, 2);', "  \
    \  // TODO: Implement Me\n    if (a == 0 || b == 0 || c == 0) {\n        return\
    \ false;\n    }\n    if ((a*a + b*b == c*c) || (b*b + c*c == a*a) || (a*a + c*c\
    \ == b*b)) {\n        return true;\n    }\n    return false;", "    // write your\
    \ code here!\n    return false;", "  // Write your code here\n  if(a*a+b*b==c*c)\n\
    \  return true;\n  if(b*b+c*c==a*a)\n  return true;\n  if(c*c+a*a==b*b)\n  return\
    \ true;\n  return false;", "\tif(a == 0 || b == 0 || c == 0)\n\t\treturn false;\n\
    \tif(a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n\t\treturn true;\n\
    \treturn false;", "  if (a==0 || b==0 || c==0) {\n    return false;\n  }\n  std::vector<long>\
    \ sides{a, b, c};\n  std::sort(sides.begin(), sides.end());\n  long hypotenuse\
    \ = sides[2];\n  long a2 = sides[0] * sides[0];\n  long b2 = sides[1] * sides[1];\n\
    \  long c2 = hypotenuse * hypotenuse;\n  if (a2 + b2 == c2) {\n    return true;\n\
    \  }\n  return false;", "    // printf(\"%ld %ld %ld\\n\", a, b, c);\n    long\
    \ side_large, side_medium, side_small;\n    side_large = std::max(a, std::max(b,\
    \ c));\n    side_small = std::min(a, std::min(b, c));\n    side_medium = (a +\
    \ b + c) - (side_large + side_small);\n    return side_large*side_large == side_medium*side_medium\
    \ + side_small*side_small;", "    if(a == 0 || b == 0 || c == 0)\n        return\
    \ false;\n    if(a >= b && a >= c)\n        return (a*a == b*b + c*c);\n    if(b\
    \ >= a && b >= c)\n        return (b*b == a*a + c*c);\n    return (c*c == a*a\
    \ + b*b);", '    // Fill in the function', "  if(a == 0 || b == 0 || c == 0)\n\
    \    return false;\n  long x[] = {a, b, c};\n  std::sort(x, x+3);\n  if((pow(x[0],\
    \ 2) + pow(x[1], 2)) == pow(x[2], 2)) {\n    return true;\n  }\n  return false;",
  "    // Write your code here\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    else if((a*a)==(b*b)+(c*c))\n        return true;\n    else if((b*b)==(a*a)+(c*c))\n\
    \        return true;\n    else if((c*c)==(a*a)+(b*b))\n        return true;\n\
    \    else\n        return false;", "    if(a<=0||b<=0||c<=0)\n        return false;\n\
    \    if(a*a+b*b==c*c||b*b+c*c==a*a||c*c+a*a==b*b)\n        return true;\n    return\
    \ false;", "    if (a == 0 || b == 0 || c == 0) return false;\n    long side[3]\
    \ = {a, b, c};\n    long pyth[3] = {pow(a, 2), pow(b, 2), pow(c, 2)};\n    std::sort(side,\
    \ side + 3);\n    std::sort(pyth, pyth + 3);\n    if (pyth[0] + pyth[1] == pyth[2])\
    \ return true;\n    return false;", '  return (a*a + b*b == c*c);', "    long\
    \ ab = a*a + b*b;\n    long bc = b*b + c*c;\n    long ac = a*a + c*c;\n    if\
    \ (ab == c*c || bc == a*a || ac == b*b) {\n        return true;\n    }\n    return\
    \ false;", "  // return a*a + b*b == c*c ? true : false;\n  return (a*a + b*b\
    \ == c*c) ? true : false;", "    // define a lambda to convert degrees to radians\n\
    \    auto deg_to_rad = [](long d) { return (d*M_PI)/180; };\n    long sides[]\
    \ = {a, b, c};\n    std::sort(sides, sides+3);\n    a = sides[0];\n    b = sides[1];\n\
    \    c = sides[2];\n    // if the three sides do not form a triangle, then one\
    \ of them is\n    // greater than the sum of the other two\n    if(a + b < c)\
    \ {\n        return false;\n    }\n    // if the longest side is a right angle,\
    \ then the length of the hypotenuse\n    // is always equal to the sum of the\
    \ squares of the other two sides\n    if(c == sqrt(a*a + b*b)) {\n        return\
    \ true;\n    }\n    return false;", '  return a*a + b*b == c*c;', "    // check\
    \ if square root of sum of square of two sides is equal to\n    // the square\
    \ of the third side\n    return (a*a)+(b*b) == (c*c);", "  if(a < 0 || b < 0 ||\
    \ c < 0) return false;\n  if(a == 0 || b == 0 || c == 0) return false;\n  if(a\
    \ == b && b == c) return false;\n  std::vector<long> vals = {a, b, c};\n  std::sort(vals.begin(),\
    \ vals.end());\n  long sum = std::pow(vals[0], 2) + std::pow(vals[1], 2);\n  return\
    \ sum == std::pow(vals[2], 2);", "    // Your code here\n    int flag=0;\n   \
    \ if(a*a==b*b+c*c || b*b==a*a+c*c || c*c==a*a+b*b)\n        flag=1;\n    return\
    \ flag;", "    int max_num = max(a,max(b,c));\n    if(max_num == a){\n       \
    \ return (max_num*max_num) == (b*b + c*c);\n    }\n    else if(max_num == b){\n\
    \        return (max_num*max_num) == (a*a + c*c);\n    }\n    else{\n        return\
    \ (max_num*max_num) == (a*a + b*b);\n    }", "    std::vector<long> sides = {a,\
    \ b, c};\n    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0]\
    \ + sides[1] * sides[1]) == sides[2] * sides[2];", "    std::vector<long> sides\
    \ = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);", "    if ((pow(a, 2) + pow(b, 2))\
    \ == pow(c, 2)) {\n        return true;\n    }\n    return false;", "    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);", "  if (a == 0 || b == 0 || c ==\
    \ 0) return false;\n  if (a == b) {\n    if (c == a*sqrt(2)) {\n      return true;\n\
    \    }\n  }\n  else if (a == c) {\n    if (b == a*sqrt(2)) {\n      return true;\n\
    \    }\n  }\n  else if (b == c) {\n    if (a == b*sqrt(2)) {\n      return true;\n\
    \    }\n  }\n  else if (a < b && a < c) {\n    if (pow(a, 2) + pow(b, 2) == pow(c,\
    \ 2)) {\n      return true;\n    }\n  }\n  else if (b < a && b < c) {\n    if\
    \ (pow(b, 2) + pow(c, 2) == pow(a, 2)) {\n      return true;\n    }\n  }\n  else\
    \ if (c < a && c < b) {\n    if (pow(c, 2) + pow(a, 2) == pow(b, 2)) {\n     \
    \ return true;\n    }\n  }\n  return false;", "  assert(a >= 1 && b >= 1 && c\
    \ >= 1);\n  // return (a > b && a > c && ((a * a) == (b * b) + (c * c))) ||\n\
    \  //         (b > a && b > c && ((b * b) == (a * a) + (c * c))) ||\n  //    \
    \     (c > a && c > b && ((c * c) == (a * a) + (b * b)));\n  return (a > b &&\
    \ a > c && (a * a) == (b * b) + (c * c)) ||\n         (b > a && b > c && (b *\
    \ b) == (a * a) + (c * c)) ||\n         (c > a && c > b && (c * c) == (a * a)\
    \ + (b * b));", "    int x = pow(a,2) + pow(b,2);\n    int y = pow(c,2);\n   \
    \ if(x == y) {\n        return true;\n    } else {\n        return false;\n  \
    \  }", '    return ((a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==
    a*a));', "    if (a<0 || b<0 || c<0)\n        return false;\n    int sq_a = a*a;\n\
    \    int sq_b = b*b;\n    int sq_c = c*c;\n    if (sq_a == sq_b + sq_c || sq_b\
    \ == sq_a + sq_c || sq_c == sq_a + sq_b)\n        return true;\n    return false;",
  "  assert(a > 0 && b > 0 && c > 0);\n  long side1 = std::max(a, b);\n  long side2\
    \ = std::max(a, c);\n  long side3 = std::max(b, c);\n  if (a*a == b*b + c*c ||\
    \ b*b == a*a + c*c || c*c == a*a + b*b)\n    return true;\n  return false;", " \
    \   // C++ is well known for its standard library std::sort\n    std::vector<long>\
    \ vec {a, b, c};\n    std::sort(vec.begin(), vec.end());\n    return vec[0] *\
    \ vec[0] + vec[1] * vec[1] == vec[2] * vec[2];", '    return (a*a + b*b == c*c
    || a*a + c*c == b*b || b*b + c*c == a*a);', "    // Write your code here.\n  \
    \  if((pow(a,2) + pow(b,2)) == pow(c,2)){\n        return true;\n    }\n    else\
    \ if((pow(a,2) + pow(c,2)) == pow(b,2)){\n        return true;\n    }\n    else\
    \ if((pow(b,2) + pow(c,2)) == pow(a,2)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }", '  return (a*a + b*b == c*c || b*b + c*c == a*a
    || c*c + a*a == b*b);', "    // TODO\n    if(a==0 || b==0 || c==0)\n    {\n  \
    \      return false;\n    }\n    else\n    {\n        if(a*a + b*b == c*c)\n \
    \       {\n            return true;\n        }\n        else if(b*b + c*c == a*a)\n\
    \        {\n            return true;\n        }\n        else if(a*a + c*c ==\
    \ b*b)\n        {\n            return true;\n        }\n        else\n       \
    \ {\n            return false;\n        }\n    }", "    long temp;\n    if(a<b)\n\
    \    {\n        temp=a;\n        a=b;\n        b=temp;\n    }\n    if(a<c)\n \
    \   {\n        temp=a;\n        a=c;\n        c=temp;\n    }\n    if(a*a==b*b+c*c)\n\
    \    {\n        return true;\n    }\n    else \n    {\n        return false;\n\
    \    }", "    long max_side = std::max(a, std::max(b, c));\n    long sum_of_other_sides\
    \ = a + b + c - max_side;\n    if (max_side * max_side > sum_of_other_sides *\
    \ sum_of_other_sides) {\n        return false;\n    }\n    return true;", "  \
    \  // long temp;\n    // if(a>b){\n    //     temp = a;\n    //     a = b;\n \
    \   //     b = temp;\n    // }\n    // if(b>c){\n    //     temp = b;\n    //\
    \     b = c;\n    //     c = temp;\n    // }\n    // if(a>b){\n    //     temp\
    \ = a;\n    //     a = b;\n    //     b = temp;\n    // }\n    // return (a*a\
    \ + b*b == c*c);\n    long arr[3] = {a,b,c};\n    std::sort(arr, arr+3);\n   \
    \ return (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]);", "    assert(a>0 &&\
    \ b>0 && c>0);\n    std::vector<long> v{a,b,c};\n    std::sort(v.begin(), v.end());\n\
    \    return v[0]*v[0] + v[1]*v[1] == v[2]*v[2];", "    std::vector<long> sides;\n\
    \    sides.push_back(a);\n    sides.push_back(b);\n    sides.push_back(c);\n \
    \   std::sort(sides.begin(), sides.end());\n    if(sides[0] <= 0 || sides[2] >\
    \ sides[0] + sides[1]) return false;\n    long a2 = sides[0] * sides[0];\n   \
    \ long b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return\
    \ (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2);", "    if (a <= 0 ||\
    \ b <= 0 || c <= 0) return false;\n    if (a * a + b * b == c * c) return true;\n\
    \    if (a * a + c * c == b * b) return true;\n    if (b * b + c * c == a * a)\
    \ return true;\n    return false;", "  if (a==0||b==0||c==0) {\n    return false;\n\
    \  }\n  if (a<0||b<0||c<0) {\n    return false;\n  }\n  long r = pow(a,2)+pow(b,2);\n\
    \  long s = pow(c,2);\n  if (r==s) {\n    return true;\n  }\n  r = pow(a,2)+pow(c,2);\n\
    \  s = pow(b,2);\n  if (r==s) {\n    return true;\n  }\n  r = pow(b,2)+pow(c,2);\n\
    \  s = pow(a,2);\n  if (r==s) {\n    return true;\n  }\n  return false;", "  \
    \  assert(a > 0 && b > 0 && c > 0);\n    // TODO: implement\n    if (a*a == b*b\
    \ + c*c || b*b == a*a + c*c || c*c == a*a + b*b) {\n        return true;\n   \
    \ }\n    return false;", "    return (a * a + b * b == c * c || a * a + c * c\
    \ == b * b ||\n            b * b + c * c == a * a);", "    if(a<=0 || b<=0 ||\
    \ c<=0)\n        return false;\n    std::vector<long> vec{a,b,c};\n    std::sort(vec.begin(),\
    \ vec.end());\n    return (vec[0]*vec[0]+vec[1]*vec[1]==vec[2]*vec[2]);", "  \
    \  if(a < 0 || b < 0 || c < 0)\n        return false;\n    if(a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long i = std::max(a, std::max(b, c));\n\
    \    long j = std::min(a, std::min(b, c));\n    long k = a + b + c - i - j;\n\
    \    if(pow(i, 2) == pow(j, 2) + pow(k, 2))\n        return true;\n    return\
    \ false;", "    if (a == b && b == c) return false;\n    if (a < 0 || b < 0 ||\
    \ c < 0) return false;\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long max = a;\n    if (b > max) max = b;\n    if (c > max) max = c;\n    if\
    \ (max == a) {\n        return ((b * b) + (c * c)) == (a * a);\n    } else if\
    \ (max == b) {\n        return ((a * a) + (c * c)) == (b * b);\n    } else {\n\
    \        return ((a * a) + (b * b)) == (c * c);\n    }", '   return(a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a);',
  "    // true if the three sides form a right-angled triangle, false otherwise.\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);",
  "  assert(a>0 && b>0 && c>0);\n  long arr[3] = {a, b, c};\n  sort(arr, arr+3);\n\
    \  if (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n    return true;\n  return\
    \ false;", "    // Write your code here\n    // To print results to the standard\
    \ output you can use cout\n    // Example: cout << \"Hello world!\";\n    if (a\
    \ * a + b * b == c * c)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n    ", "    if(a <= 0 || b <= 0 || c <= 0)\n  \
    \      return false;\n    long long x = a, y = b, z = c;\n    return (x*x + y*y\
    \ == z*z) || (x*x + z*z == y*y) || (z*z + y*y == x*x);", "    // Write your code\
    \ here\n    long c1=a*a;\n    long c2=b*b;\n    long c3=c*c;\n    return (c1+c2)==c3;",
  "    // Write your code here.\n    assert(a >= 0 && b >= 0 && c >= 0);\n    // Using\
    \ property of pythagorean triplets, the sum of squares of 2 sides\n    // is equal\
    \ to square of the third side\n    long arr[3] = {a*a, b*b, c*c};\n    std::sort(arr,\
    \ arr+3);\n    return arr[0] + arr[1] == arr[2];", "    long temp = a;\n    long\
    \ max = 0;\n    if(b > a) {\n        max = b;\n        a = b;\n        b = temp;\n\
    \    }\n    if(c > a) {\n        max = c;\n        a = c;\n        c = temp;\n\
    \    }\n    if(c > b) {\n        max = c;\n        a = b;\n        b = c;\n  \
    \      c = temp;\n    }\n    return (max*max == a*a + b*b);", '  ', "  assert(a\
    \ > 0 && b > 0 && c > 0);\n  if (a > b && a > c) {\n    return a * a == b * b\
    \ + c * c;\n  } else if (b > a && b > c) {\n    return b * b == a * a + c * c;\n\
    \  } else {\n    return c * c == a * a + b * b;\n  }", '    return (a * a + b
    * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);', "   \
    \ if(a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n    if(a > b\
    \ && a > c) {\n        return (a*a == b*b + c*c);\n    }\n    if(b > a && b >\
    \ c) {\n        return (b*b == a*a + c*c);\n    }\n    if(c > a && c > b) {\n\
    \        return (c*c == a*a + b*b);\n    }\n    return false;", '    // TODO:
    your code goes here', "    // return pow(a, 2) + pow(b, 2) == pow(c, 2);\n   \
    \ return pow(a, 2) + pow(b, 2) == pow(c, 2);", "\tassert(a>0 && b>0 && c>0);\n\
    \tif (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;", "    long sides[3] = {a, b, c};\n    sort(sides,\
    \ sides + 3);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];", '    return c*c == a*a + b*b;', "    std::vector<long> v{a, b,\
    \ c};\n    std::sort(v.begin(), v.end());\n    return v[0] * v[0] + v[1] * v[1]\
    \ == v[2] * v[2];", "    if(a == 0 || b == 0 || c == 0) {\n        return false;\n\
    \    }\n    if(a + b > c && a + c > b && b + c > a) {\n        if(pow(a, 2) +\
    \ pow(b, 2) == pow(c, 2) || pow(b, 2) + pow(c, 2) == pow(a, 2) || pow(a, 2) +\
    \ pow(c, 2) == pow(b, 2)) {\n            return true;\n        }\n    }\n    return\
    \ false;", "  // TODO: Implement this function.\n\tif(a*a+b*b==c*c)\n\t{\n\t\t\
    return true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}", "  std::vector<long>\
    \ v = {a, b, c};\n  std::sort(v.begin(), v.end());\n  return std::pow(v[0], 2)\
    \ + std::pow(v[1], 2) == std::pow(v[2], 2);", "\treturn pow(a, 2) + pow(b, 2)\
    \ == pow(c, 2);", "  if(a <= 0 || b <= 0 || c <= 0) return false;\n  long x =\
    \ std::max(a, std::max(b, c));\n  if(std::pow(x, 2) == std::pow(a, 2) + std::pow(b,\
    \ 2) + std::pow(c, 2) - std::pow(x, 2)) return true;\n  return false;", "    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    return ((v[0] * v[0]) + (v[1] * v[1])) == (v[2] * v[2]);", " \
    \   if(a == 0 || b == 0 || c == 0)\n        return false;\n    long m = max(a,max(b,c));\n\
    \    long sum = a+b+c;\n    long msq = m*m;\n    if(msq == sum-msq)\n        return\
    \ true;\n    return false;", "    if (a > b && a > c) {\n        return a * a\
    \ == b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b ==\
    \ a * a + c * c;\n    } else {\n        return c * c == a * a + b * b;\n    }",
  "    // The sum of the squares of the two smaller sides is equal to the square\n\
    \    // of the third side.\n    // a^2 + b^2 = c^2\n    // So, checking if (a^2\
    \ + b^2) == c^2 return true\n    if(pow(a, 2) + pow(b, 2) == pow(c, 2)) {\n  \
    \      return true;\n    } else {\n        return false;\n    }", "  if (a > b\
    \ && a > c) {\n    return (a * a == b * b + c * c);\n  } else if (b > a && b >\
    \ c) {\n    return (b * b == a * a + c * c);\n  } else {\n    return (c * c ==\
    \ a * a + b * b);\n  }", "  // Write your code here.\n  if(a<=0 || b<=0 || c<=0)\n\
    \    return false;\n  std::vector<long> temp = {a,b,c};\n  std::sort(temp.begin(),temp.end());\n\
    \  // Pythagoras theorem, a^2 + b^2 = c^2\n  if(temp[0]*temp[0] + temp[1]*temp[1]\
    \ == temp[2]*temp[2])\n    return true;\n  return false;", "  long sides[] = {a,\
    \ b, c};\n  sort(sides, sides + 3);\n  long max_side = sides[2];\n  long other_sides\
    \ = sides[0] * sides[0] + sides[1] * sides[1];\n  return max_side * max_side ==\
    \ other_sides;", "\t// Your code here\n\t// a<b<c\n\tlong arr[3] = {a,b,c};\n\t\
    std::sort(arr, arr+3);\n\tif(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]){\n\
    \t\treturn true;\n\t}\n\treturn false;", "    // Formulas for finding the hypotenuse:\n\
    \    // a^2 + b^2 = c^2\n    // c^2 = a^2 + b^2\n    // c = sqrt(a^2 + b^2)\n\
    \    // We need to solve for c in order to find the hypotenuse.\n    // if (c\
    \ == sqrt(a^2 + b^2)) then a right-angled triangle is formed.\n    bool isRightAngleTriangle\
    \ = false;\n    if (a < b && a < c) {\n        isRightAngleTriangle = (a*a + b*b\
    \ == c*c);\n    } else if (b < a && b < c) {\n        isRightAngleTriangle = (b*b\
    \ + a*a == c*c);\n    } else if (c < a && c < b) {\n        isRightAngleTriangle\
    \ = (c*c + a*a == b*b);\n    }\n    return isRightAngleTriangle;", "    double\
    \ x=pow(a,2);\n    double y=pow(b,2);\n    double z=pow(c,2);\n    double temp=x+y;\n\
    \    if(z==temp)\n        return true;\n    return false;", "\tlong sides[3] =\
    \ {a, b, c};\n\tstd::sort(sides, sides + 3);\n\tif (sides[0] <= 0 || sides[2]\
    \ >= sides[0] + sides[1]) {\n\t\treturn false;\n\t}\n\tif (sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;", "\tif (a<=0 || b<=0 || c<=0)\n\t\treturn false;\n\treturn (a*a == b*b\
    \ + c*c || b*b == a*a + c*c || c*c == a*a + b*b);", "  // BEGIN\n  // return false;\n\
    \  // END\n  return (a*a+b*b==c*c) || (a*a+c*c==b*b) || (b*b+c*c==a*a);", "  //\
    \ your code goes here\n  if(a + b > c && a + c > b && b + c > a)\n    return true;\n\
    \  return false;", "    // if(a>0 && b>0 && c>0)\n    // {\n    //     a=a*a;\n\
    \    //     b=b*b;\n    //     c=c*c;\n    //     if(a+b==c)\n    //     {\n \
    \   //         return true;\n    //     }\n    //     else if(a+c==b)\n    //\
    \     {\n    //         return true;\n    //     }\n    //     else if(b+c==a)\n\
    \    //     {\n    //         return true;\n    //     }\n    //     else\n  \
    \  //     {\n    //         return false;\n    //     }\n    // }\n    // else\n\
    \    // {\n    //     return false;\n    // }\n   long aa = a*a;\n   long bb =\
    \ b*b;\n   long cc = c*c;\n   if (aa+bb==cc)\n   {\n       return true;\n   }\n\
    \   else if (aa+cc==bb)\n   {\n       return true;\n   }\n   else if (bb+cc==aa)\n\
    \   {\n       return true;\n   }\n   else\n   {\n       return false;\n   }",
  "    assert(a>0);\n    assert(b>0);\n    assert(c>0);\n    if (a*a + b*b == c*c\
    \ || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return false;",
  "  std::vector<long> v{a, b, c};\n  std::sort(v.begin(), v.end());\n  return v[0]\
    \ * v[0] + v[1] * v[1] == v[2] * v[2];", "    // Your code here\n    std::vector<long>\
    \ triangle;\n    triangle.push_back(a);\n    triangle.push_back(b);\n    triangle.push_back(c);\n\
    \    std::sort(triangle.begin(), triangle.end());\n    if(pow(triangle[0], 2)\
    \ + pow(triangle[1], 2) == pow(triangle[2], 2)){\n        return true;\n    }else{\n\
    \        return false;\n    }", '    return a*a + b*b == c*c;', "\treturn ((a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a));", "\tint max = a;\n\
    \tif (b > max) max = b;\n\tif (c > max) max = c;\n\tif (max == a) {\n\t\tif (b*b\
    \ + c*c == a*a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\telse if (max == b) {\n\t\t\
    if (a*a + c*c == b*b) {\n\t\t\treturn true;\n\t\t}\n\t}\n\telse if (max == c)\
    \ {\n\t\tif (a*a + b*b == c*c) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
  '    return a*a + b*b == c*c;', "    assert(a > 0 && b > 0 && c > 0);\n    std::vector<long>\
    \ tri(3);\n    tri[0] = a;\n    tri[1] = b;\n    tri[2] = c;\n    std::sort(tri.begin(),\
    \ tri.end());\n    return pow(tri[0], 2) + pow(tri[1], 2) == pow(tri[2], 2);",
  "  long x = std::max(a, std::max(b, c));\n  long y = std::min(a, std::min(b, c));\n\
    \  long z = a + b + c - x - y;\n  return (x * x) == (y * y + z * z);", "  // TODO:\
    \ Write - Your - Code\n  long x = a*a;\n  long y = b*b;\n  long z = c*c;\n  if(x+y==z\
    \ || x+z==y || y+z==x)\n    return true;\n  else\n    return false;", "  std::vector<long>\
    \ sides;\n  sides.push_back(a);\n  sides.push_back(b);\n  sides.push_back(c);\n\
    \  std::sort(sides.begin(), sides.end());\n  if (sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]) {\n    return true;\n  }\n  return false;",
  "  if (c > a && c > b) {\n    return c * c == a * a + b * b;\n  } else if (b > a\
    \ && b > c) {\n    return b * b == a * a + c * c;\n  } else {\n    return a *\
    \ a == b * b + c * c;\n  }", "    if(a*a == b*b + c*c || b*b == a*a + c*c || c*c\
    \ == a*a + b*b)\n        return true;\n    return false;", "    // TODO: return\
    \ true if the three sides form a right-angled triangle,\n    // false otherwise.\n\
    \tif(a*a + b*b == c*c){\n\t\treturn true;\n\t}else if(a*a + c*c == b*b){\n\t\t\
    return true;\n\t}else if(b*b + c*c == a*a){\n\t\treturn true;\n\t}else{\n\t\t\
    return false;\n\t}", "    int flag = 0;\n    vector<long> v{a, b, c};\n    sort(v.begin(),\
    \ v.end());\n    for (int i = 0; i < 3; i++) {\n        v[i] = v[i] * v[i];\n\
    \    }\n    if (v[0] + v[1] == v[2]) {\n        flag = 1;\n    }\n    return flag;",
  "    assert(a > 0 && b > 0 && c > 0);\n    return ((a * a + b * b == c * c) || (a\
    \ * a + c * c == b * b) || (b * b + c * c == a * a));", "\t// check to see that\
    \ the longest side is less than the sum of the other two sides\n\t// if a is the\
    \ longest side\n\tif (a > b && a > c) {\n\t\tif (pow(a, 2) == pow(b, 2) + pow(c,\
    \ 2)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// if b is the longest side\n\telse\
    \ if (b > a && b > c) {\n\t\tif (pow(b, 2) == pow(a, 2) + pow(c, 2)) {\n\t\t\t\
    return true;\n\t\t}\n\t}\n\t// if c is the longest side\n\telse if (c > a && c\
    \ > b) {\n\t\tif (pow(c, 2) == pow(a, 2) + pow(b, 2)) {\n\t\t\treturn true;\n\t\
    \t}\n\t}\n\treturn false;", "    long temp;\n    if(a < b){\n        temp = a;\n\
    \        a = b;\n        b = temp;\n    }\n    if(a < c){\n        temp = a;\n\
    \        a = c;\n        c = temp;\n    }\n    if(b < c){\n        temp = b;\n\
    \        b = c;\n        c = temp;\n    }\n    return (pow(a, 2) == pow(b, 2)\
    \ + pow(c, 2));", "\t// Write your code here", "    bool result;\n    int a2 =\
    \ a*a;\n    int b2 = b*b;\n    int c2 = c*c;\n    if(a2+b2==c2 || a2+c2==b2 ||\
    \ b2+c2==a2) {\n        result = true;\n    } else {\n        result = false;\n\
    \    }\n    return result;", "  // check if the sum of two sides is equal to third\
    \ side\n  // check if any one side is equal to square root of sum of squares of\
    \ other two sides\n  return ((a*a+b*b)==c*c || (a*a+c*c)==b*b || (b*b+c*c)==a*a);",
  '    // Write your code here!', "    // Write your code here\n    return true;",
  "  // Your code here\n  return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);", "    // WRITE YOUR CODE BELOW THIS LINE\n    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n    // WRITE YOUR\
    \ CODE ABOVE THIS LINE", "    // if the sum of squares of any two sides is equal\
    \ to the square of the\n    // other side then it is a right angle triangle\n\
    \    long sum1 = a*a + b*b;\n    long sum2 = a*a + c*c;\n    long sum3 = b*b +\
    \ c*c;\n    if (sum1 == c*c || sum2 == b*b || sum3 == a*a) {\n        return true;\n\
    \    }\n    return false;", "  if (a <= 0 || b <= 0 || c <= 0) {\n    return false;\n\
    \  }\n  if (a == sqrt(b * b + c * c) || b == sqrt(a * a + c * c) ||\n      c ==\
    \ sqrt(a * a + b * b)) {\n    return true;\n  }\n  return false;", "\t// Given\
    \ three sides a, b, c, return if the third side is the longest side.\n\tif (a*a\
    \ + b*b == c*c)\n\t\treturn true;\n\tif (b*b + c*c == a*a)\n\t\treturn true;\n\
    \tif (c*c + a*a == b*b)\n\t\treturn true;\n\treturn false;", "    // Fill up this\
    \ function.\n    // Assume each side of triangle is not equal to 0.\n    std::sort(std::begin({a,\
    \ b, c}), std::end({a, b, c}));\n    return a * a + b * b == c * c;", "    if(a*a\
    \ + b*b == c*c) return true;\n    if(a*a + c*c == b*b) return true;\n    if(b*b\
    \ + c*c == a*a) return true;\n    return false;", "  long x[3] = {a, b, c};\n\
    \  std::sort(x, x+3);\n  return (x[0]*x[0] + x[1]*x[1] == x[2]*x[2]);", "    if\
    \ (a > 0 && b > 0 && c > 0) {\n        if (a*a + b*b == c*c) {\n            return\
    \ true;\n        }\n        else if (a*a + c*c == b*b) {\n            return true;\n\
    \        }\n        else if (b*b + c*c == a*a) {\n            return true;\n \
    \       }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }", "  assert(a > 0 && b > 0 && c > 0);\n  if\
    \ (a == 0 || b == 0 || c == 0) return false;\n  else if (a + b <= c || a + c <=\
    \ b || b + c <= a) return false;\n  long max_side = std::max(a, std::max(b, c));\n\
    \  long sum_of_other_sides = a + b + c - max_side;\n  return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;", '  return false;', '    return
    (a*a)+(b*b)==(c*c);', "  //  square of all the sides and find the biggest one\n\
    \  long s1=a*a;\n  long s2=b*b;\n  long s3=c*c;\n  if(s1>s2&&s1>s3)\n  {\n   \
    \ return(s1==s2+s3);\n  }\n  else if(s2>s1&&s2>s3)\n  {\n    return(s2==s1+s3);\n\
    \  }\n  else if(s3>s1&&s3>s2)\n  {\n    return(s3==s1+s2);\n  }\n  else\n  {\n\
    \    return false;\n  }", "  long sides[3] = {a, b, c};\n  std::sort(sides, sides\
    \ + 3);\n  a = sides[0];\n  b = sides[1];\n  c = sides[2];\n  return a * a + b\
    \ * b == c * c;", "    long tri_sides[3] = {a, b, c};\n    std::sort(tri_sides,\
    \ tri_sides + 3);\n    if (tri_sides[0] * tri_sides[0] + tri_sides[1] * tri_sides[1]\
    \ == tri_sides[2] * tri_sides[2]) {\n        return true;\n    }\n    return false;",
  "  if (a * a + b * b == c * c) {\n    return true;\n  } else if (a * a + c * c ==\
    \ b * b) {\n    return true;\n  } else if (b * b + c * c == a * a) {\n    return\
    \ true;\n  } else {\n    return false;\n  }", "\tif(a < 0 || b < 0 || c < 0)\n\
    \t\treturn false;\n\tif(a > b && a > c)\n\t\treturn pow(a, 2) == pow(b, 2) + pow(c,\
    \ 2);\n\telse if(b > a && b > c)\n\t\treturn pow(b, 2) == pow(a, 2) + pow(c, 2);\n\
    \telse if(c > a && c > b)\n\t\treturn pow(c, 2) == pow(a, 2) + pow(b, 2);\n\t\
    else\n\t\treturn false;", "\tassert(a>0 && b>0 && c>0);\n\tif(c*c==a*a+b*b)\n\t\
    \treturn true;\n\telse\n\t\treturn false;", "    assert(a > 0 && b > 0 && c >\
    \ 0);\n    return (a * a == b * b + c * c) || (b * b == a * a + c * c) || (c *\
    \ c == a * a + b * b);", "    //a>=b>=c\n    if(a<b){\n        long temp=a;\n\
    \        a=b;\n        b=temp;\n    }\n    if(b<c){\n        long temp=b;\n  \
    \      b=c;\n        c=temp;\n    }\n    if(a<b){\n        long temp=a;\n    \
    \    a=b;\n        b=temp;\n    }\n    if(a*a==b*b+c*c){\n        return true;\n\
    \    }\n    return false;", "\t// TODO\n\tif(a > b && a > c) {\n\t\tif(b*b + c*c\
    \ == a*a)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse if(b\
    \ > a && b > c) {\n\t\tif(a*a + c*c == b*b)\n\t\t\treturn true;\n\t\telse\n\t\t\
    \treturn false;\n\t}\n\telse if(c > a && c > b) {\n\t\tif(a*a + b*b == c*c)\n\t\
    \t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;",
  '    return ((a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c
    * c == a * a));', "  int temp;\n  if (a < b) {\n    temp = a;\n    a = b;\n  \
    \  b = temp;\n  }\n  if (a < c) {\n    temp = a;\n    a = c;\n    c = temp;\n\
    \  }\n  if (b < c) {\n    temp = b;\n    b = c;\n    c = temp;\n  }\n  return\
    \ a * a == b * b + c * c;", '    // your code goes here...', '    return (a*a+b*b==c*c
    || a*a+c*c==b*b || b*b+c*c==a*a);', "    if(a > 0 && b > 0 && c > 0) {\n     \
    \   if(a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n           \
    \ return true;\n    }\n    return false;", '  return ((a * a + b * b == c * c)
    || (a * a + c * c == b * b) || (b * b + c * c == a * a));', "  //YOUR CODE HERE\n\
    \    long max = 0;\n    long count = 0;\n    if(a>b){\n      if(a>c){\n      \
    \  max = a;\n        if(max == pow(b,2) + pow(c,2)){\n          count++;\n   \
    \     }\n      }\n      else{\n        max = c;\n        if(max == pow(b,2) +\
    \ pow(a,2)){\n          count++;\n        }\n      }\n    }\n    else{\n     \
    \ if(b>c){\n        max = b;\n        if(max == pow(a,2) + pow(c,2)){\n      \
    \    count++;\n        }\n      }\n      else{\n        max = c;\n        if(max\
    \ == pow(b,2) + pow(a,2)){\n          count++;\n        }\n      }\n    }\n  \
    \  if(count == 1){\n      return true;\n    }\n    else{\n      return false;\n\
    \    }", "  // We can assume that a is smallest\n  std::vector<long> sides = {a,\
    \ b, c};\n  std::sort(sides.begin(), sides.end());\n  return (pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2));", "\t// CPP solution\n\t// long a,\
    \ b, c;\n\t// if (a > 0 && b > 0 && c > 0) {\n\t// \tif (a*a + b*b == c*c || b*b\
    \ + c*c == a*a || c*c + a*a == b*b) {\n\t// \t\treturn true;\n\t// \t}\n\t// }\n\
    \t// return false;\n\n\t// Python Solution\n\t// a, b, c = sorted([a, b, c])\n\
    \t// return a > 0 and b > 0 and c > 0 and a * a + b * b == c * c\n\n\t// C solution\n\
    \t// TODO\n\treturn false;", "    if (a > b && a > c) {\n        return pow(a,\
    \ 2) == pow(b, 2) + pow(c, 2);\n    } else if (b > a && b > c) {\n        return\
    \ pow(b, 2) == pow(a, 2) + pow(c, 2);\n    } else {\n        return pow(c, 2)\
    \ == pow(a, 2) + pow(b, 2);\n    }", "    // Write your code here...\n    if (a==0\
    \ or b==0 or c==0)\n        return false;\n    long s = a+b+c;\n    if (s==180)\n\
    \        return true;\n    return false;", "    // check input\n    assert(a >\
    \ 0 && b > 0 && c > 0);\n    // sort the sides to make a the longest side\n  \
    \  if (a < b) {\n        std::swap(a, b);\n    }\n    if (a < c) {\n        std::swap(a,\
    \ c);\n    }\n    return a * a == b * b + c * c;", "  long arr[3] = {a, b, c};\n\
    \  std::sort(arr, arr + 3);\n  return (arr[0] * arr[0] + arr[1] * arr[1] == arr[2]\
    \ * arr[2]);", '    // Write your code here.', "    assert(a >= 0 && b >= 0 &&\
    \ c >= 0);\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]);", "    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c == b*b)\
    \ return true;\n    if(b*b + c*c == a*a) return true;\n    return false;", " \
    \   assert(a>0&&b>0&&c>0);\n    int sum = a*a + b*b;\n    if(c*c == sum)\n   \
    \     return true;\n    return false;", "    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr + 3);\n    if (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]) return true;\n\
    \    return false;", "\t", "    // find hypotenuse\n    long long h = -1;\n  \
    \  long long hypo = std::max(a, std::max(b, c));\n    if (hypo == a) h = 0;\n\
    \    else if (hypo == b) h = 1;\n    else h = 2;\n    long long t1 = a, t2 = b,\
    \ t3 = c;\n    if (h == 0) {\n        t1 = b;\n        t2 = c;\n    } else if\
    \ (h == 1) {\n        t1 = a;\n        t2 = c;\n    } else {\n        t1 = a;\n\
    \        t2 = b;\n    }\n    return (hypo * hypo == t1 * t1 + t2 * t2);", "\t\
    long x = std::max(a, std::max(b, c));\n\treturn (x * x == a * a + b * b + c *\
    \ c - x * x);", "\t// WRITE YOUR CODE HERE\n\tif(a>b && a>c)\n\t{\n\t\tif(a*a==b*b+c*c)\n\
    \t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse if(b>a && b>c)\n\
    \t{\n\t\tif(b*b==a*a+c*c)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\
    \t}\n\telse if(c>a && c>b)\n\t{\n\t\tif(c*c==a*a+b*b)\n\t\t\treturn true;\n\t\t\
    else\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;", "    int arr[3] =\
    \ {a, b, c};\n    std::sort(arr, arr+3);\n    if (pow(arr[0], 2) + pow(arr[1],\
    \ 2) == pow(arr[2], 2)) return true;\n    return false;", "    long x = std::max(a,\
    \ b);\n    long y = std::max(b, c);\n    long z = std::max(a, c);\n    //printf(\"\
    x: %ld\\n\", x);\n    //printf(\"y: %ld\\n\", y);\n    //printf(\"z: %ld\\n\"\
    , z);\n    if (z * z == x * x + y * y) {\n        return true;\n    }\n    return\
    \ false;", "  // Finding the longest side\n  long longest_side = std::max(std::max(a,\
    \ b), c);\n  // Finding other two sides\n  long smaller_sides = (a + b + c) -\
    \ longest_side;\n  // Calculating square of sides\n  long a_square = a * a;\n\
    \  long b_square = b * b;\n  long c_square = c * c;\n  // Identifying the longest\
    \ side\n  if (longest_side == a) {\n    // If longest side is a then other two\
    \ sides are b and c\n    return a_square == (b_square + c_square);\n  } else if\
    \ (longest_side == b) {\n    // If longest side is b then other two sides are\
    \ a and c\n    return b_square == (a_square + c_square);\n  } else {\n    // If\
    \ longest side is c then other two sides are a and b\n    return c_square == (a_square\
    \ + b_square);\n  }", "    // write your code here\n    return false;", "\tif\
    \ (a > b && a > c) {\n\t\tif (pow(a, 2) == pow(b, 2) + pow(c, 2))\n\t\t\treturn\
    \ true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse if (b > a && b > c) {\n\t\t\
    if (pow(b, 2) == pow(a, 2) + pow(c, 2))\n\t\t\treturn true;\n\t\telse\n\t\t\t\
    return false;\n\t}\n\telse if (c > a && c > b) {\n\t\tif (pow(c, 2) == pow(a,\
    \ 2) + pow(b, 2))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\t\
    else\n\t\treturn false;", "    // TODO: Write your code here\n    if(a==0 || b==0\
    \ || c==0)\n        return false;\n    long max_side = std::max(a, std::max(b,\
    \ c));\n    long side1 = std::min(a, b);\n    long side2 = std::max(a, b);\n \
    \   if(side1 + side2 <= max_side)\n        return false;\n    if(pow(max_side,\
    \ 2) == pow(side1, 2) + pow(side2, 2))\n        return true;\n    return false;",
  "    // If (sqrt(a) + sqrt(b)) = sqrt(c)\n    // then its a right angled triangle\n\
    \    double x = a*a + b*b;\n    double y = c*c;\n    if (fabs(x - y) < 0.00001)\
    \ {\n        return true;\n    }\n    return false;", "    if(a > 0 && b > 0 &&\
    \ c > 0) {\n        long arr[3] = {a, b, c};\n        std::sort(arr, arr + 3);\n\
    \        if((arr[0] * arr[0]) + (arr[1] * arr[1]) == (arr[2] * arr[2])) return\
    \ true;\n    }\n    return false;", '  return (a + b > c && a + c > b && b + c
    > a) ? true : false;', "    if (a < 0 || b < 0 || c < 0) {\n        return false;\n\
    \    }\n    // Using Pythagorean Theorem to check\n    return pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2) ||\n            pow(a, 2) + pow(c, 2) == pow(b, 2) ||\n    \
    \        pow(b, 2) + pow(c, 2) == pow(a, 2);"]
stop_tokens:
- "\n}"
