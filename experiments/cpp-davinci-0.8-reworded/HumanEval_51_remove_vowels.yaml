name: HumanEval_51_remove_vowels
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function\
  \ that takes string and returns string without vowels.\n// >>> remove_vowels((\"\
  \"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"\
  aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"\
  zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"\
  ));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"\
  eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"\
  EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
completions: ["\t\t\n\t\tstd::string str;\n\t\tstd::string str1;\n\t\tint n=text.length();\n\
    \t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\t\n\t\t\tif(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\n\
    \t\t\t{\n\t\t\t\tstr+=text[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;", "  std::string\
    \ newString = \"\";\n  for (int i = 0; i < text.length(); i++) {\n    char ch\
    \ = text[i];\n    // Add all the characters other than vowels to the string.\n\
    \    if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch !=\
    \ 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n      newString\
    \ += ch;\n    }\n  }\n  return newString;", "\tstd::set<char> vowels;\n\tvowels.insert('a');\n\
    \tvowels.insert('e');\n\tvowels.insert('i');\n\tvowels.insert('o');\n\tvowels.insert('u');\n\
    \tvowels.insert('A');\n\tvowels.insert('E');\n\tvowels.insert('I');\n\tvowels.insert('O');\n\
    \tvowels.insert('U');\n\tstd::string no_vowels = \"\";\n\tfor (int i = 0; i <\
    \ text.length(); i++) {\n\t\tif (vowels.find(text[i]) == vowels.end()) {\n\t\t\
    \tno_vowels += text[i];\n\t\t}\n\t}\n\treturn no_vowels;", "\tstd::string a =\
    \ \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n\t\t\ta += text[i];\n\t\t}\n\t}\n\treturn a;", "\tstring result = \"\";\n\
    \tfor (char i : text) {\n\t\tif (i != 'a' && i != 'A' && i != 'e' && i != 'E'\
    \ && i != 'i' && i != 'I' && i != 'o' && i != 'O' && i != 'u' && i != 'U') {\n\
    \t\t\tresult = result + i;\n\t\t}\n\t}\n\treturn result;", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos) {\n\t\t\ttemp +=\
    \ text[i];\n\t\t}\n\t}\n\treturn temp;", "   std::string new_string = \"\";\n\
    \   int length = text.length();\n   char ch;\n   for (int i = 0; i < length; i++)\
    \ {\n      ch = text[i];\n      if ( ch != 'a' && ch != 'e' && ch != 'i' && ch\
    \ != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch\
    \ != 'U') {\n         new_string += ch;\n      }\n   }\n   return new_string;",
  "\tstd::string result=\"\";\n\tfor(int i=0;i<text.length();i++){\n\t\tif(text[i]!='a'\
    \ && text[i]!='e' && text[i]!='i' && text[i]!='o' && text[i]!='u' && text[i]!='A'\
    \ && text[i]!='E' && text[i]!='I' && text[i]!='O' && text[i]!='U'){\n\t\t\tresult+=text[i];\n\
    \t\t}\n\t}\n\treturn result;", "    std::transform(text.begin(), text.end(), text.begin(),\
    \ ::tolower);\n    // std::cout << text << std::endl;\n    std::size_t found =\
    \ text.find(\"a\");\n    while (found != std::string::npos) {\n        text.erase(found,\
    \ 1);\n        found = text.find(\"a\");\n    }\n    found = text.find(\"e\");\n\
    \    while (found != std::string::npos) {\n        text.erase(found, 1);\n   \
    \     found = text.find(\"e\");\n    }\n    found = text.find(\"i\");\n    while\
    \ (found != std::string::npos) {\n        text.erase(found, 1);\n        found\
    \ = text.find(\"i\");\n    }\n    found = text.find(\"o\");\n    while (found\
    \ != std::string::npos) {\n        text.erase(found, 1);\n        found = text.find(\"\
    o\");\n    }\n    found = text.find(\"u\");\n    while (found != std::string::npos)\
    \ {\n        text.erase(found, 1);\n        found = text.find(\"u\");\n    }\n\
    \    return text;", "  std::string answer = \"\";\n  for (int i = 0; i < text.length();\
    \ i++) {\n    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n      answer += text[i];\n    }\n  }\n\
    \  return answer;", "    std::string res;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            res.push_back(text[i]);\n\
    \        }\n    }\n    return res;", "    int t = text.length();\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < t; i++) {\n        if (text[i] != 'a'\
    \ && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   for(int i=0;i<text.length();i++)\n    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            text.erase(i,1);\n            i--;\n        }\n    }\n\
    \    return text;", "    std::string result = \"\";\n    for (char c : text) {\n\
    \        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c !=\
    \ 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result +=\
    \ c;\n        }\n    }\n    return result;", "\tstd::string s;\n\tfor (int i =\
    \ 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\ts += text[i];\n\
    \t\t}\n\t}\n\treturn s;", "\tstatic std::set<char> const vowels{'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\tstd::string result{};\n\tfor (auto c\
    \ : text) {\n\t\tif (vowels.find(c) == vowels.end()) {\n\t\t\tresult += c;\n\t\
    \t}\n\t}\n\treturn result;", "    std::string res = \"\";\n    for (auto ch: text)\
    \ {\n        if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'\
    \ && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n      \
    \      res.push_back(ch);\n        }\n    }\n    return res;", "    char vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string result;\n\
    \    for (char letter : text) {\n        bool isVowel = false;\n        for (char\
    \ vowel : vowels) {\n            if (letter == vowel) {\n                isVowel\
    \ = true;\n                break;\n            }\n        }\n        if (!isVowel)\
    \ {\n            result += letter;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (!(text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] ==\
    \ 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I'\
    \ || text[i] == 'O' || text[i] == 'U')) {\n            result = result + text[i];\n\
    \        }\n    }\n    return result;", "\t// assert(text.size() > 0);\n\tstd::string\
    \ allVowels = \"aeiouAEIOU\";\n\tstd::string newText = \"\";\n\tfor (int i = 0;\
    \ i < text.size(); i++) {\n\t\tbool isVowel = false;\n\t\tfor (int j = 0; j <\
    \ allVowels.size(); j++) {\n\t\t\tif (text[i] == allVowels[j]) {\n\t\t\t\tisVowel\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!isVowel) {\n\t\t\tnewText\
    \ += text[i];\n\t\t}\n\t}\n\treturn newText;", "  std::string result;\n  for (auto\
    \ ch : text) {\n    if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch\
    \ != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U') {\n\
    \      result += ch;\n    }\n  }\n  return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        char c = text[i];\n  \
    \      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A'\
    \ && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string final_text = \"\";\n\
    \    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'};\n    std::string::iterator itr;\n    for (itr = text.begin(); itr != text.end();\
    \ itr++) {\n        if (std::find(vowels.begin(), vowels.end(), *itr) == vowels.end())\
    \ {\n            final_text += *itr;\n        }\n    }\n    return final_text;",
  "\tstd::string temp;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\ttemp += text[i];\n\t\t}\n\t}\n\treturn temp;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ res;\n    for (size_t i = 0; i < text.size(); i++) {\n        if (!(text[i]\
    \ == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u'\
    \ || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i]\
    \ == 'U')) {\n            res += text[i];\n        }\n    }\n    return res;",
  "    std::string new_text;\n    for (int i = 0; i < text.length(); i++) {\n    \
    \    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            new_text += text[i];\n        }\n \
    \   }\n    return new_text;", "    std::string ans = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (!(text[i] == 'a' || text[i] == 'e' ||\
    \ text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i]\
    \ == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')) {\n         \
    \   ans += text[i];\n        }\n    }\n    return ans;", "    // your code goes\
    \ here\n    std::string str = \"\";\n    std::string vowels = \"aeiouAEIOU\";\n\
    \    for(int i = 0; i < text.length(); i++) {\n        if(vowels.find(text[i])\
    \ == std::string::npos)\n            str += text[i];\n    }\n    return str;",
  "    std::string new_text;\n    for (int i = 0; i < text.length(); i++) {\n    \
    \    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            new_text += text[i];\n        }\n \
    \   }\n    return new_text;", "    // write your code here\n    std::string res\
    \ = \"\";\n    for(char c : text){\n      if(c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c\
    \ != 'U'){\n        res += c;\n      }\n    }\n    return res;", "    int j =\
    \ 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'a'\
    \ || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i]\
    \ == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\
    \ {\n            continue;\n        }\n        else {\n            text[j] = text[i];\n\
    \            j++;\n        }\n    }\n    return text.substr(0, j);", "  std::string\
    \ vowels = \"aeiouAEIOU\";\n  for (auto i = text.begin(); i != text.end(); i++)\
    \ {\n    for (auto j = vowels.begin(); j != vowels.end(); j++) {\n      if (*i\
    \ == *j) {\n        text.erase(i);\n        i--;\n        break;\n      }\n  \
    \  }\n  }\n  return text;", "    // Write your code here.\n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), [](char c) {\n        return (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U');\n    }), text.end());\n    return text;", "\tstd::string final = \"\"\
    ;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tfinal += text[i];\n\t\t}\n\t}\n\treturn final;", "\tstd::string ret;\n\t\
    for (size_t i = 0; i < text.size(); i++) {\n\t\tif (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tret += text[i];\n\t\t}\n\t}\n\treturn ret;", "    char list[] = {'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string new_text = \"\";\n\
    \    for (char c : text) {\n        bool found = false;\n        for (char item\
    \ : list) {\n            if (c == item) {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if (!found) {\n      \
    \      new_text += c;\n        }\n    }\n    return new_text;", "    //write your\
    \ solution here\n    std::string new_text;\n    for (auto c : text) {\n      \
    \  if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' &&\
    \ c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            new_text.push_back(c);\n\
    \        }\n    }\n    return new_text;", "    std::string result=\"\";\n    for(int\
    \ i=0;i<text.length();i++){\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U'){\n\
    \            \n        }\n        else{\n            result=result+text[i];\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = text.length();\n    std::string result;\n    for (int i = 0; i\
    \ < n; i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n    \
    \        result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        bool\
    \ is_vowel = text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] ==\
    \ 'o' || text[i] == 'u';\n        if (!is_vowel) {\n            result += text[i];\n\
    \        }\n    }\n    return result;", "  std::string result;\n  int len = text.length();\n\
    \  for (int i = 0; i < len; i++) {\n    if (tolower(text[i]) != 'a' && tolower(text[i])\
    \ != 'e' && tolower(text[i]) != 'i' && tolower(text[i]) != 'o' && tolower(text[i])\
    \ != 'u') {\n      result += text[i];\n    }\n  }\n  return result;", "    int\
    \ i,j;\n    std::string str=\"\";\n    for(i=0;i<text.length();i++)\n    {\n \
    \       if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      str=str+text[i];\n        }\n    }\n    return str;", "    string s = \"\
    \";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            s += text[i];\n        }\n    }\n    return s;", "\t// Write\
    \ your code here\n\tstd::string ans = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n\t\t\tans += text[i];\n\t\t}\n\t}\n\t\
    return ans;", "  std::string newString;\n  bool found;\n  int i = 0;\n  while\
    \ (i < text.length()) {\n    found = false;\n    if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'\
    \ || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n\
    \      found = true;\n    }\n    if (!found) {\n      newString += text[i];\n\
    \    }\n    i++;\n  }\n  return newString;", "\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string new_text = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\
    \t\tbool flag = true;\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\t\
    if (text[i] == vowels[j]) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif (flag)\n\t\t\tnew_text += text[i];\n\t}\n\treturn new_text;", "  \
    \  std::string ans = \"\";\n    for (int i = 0; i < text.length(); i++) {\n  \
    \      char ch = text[i];\n        if (ch != 'a' && ch != 'e' && ch != 'i' &&\
    \ ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' &&\
    \ ch != 'U') {\n            ans += ch;\n        }\n    }\n    return ans;", " \
    \   char vowels[] = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    for\
    \ (int i = 0; i < 10; i++) {\n        int j = 0;\n        while (j < text.length())\
    \ {\n            if (text[j] == vowels[i]) {\n                text.erase(j, 1);\n\
    \            } else {\n                j++;\n            }\n        }\n    }\n\
    \    return text;", "    const std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ removed = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            removed += text[i];\n        }\n    }\n\
    \    return removed;", "  std::string result;\n  std::string vowels = \"aeiouAEIOU\"\
    ;\n  for (std::string::iterator c = text.begin(); c != text.end(); ++c) {\n  \
    \  if (vowels.find(*c) == std::string::npos) {\n      result += *c;\n    }\n \
    \ }\n  return result;", "\tassert(text != \"\");\n\tstd::string answer;\n\tfor\
    \ (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] !=\
    \ 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tanswer += text[i];\n\t\t}\n\t}\n\treturn answer;", "    int i, j = 0;\n\
    \    char text_array[text.length()];\n    std::string string_text;\n    for (i\
    \ = 0; i < text.length(); i++) {\n        text_array[i] = text[i];\n    }\n  \
    \  for (i = 0; i < text.length(); i++) {\n        if (text_array[i] == 'a' ||\
    \ text_array[i] == 'e' || text_array[i] == 'i' || text_array[i] == 'o' || text_array[i]\
    \ == 'u' || text_array[i] == 'A' || text_array[i] == 'E' || text_array[i] == 'I'\
    \ || text_array[i] == 'O' || text_array[i] == 'U') {\n            text_array[i]\
    \ = ' ';\n        }\n    }\n    for (i = 0; i < text.length(); i++) {\n      \
    \  if (text_array[i] != ' ') {\n            string_text = string_text + text_array[i];\n\
    \        }\n    }\n    return string_text;", "    \n    std::string vowels = \"\
    aeiouAEIOU\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ != std::string::npos) {\n            text.erase(i, 1);\n            i--;\n \
    \       }\n    }\n    return text;", "    std::string result = \"\";\n    for\
    \ (size_t i = 0; i < text.size(); i++) {\n        switch (text[i]) {\n       \
    \     case 'a':\n            case 'e':\n            case 'i':\n            case\
    \ 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n\
    \            case 'I':\n            case 'O':\n            case 'U':\n       \
    \         break;\n            default:\n                result += text[i];\n \
    \       }\n    }\n    return result;", "  std::set<char> vowels = {'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::string final_string = \"\";\n  for\
    \ (int i = 0; i < text.length(); i++) {\n    if (vowels.find(text[i]) == vowels.end())\
    \ {\n      final_string = final_string + text[i];\n    }\n  }\n  return final_string;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  switch (text[i]) {\n            case 'a':\n            case 'e':\n        \
    \    case 'i':\n            case 'o':\n            case 'u':\n            case\
    \ 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n\
    \            case 'U':\n                break;\n            default:\n       \
    \         result += text[i];\n        }\n    }\n    return result;", "  std::string\
    \ result;\n  for (std::string::iterator it = text.begin(); it!=text.end(); ++it)\
    \ {\n    if (tolower(*it) != 'a' && tolower(*it) != 'e' && tolower(*it) != 'i'\
    \ && tolower(*it) != 'o' && tolower(*it) != 'u') {\n      result += *it;\n   \
    \ }\n  }\n  return result;", "\tif (text.length() == 0) {\n\t\treturn text;\n\t\
    }\n\t\n\tstd::string result;\n\tfor (char c : text) {\n\t\tif (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiouAEIOU\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"AEIOUaeiou\";\n    std::string res;\n    for (auto\
    \ &ch : text) {\n        bool is_vowel = false;\n        for (auto &vowel : vowels)\
    \ {\n            if (ch == vowel) {\n                is_vowel = true;\n      \
    \          break;\n            }\n        }\n        if (!is_vowel)\n        \
    \    res += ch;\n    }\n    return res;", "    std::string str;\n    std::locale\
    \ loc;\n    std::set<char> char_set = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'};\n    for (size_t i = 0; i < text.length(); i++) {\n        if (char_set.find(text[i])\
    \ == char_set.end()) {\n            str += text[i];\n        }\n    }\n    return\
    \ str;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "  std::string removed = \"\";\n  std::string\
    \ vowels = \"aeiouAEIOU\";\n  for (size_t i = 0; i < text.length(); i++) {\n \
    \   bool is_vowel = false;\n    for (size_t j = 0; j < vowels.length(); j++) {\n\
    \      if (text[i] == vowels[j]) {\n        is_vowel = true;\n        break;\n\
    \      }\n    }\n    if (!is_vowel) {\n      removed.push_back(text[i]);\n   \
    \ }\n  }\n  return removed;", "    char vowels[] = {'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'};\n    int size = text.size();\n    std::string result =\
    \ \"\";\n    for (int i = 0; i < size; i++) {\n        if (std::find(std::begin(vowels),\
    \ std::end(vowels), text[i]) == std::end(vowels)) {\n            result += text[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        bool remove = false;\n      \
    \  switch (text[i]) {\n            case 'a':\n            case 'e':\n        \
    \    case 'i':\n            case 'o':\n            case 'u':\n            case\
    \ 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n\
    \            case 'U':\n                remove = true;\n                break;\n\
    \            default:\n                remove = false;\n                break;\n\
    \        }\n        if (!remove) {\n            result += text[i];\n        }\n\
    \    }\n    return result;", "    for(int i=0;i<text.length();i++)\n    {\n  \
    \      if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            text.erase(i,1);\n            i--;\n        }\n    }\n\
    \    return text;", "std::string ans;\nfor(int i=0;i<text.length();i++)\n{\nif(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    continue;\nelse\nans+=text[i];", "  // your code here\n  std::string noVowels;\n\
    \  std::map<char, bool> isVowel;\n  isVowel['a'] = true;\n  isVowel['e'] = true;\n\
    \  isVowel['i'] = true;\n  isVowel['o'] = true;\n  isVowel['u'] = true;\n  isVowel['A']\
    \ = true;\n  isVowel['E'] = true;\n  isVowel['I'] = true;\n  isVowel['O'] = true;\n\
    \  isVowel['U'] = true;\n  for (int i = 0; i < text.length(); i++) {\n    if (!isVowel[text[i]])\
    \ {\n      noVowels += text[i];\n    }\n  }\n  return noVowels;", "  char vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::string new_text;\n\
    \  for (int i = 0; i < text.length(); i++) {\n    bool is_vowel = false;\n   \
    \ for (int j = 0; j < 10; j++) {\n      if (text[i] == vowels[j]) {\n        is_vowel\
    \ = true;\n        break;\n      }\n    }\n    if (!is_vowel) {\n      new_text\
    \ += text[i];\n    }\n  }\n  return new_text;", "  std::string res = \"\";\n \
    \ for (int i = 0; i < text.length(); i++) {\n    if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \      res += text[i];\n    }\n  }\n  return res;", "    for(int i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]=='a' || text[i]=='e' || text[i]=='i' || text[i]=='o'\
    \ || text[i]=='u' || text[i]=='A' || text[i]=='E' || text[i]=='I' || text[i]=='O'\
    \ || text[i]=='U')\n        {\n            text.erase(i,1);\n            i=i-1;\n\
    \        }\n    }\n    return text;", "  std::string ans = \"\";\n  // TODO\n\
    \  return ans;", "\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u'\
    \ || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i]\
    \ == 'U') {\n\t\t\ttext.erase(i, 1);\n\t\t\ti = -1;\n\t\t}\n\t}\n\treturn text;",
  "\t// replace the following with your code.\n    // solution starts\n    //In here\
    \ we will use std::string for sake of simplicity and ease of use.\n    std::string\
    \ ans=\"\";\n    for(int i=0;i<text.length();i++){\n        if(!(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u')){\n\
    \            ans+=text[i];\n        }\n    }\n    return ans;\n    // solution\
    \ ends", "\tint i = 0;\n\tint j = 0;\n\twhile (text[i] != '\\0') {\n\t\tif (text[i]\
    \ == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u'\
    \ || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i]\
    \ == 'U') {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\ttext[j] = text[i];\n\t\t\ti++;\n\
    \t\t\tj++;\n\t\t}\n\t}\n\ttext[j] = '\\0';\n\treturn text;", "    std::string\
    \ answer;\n    for (auto& ch : text) {\n        if ((ch != 'a') && (ch != 'e')\
    \ && (ch != 'i') && (ch != 'o') && (ch != 'u')) {\n            answer += ch;\n\
    \        }\n    }\n    return answer;", "    // YOUR CODE HERE\n    std::string\
    \ text2;\n    for(std::string::iterator i = text.begin(); i != text.end(); i++)\
    \ {\n        if(*i == 'a' || *i == 'e' || *i == 'i' || *i == 'o' || *i == 'u'\
    \ || *i == 'A' || *i == 'E' || *i == 'I' || *i == 'O' || *i == 'U') {\n      \
    \      continue;\n        }\n        else {\n            text2 += *i;\n      \
    \  }\n    }\n    return text2;", "  std::vector<char> v = {'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::string new_text;\n  for (char c : text)\
    \ {\n    if (std::find(v.begin(), v.end(), c) == v.end()) {\n      new_text.push_back(c);\n\
    \    }\n  }\n  return new_text;", "    // your code here\n    string text2 = \"\
    \";\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] != 'a' and\
    \ text[i] != 'A' and text[i] != 'e' and text[i] != 'E' and text[i] != 'i' and\
    \ text[i] != 'I' and text[i] != 'o' and text[i] != 'O' and text[i] != 'u' and\
    \ text[i] != 'U')\n            text2 = text2 + text[i];\n    }\n    return text2;",
  "  // Write your code here\n  std::string newText = \"\";\n  char vowelList[10]\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  for (int i = 0; i <\
    \ text.length(); i++) {\n    bool isVowel = false;\n    for (int j = 0; j < 10;\
    \ j++) {\n      if (text[i] == vowelList[j]) {\n        isVowel = true;\n    \
    \    break;\n      }\n    }\n    if (!isVowel) {\n      newText += text[i];\n\
    \    }\n  }\n  return newText;", "    // write your code here\n    //return \"\
    \";\n    std::string txt = \"\";\n    for(int i=0;i<text.length();i++){\n    \
    \    if(text[i]!='a' && text[i]!='e' && text[i]!='i' && text[i]!='o' && text[i]!='u'\
    \ && text[i]!='A' && text[i]!='E' && text[i]!='I' && text[i]!='O' && text[i]!='U'){\n\
    \            txt = txt + text[i];\n        }\n    }\n    return txt;", "\tstd::string::iterator\
    \ iter;\n\tfor (iter = text.begin(); iter != text.end(); ++iter) {\n\t\tif ((*iter\
    \ == 'a') || (*iter == 'e') || (*iter == 'i') || (*iter == 'o') || (*iter == 'u')\
    \ || (*iter == 'A') || (*iter == 'E') || (*iter == 'I') || (*iter == 'O') || (*iter\
    \ == 'U')) {\n\t\t\titer = text.erase(iter);\n\t\t\t--iter;\n\t\t}\n\t}\n\treturn\
    \ text;", "    //create a new string and loop through text\n    std::string clean;\n\
    \    for (char i : text) {\n        //if the character is not a vowel, then add\
    \ it to the new string\n        if (i != 'a' && i != 'e' && i != 'i' && i != 'o'\
    \ && i != 'u' && i != 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U') {\n\
    \            clean += i;\n        }\n    }\n    return clean;", "\tint n = text.length();\n\
    \tstd::string output_string;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\toutput_string += text[i];\n\t\t}\n\t}\n\treturn output_string;",
  "    std::string temp;\n    for(int i=0;i<text.length();i++){\n      if((text[i]=='a')||(text[i]=='e')||(text[i]=='i')||(text[i]=='o')||(text[i]=='u')||(text[i]=='A')||(text[i]=='E')||(text[i]=='I')||(text[i]=='O')||(text[i]=='U'))\n\
    \        continue;\n      else\n        temp+=text[i];\n    }\n    return temp;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;",
  "\t// YOUR CODE GOES HERE\n\ttext.erase(std::remove_if(text.begin(), text.end(),\
    \ isVowel), text.end());\n\treturn text;", "    std::set<char> vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string result;\n   \
    \ for (char c : text) {\n        if (vowels.find(c) == vowels.end()) {\n     \
    \       result += c;\n        }\n    }\n    return result;", "    assert(true);\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < text.length(); i++) {\n \
    \       if(text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            ans += text[i];\n        }\n    }\n\
    \    return ans;", "    std::string ret;\n    for (char i : text) {\n        if\
    \ (i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i != 'A' && i !=\
    \ 'E' && i != 'I' && i != 'O' && i != 'U')\n            ret += i;\n    }\n   \
    \ return ret;", "    std::string s;\n    for(int i=0;i<text.length();i++){\n \
    \       if(!(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U'))\n\
    \        s+=text[i];\n    }\n    return s;", "\tint i, j = 0;\n\tchar vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\tchar ch = text[0];\n\
    \twhile(ch != '\\0'){\n\t\tfor(i = 0; i < 10; i++){\n\t\t\tif(ch == vowels[i]){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i == 10){\n\t\t\ttext[j] = ch;\n\t\t\t\
    j++;\n\t\t}\n\t\tch = text[j];\n\t}\n\ttext[j] = '\\0';\n\treturn text;", "  \
    \  std::string text_without_vowels;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            text_without_vowels += text[i];\n\
    \        }\n    }\n    return text_without_vowels;", "\tint i = 0;\n\tint num_vowels\
    \ = 0;\n\tstd::string output = \"\";\n\twhile (i < text.length()) {\n\t\tif (tolower(text[i])\
    \ == 'a' || tolower(text[i]) == 'e' || tolower(text[i]) == 'i' || tolower(text[i])\
    \ == 'o' || tolower(text[i]) == 'u') {\n\t\t\tnum_vowels++;\n\t\t}\n\t\telse {\n\
    \t\t\toutput += text[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn output;", "    std::string\
    \ new_string;\n    int new_length = 0;\n    for (size_t i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            new_string[new_length] =\
    \ text[i];\n            new_length++;\n        }\n    }\n    return new_string;",
  "    std::string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (text[i] == vowels[j]) {\n                text.erase(i, 1);\n              \
    \  i--;\n                break;\n            }\n        }\n    }\n    return text;",
  "\tstd::vector<char> vowel = {'a','e','i','o','u','A','E','I','O','U'};\n\tstd::string\
    \ vowelless = \"\";\n\tfor(int i = 0; i < text.length(); i++) {\n\t\tbool isVowel\
    \ = false;\n\t\tfor(int j = 0; j < vowel.size(); j++) {\n\t\t\tif(text[i] == vowel[j])\
    \ {\n\t\t\t\tisVowel = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!isVowel)\
    \ vowelless += text[i];\n\t}\n\treturn vowelless;", "    std::string res = \"\"\
    ;\n    std::string allowed = \"bcd\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (allowed.find(text[i]) != std::string::npos) {\n        \
    \    res += text[i];\n        }\n    }\n    return res;", "    // use std::string::npos\n\
    \    std::string vowels = \"aeiouAEIOU\";\n    std::string result;\n    for (std::string::iterator\
    \ it = text.begin(); it != text.end(); ++it) {\n        if (vowels.find(*it) ==\
    \ std::string::npos) {\n            result.push_back(*it);\n        }\n    }\n\
    \    return result;", "    // your code here\n  std::string final_text;\n  for(int\
    \ i=0;i<text.length();i++)\n  {\n    if(text[i]!='a' && text[i]!='e' && text[i]!='i'\
    \ && text[i]!='o' && text[i]!='u' && text[i]!='A' && text[i]!='E' && text[i]!='I'\
    \ && text[i]!='O' && text[i]!='U')\n    {\n      final_text+=text[i];\n    }\n\
    \  }\n  return final_text;", "    std::string noVowels = \"\";\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  noVowels += text[i];\n        }\n    }\n    return noVowels;", "    std::string\
    \ result = \"\";\n    for (size_t i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    for(int i=0;i<text.length();i++)\n    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            text.erase(i,1);\n            i--;\n        }\n    }\n\
    \    return text;", "    //replace this for solution\n    std::string result;\n\
    \    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "\tstd::string\
    \ ntext=\"\";\n\tint pos=0;\n\tfor(std::string::iterator it=text.begin();it!=text.end();it++){\n\
    \t\tif((*it!='a')&&(*it!='e')&&(*it!='i')&&(*it!='o')&&(*it!='u')&&(*it!='A')&&(*it!='E')&&(*it!='I')&&(*it!='O')&&(*it!='U')){\n\
    \t\t\tntext.insert(pos,1,*it);\n\t\t\tpos++;\n\t\t}\n\t}\n\treturn ntext;", " \
    \   // TODO: your code here\n    char arr[text.length()];\n    int i,flag=0;\n\
    \    for(i=0;i<text.length();i++)\n    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            flag=1;\n        }\n        else\n        {\n        \
    \    arr[i]=text[i];\n        }\n    }\n    arr[i]='\\0';\n    if(flag==1)\n \
    \   {\n        return arr;\n    }\n    else\n    {\n        return text;\n   \
    \ }", "    int j=0;\n    std::string text1=\"\";\n    for(int i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      text1=text1+text[i];\n        }\n    }\n    return text1;", "\tstd::string::iterator\
    \ it;\n\tfor (it = text.begin(); it != text.end();) {\n\t\tif ((*it == 'a') ||\
    \ (*it == 'e') || (*it == 'i') || (*it == 'o') || (*it == 'u') || (*it == 'A')\
    \ || (*it == 'E') || (*it == 'I') || (*it == 'O') || (*it == 'U')) {\n\t\t\tit\
    \ = text.erase(it);\n\t\t}\n\t\telse {\n\t\t\tit++;\n\t\t}\n\t}\n\treturn text;",
  "    //Your code goes here\n    string s=\"\";\n    for(int i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]!='a' && text[i]!='e' && text[i]!='i' && text[i]!='o'\
    \ && text[i]!='u' && text[i]!='A' && text[i]!='E' && text[i]!='I' && text[i]!='O'\
    \ && text[i]!='U')\n        {\n            s=s+text[i];\n        }\n    }\n  \
    \  return s;", '  return "";', "  std::string new_text;\n  std::string vowels\
    \ = \"aeiouAEIOU\";\n  for (int i = 0; i < text.length(); i++) {\n    if (vowels.find(text[i])\
    \ == std::string::npos) {\n      new_text += text[i];\n    }\n  }\n  return new_text;",
  "\tstd::string new_text;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tnew_text += text[i];\n\t\t}\n\t}\n\treturn new_text;", "\t\
    //your code here\n\tint length = text.length();\n\tfor (int i = 0; i < length;\
    \ i++) {\n\t\tif (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i]\
    \ == 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I'\
    \ || text[i] == 'O' || text[i] == 'U') {\n\t\t\ttext.erase(i, 1);\n\t\t\ti--;\n\
    \t\t\tlength--;\n\t\t}\n\t}\n\treturn text;", "    // remove_vowels_ is a helper\
    \ function that takes character and returns true if character is vowel,\n    //\
    \ false otherwise.\n    // >>> remove_vowels_('a')\n    // True\n    // >>> remove_vowels_('e')\n\
    \    // True\n    // >>> remove_vowels_('i')\n    // True\n    // >>> remove_vowels_('o')\n\
    \    // True\n    // >>> remove_vowels_('u')\n    // True\n    // >>> remove_vowels_('A')\n\
    \    // True\n    // >>> remove_vowels_('E')\n    // True\n    // >>> remove_vowels_('I')\n\
    \    // True\n    // >>> remove_vowels_('O')\n    // True\n    // >>> remove_vowels_('U')\n\
    \    // True\n    // >>> remove_vowels_('b')\n    // False\n    // >>> remove_vowels_('h')\n\
    \    // False\n    auto remove_vowels_ = [](char c) {\n        std::vector<char>\
    \ vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        for (auto\
    \ const &vowel : vowels) {\n            if (c == vowel) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    };\n    // Remove\
    \ vowels in text.\n    std::string result;\n    for (auto const &c : text) {\n\
    \        if (!remove_vowels_(c)) {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string res;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (!(text[i] == 'a' || text[i] == 'e' || text[i] == 'i' ||\
    \ text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i]\
    \ == 'I' || text[i] == 'O' || text[i] == 'U')) {\n            res += text[i];\n\
    \        }\n    }\n    return res;", "    std::string t = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  t += text[i];\n        }\n    }\n    return t;", "     std::string result;\n\
    \ \n    for (int i = 0; i < text.length(); i++) {\n        std::string vowel =\
    \ \"aeiouAEIOU\";\n        if (vowel.find(text[i]) == std::string::npos) {\n \
    \           result.push_back(text[i]);\n        }\n    }\n \n    return result;",
  "    std::set<char> vowels;\n    vowels.insert('a');\n    vowels.insert('e');\n\
    \    vowels.insert('i');\n    vowels.insert('o');\n    vowels.insert('u');\n \
    \   vowels.insert('A');\n    vowels.insert('E');\n    vowels.insert('I');\n  \
    \  vowels.insert('O');\n    vowels.insert('U');\n    std::string final_text =\
    \ \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == vowels.end()) {\n            final_text = final_text + text[i];\n       \
    \ }\n    }\n    return final_text;", "    std::string result;\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    for (size_t i = 0; i < text.size(); i++) {\n \
    \       if (vowels.find(text[i]) == std::string::npos) {\n            result +=\
    \ text[i];\n        }\n    }\n    return result;", "  // Implement remove_vowels()\
    \ below.\n  std::string vowels = \"aeiouAEIOU\";\n  std::string newText = \"\"\
    ;\n  for (int i = 0; i < text.length(); i++) {\n    if (vowels.find(text[i]) ==\
    \ std::string::npos) {\n      newText += text[i];\n    }\n  }\n  return newText;",
  "    std::string ans = \"\";\n    for (auto c : text) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        ans\
    \ += c;\n    }\n    return ans;", '  // your code goes here', "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string output = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        char c = text[i];\n        if (vowels.find(c)\
    \ == std::string::npos) {\n            output += c;\n        }\n    }\n    return\
    \ output;", "    std::string new_string = \"\";\n    for (size_t i = 0; i < text.size();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            new_string += text[i];\n\
    \        }\n    }\n    return new_string;", "    std::string result;\n    std::string\
    \ temp;\n    std::string alphabet= \"abcdefghijklmnopqrstuvwxyz\";\n    for(int\
    \ i=0; i<text.length(); i++){\n        temp+=text[i];\n        if(alphabet.find(temp)==std::string::npos){\n\
    \            result+=text[i];\n        }\n        temp.clear();\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    int size = text.size();\n   \
    \ for (int i = 0; i < size; i++) {\n        char ch = text[i];\n        if ((ch\
    \ != 'a') && (ch != 'e') && (ch != 'i') && (ch != 'o') && (ch != 'u') && (ch !=\
    \ 'A') && (ch != 'E') && (ch != 'I') && (ch != 'O') && (ch != 'U')) {\n      \
    \      result += ch;\n        }\n    }\n    return result;", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tstd::string newText = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tbool isVowel = false;\n\t\tfor (int j = 0; j < vowels.length();\
    \ j++) {\n\t\t\tif (text[i] == vowels[j]) {\n\t\t\t\tisVowel = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!isVowel) {\n\t\t\tnewText += text[i];\n\t\t}\n\
    \t}\n\treturn newText;", "  std::string removed_vowels_text;\n  for (int i = 0;\
    \ i < text.length(); i++) {\n    if (tolower(text[i]) != 'a' && tolower(text[i])\
    \ != 'e' && tolower(text[i]) != 'i' && tolower(text[i]) != 'o' && tolower(text[i])\
    \ != 'u') {\n      removed_vowels_text += text[i];\n    }\n  }\n  return removed_vowels_text;",
  "    std::string s = \"aeiouAEIOU\";\n    for (auto c: s) {\n        text.erase(std::remove(text.begin(),\
    \ text.end(), c), text.end());\n    }\n    return text;", "    int len = text.length();\n\
    \    std::string result = \"\";\n    for (int i = 0; i < len; i++) {\n       \
    \ if (!(text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' ||\
    \ text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i]\
    \ == 'O' || text[i] == 'U')) {\n            result += text[i];\n        }\n  \
    \  }\n    return result;", "    std::string s = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (tolower(text[i]) != 'a' && tolower(text[i])\
    \ != 'e' && tolower(text[i]) != 'i' && tolower(text[i]) != 'o' && tolower(text[i])\
    \ != 'u') {\n            s += text[i];\n        }\n    }\n    return s;", "  \
    \  for(int i=0;i<text.length();i++)\n    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            text.erase(i,1);\n            i--;\n        }\n    }\n\
    \    return text;", "  std::string vowels = \"aeiouAEIOU\";\n  for (int i = 0;\
    \ i < text.length(); i++) {\n    for (int j = 0; j < vowels.length(); j++) {\n\
    \      if (text[i] == vowels[j]) {\n        text.erase(i, 1);\n        i--;\n\
    \        break;\n      }\n    }\n  }\n  return text;", "  std::string vowels =\
    \ \"aeiouAEIOU\";\n  std::string newString = \"\";\n  int j = 0;\n  for (int i\
    \ = 0; i < text.length(); i++) {\n    if (vowels.find(text[i]) == std::string::npos)\
    \ {\n      newString[j] = text[i];\n      j++;\n    }\n  }\n  return newString;",
  "\tstd::string without_vowels;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n\t\t\twithout_vowels += text[i];\n\t\t}\n\t}\n\treturn\
    \ without_vowels;", "    // using stringstream to get std::string from std::vector<char>\n\
    \    std::stringstream ss;\n    for (char & c : text) {\n        switch (c) {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'A':\n            case\
    \ 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n\
    \                break;\n            default:\n                ss << c;\n    \
    \    }\n    }\n    return ss.str();", "    // YOUR CODE HERE\n    std::string\
    \ res = \"\";\n    for (char ch : text) {\n        if (ch != 'a' && ch != 'e'\
    \ && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I'\
    \ && ch != 'O' && ch != 'U') {\n            res += ch;\n        }\n    }\n   \
    \ return res;", "    int n = text.length();\n    std::string output = \"\";\n\
    \    std::map<char,bool> vowels;\n    vowels['a'] = true;\n    vowels['e'] = true;\n\
    \    vowels['i'] = true;\n    vowels['o'] = true;\n    vowels['u'] = true;\n \
    \   vowels['A'] = true;\n    vowels['E'] = true;\n    vowels['I'] = true;\n  \
    \  vowels['O'] = true;\n    vowels['U'] = true;\n    for(int i = 0; i < n; i++)\
    \ {\n        if(vowels.find(text[i]) == vowels.end()) {\n            output +=\
    \ text[i];\n        }\n    }\n    return output;", "\tstd::string vowels = \"\
    aeiouAEIOU\";\n\tstd::string output;\n\tfor (int i = 0; i < text.length(); i++)\
    \ {\n\t\tif (vowels.find(text[i]) == std::string::npos) {\n\t\t\toutput.push_back(text[i]);\n\
    \t\t}\n\t}\n\treturn output;", '    // Your code goes here', "  char vowels[]={'a','e','i','o','u','A','E','I','O','U'};\n\
    \  int len = text.length();\n  int i, j;\n  for(i=0;i<len;++i)\n  {\n    for(j=0;j<10;++j)\n\
    \    {\n      if(text[i]==vowels[j])\n      {\n        text.erase(i,1);\n    \
    \    len--;\n        i--;\n        break;\n      }\n    }\n  }\n  return text;",
  "\tstd::string new_text;\n\tfor (size_t i = 0; i < text.size(); i++) {\n\t\tif ((text[i]\
    \ != 'a') && (text[i] != 'e') && (text[i] != 'o') && (text[i] != 'u') && (text[i]\
    \ != 'i'))\n\t\t\tnew_text.push_back(text[i]);\n\t}\n\treturn new_text;", "\t\
    string vowels = \"aeiouAEIOU\";\n\tstring output;\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (vowels.find(text[i]) == string::npos) {\n\t\t\toutput += text[i];\n\
    \t\t}\n\t}\n\treturn output;", "    std::string x;\n    std::string final_output;\n\
    \    for(int i=0;i<text.length();i++){\n        if(text[i]=='a' || text[i]=='e'\
    \ || text[i]=='i' || text[i]=='o' || text[i]=='u' || text[i]=='A' || text[i]=='E'\
    \ || text[i]=='I' || text[i]=='O' || text[i]=='U'){\n            x = \"\";\n \
    \       }\n        else{\n            x = text[i];\n            final_output =\
    \ final_output + x;\n        }\n    }\n    return final_output;", '    /* your
    code goes here */', '  // TODO: Implementation here', "\tstd::string result;\n\
    \tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "\tint i = 0;\n\twhile\
    \ (text[i] != '\\0') {\n\t\tif (text[i] == 'a' || text[i] == 'e' || text[i] ==\
    \ 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E'\
    \ || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n\t\t\tfor (int j =\
    \ i; text[j] != '\\0'; j++) {\n\t\t\t\ttext[j] = text[j + 1];\n\t\t\t}\n\t\t}\n\
    \t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn text;", "    int i=0;\n    while(text[i]!='\\\
    0')\n    {\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\
    \        {\n            text.erase(i,1);\n            i--;\n        }\n      \
    \  i++;\n    }\n    return text;", "\tstd::string result;\n\tfor (int i = 0; i\
    \ < text.length(); i++) {\n\t\tif (!(text[i] == 'a' || text[i] == 'e' || text[i]\
    \ == 'i' || text[i] == 'o' || text[i] == 'u')) {\n\t\t\tresult += text[i];\n\t\
    \t}\n\t}\n\treturn result;", "    assert(true);\n    return \"\";", "  // your\
    \ code here\n  /*string str = \"\";\n  string text2 = text;\n  for(int i = 0;\
    \ i < text.length(); i++){\n    if(text[i] == 'a' || text[i] == 'e' || text[i]\
    \ == 'i' || text[i] == 'o' || text[i] == 'u' ||\n       text[i] == 'A' || text[i]\
    \ == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U'){\n      text2.erase(i,1);\n\
    \    }\n  }\n  return text2;*/\n  std::string text2 = \"\";\n  for(int i = 0;\
    \ i < text.length(); i++){\n    if(text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' &&\n       text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U'){\n       text2\
    \ += text[i];\n    }\n  }\n  return text2;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string no_vowels = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            no_vowels\
    \ += text[i];\n        }\n    }\n    return no_vowels;", "\t// TODO: write your\
    \ code here\n\treturn std::string(\"\");", "\tstd::string new_text;\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tnew_text\
    \ += text[i];\n\t\t}\n\t}\n\treturn new_text;", "    if (text.length() == 0) {\n\
    \        return text;\n    }\n    std::string without_vowels;\n    std::unordered_set<char>\
    \ vowels {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    for (char ch\
    \ : text) {\n        if (vowels.find(ch) == vowels.end()) {\n            without_vowels\
    \ += ch;\n        }\n    }\n    return without_vowels;", "\tchar vowels[] = {'a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tint j = 0;\n\t\tfor (; j < 10; j++) {\n\t\t\tif (text[i] == vowels[j])\
    \ {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j < 10) {\n\t\t\tif (i != text.length()\
    \ - 1) {\n\t\t\t\ttext[i] = text[text.length() - 1];\n\t\t\t}\n\t\t\ttext.pop_back();\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn text;", "\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string result = \"\";\n\tfor (auto c : text) {\n\t\tif (vowels.find(c)\
    \ == std::string::npos) {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (std::tolower(text[i]) != 'a' && std::tolower(text[i]) != 'e' && std::tolower(text[i])\
    \ != 'i' && std::tolower(text[i]) != 'o' && std::tolower(text[i]) != 'u') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string final_text = \"\";\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            final_text += text[i];\n        }\n    }\n    return final_text;",
  "\tstd::string result = \"\";\n\tchar c;\n\tfor (int i = 0; i < text.length(); i++)\
    \ {\n\t\tc = text[i];\n\t\tif (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n\t\t\
    \tresult += c;\n\t\t}\n\t}\n\treturn result;", "  // If a is vowel, return true;\
    \ otherwise return false.\n  auto is_vowel = [](char a) {\n    static const std::string\
    \ vowels = \"AEIOUaeiou\";\n    for (char c : vowels) {\n      if (a == c) {\n\
    \        return true;\n      }\n    }\n    return false;\n  };\n  // Create an\
    \ empty string to store the result.\n  std::string result;\n  // Iterate over\
    \ the entire text and store the characters that are not vowels.\n  for (char c\
    \ : text) {\n    if (!is_vowel(c)) {\n      result += c;\n    }\n  }\n  return\
    \ result;", "\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == 'a'\
    \ || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i]\
    \ == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\
    \ {\n\t\t\ttext.erase(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn text;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    //YOUR CODE GOES HERE\n    std::string result = \"\";\n    for (size_t i =\
    \ 0; i < text.size(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "\tstd::string result\
    \ = \"\";\n\tint length = text.length();\n\tfor (int i = 0; i < length; i++) {\n\
    \t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::string result = \"\";\n    for (auto i : text) {\n     \
    \   if (i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u' && i != 'A' &&\
    \ i != 'E' && i != 'I' && i != 'O' && i != 'U')\n            result += i;\n  \
    \  }\n    return result;", "  // Fill in your solution here\n    std::string text1=\"\
    \";\n    int len=text.length();\n    std::set<char> vowels={'a','e','i','o','u','A','E','I','O','U'};\n\
    \    for(int i=0;i<len;i++){\n        if(vowels.find(text[i])==vowels.end()){\n\
    \            text1+=text[i];\n        }\n    }\n    return text1;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string stringNoVowels = \"\";\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            stringNoVowels += text[i];\n        }\n    }\n    return stringNoVowels;",
  "  if (text == \"\") return \"\";\n  else if (text[0] == 'a' || text[0] == 'e' ||\
    \ text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A' || text[0]\
    \ == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U') return remove_vowels(text.substr(1));\n\
    \  else return text[0] + remove_vowels(text.substr(1));", "    std::transform(text.begin(),\
    \ text.end(), text.begin(), ::tolower);\n    std::string new_text;\n    for (char\
    \ letter : text) {\n        switch (letter) {\n            case 'a':\n       \
    \     case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n                break;\n            default:\n                new_text\
    \ += letter;\n        }\n    }\n    return new_text;", "\tchar temp[text.length()];\n\
    \tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'\
    \ || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n\
    \t\t\ttemp[i] = ' ';\n\t\t}\n\t\telse {\n\t\t\ttemp[i] = text[i];\n\t\t}\n\t}\n\
    \tstd::string result;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (temp[i]\
    \ != ' ') {\n\t\t\tresult = result + temp[i];\n\t\t}\n\t}\n\treturn result;",
  "\tstd::string ans = \"\";\n\tfor (char c : text) {\n\t\tbool isVowel = c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U';\n\t\tif (!isVowel) {\n\t\t\tans += c;\n\t\t\
    }\n\t}\n\treturn ans;", "    char vowels[] = {'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'};\n    std::string ans = \"\";\n    for (auto i : text) {\n  \
    \      bool f = false;\n        for (auto j : vowels) {\n            if (i ==\
    \ j) {\n                f = true;\n                break;\n            }\n   \
    \     }\n        if (!f) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;", '  return std::regex_replace(text, std::regex("[aeiouAEIOU]"), "");',
  "    int len = text.length();\n    std::string result = \"\";\n    for (int i =\
    \ 0; i < len; i++) {\n        char c = text[i];\n        if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "  std::string new_text;\n  for (int i = 0; i < text.length();\
    \ i++) {\n    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n      new_text += text[i];\n    }\n\
    \  }\n  return new_text;", "\tstd::vector<char> word;\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n\t\t\tword.push_back(text[i]);\n\t\t\
    }\n\t}\n\tstd::string str(word.begin(), word.end());\n\treturn str;", "    int\
    \ length = text.length();\n    char arr[length];\n    //copy(text.begin(), text.end(),\
    \ arr);\n    for(int i = 0; i < length; i++) {\n        if(text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'\
    \ || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\n \
    \           continue;\n        else\n            arr[i] = text[i];\n    }\n  \
    \  std::string str(arr);\n    return str;", "\t// write your solution here\n\t\
    std::string res;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tres += text[i];\n\t\t}\n\t}\n\treturn res;", "    /* Remove\
    \ the 'pass' statement below and write your code here! */\n    std::vector<char>\
    \ temp;\n    char vowels[10] = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n\
    \    int flag = 0;\n    for(int i = 0; i < text.length(); i++) {\n        flag\
    \ = 0;\n        for(int j = 0; j < 10; j++) {\n            if(text[i] == vowels[j])\
    \ {\n                flag = 1;\n                break;\n            }\n      \
    \  }\n        if(flag == 0)\n            temp.push_back(text[i]);\n    }\n   \
    \ text.clear();\n    for(int i = 0; i < temp.size(); i++) {\n        text += temp[i];\n\
    \    }\n    return text;", "\t// Write your code here\n\t// convert to lowercase,\
    \ remove vowels and copy to string\n\tfor (int i = 0; i < text.length(); i++)\
    \ {\n\t\tif (tolower(text[i]) == 'a' || tolower(text[i]) == 'e' || tolower(text[i])\
    \ == 'i' || tolower(text[i]) == 'o' || tolower(text[i]) == 'u') {\n\t\t\ttext.erase(i,\
    \ 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn text;", '    return "";', "// Write your\
    \ code here.\n\tstd::string vowels = \"aeiouAEIOU\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (text[i] ==\
    \ vowels[j]) {\n\t\t\t\ttext.erase(i, 1);\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn text;", "    std::string without_vowels = \"\";\n    int\
    \ index = 0;\n    while (index < text.length()) {\n        if (text[index] !=\
    \ 'a' && text[index] != 'e' && text[index] != 'i' && text[index] != 'o' && text[index]\
    \ != 'u' && text[index] != 'A' && text[index] != 'E' && text[index] != 'I' &&\
    \ text[index] != 'O' && text[index] != 'U') {\n            without_vowels += text[index];\n\
    \        }\n        index++;\n    }\n    return without_vowels;", "\tstd::string\
    \ newString;\n\tint i = 0;\n\twhile (text[i] != '\\0') {\n\t\tif (text[i] != 'a'\
    \ && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n\t\t\tnewString += text[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn newString;",
  "    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == 'a' ||\
    \ text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i]\
    \ == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\
    \ {\n            text.erase(i, 1);\n        } else {\n            i++;\n     \
    \   }\n    }\n    return text;", "\tstd::string result;\n\tfor (int i = 0; i <\
    \ text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] !=\
    \ 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tresult += text[i];\n\
    \t\t}\n\t}\n\treturn result;", "\tstd::string new_text = \"\";\n\tfor (int i =\
    \ 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tnew_text = new_text\
    \ + text[i];\n\t\t}\n\t}\n\treturn new_text;", "    std::string text_no_vowels\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (tolower(text[i])\
    \ != 'a' && tolower(text[i]) != 'e' && tolower(text[i]) != 'i' && tolower(text[i])\
    \ != 'o' && tolower(text[i]) != 'u') {\n            text_no_vowels += text[i];\n\
    \        }\n    }\n    return text_no_vowels;", "    std::string s = text;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            s.erase(i, 1);\n\
    \            i--;\n        }\n    }\n    return s;", "    std::string result;\n\
    \    std::map<char, bool> vowels = {{'a', true}, {'e', true}, {'i', true}, {'o',\
    \ true}, {'u', true}};\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (vowels.find(tolower(text[i])) == vowels.end()) {\n            result +=\
    \ text[i];\n        }\n    }\n    return result;", "\tstd::string result = \"\"\
    ;\n\tfor (char letter : text) {\n\t\tswitch (letter) {\n\t\tcase 'a':\n\t\tcase\
    \ 'e':\n\t\tcase 'i':\n\t\tcase 'o':\n\t\tcase 'u':\n\t\tcase 'A':\n\t\tcase 'E':\n\
    \t\tcase 'I':\n\t\tcase 'O':\n\t\tcase 'U':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\
    result += letter;\n\t\t}\n\t}\n\treturn result;", "    std::string result;\n \
    \   for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    \n\
    \    \n    std::vector<char> v = {'a','e','i','o','u','A','E','I','O','U'};\n\
    \    \n    int length = text.length();\n    std::string s;\n    for(int i=0;i<length;i++)\n\
    \    {\n        for(auto j=v.begin();j!=v.end();j++)\n        {\n            if(text[i]==*j)\n\
    \            {\n                text.erase(i,1);\n            }\n        }\n \
    \   }\n    \n    return text;", "    std::string s=\"\";\n    int i;\n    for(i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]!='a' && text[i]!='e' && text[i]!='i' && text[i]!='o'\
    \ && text[i]!='u' && text[i]!='A' && text[i]!='E' && text[i]!='I' && text[i]!='O'\
    \ && text[i]!='U')\n        {\n            s+=text[i];\n        }\n    }\n   \
    \ return s;", "    // text = text + \" \";\n    std::string new_text = \"\";\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            new_text = new_text + text[i];\n        }\n    }\n    return\
    \ new_text;", "  std::string s = \"\";\n  std::string vowels = \"AEIOUaeiou\"\
    ;\n  for (auto c : text) {\n    if (vowels.find(c) == std::string::npos)\n   \
    \   s += c;\n  }\n  return s;", "  std::string result;\n  for (char c : text)\
    \ {\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n      continue;\n  \
    \  }\n    result += c;\n  }\n  return result;"]
stop_tokens:
- "\n}"
