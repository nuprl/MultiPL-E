language: cpp
name: HumanEval_120_maximum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    for (long idx\
    \ = 0; idx < k; idx++) {\n        long maxIdx = idx;\n        for (long jdx =\
    \ idx + 1; jdx < arr.size(); jdx++) {\n            if (arr[jdx] > arr[maxIdx])\
    \ maxIdx = jdx;\n        }\n        if (idx != maxIdx) std::swap(arr[idx], arr[maxIdx]);\n\
    \        res.push_back(arr[idx]);\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp73ojd2yd: /tmp/tmp73ojd2yd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> result;\n\tif (k == 0) return result;\n\tstd::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> q;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tq.push(arr[i]);\n\t\tif (q.size() > k) q.pop();\n\t}\n\twhile (!q.empty())\
    \ {\n\t\tresult.push_back(q.top());\n\t\tq.pop();\n\t}\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpeuodh5a0: /tmp/tmpeuodh5a0.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    for (int i = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\
    \ pq.push(arr[i]);\n        else {\n            if (arr[i] > pq.top()) {\n   \
    \             pq.pop();\n                pq.push(arr[i]);\n            }\n   \
    \     }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpta6lzhg4.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpta6lzhg4.cpp:20:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   20 |     priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \      |     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included\
    \ from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpta6lzhg4.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpta6lzhg4.cpp:20:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   20 |     priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n      |                    ^~~~\n\
    /tmp/tmpta6lzhg4.cpp:22:13: error: \u2018pq\u2019 was not declared in this scope\n\
    \   22 |         if (pq.size() < k) pq.push(arr[i]);\n      |             ^~\n\
    /tmp/tmpta6lzhg4.cpp:30:13: error: \u2018pq\u2019 was not declared in this scope\n\
    \   30 |     while (!pq.empty()) {\n      |             ^~\n"
  stdout: ''
  timestamp: 1660095662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> answer;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while\
    \ (!pq.empty() && k--) {\n        answer.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdtz13coq: /tmp/tmpdtz13coq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // An initial, naive implementation.\n    if(k==0) return {};\n    std::vector<long>\
    \ result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ min_heap;\n    int i=0;\n    for(int i=0; i<arr.size(); i++){\n        if(min_heap.size()<k){\n\
    \            min_heap.push(arr[i]);\n        }\n        else{\n            if(arr[i]>min_heap.top()){\n\
    \                min_heap.pop();\n                min_heap.push(arr[i]);\n   \
    \         }\n        }\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() > 0);\n    std::vector<long> result;\n    int length\
    \ = arr.size();\n    std::vector<long> left(length, 0);\n    std::vector<long>\
    \ right(length, 0);\n    // left[i] = max(arr[0] .. arr[i])\n    left[0] = arr[0];\n\
    \    for (int i = 1; i < length; i++) {\n        left[i] = std::max(left[i - 1],\
    \ arr[i]);\n    }\n    // right[i] = max(arr[i] .. arr[n - 1])\n    right[length\
    \ - 1] = arr[length - 1];\n    for (int i = length - 2; i >= 0; i--) {\n     \
    \   right[i] = std::max(right[i + 1], arr[i]);\n    }\n    for (int i = 0; i <\
    \ k; i++) {\n        if (i == 0) {\n            result.push_back(right[i]);\n\
    \        } else if (i == length - 1) {\n            result.push_back(left[i]);\n\
    \        } else {\n            result.push_back(std::max(left[i], right[i]));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmj_4uw4y: /tmp/tmpmj_4uw4y.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // assert(((arr.size()) >= (k)));\n    if (arr.size() < k) {\n      \
    \  k = arr.size();\n    }\n    std::sort(arr.begin(), arr.end());\n    auto arr_sorted\
    \ = arr;\n    std::reverse(arr_sorted.begin(), arr_sorted.end());\n    std::vector<long>\
    \ k_max;\n    for (size_t i = 0; i < k; i++) {\n        k_max.push_back(arr_sorted[i]);\n\
    \    }\n    return k_max;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5p580nnr: /tmp/tmp5p580nnr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> q;\n  for (auto el : arr) {\n    q.push(el);\n\
    \    if (q.size() > k) {\n      q.pop();\n    }\n  }\n  std::vector<long> result;\n\
    \  while (q.size() > 0) {\n    result.push_back(q.top());\n    q.pop();\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqzalzal4: /tmp/tmpqzalzal4.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    priority_queue<long, vector<long>, greater<long>> pq;\n    vector<long>\
    \ res;\n    for(auto i : arr) {\n        pq.push(i);\n        if(pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while(!pq.empty()) {\n     \
    \   res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtlx_vs1.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqtlx_vs1.cpp:19:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |     priority_queue<long, vector<long>, greater<long>> pq;\n      |\
    \     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqtlx_vs1.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpqtlx_vs1.cpp:19:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |     priority_queue<long,\
    \ vector<long>, greater<long>> pq;\n      |                    ^~~~\n/tmp/tmpqtlx_vs1.cpp:20:5:\
    \ error: \u2018vector\u2019 was not declared in this scope\n   20 |     vector<long>\
    \ res;\n      |     ^~~~~~\n/tmp/tmpqtlx_vs1.cpp:20:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqtlx_vs1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqtlx_vs1.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpqtlx_"
  stdout: ''
  timestamp: 1660095662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::sort(arr.begin(), arr.end());\n    res.assign(arr.end()\
    \ - k, arr.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k > arr.size()) return arr;\n\tstd::priority_queue<long> q;\n\tfor\
    \ (auto x : arr) {\n\t\tq.push(x);\n\t\tif (q.size() > k) q.pop();\n\t}\n\tstd::vector<long>\
    \ res;\n\twhile (!q.empty()) {\n\t\tres.push_back(q.top());\n\t\tq.pop();\n\t\
    }\n\treturn res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqvmlx8sz: /tmp/tmpqvmlx8sz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> res(k);\n    for (long i\
    \ = 0; i < k; i++) {\n        res[i] = arr[i];\n    }\n    std::make_heap(res.begin(),\
    \ res.end());\n    for (long i = k; i < n; i++) {\n        if (arr[i] > res[0])\
    \ {\n            res[0] = arr[i];\n            std::make_heap(res.begin(), res.end());\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2dvddqug: /tmp/tmp2dvddqug.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> output;\n    // sorting array\n    std::sort(arr.begin(),\
    \ arr.end());\n    // returning maximum k numbers\n    return std::vector<long>(arr.end()\
    \ - k, arr.end());\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code goes here\n    std::priority_queue<long> max_heap;\n   \
    \ std::vector<long> res;\n    for(long i=0;i<arr.size();i++){\n        max_heap.push(arr[i]);\n\
    \    }\n    while(k--){\n        res.push_back(max_heap.top());\n        max_heap.pop();\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> temp;\n  std::priority_queue<long> pq;\n  for(int i =\
    \ 0; i < arr.size(); i++)\n  {\n    pq.push(arr[i]);\n  }\n  for(int i = 0; i\
    \ < k; i++)\n  {\n    temp.push_back(pq.top());\n    pq.pop();\n  }\n  std::reverse(temp.begin(),\
    \ temp.end());\n  return temp;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code here...\n  std::vector<long> max_arr;\n  int size = arr.size();\n\
    \  if(size == k)\n    return arr;\n  long max;\n  int i = 0;\n  while(max_arr.size()\
    \ != k)\n  {\n    max = arr[0];\n    i = 0;\n    for(int j = 0; j < arr.size();\
    \ j++)\n    {\n      if(arr[j] > max)\n      {\n        max = arr[j];\n      \
    \  i = j;\n      }\n    }\n    max_arr.push_back(max);\n    arr.erase(arr.begin()\
    \ + i);\n  }\n  return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmk5xrxhm: /tmp/tmpmk5xrxhm.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  if (k > arr.size()) {\n    return result;\n\
    \  }\n  // sort the vector in descending order\n  std::sort(arr.begin(), arr.end(),\
    \ std::greater<long>());\n  for (long i = 0; i < k; i++) {\n    result.push_back(arr[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpw_qu_h5g: /tmp/tmpw_qu_h5g.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    std::vector<long> result(k);\n    std::priority_queue<long>\
    \ pq;\n    for (const auto& elem : arr) {\n        pq.push(elem);\n        if\
    \ (pq.size() > k)\n            pq.pop();\n    }\n    for (int i = k - 1; i >=\
    \ 0; --i) {\n        result[i] = pq.top();\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkbiwvwz_: /tmp/tmpkbiwvwz_.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // initialize a vector\n    std::vector<long> ret_val;\n    // initialize\
    \ an empty priority queue\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    // iterate the array\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        // if the size of the priority queue is less than k,\n        // push\
    \ the element into the priority queue\n        if (pq.size() < k) {\n        \
    \    pq.push(arr[i]);\n        } else {\n            // pop the smallest element\
    \ in the priority queue\n            pq.pop();\n            // push the new element\
    \ into the priority queue\n            pq.push(arr[i]);\n        }\n    }\n  \
    \  // iterate the priority queue and add the element into the \n    // ret_val\
    \ vector\n    while (!pq.empty()) {\n        ret_val.push_back(pq.top());\n  \
    \      pq.pop();\n    }\n    // reverse the ret_val vector, since the element\
    \ in the priority\n    // queue is in the non-increasing order\n    std::reverse(ret_val.begin(),\
    \ ret_val.end());\n    // return the ret_val vector\n    return ret_val;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxkqpjcj7: /tmp/tmpxkqpjcj7.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long num : arr) {\n        pq.push(num);\n\
    \        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long> ans;\n   \
    \ while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7lzmx2g7: /tmp/tmp7lzmx2g7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tint len = arr.size();\n\tpriority_queue<long> pq;\n\tfor (int i = 0; i\
    \ < len; i++) {\n\t\tpq.push(arr[i]);\n\t}\n\tstd::vector<long> res;\n\twhile\
    \ (k > 0) {\n\t\tres.push_back(pq.top());\n\t\tpq.pop();\n\t\tk--;\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpurn3oe9i.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpurn3oe9i.cpp:20:2: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   20 |  priority_queue<long> pq;\n      |  ^~~~~~~~~~~~~~\n      |  std::priority_queue\n\
    In file included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpurn3oe9i.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpurn3oe9i.cpp:20:17: error: expected\
    \ primary-expression before \u2018long\u2019\n   20 |  priority_queue<long> pq;\n\
    \      |                 ^~~~\n/tmp/tmpurn3oe9i.cpp:22:3: error: \u2018pq\u2019\
    \ was not declared in this scope\n   22 |   pq.push(arr[i]);\n      |   ^~\n/tmp/tmpurn3oe9i.cpp:26:17:\
    \ error: \u2018pq\u2019 was not declared in this scope\n   26 |   res.push_back(pq.top());\n\
    \      |                 ^~\n"
  stdout: ''
  timestamp: 1660095662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    std::vector<long> result;\n    int\
    \ i;\n    for(i=0;i<k;i++) {\n        pq.push(arr[i]);\n    }\n    for(i=k;i<arr.size();i++)\
    \ {\n        if(arr[i]>pq.top()) {\n            pq.pop();\n            pq.push(arr[i]);\n\
    \        }\n    }\n    for(i=0;i<k;i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbobc3o5v: /tmp/tmpbobc3o5v.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    std::priority_queue<long> pq;\n    for(auto\
    \ &x: arr) {\n        pq.push(x);\n        if(pq.size() > k) pq.pop();\n    }\n\
    \    std::vector<long> ans;\n    while(!pq.empty()) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpiocjw_it: /tmp/tmpiocjw_it.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Input and output vectors\n    std::vector<long> out, in;\n    // Loop\
    \ variable\n    long i, j;\n    // Loop through the input array\n    for(i = 0;\
    \ i < arr.size(); i++) {\n        // Add element to input vector\n        in.push_back(arr[i]);\n\
    \        // If the size of input vector is greater than k,\n        // remove\
    \ the minimum element of the vector\n        if(in.size() > k) {\n           \
    \ // Initialize minimum element\n            long min = in[0];\n            //\
    \ Set loop variable\n            j = 0;\n            // Loop through the input\
    \ vector\n            for(long l = 0; l < in.size(); l++) {\n                //\
    \ If current element is less than the minimum element,\n                // update\
    \ minimum element and loop variable\n                if(in[l] < min) {\n     \
    \               min = in[l];\n                    j = l;\n                }\n\
    \            }\n            // Remove minimum element from input vector\n    \
    \        in.erase(in.begin() + j);\n        }\n    }\n    // Sort the input vector\n\
    \    std::sort(in.begin(), in.end());\n    // Loop through the input vector\n\
    \    for(i = in.size() - 1; i >= 0; i--) {\n        // Add elements to output\
    \ vector\n        out.push_back(in[i]);\n    }\n    // Return the output vector\n\
    \    return out;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp4szny17j: /tmp/tmp4szny17j.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> v;\n    int n = arr.size();\n    int mid = n/2;\n \
    \   //we will do a quickselect like in quicksort\n    //we will recursively partition\
    \ the array and pick the largest k elements\n    //quickselect(arr,l,r,k)\n  \
    \  //if(r-l+1<=k) return arr[l..r]\n    //pivot = arr[r]\n    //partition arrount\
    \ pivot\n    //if(r-left+1>k) return quickselect(arr,l,left-1,k)\n    //else return\
    \ quickselect(arr,left,r,k-(r-left+1))\n    //O(n) expected time\n    for(int\
    \ i=0;i<k;i++){\n        int l = 0;\n        int r = n-1;\n        //mid = (l+r)/2;\n\
    \        //we want to partition the array around mid\n        int pivot = arr[mid];\n\
    \        std::swap(arr[mid],arr[r]);\n        int left = l;\n        for(int j=l;j<r;j++){\n\
    \            if(arr[j]>pivot){\n                std::swap(arr[j],arr[left]);\n\
    \                left++;\n            }\n        }\n        std::swap(arr[left],arr[r]);\n\
    \        //now at left pivot is present\n        if(r-left+1>k){\n           \
    \ mid = left;\n        }\n        else{\n            n = left;\n        }\n  \
    \  }\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp618_s_ev: /tmp/tmp618_s_ev.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Find the max value in arr and then\n    // find the first index of\
    \ max value.\n    // If (k == 1) return {max(arr)}.\n    // Next, find the second\
    \ max value in arr.\n    // Then, find the second index of max value.\n    //\
    \ We use a map to store the index of each number.\n    // For example, if\n  \
    \  // [arr[i] = -100, arr[j] = -100]\n    // We want to save the position of arr[i]\n\
    \    // and arr[j] in a map.\n    // In this case, we should push back\n    //\
    \ arr[i] and arr[j] into our answer.\n    // In this way, we can use (k) number\
    \ of times.\n    std::map<long, std::vector<int>> m;\n    // Init maxval, maxval_idx\n\
    \    long maxval = arr[0];\n    int maxval_idx = 0;\n    // Loop every element\
    \ in arr.\n    for (int i = 0; i < arr.size(); i++) {\n        // Find the max\
    \ element in arr.\n        if (arr[i] > maxval) {\n            maxval = arr[i];\n\
    \            maxval_idx = i;\n        }\n        // Save the index of each element\
    \ in arr.\n        m[arr[i]].push_back(i);\n    }\n    // Case (k == 1).\n   \
    \ if (k == 1) return {maxval};\n    // Erase the max element in arr.\n    m[maxval].erase(m[maxval].begin());\n\
    \    // Init vector<long> answer.\n    std::vector<long> answer;\n    // Push\
    \ back the max element in arr.\n    answer.push_back(maxval);\n    // Loop (k\
    \ - 1) times.\n    for (int i = 0; i < k - 1; i++) {\n        // Init maxval_idx,\
    \ maxval.\n        maxval_idx = 0;\n        maxval = arr[0];\n        // Find\
    \ the second max element in arr.\n        for (auto x : m) {\n            if (x.first\
    \ > maxval)\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphyc7apqj.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphyc7apqj.cpp:62:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmphyc7apqj.cpp:63:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   63 | int main() {\n      |            ^\n/tmp/tmphyc7apqj.cpp:76:1: error:\
    \ expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmphyc7apqj.cpp:55:37:\
    \ note: to match this \u2018{\u2019\n   55 |     for (int i = 0; i < k - 1; i++)\
    \ {\n      |                                     ^\n/tmp/tmphyc7apqj.cpp:76:1:\
    \ error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmphyc7apqj.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmphyc7apqj.cpp:76:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::multiset<long> ms;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        ms.insert(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        result.push_back(*ms.rbegin());\n        ms.erase(ms.find(*ms.rbegin()));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpog6cqfwy: /tmp/tmpog6cqfwy.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    for (int i = 0; i < k; i++) {\n        int\
    \ currIdx = i;\n        for (int j = i + 1; j < arr.size(); j++) {\n         \
    \   if (arr[j] > arr[currIdx]) {\n                currIdx = j;\n            }\n\
    \        }\n        res.push_back(arr[currIdx]);\n        std::swap(arr[i], arr[currIdx]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwrivqmw0: /tmp/tmpwrivqmw0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  long size = arr.size();\n  if (k > size) {\n    k = size;\n  }\n  if (k\
    \ <= 0) {\n    return {};\n  }\n  std::vector<long> result(k);\n  std::priority_queue<long>\
    \ pq;\n  for (long i = 0; i < size; i++) {\n    pq.push(arr[i]);\n  }\n  for (long\
    \ i = k - 1; i >= 0; i--) {\n    result[i] = pq.top();\n    pq.pop();\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> pq;\n  for (auto num : arr) {\n    pq.push(num);\n\
    \    if (pq.size() > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long> ans;\n\
    \  while (pq.size()) {\n    ans.push_back(pq.top());\n    pq.pop();\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwugk7ehw: /tmp/tmpwugk7ehw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Initialize\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    // Push array elements into heap\n    for (auto it = arr.begin(); it\
    \ != arr.end(); ++it) {\n        pq.push(*it);\n    }\n    // Remove all elements\
    \ but k from heap\n    for (int i = 0; i < arr.size() - k; ++i) {\n        pq.pop();\n\
    \    }\n    // Pop all elements in heap into result\n    std::vector<long> result;\n\
    \    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    // Reverse results\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjjktp90w: /tmp/tmpjjktp90w.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) {\n        return {};\n    }\n    if (k >= arr.size()) {\n\
    \        std::sort(arr.begin(), arr.end());\n        return arr;\n    }\n    std::vector<long>\
    \ r;\n    for (size_t i = 0; i < k; i++) {\n        r.push_back(arr[i]);\n   \
    \ }\n    std::sort(r.begin(), r.end());\n    for (size_t i = k; i < arr.size();\
    \ i++) {\n        if (arr[i] > r[0]) {\n            r[0] = arr[i];\n         \
    \   std::sort(r.begin(), r.end());\n        }\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int i, j;\n    std::vector<long> res;\n    if (k == 0)\n        return\
    \ res;\n    if (k == arr.size())\n        return arr;\n    // k-1 first elements\
    \ are from arr\n    for (i = 0; i < k - 1; i++)\n        res.push_back(arr[i]);\n\
    \    for (i = k - 1; i < arr.size(); i++) {\n        // if next element is larger\
    \ than max of k-1 elements\n        // then add it to res and remove the max element\n\
    \        // then sort the array\n        if (arr[i] > *max_element(res.begin(),\
    \ res.end())) {\n            res.push_back(arr[i]);\n            sort(res.begin(),\
    \ res.end());\n            res.erase(res.begin());\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpneqo321f: /tmp/tmpneqo321f.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    if (k == n) {\n        return arr;\n    }\n\
    \    assert(k > 0);\n    std::vector<long> result(k);\n    int i = 0;\n    for\
    \ (int j = 0; j < k; j++) {\n        result[j] = std::numeric_limits<long>::min();\n\
    \    }\n    while (i < n) {\n        if (arr[i] > result[0]) {\n            result[0]\
    \ = arr[i];\n            int j = 0;\n            while (j < k - 1 && result[j]\
    \ > result[j + 1]) {\n                std::swap(result[j], result[j + 1]);\n \
    \               j++;\n            }\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_encnwij: /tmp/tmp_encnwij.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> res;\n\tstd::sort(arr.begin(), arr.end());\n\tfor (long\
    \ j = arr.size() - 1; j >= 0; j--) {\n\t\tres.push_back(arr[j]);\n\t\tif (res.size()\
    \ == k) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphvt3l9cl: /tmp/tmphvt3l9cl.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    vector<long> ans;\n    priority_queue<long> pq;\n    for(auto a: arr){\n\
    \        pq.push(a);\n    }\n    while(k--){\n        long top = pq.top();\n \
    \       ans.push_back(top);\n        pq.pop();\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5kdfuko.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpo5kdfuko.cpp:19:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   19 |     vector<long> ans;\n      |     ^~~~~~\n\
    /tmp/tmpo5kdfuko.cpp:19:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo5kdfuko.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo5kdfuko.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpo5kdfuko.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ ans;\n      |            ^~~~\n/tmp/tmpo5kdfuko.cpp:20:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   20 |     priority_queue<long> pq;\n      |     ^~~~~~~~~~~~~~\n      | \
    \    std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpo5kdfuko.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpo5kdfuko.cpp:20:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   20"
  stdout: ''
  timestamp: 1660095662
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Implement your solution here\n  if(k==0) return {};\n  std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n  std::vector<long> res;\n  for(int\
    \ i=0;i<arr.size();i++){\n    if(pq.size()<k)\n      pq.push(arr[i]);\n    else{\n\
    \      long m=pq.top();\n      if(arr[i]>m){\n        pq.pop();\n        pq.push(arr[i]);\n\
    \      }\n    }\n  }\n  while(!pq.empty()){\n    res.push_back(pq.top());\n  \
    \  pq.pop();\n  }\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> queue;\n  for (long i = 0; i < k; i++) {\n  \
    \  queue.push(arr[i]);\n  }\n  for (long i = k; i < arr.size(); i++) {\n    queue.push(arr[i]);\n\
    \    queue.pop();\n  }\n  std::vector<long> result;\n  while (!queue.empty())\
    \ {\n    result.push_back(queue.top());\n    queue.pop();\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp646iubta: /tmp/tmp646iubta.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) {\n        return {};\n    }\n    if (k >= arr.size()) {\n\
    \        return arr;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long n : arr) {\n        if (pq.size() < k)\
    \ {\n            pq.push(n);\n        } else {\n            if (n > pq.top())\
    \ {\n                pq.pop();\n                pq.push(n);\n            }\n \
    \       }\n    }\n    std::vector<long> ans;\n    while (!pq.empty()) {\n    \
    \    ans.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpaqjezdpa: /tmp/tmpaqjezdpa.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> ret;\n    while (k--)\
    \ {\n        ret.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> k_max(k);\n    std::make_heap(k_max.begin(), k_max.end());\n\
    \    for (long el : arr) {\n        if (el > k_max.front()) {\n            std::pop_heap(k_max.begin(),\
    \ k_max.end());\n            k_max.back() = el;\n            std::push_heap(k_max.begin(),\
    \ k_max.end());\n        }\n    }\n    std::sort_heap(k_max.begin(), k_max.end());\n\
    \    return k_max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpprg67_vj: /tmp/tmpprg67_vj.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Initialize the vector.\n    std::vector<long> max_arr;\n    // Check\
    \ for empty vector.\n    if (arr.size() == 0) {\n        return max_arr;\n   \
    \ }\n    // Check for longer requested than vector.\n    if (k > arr.size()) {\n\
    \        k = arr.size();\n    }\n    // Create a partial sort with the length\
    \ of k.\n    std::nth_element(arr.begin(), arr.begin() + k, arr.end(), std::greater<int>());\n\
    \    // Create a reverse iterator.\n    std::vector<long>::reverse_iterator rit\
    \ = arr.rbegin();\n    // Create the maximum array.\n    for (long idx = 0; idx\
    \ < k; idx++) {\n        max_arr.push_back(*rit);\n        rit++;\n    }\n   \
    \ return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpf7g44e6n: /tmp/tmpf7g44e6n.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) {\n        return {};\n    }\n    if (k >= arr.size()) {\n\
    \        return arr;\n    }\n    auto cmp = [](long num1, long num2) { return\
    \ num1 > num2; };\n    std::priority_queue<long, std::vector<long>, decltype(cmp)>\
    \ pq(cmp);\n    for (auto num : arr) {\n        pq.push(num);\n    }\n    std::vector<long>\
    \ ans;\n    while (k--) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcdhbkh9l: /tmp/tmpcdhbkh9l.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Implement your solution here.\n    std::vector<long> res;\n    std::vector<long>::iterator\
    \ itr;\n    int index = 0;\n    while(k > 0) {\n        long max = arr[0];\n \
    \       for(int i = 0; i < arr.size(); i++) {\n            if(arr[i] > max) {\n\
    \                max = arr[i];\n                index = i;\n            }\n  \
    \      }\n        res.push_back(max);\n        arr.erase(arr.begin() + index);\n\
    \        k--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    if (n < k) return arr;\n    for (int i = 0;\
    \ i < k; i++) {\n        int max_ = i;\n        for (int j = i+1; j < n; j++)\
    \ {\n            if (arr[j] > arr[max_]) {\n                max_ = j;\n      \
    \      }\n        }\n        std::swap(arr[i], arr[max_]);\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpbfyurm: /tmp/tmpcpbfyurm.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095663
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// assert(arr.size() >= k);\n\t// assert(k >= 0);\n\tif (arr.size() < k)\n\
    \t\treturn std::vector<long>();\n\tif (k == 0)\n\t\treturn std::vector<long>();\n\
    \tif (k == arr.size())\n\t\treturn arr;\n\tstd::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> max_pq;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\
    max_pq.push(arr[i]);\n\t\tif (max_pq.size() > k)\n\t\t\tmax_pq.pop();\n\t}\n\t\
    std::vector<long> ans;\n\twhile (!max_pq.empty()) {\n\t\tans.push_back(max_pq.top());\n\
    \t\tmax_pq.pop();\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo21n4q2y: /tmp/tmpo21n4q2y.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095664
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> queue;\n  for (long i = 0; i < k; i++) {\n  \
    \  queue.push(arr[i]);\n  }\n  for (long i = k; i < arr.size(); i++) {\n    if\
    \ (arr[i] > queue.top()) {\n      queue.pop();\n      queue.push(arr[i]);\n  \
    \  }\n  }\n  std::vector<long> result;\n  while (!queue.empty()) {\n    result.push_back(queue.top());\n\
    \    queue.pop();\n  }\n  std::reverse(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqp0tnb6s: /tmp/tmpqp0tnb6s.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpludpisou: /tmp/tmpludpisou.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long el : arr) {\n        pq.push(el);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ result;\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n  \
    \      pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n   \
    \ return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbskhmsc3: /tmp/tmpbskhmsc3.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(0 <= k && k <= arr.size());\n    std::vector<long> res;\n    int\
    \ n = arr.size();\n    for (int i = 0; i < n; i++) {\n        while (!res.empty()\
    \ && n - i + res.size() > k && res.back() < arr[i]) {\n            res.pop_back();\n\
    \        }\n        if (res.size() < k) res.push_back(arr[i]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp17r0tj0z: /tmp/tmp17r0tj0z.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> result;\n\tstd::priority_queue<long> heap;\n\tfor (long\
    \ long i : arr) {\n\t\theap.push(i);\n\t}\n\tfor (long long i = 0; i < k; i++)\
    \ {\n\t\tresult.push_back(heap.top());\n\t\theap.pop();\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdcs2i3xp: /tmp/tmpdcs2i3xp.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    for(int i = n/2 - 1; i >= 0; i--) {\n      \
    \  heapify(arr, n, i);\n    }\n    while(k > 0) {\n        arr.pop_back();\n \
    \       k--;\n    }\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm57f83fe.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm57f83fe.cpp:21:9: error: \u2018heapify\u2019\
    \ was not declared in this scope\n   21 |         heapify(arr, n, i);\n      |\
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095665
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> res;\n    for\
    \ (int i = arr.size() - 1; i >= arr.size() - k; i--)\n        res.push_back(arr[i]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) return {};\n    if (k == arr.size()) return arr;\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < k; i++) {\n        auto it = std::max_element(arr.begin(),\
    \ arr.end());\n        result.push_back(*it);\n        arr.erase(it);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9gtln4_v: /tmp/tmp9gtln4_v.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // your code here\n  std::vector<long> ret;\n  for(auto i : arr) {\n  \
    \  if(ret.size() < k) {\n      ret.push_back(i);\n      std::sort(ret.begin(),\
    \ ret.end(), std::greater<long>());\n    } else {\n      for(auto& j : ret) {\n\
    \        if(i > j) {\n          j = i;\n          std::sort(ret.begin(), ret.end(),\
    \ std::greater<long>());\n          break;\n        }\n      }\n    }\n  }\n \
    \ return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7vsykso7: /tmp/tmp7vsykso7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k > arr.size()) {\n        std::cout\
    \ << \"K is larger than size of array\" << std::endl;\n        return res;\n \
    \   }\n    if (k == 0) {\n        return res;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (pq.top() < arr[i]) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long elt : arr) {\n        pq.push(elt);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7882gv0w: /tmp/tmp7882gv0w.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n\
    \    for (long el : arr) {\n        max_heap.push(el);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplxszm8mx: /tmp/tmplxszm8mx.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> queue;\n    for (long num : arr) {\n      \
    \  queue.push(num);\n        if (queue.size() > k) {\n            queue.pop();\n\
    \        }\n    }\n    std::vector<long> result;\n    while (!queue.empty()) {\n\
    \        result.push_back(queue.top());\n        queue.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphdld7fz3: /tmp/tmphdld7fz3.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> r;\n    if (k == 0) return r;\n    if (k >= arr.size())\
    \ return arr;\n    std::sort(arr.begin(), arr.end());\n    for (long i = arr.size()\
    \ - 1; i >= arr.size() - k; i--)\n        r.push_back(arr[i]);\n    return r;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp47jxwb84: /tmp/tmp47jxwb84.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    while(k>0){\n        long temp = INT_MIN;\n\
    \        int index = -1;\n        for(int i=0;i<arr.size();i++){\n           \
    \ if(arr[i]>temp){\n                temp = arr[i];\n                index = i;\n\
    \            }\n        }\n        res.push_back(temp);\n        arr.erase(arr.begin()+index);\n\
    \        k--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_hi4hb8t: /tmp/tmp_hi4hb8t.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if (k == 0) return std::vector<long>();\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> q;\n  for (int i = 0; i < arr.size(); i++) {\n    if (q.size()\
    \ < k) q.push(arr[i]);\n    else {\n      if (arr[i] > q.top()) {\n        q.pop();\n\
    \        q.push(arr[i]);\n      }\n    }\n  }\n  std::vector<long> result;\n \
    \ while (!q.empty()) {\n    result.push_back(q.top());\n    q.pop();\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpn_7xcabq: /tmp/tmpn_7xcabq.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    priority_queue<long, vector<long>, greater<long>> Q;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (Q.size() < k)\n            Q.push(arr[i]);\n\
    \        else {\n            if (Q.top() < arr[i]) {\n                Q.pop();\n\
    \                Q.push(arr[i]);\n            }\n        }\n    }\n    // dequeue\
    \ an element from queue and print it\n    // while (!Q.empty()) {\n    //    \
    \ cout << Q.top() << \" \";\n    //     Q.pop();\n    // }\n    vector<long> v;\n\
    \    for (int i = 0; i < k; i++) {\n        v.push_back(Q.top());\n        Q.pop();\n\
    \    }\n    reverse(v.begin(), v.end());\n    return v;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpweomwzza.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpweomwzza.cpp:19:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |     priority_queue<long, vector<long>, greater<long>> Q;\n      | \
    \    ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpweomwzza.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpweomwzza.cpp:19:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |     priority_queue<long,\
    \ vector<long>, greater<long>> Q;\n      |                    ^~~~\n/tmp/tmpweomwzza.cpp:21:13:\
    \ error: \u2018Q\u2019 was not declared in this scope\n   21 |         if (Q.size()\
    \ < k)\n      |             ^\n/tmp/tmpweomwzza.cpp:35:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   35 |     vector<long> v;\n      |     ^~~~~~\n\
    /tmp/tmpweomwzza.cpp:35:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpweomwzza.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpweomwzza.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr:"
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> res;\n\tstd::sort(arr.begin(), arr.end());\n\tint length\
    \ = arr.size();\n\tfor (int i = 0; i < k; i++) {\n\t\tres.push_back(arr[length\
    \ - 1 - i]);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8tcl1aib: /tmp/tmp8tcl1aib.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> ans;\n    while (k\
    \ > 0) {\n        ans.push_back(pq.top());\n        pq.pop();\n        k--;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp__w5_82p: /tmp/tmp__w5_82p.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> rt;\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> heap;\n    int i;\n    for (i = 0; i < k; i++) {\n     \
    \   heap.push(arr[i]);\n    }\n    for (; i < arr.size(); i++) {\n        if (arr[i]\
    \ > heap.top()) {\n            heap.pop();\n            heap.push(arr[i]);\n \
    \       }\n    }\n    for (i = 0; i < k; i++) {\n        rt.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return rt;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n     \
    \   result.push_back(0);\n    }\n    long top = -1;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        long e = arr[i];\n        if (top < k - 1) {\n \
    \           top++;\n            result[top] = e;\n        } else {\n         \
    \   long index = top;\n            for (long j = top; j >= 0; j--) {\n       \
    \         if (result[j] < e) {\n                    index = j;\n             \
    \   }\n            }\n            for (long j = index; j < top; j++) {\n     \
    \           result[j] = result[j + 1];\n            }\n            result[top]\
    \ = e;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpas9w2uyi: /tmp/tmpas9w2uyi.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Initialization:\n  std::vector<long> ans = arr;\n  // Edge case:\n \
    \ if (arr.size() <= k) {\n    return ans;\n  }\n  // Selection sort:\n  for (long\
    \ i = 0; i < k; i++) {\n    long max_index = i;\n    for (long j = i + 1; j <\
    \ arr.size(); j++) {\n      if (arr[j] > arr[max_index]) {\n        max_index\
    \ = j;\n      }\n    }\n    // Swap:\n    long temp = arr[i];\n    arr[i] = arr[max_index];\n\
    \    arr[max_index] = temp;\n  }\n  // Get:\n  ans.assign(arr.begin(), arr.begin()\
    \ + k);\n  // Return:\n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmph4ugidp4: /tmp/tmph4ugidp4.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == arr.size()) {\n        std::sort(arr.begin(), arr.end());\n\
    \        return arr;\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ res(k);\n    auto it = arr.end() - 1;\n    int index = 0;\n    while (k > 0)\
    \ {\n        res[index] = *it;\n        index++;\n        it--;\n        k--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1fedwqn5: /tmp/tmp1fedwqn5.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)123,
    (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,
    (long)20, (long)123}))'' failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> heap;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        heap.push(arr[i]);\n    }\n    std::vector<long> res;\n    while\
    \ (k--) {\n        res.push_back(heap.top());\n        heap.pop();\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp55t7s5eq: /tmp/tmp55t7s5eq.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    std::vector<long> heap(arr.begin(), arr.begin()\
    \ + k);\n    std::make_heap(heap.begin(), heap.end());\n    for (int i = k; i\
    \ < n; i++) {\n        if (arr[i] > heap[0]) {\n            std::pop_heap(heap.begin(),\
    \ heap.end());\n            heap.pop_back();\n            heap.push_back(arr[i]);\n\
    \            std::push_heap(heap.begin(), heap.end());\n        }\n    }\n   \
    \ std::sort_heap(heap.begin(), heap.end());\n    return heap;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplsxmj_eu: /tmp/tmplsxmj_eu.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// Your code here\n\tassert(k<=arr.size());\n\tsort(arr.begin(),arr.end());\n\
    \tstd::vector<long> res;\n\tfor(long i=0;i<k;i++)\n\t{\n\t\tres.push_back(arr[arr.size()-1-i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv4lkch0d: /tmp/tmpv4lkch0d.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Since set is by default a sorted container.\n    std::set<long> maximum;\n\
    \    // If k is equal to the vector size.\n    if (k == arr.size()) {\n      \
    \  // Return the sorted vector.\n        std::sort(arr.begin(), arr.end());\n\
    \        return arr;\n    }\n    // For each element in the vector.\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        // Insert the element into the set.\n\
    \        maximum.insert(arr[i]);\n        // If the set size is greater than k.\n\
    \        if (maximum.size() > k) {\n            // Delete the minimum element\
    \ from the set.\n            maximum.erase(maximum.begin());\n        }\n    }\n\
    \    // Return the set converted to vector.\n    return std::vector<long>(maximum.begin(),\
    \ maximum.end());\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2jq4icjo: /tmp/tmp2jq4icjo.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() >= 1 && arr.size() <= 1000);\n    for (long& i : arr)\
    \ {\n        assert(i >= -1000 && i <= 1000);\n    }\n    assert(k >= 0 && k <=\
    \ arr.size());\n    // O(arr.size())\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> q;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  q.push(arr[i]);\n        if (q.size() > k) {\n            q.pop();\n      \
    \  }\n    }\n    // O(k log k)\n    std::vector<long> res;\n    while (!q.empty())\
    \ {\n        res.push_back(q.top());\n        q.pop();\n    }\n    // reverse\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0sugj0cb: /tmp/tmp0sugj0cb.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> maxarr;\n  std::priority_queue<long> mypq;\n  for(auto\
    \ it=arr.begin();it!=arr.end();it++){\n    mypq.push(*it);\n  }\n  for(long i=0;i<k;i++){\n\
    \    maxarr.push_back(mypq.top());\n    mypq.pop();\n  }\n  return maxarr;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpixmm258d: /tmp/tmpixmm258d.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  /*\n   * Write your code here.\n   */\n   std::vector<long> tmp(arr.begin(),\
    \ arr.end());\n   std::sort(tmp.begin(), tmp.end());\n   tmp.erase(tmp.begin(),\
    \ tmp.end() - k);\n   std::reverse(tmp.begin(), tmp.end());\n   return tmp;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzr3gd22t: /tmp/tmpzr3gd22t.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (minHeap.size() < k) {\n            minHeap.push(arr[i]);\n       \
    \ } else {\n            if (minHeap.top() < arr[i]) {\n                minHeap.pop();\n\
    \                minHeap.push(arr[i]);\n            }\n        }\n    }\n    std::vector<long>\
    \ res;\n    while (!minHeap.empty()) {\n        res.push_back(minHeap.top());\n\
    \        minHeap.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    vector<long> res;\n    for(int i = 0; i < k; i++) {\n        int maxVal\
    \ = INT_MIN;\n        int maxIndex = -1;\n        for(int j = 0; j < arr.size();\
    \ j++) {\n            if(arr[j] > maxVal) {\n                maxVal = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        res.push_back(maxVal);\n\
    \        arr.erase(arr.begin() + maxIndex);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3minww7.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpn3minww7.cpp:19:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   19 |     vector<long> res;\n      |     ^~~~~~\n\
    /tmp/tmpn3minww7.cpp:19:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3minww7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3minww7.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpn3minww7.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ res;\n      |            ^~~~\n/tmp/tmpn3minww7.cpp:29:9: error: \u2018res\u2019\
    \ was not declared in this scope\n   29 |         res.push_back(maxVal);\n   \
    \   |         ^~~\n/tmp/tmpn3minww7.cpp:32:12: error: \u2018res\u2019 was not\
    \ declared in this scope\n   32 |     return res;\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> max_heap;\n  std::vector<long> res;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    max_heap.push(arr[i]);\n  }\n  while (k--)\
    \ {\n    res.push_back(max_heap.top());\n    max_heap.pop();\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3cx0jd9x: /tmp/tmp3cx0jd9x.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // create a priority queue that keeps only the largest k elements\n \
    \   std::priority_queue<long, std::vector<long>, std::greater<long>> kElements;\n\
    \    for (auto num : arr) {\n        if (kElements.size() < k) {\n           \
    \ kElements.push(num);\n        } else {\n            if (num > kElements.top())\
    \ {\n                kElements.pop();\n                kElements.push(num);\n\
    \            }\n        }\n    }\n    // check if k is greater than the length\
    \ of arr\n    if (k > arr.size()) {\n        k = arr.size();\n    }\n    // create\
    \ the result vector\n    std::vector<long> result(k);\n    for (int i = k - 1;\
    \ i >= 0; i--) {\n        result[i] = kElements.top();\n        kElements.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ztcu_wx: /tmp/tmp3ztcu_wx.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if (k == arr.size()) return arr;\n  std::priority_queue<long> q;\n  for\
    \ (auto i : arr) {\n    q.push(i);\n    if (q.size() > k) q.pop();\n  }\n  std::vector<long>\
    \ res;\n  while (!q.empty()) {\n    res.push_back(q.top());\n    q.pop();\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxlqgiu0b: /tmp/tmpxlqgiu0b.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // TODO: Implement the solution\n    std::vector<long> v;\n    int a;\n\
    \    for(int i=0;i<k;i++)\n    {\n        a=*max_element(arr.begin(),arr.end());\n\
    \        arr.erase(std::remove(arr.begin(), arr.end(), a), arr.end());\n     \
    \   v.push_back(a);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpr1u6qpq5: /tmp/tmpr1u6qpq5.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // remove everything else\n    // the rightmost elements will be the\
    \ k largest\n    // std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ pq;\n    // for (auto it = arr.begin(); it != arr.end(); ++it) {\n    //   \
    \  pq.push(*it);\n    //     if (pq.size() > k) {\n    //         pq.pop();\n\
    \    //     }\n    // }\n    // std::vector<long> v;\n    // for (int i = 0; i\
    \ < k; ++i) {\n    //     v.push_back(pq.top());\n    //     pq.pop();\n    //\
    \ }\n    // std::reverse(v.begin(), v.end());\n    // return v;\n    std::vector<long>\
    \ v;\n    int i = 0;\n    while (i < k) {\n        long max = INT_MIN;\n     \
    \   int maxIdx = 0;\n        for (int j = i; j < arr.size(); ++j) {\n        \
    \    if (arr[j] > max) {\n                max = arr[j];\n                maxIdx\
    \ = j;\n            }\n        }\n        v.push_back(max);\n        arr.erase(arr.begin()\
    \ + maxIdx);\n        ++i;\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7oehxr5k: /tmp/tmp7oehxr5k.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    for (long i = 0; i < k; i++)\n    {\n   \
    \     res.push_back(arr[i]);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    for (long i = k; i < arr.size(); i++)\n    {\n        if (arr[i] > res[0])\n\
    \        {\n            res[0] = arr[i];\n            std::sort(res.begin(), res.end());\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    if (k == n) return arr;\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < n; i++) {\n        while (!res.empty() && res.back()\
    \ < arr[i] && res.size()+n-i > k) res.pop_back();\n        if (res.size() < k)\
    \ res.push_back(arr[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvt05vi4m: /tmp/tmpvt05vi4m.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::priority_queue<long, std::vector<long>, std::greater<long>> q;\n\t\
    for (auto& x : arr) {\n\t\tif (q.size() < k) {\n\t\t\tq.push(x);\n\t\t}\n\t\t\
    else {\n\t\t\tlong top = q.top();\n\t\t\tif (x > top) {\n\t\t\t\tq.pop();\n\t\t\
    \t\tq.push(x);\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<long> ans;\n\twhile (!q.empty())\
    \ {\n\t\tans.push_back(q.top());\n\t\tq.pop();\n\t}\n\tstd::reverse(ans.begin(),\
    \ ans.end());\n\treturn ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1c1lo33_: /tmp/tmp1c1lo33_.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto i: arr) {\n        pq.push(i);\n\
    \        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long> result;\n\
    \    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp2a1_t2th: /tmp/tmp2a1_t2th.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>::iterator it;\n\
    \    it = arr.begin();\n    arr.erase(it, it + arr.size() - k);\n    return arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    using namespace std;\n    vector<long> res;\n    int len = arr.size();\n\
    \    int gap = len - k;\n    sort(arr.begin(), arr.end());\n    if (gap == 0)\
    \ {\n        return arr;\n    }\n    while (gap > 0) {\n        res.push_back(arr[0]);\n\
    \        arr.erase(arr.begin());\n        gap--;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpfknj1vk7: /tmp/tmpfknj1vk7.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(0 <= k && k <= arr.size());\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n   \
    \         if (arr[i] > pq.top()) {\n                pq.pop();\n              \
    \  pq.push(arr[i]);\n            }\n        }\n    }\n    std::vector<long> ans;\n\
    \    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp76k4qe2p: /tmp/tmp76k4qe2p.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while (k--)\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3_uifuxs: /tmp/tmp3_uifuxs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> q;\n    int i =\
    \ 0;\n    while(i < arr.size()){\n        q.push(arr[i]);\n        i++;\n    }\n\
    \    while(k--){\n        res.push_back(q.top());\n        q.pop();\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3jnfxvsk: /tmp/tmp3jnfxvsk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095667
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tusing namespace std;\n\tpriority_queue<long, vector<long>, greater<long>>\
    \ pq;\n\tfor (auto i : arr) {\n\t\tif (pq.size() < k) {\n\t\t\tpq.push(i);\n\t\
    \t} else {\n\t\t\tlong min = pq.top();\n\t\t\tif (i > min) {\n\t\t\t\tpq.pop();\n\
    \t\t\t\tpq.push(i);\n\t\t\t}\n\t\t}\n\t}\n\tvector<long> result;\n\twhile (!pq.empty())\
    \ {\n\t\tresult.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> ans;\n  int i = 0;\n  while (i < k) {\n    long max =\
    \ arr[0];\n    int max_idx = 0;\n    for (int j = 0; j < arr.size(); j++) {\n\
    \      if (arr[j] > max) {\n        max = arr[j];\n        max_idx = j;\n    \
    \  }\n    }\n    ans.push_back(max);\n    arr.erase(arr.begin() + max_idx);\n\
    \    i++;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp105fhb3p: /tmp/tmp105fhb3p.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095668
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Solutions:\n    // + Sort the array and return the first k elements.\n\
    \    // + Or:\n    // + Maintain a map in sorted order. Add each element to the\
    \ map, and remove the smallest\n    // + element of the map if the map has more\
    \ than k elements.\n    // + Or:\n    // + Use a heap to keep track of the k largest\
    \ elements.\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n\
    \    for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code goes here\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for(int i = 0; i < arr.size(); i++){\n        if(pq.size()\
    \ < k) pq.push(arr[i]);\n        else{\n            if(arr[i] > pq.top()){\n \
    \               pq.pop();\n                pq.push(arr[i]);\n            }\n \
    \       }\n    }\n    std::vector<long> ret;\n    while(!pq.empty()){\n      \
    \  ret.push_back(pq.top());\n        pq.pop();\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while (k--)\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpx8084dg1: /tmp/tmpx8084dg1.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result(k);\n    auto n = arr.size();\n    std::priority_queue<std::pair<long,\
    \ long>> pq;\n    for (int i = 0; i < n; i++) {\n        pq.push({arr[i], i});\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    for\
    \ (int i = k - 1; i >= 0; i--) {\n        result[i] = pq.top().first;\n      \
    \  pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwhznq_nm: /tmp/tmpwhznq_nm.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  int n = arr.size();\n  if (n == 0) return\
    \ result;\n  if (k == 0) return result;\n  long min = arr[0];\n  for (int i =\
    \ 0; i < n; i++) {\n    if (arr[i] < min) min = arr[i];\n  }\n  if (min < 0) {\n\
    \    for (int i = 0; i < n; i++) {\n      arr[i] -= min;\n    }\n  }\n  int len\
    \ = arr.size();\n  if (k >= len) return arr;\n  std::vector<long> result2;\n \
    \ for (int i = 0; i < k; i++) {\n    result2.push_back(arr[i]);\n  }\n  int minIndex\
    \ = 0;\n  for (int i = k; i < len; i++) {\n    minIndex = getMinIndex(result2);\n\
    \    if (arr[i] > result2[minIndex]) {\n      result2[minIndex] = arr[i];\n  \
    \  }\n  }\n  if (min < 0) {\n    for (int i = 0; i < k; i++) {\n      result2[i]\
    \ += min;\n    }\n  }\n  return result2;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxo4jj0p.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpvxo4jj0p.cpp:40:16: error: \u2018getMinIndex\u2019\
    \ was not declared in this scope; did you mean \u2018minIndex\u2019?\n   40 |\
    \     minIndex = getMinIndex(result2);\n      |                ^~~~~~~~~~~\n \
    \     |                minIndex\n"
  stdout: ''
  timestamp: 1660095667
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) {\n        return res;\n    }\n\
    \    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n   \
    \         pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // initialize a result vector\n  std::vector<long> result;\n  // if k is\
    \ 0, return result\n  if (k == 0) {\n    return result;\n  }\n  // iterate through\
    \ arr, starting from the first number\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    // if result is empty, append the number to result and continue to the\
    \ next number\n    if (result.empty()) {\n      result.push_back(arr[i]);\n  \
    \    continue;\n    }\n    // if the number is larger than the first number in\
    \ result, insert the number in front of result\n    // and pop the last element\
    \ of result\n    if (arr[i] > result[0]) {\n      result.insert(result.begin(),\
    \ arr[i]);\n      result.pop_back();\n    }\n    // if the number is smaller than\
    \ the last number in result, append the number to result\n    else if (arr[i]\
    \ < result[result.size() - 1]) {\n      result.push_back(arr[i]);\n    }\n   \
    \ // if the number is between the first and last number in result, \n    // then\
    \ compare the number with the numbers in result from the end and insert\n    //\
    \ the number at the first index where the number is larger than the index's number\n\
    \    else {\n      for (int j = result.size() - 1; j >= 0; j--) {\n        if\
    \ (arr[i] > result[j]) {\n          result.insert(result.begin() + j + 1, arr[i]);\n\
    \          break;\n        }\n      }\n    }\n  }\n  // return result\n  return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpm10mpif5: /tmp/tmpm10mpif5.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k == 0) {\n\t\treturn {};\n\t}\n\tstd::vector<long> ans;\n\tfor (long\
    \ i = 0; i < arr.size(); i++) {\n\t\tif (ans.size() < k) {\n\t\t\tans.push_back(arr[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tstd::sort(ans.begin(), ans.end());\n\t\t\tif (arr[i]\
    \ > ans[0]) {\n\t\t\t\tans[0] = arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(ans.begin(),\
    \ ans.end());\n\treturn ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095668
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> heap;\n    for (auto it = arr.begin(); it !=\
    \ arr.end(); ++it) {\n        heap.push(*it);\n    }\n    std::vector<long> result;\n\
    \    for (int i = 0; i < k; ++i) {\n        result.push_back(heap.top());\n  \
    \      heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ret;\n    std::multiset<long> st;\n    for (auto ele\
    \ : arr) {\n        st.insert(ele);\n        if (st.size() > k) {\n          \
    \  st.erase(st.begin());\n        }\n    }\n    for (auto ele : st) {\n      \
    \  ret.push_back(ele);\n    }\n    std::reverse(ret.begin(), ret.end());\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5_5xdftw: /tmp/tmp5_5xdftw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  vector<long> result;\n  if (arr.size() <= k) {\n    return arr;\n  }\n\
    \  priority_queue<long, vector<long>, greater<long>> min_heap;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (min_heap.size() < k) {\n      min_heap.push(arr[i]);\n\
    \    } else {\n      if (min_heap.top() < arr[i]) {\n        min_heap.pop();\n\
    \        min_heap.push(arr[i]);\n      }\n    }\n  }\n  while (!min_heap.empty())\
    \ {\n    result.push_back(min_heap.top());\n    min_heap.pop();\n  }\n  reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpasm9yl7s.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpasm9yl7s.cpp:19:3: error: \u2018vector\u2019\
    \ was not declared in this scope\n   19 |   vector<long> result;\n      |   ^~~~~~\n\
    /tmp/tmpasm9yl7s.cpp:19:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpasm9yl7s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpasm9yl7s.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpasm9yl7s.cpp:19:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |   vector<long>\
    \ result;\n      |          ^~~~\n/tmp/tmpasm9yl7s.cpp:23:3: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   23 |   priority_queue<long, vector<long>, greater<long>> min_heap;\n   \
    \   |   ^~~~~~~~~~~~~~\n      |   std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpasm9yl7s.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpasm9yl7s.cpp:23:18: error: expected\
    \ primary-express"
  stdout: ''
  timestamp: 1660095668
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res(k);\n    std::sort(arr.begin(), arr.end());\n \
    \   std::copy(arr.end() - k, arr.end(), res.begin());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> res;\n\tstd::priority_queue<long> pq;\n\tfor (int i =\
    \ 0; i < arr.size(); i++) {\n\t\tpq.push(arr[i]);\n\t}\n\twhile (!pq.empty() &&\
    \ k > 0) {\n\t\tres.push_back(pq.top());\n\t\tpq.pop();\n\t\tk--;\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpux79438s: /tmp/tmpux79438s.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto x : arr) {\n        pq.push(x);\n\
    \        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long> res;\n   \
    \ while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmproxn9_ni: /tmp/tmproxn9_ni.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    priority_queue<long, vector<long>, greater<long>> pq;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (pq.size() < k)\n            pq.push(arr[i]);\n\
    \        else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    vector<long>\
    \ res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4d_3g316.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp4d_3g316.cpp:19:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |     priority_queue<long, vector<long>, greater<long>> pq;\n      |\
    \     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4d_3g316.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmp4d_3g316.cpp:19:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |     priority_queue<long,\
    \ vector<long>, greater<long>> pq;\n      |                    ^~~~\n/tmp/tmp4d_3g316.cpp:21:13:\
    \ error: \u2018pq\u2019 was not declared in this scope\n   21 |         if (pq.size()\
    \ < k)\n      |             ^~\n/tmp/tmp4d_3g316.cpp:30:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   30 |     vector<long> res;\n      |     ^~~~~~\n\
    /tmp/tmp4d_3g316.cpp:30:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4d_3g316.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4d_3g316.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018st"
  stdout: ''
  timestamp: 1660095668
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    // Complete this function\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (auto& num : arr)\
    \ {\n        min_heap.push(num);\n        if (min_heap.size() > k) {\n       \
    \     min_heap.pop();\n        }\n    }\n    while (!min_heap.empty()) {\n   \
    \     result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> arrMin(arr.begin(), arr.end());\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < k; i++) {\n        res.push_back(arrMin.top());\n\
    \        arrMin.pop();\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> max_list;\n  if (k == 0) {\n    return max_list;\n  }\n\
    \  std::priority_queue<long, std::vector<long>, std::greater<long>> max_heap;\n\
    \  for (auto num : arr) {\n    max_heap.push(num);\n    if (max_heap.size() >\
    \ k) {\n      max_heap.pop();\n    }\n  }\n  while (!max_heap.empty()) {\n   \
    \ max_list.push_back(max_heap.top());\n    max_heap.pop();\n  }\n  std::reverse(max_list.begin(),\
    \ max_list.end());\n  return max_list;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv5g0q5me: /tmp/tmpv5g0q5me.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::multiset<long> st;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\
    if (st.size() < k) {\n\t\t\tst.insert(arr[i]);\n\t\t}\n\t\telse {\n\t\t\tauto\
    \ it = st.begin();\n\t\t\tif (arr[i] > *it) {\n\t\t\t\tst.erase(it);\n\t\t\t\t\
    st.insert(arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<long> res;\n\tfor (auto\
    \ it = st.rbegin(); it != st.rend(); it++) {\n\t\tres.push_back(*it);\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo17n05r3: /tmp/tmpo17n05r3.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i : arr) {\n        pq.push(i);\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwlimvyed: /tmp/tmpwlimvyed.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long v : arr) {\n        pq.push(v);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpeymctt50: /tmp/tmpeymctt50.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n\
    \    std::vector<long> ans;\n    for(int i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6j9c5kv_: /tmp/tmp6j9c5kv_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    int size = arr.size();\n    sort(arr.begin(),\
    \ arr.end());\n    for(int i = size - 1; i >= size - k; i--) {\n        ans.push_back(arr[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmptu8su30s: /tmp/tmptu8su30s.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> res;\n  int l = 0, r = arr.size() - 1;\n  while (l <=\
    \ r) {\n    int i = l;\n    for (int j = l + 1; j <= r; j++) {\n      if (arr[j]\
    \ > arr[i]) {\n        i = j;\n      }\n    }\n    res.push_back(arr[i]);\n  \
    \  if (res.size() == k) {\n      break;\n    }\n    if (i == l) {\n      l++;\n\
    \    } else if (i == r) {\n      r--;\n    } else {\n      l++;\n      r--;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpa99odo3d: /tmp/tmpa99odo3d.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> s;\n    long i,j;\n    for(i=0;i<k;i++)\n    {\n  \
    \      s.push_back(arr[i]);\n    }\n    std::sort(s.begin(),s.end());\n    j=k;\n\
    \    while(j<arr.size())\n    {\n        if(arr[j]>s[0])\n        {\n        \
    \    s.erase(s.begin());\n            s.push_back(arr[j]);\n            std::sort(s.begin(),s.end());\n\
    \        }\n        j++;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    std::vector<long> results;\n    int\
    \ arrSize = arr.size();\n    if (arrSize < k) {\n        for (int i = 0; i < arrSize;\
    \ i++) {\n            pq.push(arr[i]);\n        }\n    } else {\n        for (int\
    \ i = 0; i < k; i++) {\n            pq.push(arr[i]);\n        }\n        for (int\
    \ i = k; i < arrSize; i++) {\n            if (arr[i] > pq.top()) {\n         \
    \       pq.pop();\n                pq.push(arr[i]);\n            }\n        }\n\
    \    }\n    while (!pq.empty()) {\n        results.push_back(pq.top());\n    \
    \    pq.pop();\n    }\n    std::reverse(results.begin(), results.end());\n   \
    \ return results;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6dhmfdcu: /tmp/tmp6dhmfdcu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // std::cout << \"arr: \";\n    // for (auto v : arr) {\n    //     std::cout\
    \ << v << \" \";\n    // }\n    // std::cout << \"\\n\";\n    // std::cout <<\
    \ \"k: \" << k << \"\\n\";\n    if (k == arr.size()) {\n        std::sort(arr.begin(),\
    \ arr.end());\n        return arr;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n    std::vector<long> result;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (min_heap.size() < k) {\n        \
    \    min_heap.push(arr[i]);\n        } else {\n            if (arr[i] > min_heap.top())\
    \ {\n                min_heap.pop();\n                min_heap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpa10q5218: /tmp/tmpa10q5218.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)123,
    (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,
    (long)20, (long)123}))'' failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    int len = arr.size();\n    for (int i = 0;\
    \ i < len; i++) {\n        // If there are enough items in the vector and the\
    \ current element\n        // is greater than the last item in the vector then\
    \ insert the\n        // current element at the right position to keep the vector\n\
    \        // sorted.\n        while (res.size() > 0 && res.size() + len - i > k\
    \ && res.back() < arr[i])\n            res.pop_back();\n        if (res.size()\
    \ < k)\n            res.push_back(arr[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpn398zl7w: /tmp/tmpn398zl7w.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto &item : arr) {\n       \
    \ pq.push(item);\n    }\n    std::vector<long> res;\n    while (k--) {\n     \
    \   res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxfvsypfn: /tmp/tmpxfvsypfn.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code here\n    // priority_queue<long, vector<long>, greater<long>>\
    \ queue;\n    // priority_queue<long, vector<long>, greater<long>> new_queue;\n\
    \    // for(long i = 0; i < arr.size(); i++){\n    //     if(queue.size() < k){\n\
    \    //         queue.push(arr[i]);\n    //     }else{\n    //         if(arr[i]\
    \ > queue.top()){\n    //             queue.pop();\n    //             queue.push(arr[i]);\n\
    \    //         }\n    //     }\n    // }\n    // for(long i = 0; i < k; i++){\n\
    \    //     new_queue.push(queue.top());\n    //     queue.pop();\n    // }\n\
    \    // vector<long> vector_result;\n    // for(long i = 0; i < k; i++){\n   \
    \ //     vector_result.push_back(new_queue.top());\n    //     new_queue.pop();\n\
    \    // }\n    // return vector_result;\n    priority_queue<long, vector<long>,\
    \ greater<long>> queue;\n    priority_queue<long, vector<long>, greater<long>>\
    \ new_queue;\n    for(long i = 0; i < arr.size(); i++){\n        if(queue.size()\
    \ < k){\n            queue.push(arr[i]);\n        }else{\n            if(arr[i]\
    \ > queue.top()){\n                queue.pop();\n                queue.push(arr[i]);\n\
    \            }\n        }\n    }\n    for(long i = 0; i < k; i++){\n        new_queue.push(queue.top());\n\
    \        queue.pop();\n    }\n    vector<long> vector_result;\n    for(long i\
    \ = 0; i < k; i++){\n        vector_result.push_back(new_queue.top());\n     \
    \   new_queue.pop();\n    }\n    return vector_result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_itia2tc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_itia2tc.cpp:42:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   42 |     priority_queue<long, vector<long>, greater<long>> queue;\n    \
    \  |     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from\
    \ /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_itia2tc.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmp_itia2tc.cpp:42:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   42 |     priority_queue<long,\
    \ vector<long>, greater<long>> queue;\n      |                    ^~~~\n/tmp/tmp_itia2tc.cpp:43:20:\
    \ error: expected primary-expression before \u2018long\u2019\n   43 |     priority_queue<long,\
    \ vector<long>, greater<long>> new_queue;\n      |                    ^~~~\n/tmp/tmp_itia2tc.cpp:45:12:\
    \ error: \u2018queue\u2019 was not declared in this scope; did you mean \u2018\
    std::queue\u2019?\n   45 |         if(queue.size() < k){\n      |            ^~~~~\n\
    \      |            std::queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_itia2tc.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:96:11:\
    \ note: \u2018std::queue\u2019 declared here\n   96 |     class queue\n      |\
    \           ^~~~~\n/tmp/tmp_itia2tc.cpp:55:9: error: \u2018new_queue\u2019 was\
    \ not declared in this scope\n   55 |         new_queue.push(queue.top());\n \
    \     |         ^~~~~~~~~\n/tmp/tmp_itia2tc.cpp:55:24: error: \u2018queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::queue\u2019?\n   55\
    \ |         new_queue.push(queue.top());\n      |                        ^~~~~\n\
    \      |                        std::queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu"
  stdout: ''
  timestamp: 1660095668
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tpriority_queue<long, vector<long>, greater<long>> min_heap;\n\tvector<long>\
    \ ans;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (min_heap.size() < k)\
    \ {\n\t\t\tmin_heap.push(arr[i]);\n\t\t}\n\t\telse {\n\t\t\tif (arr[i] > min_heap.top())\
    \ {\n\t\t\t\tmin_heap.pop();\n\t\t\t\tmin_heap.push(arr[i]);\n\t\t\t}\n\t\t}\n\
    \t}\n\twhile (!min_heap.empty()) {\n\t\tans.push_back(min_heap.top());\n\t\tmin_heap.pop();\n\
    \t}\n\treverse(ans.begin(), ans.end());\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8a_iptp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpc8a_iptp.cpp:19:2: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |  priority_queue<long, vector<long>, greater<long>> min_heap;\n    \
    \  |  ^~~~~~~~~~~~~~\n      |  std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpc8a_iptp.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpc8a_iptp.cpp:19:17: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |  priority_queue<long, vector<long>,\
    \ greater<long>> min_heap;\n      |                 ^~~~\n/tmp/tmpc8a_iptp.cpp:20:2:\
    \ error: \u2018vector\u2019 was not declared in this scope\n   20 |  vector<long>\
    \ ans;\n      |  ^~~~~~\n/tmp/tmpc8a_iptp.cpp:20:2: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc8a_iptp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc8a_iptp.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpc8a_iptp.cpp:2"
  stdout: ''
  timestamp: 1660095668
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n    for(auto\
    \ x: arr) {\n        pq.push(x);\n        if(pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    while(!pq.empty()) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprm347at1: /tmp/tmprm347at1.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(arr.size() >= k);\n  std::vector<long> max;\n  std::make_heap(arr.begin(),\
    \ arr.end());\n  for (long i = 0; i < k; i++) {\n    max.push_back(arr.front());\n\
    \    std::pop_heap(arr.begin(), arr.end());\n    arr.pop_back();\n  }\n  return\
    \ max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_12bpe7e: /tmp/tmp_12bpe7e.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // I thought it might be faster to use min-heap than sort.\n  // It is\
    \ not.\n  std::vector<long> res;\n  if (k > arr.size()) {\n    res = arr;\n  \
    \  return res;\n  }\n  res.reserve(k);\n  std::make_heap(arr.begin(), arr.end());\n\
    \  std::pop_heap(arr.begin(), arr.end());\n  arr.pop_back();\n  while (arr.size()\
    \ > k - 1) {\n    std::pop_heap(arr.begin(), arr.end());\n    arr.pop_back();\n\
    \  }\n  std::make_heap(arr.begin(), arr.end());\n  for (long i = k - 1; i >= 0;\
    \ i--) {\n    res.push_back(arr.front());\n    std::pop_heap(arr.begin(), arr.end());\n\
    \    arr.pop_back();\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplero7vq4: /tmp/tmplero7vq4.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_k;\n    std::vector<long>::iterator it;\n    while(k--){\n\
    \        it = std::max_element(arr.begin(), arr.end());\n        max_k.push_back(*it);\n\
    \        arr.erase(it);\n    }\n    return max_k;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprx10zrwo: /tmp/tmprx10zrwo.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\t\
    for (long i = 0; i < k; i++) {\n\t\tpq.push(arr[i]);\n\t}\n\tfor (long i = k;\
    \ i < arr.size(); i++) {\n\t\tif (arr[i] > pq.top()) {\n\t\t\tpq.pop();\n\t\t\t\
    pq.push(arr[i]);\n\t\t}\n\t}\n\tstd::vector<long> result;\n\twhile (!pq.empty())\
    \ {\n\t\tresult.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmper1my84v: /tmp/tmper1my84v.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int len = arr.size();\n    if (k >= len) {\n        sort(arr.begin(),\
    \ arr.end());\n        return arr;\n    }\n    std::vector<long> res;\n    priority_queue<long,\
    \ vector<long>, greater<long>> pq;\n    for (int i = 0; i < len; i++) {\n    \
    \    if (pq.size() < k) {\n            pq.push(arr[i]);\n        } else {\n  \
    \          if (arr[i] > pq.top()) {\n                pq.pop();\n             \
    \   pq.push(arr[i]);\n            }\n        }\n    }\n    while (!pq.empty())\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa8d_tcp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpwa8d_tcp.cpp:25:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   25 |     priority_queue<long, vector<long>, greater<long>> pq;\n      |\
    \     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpwa8d_tcp.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpwa8d_tcp.cpp:25:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   25 |     priority_queue<long,\
    \ vector<long>, greater<long>> pq;\n      |                    ^~~~\n/tmp/tmpwa8d_tcp.cpp:27:13:\
    \ error: \u2018pq\u2019 was not declared in this scope\n   27 |         if (pq.size()\
    \ < k) {\n      |             ^~\n/tmp/tmpwa8d_tcp.cpp:36:13: error: \u2018pq\u2019\
    \ was not declared in this scope\n   36 |     while (!pq.empty()) {\n      | \
    \            ^~\n"
  stdout: ''
  timestamp: 1660095669
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    res.reserve(k);\n    // Using std::priority_queue\
    \ to sort elements in descending order.\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (auto num : arr) {\n        pq.push(num);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095669
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if(k == 0) return {};\n  std::priority_queue<long> pq;\n  for(auto& i :\
    \ arr) {\n    pq.push(i);\n    if(pq.size() > k) {\n      pq.pop();\n    }\n \
    \ }\n  std::vector<long> res;\n  while(pq.size()) {\n    res.push_back(pq.top());\n\
    \    pq.pop();\n  }\n  std::reverse(res.begin(), res.end());\n  return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3uxmj7uw: /tmp/tmp3uxmj7uw.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    priority_queue<long, vector<long>, greater<long>> pq;\n    vector<long>\
    \ result;\n    for(int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \        if(pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while(!pq.empty())\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptelbft0s.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmptelbft0s.cpp:19:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |     priority_queue<long, vector<long>, greater<long>> pq;\n      |\
    \     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptelbft0s.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmptelbft0s.cpp:19:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |     priority_queue<long,\
    \ vector<long>, greater<long>> pq;\n      |                    ^~~~\n/tmp/tmptelbft0s.cpp:20:5:\
    \ error: \u2018vector\u2019 was not declared in this scope\n   20 |     vector<long>\
    \ result;\n      |     ^~~~~~\n/tmp/tmptelbft0s.cpp:20:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptelbft0s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptelbft0s.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpte"
  stdout: ''
  timestamp: 1660095669
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> result;\n\tstd::sort(arr.begin(), arr.end());\n\tfor\
    \ (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n\t\tresult.push_back(arr[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k > arr.size())\n\t\tthrow std::invalid_argument(\"K should be less\
    \ than or equal to the length of the array\");\n\tstd::vector<long> maxK(k);\n\
    \tstd::make_heap(maxK.begin(), maxK.end());\n\tstd::vector<long>::iterator it;\n\
    \tfor (it = arr.begin(); it != arr.end(); ++it) {\n\t\tif (*it > maxK.front())\
    \ {\n\t\t\tstd::pop_heap(maxK.begin(), maxK.end());\n\t\t\tmaxK.pop_back();\n\t\
    \t\tmaxK.push_back(*it);\n\t\t\tstd::push_heap(maxK.begin(), maxK.end());\n\t\t\
    }\n\t}\n\tstd::sort_heap(maxK.begin(), maxK.end());\n\treturn maxK;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpu9dj2lqi: /tmp/tmpu9dj2lqi.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> res;\n  // your code here\n  // std::cout << \"arr: \"\
    ;\n  // for (auto e : arr) {\n  //   std::cout << e << \" \";\n  // }\n  // std::cout\
    \ << std::endl;\n  // std::cout << \"k: \" << k << std::endl;\n  if (k == 0) {\n\
    \    return res;\n  }\n  std::vector<long> buffer;\n  for (auto e : arr) {\n \
    \   if (buffer.size() < k) {\n      buffer.push_back(e);\n      std::push_heap(buffer.begin(),\
    \ buffer.end());\n    } else {\n      if (e > buffer[0]) {\n        std::pop_heap(buffer.begin(),\
    \ buffer.end());\n        buffer.pop_back();\n        buffer.push_back(e);\n \
    \       std::push_heap(buffer.begin(), buffer.end());\n      }\n    }\n  }\n \
    \ // std::cout << \"buffer: \";\n  // for (auto e : buffer) {\n  //   std::cout\
    \ << e << \" \";\n  // }\n  // std::cout << std::endl;\n  std::sort_heap(buffer.begin(),\
    \ buffer.end());\n  res = buffer;\n  return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpuf1opwvn: /tmp/tmpuf1opwvn.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> maxes;\n\tstd::priority_queue<long> pq;\n\tfor (long\
    \ i = 0; i < arr.size(); i++) {\n\t\tpq.push(arr[i]);\n\t}\n\tfor (long i = 0;\
    \ i < k; i++) {\n\t\tmaxes.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\treturn\
    \ maxes;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9hd7t2b0: /tmp/tmp9hd7t2b0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095670
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto a : arr) {\n        pq.push(a);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ ret;\n    while (!pq.empty()) {\n        ret.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9cicd3ug: /tmp/tmp9cicd3ug.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code here\n  return {};\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo4n663q_: /tmp/tmpo4n663q_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // int n = arr.size();\n    // int n = 1;\n    // std::vector<long> res;\n\
    \    // std::sort(arr.begin(), arr.end());\n    // for (int i = n - 1; i >= n\
    \ - k; i--) {\n    //     res.push_back(arr[i]);\n    // }\n    // return res;\n\
    \    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while (k > 0)\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n        k--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpgy483w19: /tmp/tmpgy483w19.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long l : arr) {\n        pq.push(l);\n\
    \        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long> res;\n   \
    \ while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_uhtqrw8: /tmp/tmp_uhtqrw8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> q;\n    for (auto &e : arr) {\n        q.push(e);\n\
    \        if (q.size() > k) {\n            q.pop();\n        }\n    }\n    std::vector<long>\
    \ result;\n    while (q.size()) {\n        result.push_back(q.top());\n      \
    \  q.pop();\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpje6ivpkz: /tmp/tmpje6ivpkz.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n     \
    \   result.push_back(0);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        long index = k - 1;\n        for (long j = k - 1; j >= 0; j--) {\n  \
    \          if (result[j] > arr[i]) {\n                index = j - 1;\n       \
    \     }\n        }\n        if (index >= 0) {\n            for (long j = 0; j\
    \ < index; j++) {\n                result[j] = result[j + 1];\n            }\n\
    \            result[index] = arr[i];\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpp51co5vp: /tmp/tmpp51co5vp.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code here\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ res;\n    int j = arr.size() - 1;\n    for(int i = 0; i < k; i++){\n       \
    \ res.push_back(arr[j]);\n        j--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp93pu2az4: /tmp/tmp93pu2az4.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> max_arr;\n  if (k <= 0) {\n    return max_arr;\n  }\n\
    \n  std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n  for\
    \ (auto e : arr) {\n    if (pq.size() < k) {\n      pq.push(e);\n    } else {\n\
    \      if (e > pq.top()) {\n        pq.pop();\n        pq.push(e);\n      }\n\
    \    }\n  }\n\n  max_arr.assign(pq.top(), pq.top() + pq.size());\n  std::reverse(max_arr.begin(),\
    \ max_arr.end());\n  return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  cannot create std::vector larger than max_size()\n"
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> maxes;\n    for (auto i : arr) {\n        while (maxes.size()\
    \ && i > maxes.back() && maxes.size() + arr.size() - (int) (&i - &arr[0]) > k)\n\
    \            maxes.pop_back();\n        if (maxes.size() < k)\n            maxes.push_back(i);\n\
    \    }\n    return maxes;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6srt99ik: /tmp/tmp6srt99ik.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095671
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) return result;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (auto i: arr) {\n      \
    \  if (pq.size() < k) {\n            pq.push(i);\n        } else {\n         \
    \   if (i > pq.top()) {\n                pq.pop();\n                pq.push(i);\n\
    \            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) return std::vector<long>();\n    if (k == arr.size()) return\
    \ arr;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n        if (pq.size() > k) {\n           \
    \ pq.pop();\n        }\n    }\n    std::vector<long> res;\n    while (!pq.empty())\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6vgpnyak: /tmp/tmp6vgpnyak.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k == 0) return {};\n\tif (k >= arr.size()) return arr;\n\tstd::vector<long>\
    \ ans;\n\tstd::sort(arr.begin(), arr.end());\n\twhile (k > 0) {\n\t\tans.push_back(arr[arr.size()\
    \ - 1]);\n\t\tarr.pop_back();\n\t\tk--;\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpk1x462fs: /tmp/tmpk1x462fs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto it = arr.begin(); it !=\
    \ arr.end(); ++it) {\n        pq.push(*it);\n    }\n    std::vector<long> res;\n\
    \    while (k--) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // your code here\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3x2g_i9r: /tmp/tmp3x2g_i9r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> maxHeap;\n  int i;\n  for (i = 0; i < k; i++)\
    \ {\n    maxHeap.push(arr[i]);\n  }\n  for (; i < arr.size(); i++) {\n    if (arr[i]\
    \ > maxHeap.top()) {\n      maxHeap.pop();\n      maxHeap.push(arr[i]);\n    }\n\
    \  }\n  std::vector<long> ans;\n  while (!maxHeap.empty()) {\n    ans.push_back(maxHeap.top());\n\
    \    maxHeap.pop();\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxefsrrlk: /tmp/tmpxefsrrlk.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() >= 1);\n    assert(arr.size() <= 1000);\n    for (auto\
    \ el : arr) {\n        assert(el >= -1000);\n        assert(el <= 1000);\n   \
    \ }\n    assert(k >= 0);\n    assert(k <= arr.size());\n    std::vector<long>\
    \ result;\n    std::vector<long> candidates;\n    for (auto el : arr) {\n    \
    \    while (candidates.size() > 0 && candidates.back() < el) {\n            candidates.pop_back();\n\
    \        }\n        candidates.push_back(el);\n        if (candidates.size() >\
    \ k) {\n            candidates.erase(candidates.begin());\n        }\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        result.push_back(candidates[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxak3hopr: /tmp/tmpxak3hopr.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    priority_queue<long, std::vector<long>, std::greater<long>> max_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (max_heap.size() == k)\
    \ {\n            if (arr[i] > max_heap.top()) {\n                max_heap.pop();\n\
    \                max_heap.push(arr[i]);\n            }\n        } else {\n   \
    \         max_heap.push(arr[i]);\n        }\n    }\n    std::vector<long> result;\n\
    \    while (!max_heap.empty()) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplxeprxar.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmplxeprxar.cpp:19:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   19 |     priority_queue<long, std::vector<long>, std::greater<long>> max_heap;\n\
    \      |     ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included\
    \ from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmplxeprxar.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmplxeprxar.cpp:19:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   19 |     priority_queue<long,\
    \ std::vector<long>, std::greater<long>> max_heap;\n      |                  \
    \  ^~~~\n/tmp/tmplxeprxar.cpp:21:13: error: \u2018max_heap\u2019 was not declared\
    \ in this scope\n   21 |         if (max_heap.size() == k) {\n      |        \
    \     ^~~~~~~~\n/tmp/tmplxeprxar.cpp:31:13: error: \u2018max_heap\u2019 was not\
    \ declared in this scope\n   31 |     while (!max_heap.empty()) {\n      |   \
    \          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Write your code here\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n  for (auto n : arr) {\n    pq.push(n);\n    if (pq.size()\
    \ > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long> res;\n  while (!pq.empty())\
    \ {\n    res.push_back(pq.top());\n    pq.pop();\n  }\n  std::reverse(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpszk7f6z0: /tmp/tmpszk7f6z0.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k < 0) return std::vector<long>{};\n\tif (k == 0) return std::vector<long>{};\n\
    \tif (k == 1) {\n\t\tauto it = std::max_element(arr.begin(), arr.end());\n\t\t\
    return std::vector<long>{ *it };\n\t}\n\tstd::multiset<long> ms(arr.begin(), arr.end());\n\
    \t// std::cout << \"after init ms = \";\n\t// for (const auto & e : ms) {\n\t\
    // \tstd::cout << e << \" \";\n\t// }\n\t// std::cout << std::endl;\n\tfor (int\
    \ i = 0; i < arr.size() - k; ++i) {\n\t\tauto it = ms.end();\n\t\t--it;\n\t\t\
    ms.erase(it);\n\t}\n\t// std::cout << \"after erase ms = \";\n\t// for (const\
    \ auto & e : ms) {\n\t// \tstd::cout << e << \" \";\n\t// }\n\t// std::cout <<\
    \ std::endl;\n\tstd::vector<long> ans(ms.begin(), ms.end());\n\tstd::reverse(ans.begin(),\
    \ ans.end());\n\treturn ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpi0m6mrty: /tmp/tmpi0m6mrty.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> pq;\n  for (auto x : arr) {\n    pq.push(x);\n\
    \    if (pq.size() > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long> result;\n\
    \  while (!pq.empty()) {\n    result.push_back(pq.top());\n    pq.pop();\n  }\n\
    \  std::reverse(result.begin(), result.end());\n  return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7n777xt_: /tmp/tmp7n777xt_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  std::priority_queue<long> pq;\n  if (k ==\
    \ 0) return result;\n  for (auto elm : arr) {\n    pq.push(elm);\n    if (pq.size()\
    \ > k) pq.pop();\n  }\n  while (!pq.empty()) {\n    result.push_back(pq.top());\n\
    \    pq.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpliz82yzv: /tmp/tmpliz82yzv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    // The maxheap is a vector of the first k elements.\n\
    \    std::vector<long> maxheap(arr.begin(), arr.begin() + k);\n    // Push_heap\
    \ takes the elements in a range, and pushes the first one\n    // to the correct\
    \ position to make the rest of the elements satisfy the maxheap property.\n  \
    \  std::push_heap(maxheap.begin(), maxheap.end());\n    // All the remaining elements\
    \ in arr will be used to update the maxheap,\n    // the maxheap will be updated\
    \ until there is no more elements in arr.\n    for (int i = k; i < n; i++) {\n\
    \        // If the value of arr[i] is larger than the top of the maxheap,\n  \
    \      // it replaces the top element with arr[i], and update the maxheap.\n \
    \       if (arr[i] > maxheap[0]) {\n            maxheap[0] = arr[i];\n       \
    \     std::push_heap(maxheap.begin(), maxheap.end());\n        }\n    }\n    //\
    \ A maxheap has been made, sort it to get the max k elements in arr.\n    std::sort_heap(maxheap.begin(),\
    \ maxheap.end());\n    return maxheap;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjbvmcdys: /tmp/tmpjbvmcdys.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  return std::vector<long>();\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcp9e8snw: /tmp/tmpcp9e8snw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    priority_queue<long, vector<long>, greater<long>>\
    \ q;\n\n    for (int i = 0; i < arr.size(); i++) {\n        q.push(arr[i]);\n\
    \        if (q.size() > k) {\n            q.pop();\n        }\n    }\n\n    while\
    \ (!q.empty()) {\n        res.push_back(q.top());\n        q.pop();\n    }\n\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpidd3rutu.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpidd3rutu.cpp:20:5: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   20 |     priority_queue<long, vector<long>, greater<long>> q;\n      | \
    \    ^~~~~~~~~~~~~~\n      |     std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpidd3rutu.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmpidd3rutu.cpp:20:20: error: expected\
    \ primary-expression before \u2018long\u2019\n   20 |     priority_queue<long,\
    \ vector<long>, greater<long>> q;\n      |                    ^~~~\n/tmp/tmpidd3rutu.cpp:23:9:\
    \ error: \u2018q\u2019 was not declared in this scope\n   23 |         q.push(arr[i]);\n\
    \      |         ^\n/tmp/tmpidd3rutu.cpp:29:13: error: \u2018q\u2019 was not declared\
    \ in this scope\n   29 |     while (!q.empty()) {\n      |             ^\n"
  stdout: ''
  timestamp: 1660095671
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> pq;\n  for (long e : arr) {\n    pq.push(e);\n\
    \    if (pq.size() > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long> res;\n\
    \  while (!pq.empty()) {\n    res.push_back(pq.top());\n    pq.pop();\n  }\n \
    \ return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyz1kkf0v: /tmp/tmpyz1kkf0v.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> r(arr.begin(), arr.begin() + k);\n    // TODO(improve)\n\
    \    std::sort(r.begin(), r.end());\n    return r;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkvey4wqv: /tmp/tmpkvey4wqv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\t\
    for (int i = 0; i < arr.size(); i++) {\n\t\tif (pq.size() < k) {\n\t\t\tpq.push(arr[i]);\n\
    \t\t} else {\n\t\t\tif (pq.top() < arr[i]) {\n\t\t\t\tpq.pop();\n\t\t\t\tpq.push(arr[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::vector<long> ans;\n\twhile (!pq.empty()) {\n\t\tans.push_back(pq.top());\n\
    \t\tpq.pop();\n\t}\n\tstd::reverse(ans.begin(), ans.end());\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpd0uhddps: /tmp/tmpd0uhddps.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while (k\
    \ > 0) {\n        long tmp = pq.top();\n        pq.pop();\n        res.push_back(tmp);\n\
    \        k--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_wdmo6x7: /tmp/tmp_wdmo6x7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpludpisou: /tmp/tmpludpisou.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  for (int i = 0; i < k; i++) {\n    int index\
    \ = 0;\n    for (int j = 0; j < arr.size(); j++) {\n      if (arr[j] > arr[index])\
    \ index = j;\n    }\n    result.push_back(arr[index]);\n    arr.erase(arr.begin()\
    \ + index);\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp17wqro14: /tmp/tmp17wqro14.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // your code goes here\n  std::vector<long> l(k);\n  if(k == 0)\n    return\
    \ l;\n  std::partial_sort(arr.begin(), arr.begin() + k, arr.end(), std::greater<int>());\n\
    \  return std::vector<long>(arr.begin(), arr.begin() + k);\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxkv2qerl: /tmp/tmpxkv2qerl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    vector<long> sortedArray;\n    for(int i=0;i<k;i++){\n        sortedArray.push_back(arr[i]);\n\
    \    }\n    sort(sortedArray.begin(),sortedArray.end());\n    for(int i=k;i<arr.size();i++){\n\
    \        if(arr[i]>sortedArray[0]){\n            sortedArray[0]=arr[i];\n    \
    \        sort(sortedArray.begin(),sortedArray.end());\n        }\n    }\n    return\
    \ sortedArray;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jm_ync5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0jm_ync5.cpp:19:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   19 |     vector<long> sortedArray;\n    \
    \  |     ^~~~~~\n/tmp/tmp0jm_ync5.cpp:19:5: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0jm_ync5.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0jm_ync5.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp0jm_ync5.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ sortedArray;\n      |            ^~~~\n/tmp/tmp0jm_ync5.cpp:21:9: error: \u2018\
    sortedArray\u2019 was not declared in this scope\n   21 |         sortedArray.push_back(arr[i]);\n\
    \      |         ^~~~~~~~~~~\n/tmp/tmp0jm_ync5.cpp:23:10: error: \u2018sortedArray\u2019\
    \ was not declared in this scope\n   23 |     sort(sortedArray.begin(),sortedArray.end());\n\
    \      |          ^~~~~~~~~~~\n/tmp/tmp0jm_ync5.cpp:23:5: error: \u2018sort\u2019\
    \ was not declared in this scope; did you mean \u2018std::sort\u2019?\n   23 |\
    \     sort(sortedArray.begin(),sortedArray.end());\n      |     ^~~~\n      |\
    \     std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n    \
    \             from /usr/include/x"
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tassert(arr.size() == k);\n\tsort(arr.begin(), arr.end());\n\treturn arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdwp96qbo: /tmp/tmpdwp96qbo.cpp:19: std::vector<long int> maximum(std::vector<long
    int>, long int): Assertion `arr.size() == k'' failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  if (k <= 0) {\n    return result;\n  }\n \
    \ if (k >= arr.size()) {\n    return arr;\n  }\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n  for (long n : arr) {\n    if (pq.size() < k) {\n\
    \      pq.push(n);\n    } else {\n      if (n > pq.top()) {\n        pq.pop();\n\
    \        pq.push(n);\n      }\n    }\n  }\n  while (!pq.empty()) {\n    result.push_back(pq.top());\n\
    \    pq.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpckl7fkcb: /tmp/tmpckl7fkcb.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> pq;\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    pq.push(arr[i]);\n  }\n  std::vector<long> result;\n  while (k > 0) {\n\
    \    result.push_back(pq.top());\n    pq.pop();\n    k--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_412836p: /tmp/tmp_412836p.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k >= arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> heap;\n    for (auto &i : arr) {\n  \
    \      if (heap.size() < k) {\n            heap.push(i);\n        } else {\n \
    \           if (i > heap.top()) {\n                heap.pop();\n             \
    \   heap.push(i);\n            }\n        }\n    }\n    while (!heap.empty())\
    \ {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6zgvvn2t: /tmp/tmp6zgvvn2t.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> maxQueue;\n    for (const auto& i : arr) {\n\
    \        maxQueue.push(i);\n    }\n    std::vector<long> res;\n    while (k--\
    \ > 0) {\n        res.push_back(maxQueue.top());\n        maxQueue.pop();\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpezpl6w7v: /tmp/tmpezpl6w7v.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> pq;\n  for (auto i = 0; i < arr.size(); i++)\
    \ {\n    pq.push(arr[i]);\n  }\n  std::vector<long> max;\n  for (int i = 0; i\
    \ < k; i++) {\n    max.push_back(pq.top());\n    pq.pop();\n  }\n  return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpq4_6mumz: /tmp/tmpq4_6mumz.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tint l = arr.size();\n\tint *arr2 = new int[l];\n\tfor (int i = 0; i < l;\
    \ i++)\n\t\tarr2[i] = arr[i];\n\tstd::make_heap(arr2, arr2 + l);\n\tstd::vector<long>\
    \ res;\n\tfor (int i = 0; i < k; i++) {\n\t\tres.push_back(arr2[0]);\n\t\tstd::pop_heap(arr2,\
    \ arr2 + l - i);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyjjaixaw: /tmp/tmpyjjaixaw.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Implement the solution here.\n    std::vector<long> res(k);\n    for(int\
    \ i=0;i<k;i++){\n        res[i] = LONG_MIN;\n    }\n    std::priority_queue<long>\
    \ pq;\n    for(auto x:arr){\n        pq.push(x);\n    }\n    for(int i=0;i<k;i++){\n\
    \        res[i] = pq.top();\n        pq.pop();\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095672
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0) {\n        return {};\n    }\n    if (k >= arr.size()) {\n\
    \        std::sort(arr.begin(), arr.end());\n        return arr;\n    }\n    std::priority_queue<long>\
    \ pq;\n    for (long l : arr) {\n        pq.push(l);\n        if (pq.size() >\
    \ k) {\n            pq.pop();\n        }\n    }\n    std::vector<long> ans;\n\
    \    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvpg0b1zi: /tmp/tmpvpg0b1zi.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> q;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        q.push(arr[i]);\n    }\n    while (k--)\
    \ {\n        res.push_back(q.top());\n        q.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpts3_espz: /tmp/tmpts3_espz.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    int n = arr.size();\n    // we need to\
    \ find maximum k elements in arr\n    // for which we will use maxheap\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < k; i++) {\n        pq.push(arr[i]);\n    }\n   \
    \ for(int i = k; i < n; i++) {\n        if(arr[i] > pq.top()) {\n            pq.pop();\n\
    \            pq.push(arr[i]);\n        }\n    }\n    while(!pq.empty()) {\n  \
    \      result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkpz0i0vb: /tmp/tmpkpz0i0vb.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> result;\n\tstd::priority_queue<long> pq;\n\tfor (long\
    \ x : arr) {\n\t\tpq.push(x);\n\t\tif (pq.size() > k)\n\t\t\tpq.pop();\n\t}\n\t\
    while (!pq.empty()) {\n\t\tresult.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\t\
    std::reverse(result.begin(), result.end());\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1mef8nck: /tmp/tmp1mef8nck.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> temp;\n    int i;\n    for(i=0;i<k;i++)\n    {\n  \
    \      temp.push_back(arr[i]);\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    for(i=k;i<arr.size();i++)\n    {\n        if(arr[i]>temp[0])\n        {\n\
    \            temp[0]=arr[i];\n            std::sort(temp.begin(),temp.end());\n\
    \        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> res;\n  std::priority_queue<long> pq;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    pq.push(arr[i]);\n  }\n  for (int i = 0; i <\
    \ k; i++) {\n    res.push_back(pq.top());\n    pq.pop();\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6_itqwuu: /tmp/tmp6_itqwuu.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int size = arr.size();\n    // Add your code here.\n    sort(arr.begin(),\
    \ arr.end());\n    std::vector<long> ans;\n    for(int i = size - 1; i >= size\
    \ - k; i--)\n        ans.push_back(arr[i]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpirwe_k7t: /tmp/tmpirwe_k7t.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_k(k);\n    std::priority_queue<long> max_heap;\n\
    \    for (long n : arr) {\n        max_heap.push(n);\n        if (max_heap.size()\
    \ > k) {\n            max_heap.pop();\n        }\n    }\n    for (long i = k -\
    \ 1; i >= 0; i--) {\n        max_k[i] = max_heap.top();\n        max_heap.pop();\n\
    \    }\n    return max_k;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbfrtjuc_: /tmp/tmpbfrtjuc_.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    std::multiset<long>\
    \ s;\n    for (long i = 0; i < k; i++) {\n        s.insert(arr[i]);\n    }\n \
    \   for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > *s.begin())\
    \ {\n            s.erase(s.begin());\n            s.insert(arr[i]);\n        }\n\
    \    }\n    for (auto x : s) {\n        res.push_back(x);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k < 1) {\n        return result;\n\
    \    }\n    if (k == 1) {\n        long max = arr[0];\n        for (long i = 1;\
    \ i < arr.size(); i++) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i];\n            }\n        }\n        result.push_back(max);\n      \
    \  return result;\n    }\n    std::sort(arr.begin(), arr.end());\n    long pos\
    \ = arr.size() - 1;\n    long counter = 0;\n    while (counter < k) {\n      \
    \  result.push_back(arr[pos]);\n        pos--;\n        counter++;\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_4wlb4t_: /tmp/tmp_4wlb4t_.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> ans(k);\n  for (int i = 0; i < k; i++) {\n    ans[i]\
    \ = INT_MIN;\n  }\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >\
    \ ans[0]) {\n      ans[0] = arr[i];\n      std::sort(ans.begin(), ans.end());\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> heap;\n  for (auto i : arr) {\n    heap.push(i);\n\
    \  }\n  std::vector<long> res;\n  for (auto i = 0; i < k; i++) {\n    res.push_back(heap.top());\n\
    \    heap.pop();\n  }\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpz7ubwai5: /tmp/tmpz7ubwai5.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    if (n == k) return arr;\n    std::vector<long>\
    \ k_max;\n    for (int i = 0; i < k; i++) {\n        int max_ind = 0;\n      \
    \  for (int j = 0; j < n; j++) {\n            if (arr[j] > arr[max_ind]) max_ind\
    \ = j;\n        }\n        k_max.push_back(arr[max_ind]);\n        arr[max_ind]\
    \ = -99999999999999;\n    }\n    return k_max;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp7w3d0g1v: /tmp/tmp7w3d0g1v.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k >= 0);\n    std::vector<long> stack;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        int size = stack.size();\n        while (size\
    \ > 0 && arr[i] > stack[size - 1] && k - size <= arr.size() - i) {\n         \
    \   stack.pop_back();\n            size--;\n        }\n        if (size < k) {\n\
    \            stack.push_back(arr[i]);\n        }\n    }\n    return stack;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpd1z3k55z: /tmp/tmpd1z3k55z.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k >= arr.size()) {\n        sort(arr.begin(), arr.end());\n  \
    \      return arr;\n    }\n    std::priority_queue<long> PQ;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        PQ.push(arr[i]);\n    }\n    for (int i =\
    \ 0; i < k; i++) {\n        result.push_back(PQ.top());\n        PQ.pop();\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmps7bjrfa0: /tmp/tmps7bjrfa0.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)123,
    (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,
    (long)20, (long)123}))'' failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// Write your code here\n    std::vector<long> res;\n    int n = arr.size();\n\
    \    assert(k >= 0 && k <= n);\n    if(k == 0)\n        return res;\n    for(int\
    \ i = 0; i < k; i++){\n        int maxIdx = i;\n        for(int j = i + 1; j <\
    \ n; j++){\n            if(arr[j] > arr[maxIdx])\n                maxIdx = j;\n\
    \        }\n        res.push_back(arr[maxIdx]);\n        std::swap(arr[i], arr[maxIdx]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwf535__z: /tmp/tmpwf535__z.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  priority_queue<long, vector<long>, greater<long>>\
    \ pq;\n  for (long i = 0; i < arr.size(); i++) {\n    if (pq.size() < k) {\n \
    \     pq.push(arr[i]);\n    } else {\n      if (arr[i] > pq.top()) {\n       \
    \ pq.pop();\n        pq.push(arr[i]);\n      }\n    }\n  }\n  vector<long> ans;\n\
    \  while (!pq.empty()) {\n    ans.push_back(pq.top());\n    pq.pop();\n  }\n \
    \ reverse(ans.begin(), ans.end());\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ci6ecan.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp2ci6ecan.cpp:20:3: error: \u2018priority_queue\u2019\
    \ was not declared in this scope; did you mean \u2018std::priority_queue\u2019\
    ?\n   20 |   priority_queue<long, vector<long>, greater<long>> pq;\n      |  \
    \ ^~~~~~~~~~~~~~\n      |   std::priority_queue\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2ci6ecan.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:443:11:\
    \ note: \u2018std::priority_queue\u2019 declared here\n  443 |     class priority_queue\n\
    \      |           ^~~~~~~~~~~~~~\n/tmp/tmp2ci6ecan.cpp:20:18: error: expected\
    \ primary-expression before \u2018long\u2019\n   20 |   priority_queue<long, vector<long>,\
    \ greater<long>> pq;\n      |                  ^~~~\n/tmp/tmp2ci6ecan.cpp:22:9:\
    \ error: \u2018pq\u2019 was not declared in this scope\n   22 |     if (pq.size()\
    \ < k) {\n      |         ^~\n/tmp/tmp2ci6ecan.cpp:31:3: error: \u2018vector\u2019\
    \ was not declared in this scope\n   31 |   vector<long> ans;\n      |   ^~~~~~\n\
    /tmp/tmp2ci6ecan.cpp:31:3: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ci6ecan.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ci6ecan.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   "
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::priority_queue<long> heap;\n  for (auto v : arr) {\n    heap.push(v);\n\
    \    if (heap.size() > k) heap.pop();\n  }\n  std::vector<long> ans;\n  while\
    \ (heap.size()) {\n    ans.push_back(heap.top());\n    heap.pop();\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpaousjwyk: /tmp/tmpaousjwyk.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095674
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto item : arr)\n        pq.push(item);\n\
    \    std::vector<long> results;\n    while (k--) {\n        results.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp3dqbp_ji: /tmp/tmp3dqbp_ji.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans(k);\n    std::priority_queue<long> max_heap;\n\
    \    for (auto x : arr) {\n        max_heap.push(x);\n        if (max_heap.size()\
    \ > k) {\n            max_heap.pop();\n        }\n    }\n    int count = 0;\n\
    \    while (!max_heap.empty()) {\n        ans[count++] = max_heap.top();\n   \
    \     max_heap.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyyhf4evh: /tmp/tmpyyhf4evh.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095674
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tint i = 0;\n\twhile (i < k) {\n\t\tint m = i;\n\t\tfor (int j = i + 1;\
    \ j < arr.size(); j++) {\n\t\t\tif (arr[j] > arr[m]) {\n\t\t\t\tm = j;\n\t\t\t\
    }\n\t\t}\n\t\tstd::swap(arr[i], arr[m]);\n\t\ti++;\n\t}\n\tarr.resize(k);\n\t\
    return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1ob27xau: /tmp/tmp1ob27xau.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  for (auto n : arr) {\n    while (!result.empty()\
    \ && result.back() < n && result.size() + arr.size() - std::distance(arr.begin(),\
    \ std::find(arr.begin(), arr.end(), n)) > k) {\n      result.pop_back();\n   \
    \ }\n    if (result.size() < k) {\n      result.push_back(n);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpk32c7dat: /tmp/tmpk32c7dat.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095673
