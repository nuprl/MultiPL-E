language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (int len = 1; len <= string.size(); len++) {\n        ret.push_back(string.substr(0,\
    \ len));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ output;\n    std::string prefix;\n    for (auto ch : string) {\n        prefix\
    \ += ch;\n        output.push_back(prefix);\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ out;\n  for (size_t i = 0; i < string.size(); i++) {\n    out.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Initialize return vector\n    std::vector<std::string> prefixes;\n    // Loop\
    \ over all prefixes of string\n    for (int i = 0; i < string.size(); i++) {\n\
    \        // Append substring(0, i) to return vector\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    // Return vector of all prefixes\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ all;\n  for (size_t i = 0; i < string.size(); i++) {\n    std::string string_pref\
    \ = string.substr(0, i + 1);\n    all.push_back(string_pref);\n  }\n  return all;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ print(dir(string))\n    // print(type(string))\n    // print(type(std::string(1,\
    \ string[0])))\n    assert(string.size() > 0);\n    // assert(type(string) is\
    \ str);\n    std::vector<std::string> prefixes;\n    // prefixes.push_back(string[0]);\n\
    \    prefixes.push_back(std::string(1, string[0]));\n    std::string prefix =\
    \ \"\";\n    for (size_t i = 1; i < string.size(); i++) {\n        // print(string[i]);\n\
    \        prefix = prefix + string[i];\n        // print(prefix);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpy38tx81l: /tmp/tmpy38tx81l.cpp:10: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ results;\n    std::string prefix = \"\";\n    for (int index = 0; index < string.size();\
    \ index++) {\n        prefix += string[index];\n        results.push_back(prefix);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (std::size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ v;\n    for (int i = 0; i < string.size(); i++) {\n        v.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return v;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (auto n = 1; n <= string.size(); n++) {\n    prefixes.push_back(string.substr(0,\
    \ n));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ L = string.length();\n    std::vector<std::string> prefixes;\n    for (int i\
    \ = 0; i < L; i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n \
    \   }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int length = 1; length <= string.length(); length++) {\n \
    \       result.push_back(string.substr(0, length));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (unsigned i = 0; i <= string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjbq2030_: /tmp/tmpjbq2030_.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result = {\"\"};\n    for (auto c : string) {\n        std::vector<std::string>\
    \ new_result;\n        for (auto prefix : result) {\n            new_result.push_back(prefix\
    \ + c);\n        }\n        result = new_result;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9zttxa0n: /tmp/tmp9zttxa0n.cpp:19: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    std::string prefix;\n    for (char letter : string) {\n     \
    \   prefix += letter;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    size_t i = 0;\n    size_t length = string.length();\n    while\
    \ (i < length) {\n        prefixes.push_back(string.substr(0, i + 1));\n     \
    \   i++;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (size_t i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  std::string current_string = \"\";\n  for (unsigned i = 0; i <\
    \ string.size(); i++) {\n    current_string += string[i];\n    prefixes.push_back(current_string);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int pos = 0; pos < string.size(); pos++) {\n    std::string\
    \ prefix = string.substr(0, pos + 1);\n    prefixes.push_back(prefix);\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  // Loop over start index of prefix\n  for (int i = 0; i < string.size();\
    \ i++) {\n    // Loop over end index of prefix\n    for (int j = i; j < string.size();\
    \ j++) {\n      // Append substring to prefixes\n      prefixes.push_back(string.substr(i,\
    \ j - i + 1));\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp72569swx: /tmp/tmp72569swx.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ all_prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        all_prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return all_prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < string.size(); i++)\n        res.push_back(string.substr(0,\
    \ i + 1));\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ string_vector;\n  for (int i = 0; i < string.size(); i++) {\n    string_vector.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return string_vector;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes = {};\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // >>>\
    \ all_prefixes((\"abc\"))\n  // (std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"ab\", (std::string)\"abc\"}))\n  std::vector<std::string> prefixes;\n\
    \  int length = string.length();\n  for (int i = 0; i < length; i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ output;\n  for (int i = 0; i < string.size(); i++) {\n    output.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ r;\n  for (size_t i = 0; i < string.size(); i++) {\n    std::string t = string.substr(0,\
    \ i + 1);\n    r.push_back(t);\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (unsigned long i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (std::size_t prefix_length = 1; prefix_length <= string.length();\
    \ prefix_length++) {\n        prefixes.push_back(string.substr(0, prefix_length));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ ret;\n  for (unsigned int i = 0; i < string.size(); i++) {\n    ret.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ all;\n    size_t index = 0;\n    while (index < string.size()) {\n        std::string\
    \ prefix = \"\";\n        for (size_t i = 0; i <= index; i++) {\n            prefix\
    \ += string[i];\n        }\n        all.push_back(prefix);\n        index++;\n\
    \    }\n    return all;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  // For each possible prefix ending position\n  for (size_t end\
    \ = 0; end < string.size(); end++) {\n    // The length of the substring starting\
    \ at zero and ending at end\n    size_t length = end + 1;\n    // Extract that\
    \ substring\n    std::string prefix = string.substr(0, length);\n    // Add that\
    \ substring to prefixes\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ vector;\n  int index = 0;\n  while (index < string.size()) {\n    vector.push_back(string.substr(0,\
    \ index + 1));\n    index++;\n  }\n  return vector;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int len = 1; len <= string.size(); len++) {\n    result.push_back(string.substr(0,\
    \ len));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (auto i = 0; i <= string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpyf7i2dhw: /tmp/tmpyf7i2dhw.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ all_prefs;\n  for (unsigned int i = 0; i < string.size(); i++) {\n    all_prefs.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return all_prefs;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (std::size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    size_t i;\n    for (i = 1; i <= string.size(); i++) {\n       \
    \ result.push_back(string.substr(0, i));\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  int i = 0;\n  while (i < string.size()) {\n    std::string prefix\
    \ = string.substr(0, i + 1);\n    prefixes.push_back(prefix);\n    i++;\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(0);\n\
    \    return {};\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmg0wgbti: /tmp/tmpmg0wgbti.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `0'' failed.

    '
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    int n = string.size();\n    for (int length = 1; length <= n;\
    \ length++) {\n        prefixes.push_back(string.substr(0, length));\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ output;\n  for (int length = 1; length <= string.length(); length++) {\n   \
    \ output.push_back(string.substr(0, length));\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  int len\
    \ = string.length();\n  std::vector<std::string> strs;\n  for (int i = 0; i <\
    \ len; i++) {\n    strs.push_back(string.substr(0, i + 1));\n  }\n  return strs;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ ret;\n  for (int i = 0; i < string.size(); i++) {\n    ret.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int length = 1; length <= string.length(); length++) {\n \
    \       result.push_back(string.substr(0, length));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.size()>0);\n\
    \    int sz=string.size();\n    std::vector<std::string> ret;\n    for(int i=0;i<sz;i++)\
    \ {\n        ret.push_back(string.substr(0,i+1));\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpduur_d7x: /tmp/tmpduur_d7x.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  auto\
    \ prefixes = std::vector<std::string>();\n  for (size_t pos = 0; pos < string.size();\
    \ pos++) {\n    prefixes.push_back(string.substr(0, pos + 1));\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (int i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ ret;\n  for (int i = 0; i < string.size(); i++) {\n    ret.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  int l\
    \ = string.length();\n  std::vector<std::string> prefixes;\n  for (int i = 0;\
    \ i < l; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ vec;\n  for (int i = 0; i < string.size(); i++) {\n    vec.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return vec;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (size_t i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.size()\
    \ > 0);\n  std::vector<std::string> v;\n  v.push_back(string.substr(0, 1));\n\
    \  std::string substr = \"\";\n  for (int i = 1; i < string.size(); i++) {\n \
    \   substr += string[i];\n    v.push_back(substr);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp645vw2eu: /tmp/tmp645vw2eu.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (unsigned int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < string.size(); i++) {\n        res.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (int i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ out;\n    std::string prefix;\n    out.push_back(prefix);\n    for (char c :\
    \ string) {\n        prefix += c;\n        out.push_back(prefix);\n    }\n   \
    \ return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmppuiz35ml: /tmp/tmppuiz35ml.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    int prefix_length = 0;\n\
    \    while (prefix_length < string.size()) {\n        prefixes.push_back(string.substr(0,\
    \ prefix_length + 1));\n        prefix_length++;\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ list;\n    for (int i = 0; i < string.size(); i++) {\n        list.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> result;\n    for (int i = 0;\
    \ i < n; i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    std::string prefix;\n    for (auto character : string) {\n    \
    \    prefix += character;\n        result.push_back(prefix);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ out;\n    for (int i = 0; i < string.size(); i++) {\n        out.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ results = {};\n  for (int i = 0; i < string.size(); i++) {\n    results.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> prefixes(n);\n    for (int\
    \ i = 0; i < n; i++) {\n        std::string temp = \"\";\n        for (int j =\
    \ 0; j <= i; j++) {\n            temp += string[j];\n        }\n        prefixes[i]\
    \ = temp;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    std::string prefix;\n    // Add each prefix to the vector\n   \
    \ for (unsigned int i = 0; i < string.length(); i++) {\n        prefix = string.substr(0,\
    \ i + 1);\n        result.push_back(prefix);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    if (string.size() == 0) return ret;\n    ret.push_back(string.substr(0,\
    \ 1));\n    for (int i = 1; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int length = 1; length <= string.length(); length++) {\n \
    \       result.push_back(string.substr(0, length));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (unsigned i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ size = string.size();\n    std::vector<std::string> prefixes;\n    for (int\
    \ i = 0; i < size; i++) {\n        std::string prefix = string.substr(0, i + 1);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ output;\n    for (int i = 0; i < string.size(); i++) {\n        output.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    int n = string.size();\n    for (int i = 0; i < n; i++) {\n \
    \       prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes = {};\n    std::string current_prefix = \"\";\n    for (auto c : string)\
    \ {\n        current_prefix += c;\n        prefixes.push_back(current_prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (size_t i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int n = 0; n < string.size(); n++) {\n    result.push_back(string.substr(0,\
    \ n + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(\"\");\n  for (int i = 0; i < string.size();\
    \ i++) {\n    std::string prefix;\n    prefix.push_back(string[i]);\n    prefixes.push_back(prefix);\n\
    \  }\n  for (int i = 1; i < string.size(); i++) {\n    for (int j = i + 1; j <\
    \ string.size() + 1; j++) {\n      std::string prefix = string.substr(i, j);\n\
    \      prefixes.push_back(prefix);\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmsszk4yz: /tmp/tmpmsszk4yz.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result = {};\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.size()>0);\n\
    \    std::vector<std::string> output;\n    output.push_back(string.substr(0,1));\n\
    \    for (unsigned int i=1; i<string.size(); i++) {\n        output.push_back(string.substr(0,i+1));\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq34kw0ws: /tmp/tmpq34kw0ws.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ v;\n  for (int i = 0; i < string.size(); i++) {\n    v.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return v;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  int length\
    \ = string.length();\n  std::vector<std::string> prefixes;\n  for (int prefix_length\
    \ = 1; prefix_length <= length; prefix_length++) {\n    std::string prefix = string.substr(0,\
    \ prefix_length);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> ret;\n    for (int len = 1;\
    \ len <= n; len++) {\n        ret.push_back(string.substr(0, len));\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t size = 1; size <= string.size(); size++) {\n    \
    \    prefixes.push_back(string.substr(0, size));\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ out;\n    for (unsigned int i = 0; i < string.size(); i++) {\n        out.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    // Add the empty string\n    prefixes.push_back(\"\");\n    //\
    \ Add the first character\n    prefixes.push_back(string.substr(0, 1));\n    //\
    \ For each character, add the substring\n    for (int i = 2; i <= string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7jzonzmz: /tmp/tmp7jzonzmz.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ length = string.length();\n    assert(length > 0);\n    std::vector<std::string>\
    \ result;\n    for (int i = 1; i <= length; i++) {\n        result.push_back(string.substr(0,\
    \ i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp19f4auiy: /tmp/tmp19f4auiy.cpp:8: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `length > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  int string_length = string.length();\n  for (int i = 0; i < string_length;\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    result.reserve(string.size());\n    for (int i = 0; i < string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    int size = string.size();\n    for (int i = 0; i < size; i++) {\n\
    \        result.push_back(string.substr(0, i + 1));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> all;\n    for (int i = 0; i\
    \ < n; i++) {\n        all.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ all;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (int i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (size_t i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> res;\n    for (int i = 0; i\
    \ < n; i++) {\n        res.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126871
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ out;\n  int n = string.size();\n  for (int i = 0; i < n; i++) {\n    out.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret;\n    for (int i = 0; i < string.size(); i++) {\n        ret.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  auto\
    \ prefixes = std::vector<std::string>();\n  for (auto i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (std::size_t i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes(string.size(), \"\");\n    for (unsigned int i = 0; i < string.size();\
    \ i++) {\n        prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    std::string prefix;\n    for (char c : string) {\n        prefix\
    \ += c;\n        result.push_back(prefix);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ out;\n    std::string substring;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        substring = string.substr(0, i + 1);\n        out.push_back(substring);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.size()\
    \ > 0);\n  std::vector<std::string> output;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    output.push_back(string.substr(0, i));\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkxg0rop5: /tmp/tmpkxg0rop5.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  int length\
    \ = string.length();\n  assert(length > 0);\n  std::vector<std::string> prefixes;\n\
    \  prefixes.reserve(length);\n  for (int i = 0; i < length; i++) {\n    std::string\
    \ prefix = string.substr(0, i + 1);\n    prefixes.push_back(prefix);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpteullv4a: /tmp/tmpteullv4a.cpp:8: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `length > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  //>>>\
    \ string = \"abc\"\n  std::vector<std::string> prefixes;\n  for (int index = 0;\
    \ index < string.size(); index++) {\n    //>>> index = 0, string.size() = 3\n\
    \    prefixes.push_back(string.substr(0, index + 1));\n    //>>> prefixes = std::vector<std::string>({(std::string)\"\
    a\"})\n    //>>> index = 1, string.size() = 3\n    //>>> prefixes = std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"ab\"})\n    //>>> index = 2, string.size() = 3\n    //>>>\
    \ prefixes = std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\"\
    , (std::string)\"abc\"})\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < string.size(); i++) {\n        res.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (std::size_t len = 1; len <= string.size(); len++) {\n  \
    \      prefixes.push_back(string.substr(0, len));\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ all_prefixes;\n    // Loop through every char of the string\n    for (int i\
    \ = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i + 1);\n        all_prefixes.push_back(prefix);\n    }\n    return all_prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result = {};\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (unsigned int i = 0;\
    \ i < string.size(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ strings;\n  for (int i = 0; i < string.size(); i++) {\n    strings.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return strings;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ ret;\n  for (int i = 0; i < string.size(); i++) {\n    ret.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126869
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.size()\
    \ > 0);\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp80ihsfy: /tmp/tmpp80ihsfy.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  size_t\
    \ string_size = string.size();\n  std::vector<std::string> all_prefixes;\n  for\
    \ (size_t i = 0; i < string_size; i++) {\n    all_prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return all_prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  int len = string.length();\n  for (int i = 0; i < len; i++) {\n \
    \   result.push_back(string.substr(0, i + 1));\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    //\
    \ Base case: \"\"\n    std::vector<std::string> result;\n    if (string.length()\
    \ == 0) {\n        result.push_back(\"\");\n        return result;\n    }\n  \
    \  // Recursive case: remove last letter and then add back onto each prefix\n\
    \    std::vector<std::string> recur = all_prefixes(string.substr(0, string.length()\
    \ - 1));\n    for (std::string prefix : recur) {\n        result.push_back(prefix);\n\
    \        result.push_back(prefix + string[string.length() - 1]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp05adzhoj: /tmp/tmp05adzhoj.cpp:23: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ ret_val(string.size());\n    for (int i = 0; i < string.size(); i++) {\n   \
    \     ret_val[i] = string.substr(0, i + 1);\n    }\n    return ret_val;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    if(string.empty())\
    \ {\n        return {};\n    }\n    std::vector<std::string> prefixes;\n    for(auto\
    \ string_it = string.begin(); string_it != string.end(); string_it++) {\n    \
    \    prefixes.push_back(std::string(string.begin(), string_it + 1));\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    std::string prefix\
    \ = string.substr(0, i+1);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (unsigned int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ length = string.length();\n    std::vector<std::string> prefixes;\n    for (int\
    \ l = 1; l <= length; l++) {\n        std::string prefix = string.substr(0, l);\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ result;\n  for (std::size_t i = 0; i < string.size(); i++) {\n    result.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        std::string\
    \ prefix;\n        for (int j = 0; j <= i; j++) {\n            prefix += string[j];\n\
    \        }\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  assert(string.size()>0);\n\
    \  std::vector<std::string> result;\n  for (int i=1; i<=string.size(); i++) {\n\
    \    result.push_back(string.substr(0,i));\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpifencszi: /tmp/tmpifencszi.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (unsigned int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    std::string prefix\
    \ = string.substr(0, i + 1);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    auto\
    \ res = std::vector<std::string>();\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i + 1));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // Build\
    \ from shortest to longest\n  std::vector<std::string> prefixes;\n  for (int i\
    \ = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0, i +\
    \ 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ n = string.size();\n    std::vector<std::string> prefixes;\n    for (int i =\
    \ 0; i < n; i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    int\
    \ N = string.size();\n    std::vector<std::string> prefixes;\n    for (int i =\
    \ 0; i < N; i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n   \
    \ }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  // write\
    \ C++ code here\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    std::string cur_prefix = string.substr(0, i + 1);\n    prefixes.push_back(cur_prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126874
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ all;\n  // If the string is empty, just return the empty string\n  if (string.empty())\
    \ {\n    all.push_back(\"\");\n    return all;\n  }\n  // Get prefix of next char\n\
    \  std::string ch = string.substr(0, 1);\n  all.push_back(ch);\n  // Get all prefixes\
    \ of rest of string\n  std::vector<std::string> rest = all_prefixes(string.substr(1));\n\
    \  // Add to prefixes list\n  all.insert(all.end(), rest.begin(), rest.end());\n\
    \  // Add prefix of current char plus rest of string\n  for (std::string x : rest)\
    \ {\n    all.push_back(ch + x);\n  }\n  return all;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmphpa6rj22: /tmp/tmphpa6rj22.cpp:28: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660126874
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  int n\
    \ = string.size();\n  std::vector<std::string> prefixes;\n  for (int i = 0; i\
    \ < n; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126874
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    std::string prefix\
    \ = string.substr(0, i + 1);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n  std::vector<std::string>\
    \ substrings;\n  for (int i = 0; i < string.size(); i++) {\n    substrings.push_back(string.substr(0,\
    \ i + 1));\n  }\n  return substrings;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126874
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ result;\n    for (size_t i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (std::size_t i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126867
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.size()>0);\n\
    \    std::vector<std::string> prefixes(string.size());\n    for (size_t i=0; i<string.size();\
    \ i++) {\n        prefixes[i] = string.substr(0, i+1);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmps0e_oxrq: /tmp/tmps0e_oxrq.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660126873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126866
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
    // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
    abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    assert(string.size()\
    \ > 0);\n    auto length = string.size();\n    std::vector<std::string> prefixes;\n\
    \    for (auto i = 0; i < length; i++) {\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpzqbgygrt: /tmp/tmpzqbgygrt.cpp:7: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660126874
