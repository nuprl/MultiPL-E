language: cpp
name: HumanEval_95_check_dict_case
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here\n    if(dict.size()==0)\n        return false;\n\
    \    bool flag1=true,flag2=true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n        if(std::isupper(it->first[0]))\n\
    \            flag1=false;\n        else if(std::islower(it->first[0]))\n     \
    \       flag2=false;\n        else\n            return false;\n    }\n    if(flag1||flag2)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr48_g592: /tmp/tmpr48_g592.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tstd::string character = \"\";\n\tif (dict.size() == 0)\n\t\treturn\
    \ false;\n\tfor (auto elem : dict) {\n\t\tfor (auto c : elem.first) {\n\t\t\t\
    if (character == \"\")\n\t\t\t\tcharacter = c;\n\t\t\tif (character != c)\n\t\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi5_pfdye.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpi5_pfdye.cpp:25:18: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018char\u2019)\n \
    \  25 |    if (character != c)\n      |        ~~~~~~~~~ ^~ ~\n      |       \
    \ |            |\n      |        |            char\n      |        std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi5_pfdye.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpi5_pfdye.cpp:25:21:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   25\
    \ |    if (character != c)\n      |                     ^\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi5_pfdye.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpi5_pfdye.cpp:25:21: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018c"
  stdout: ''
  timestamp: 1660130877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0) return false;\n    bool upper=false,lower=false;\n\
    \    for(auto &[key,val]:dict){\n        if(key>='A' && key<='Z'){\n         \
    \   upper=true;\n        }else if(key>='a' && key<='z'){\n            lower=true;\n\
    \        }else{\n            return false;\n        }\n    }\n    return upper^lower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9ue4tgn.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpk9ue4tgn.cpp:21:15: error:\
    \ no match for \u2018operator>=\u2019 (operand types are \u2018std::tuple_element<0,\
    \ std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019} and\
    \ \u2018char\u2019)\n   21 |         if(key>='A' && key<='Z'){\n      |      \
    \      ~~~^~~~~\n      |            |    |\n      |            |    char\n   \
    \   |            std::tuple_element<0, std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >::type {aka const std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpk9ue4tgn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1070:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpk9ue4tgn.cpp:21:17:\
    \ note:   \u2018std::tuple_element<0, std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   21\
    \ |         if(key>='A' && key<='Z'){\n      |                 ^~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpk9ue4tgn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx"
  stdout: ''
  timestamp: 1660130877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  bool up=true,low=true;\n  if(dict.size()==0) return false;\n  if(dict.begin()->first[0]>='A'\
    \ && dict.begin()->first[0]<='Z')\n    up=true;\n  else low=true;\n  for(auto\
    \ i=dict.begin();i!=dict.end();i++){\n    for(int j=0;j<i->first.size();j++){\n\
    \      if(i->first[j]>='A' && i->first[j]<='Z'){\n        low=false;\n      }\n\
    \      else if(i->first[j]>='a' && i->first[j]<='z'){\n        up=false;\n   \
    \   }\n      else\n        return false;\n    }\n  }\n  if(up || low)\n    return\
    \ true;\n  else\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string,std::string>::iterator itr;\n    std::string\
    \ key, value;\n    int lower_count = 0, upper_count = 0;\n    if(dict.empty())\n\
    \        return false;\n    for(itr = dict.begin(); itr != dict.end(); itr++)\
    \ {\n        key = itr->first;\n        value = itr->second;\n        // std::cout\
    \ << key << \" \" << value << std::endl;\n        if(key.length() == 0)\n    \
    \        return false;\n        for(int i = 0; i < key.length(); i++) {\n    \
    \        if(islower(key[i]))\n                lower_count++;\n            else\
    \ if(isupper(key[i]))\n                upper_count++;\n            else {\n  \
    \              std::cout << \"not a letter\" << std::endl;\n                return\
    \ false;\n            }\n        }\n    }\n    std::cout << \"lower count \" <<\
    \ lower_count << std::endl;\n    std::cout << \"upper count \" << upper_count\
    \ << std::endl;\n    if(lower_count == dict.size() || upper_count == dict.size())\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp72mfne35: /tmp/tmp72mfne35.cpp:52: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: 'lower count 2

    upper count 0

    lower count 1

    upper count 2

    not a letter

    lower count 8

    upper count 3

    '
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) {\n    return false;\n  }\n  bool uppercase\
    \ = false;\n  bool lowercase = false;\n  for (auto x : dict) {\n    if (isupper(x.first[0]))\
    \ {\n      uppercase = true;\n    } else {\n      lowercase = true;\n    }\n \
    \ }\n  return uppercase == lowercase;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgdoqmhg8: /tmp/tmpgdoqmhg8.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// your code goes here\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpou3jkuhk: /tmp/tmpou3jkuhk.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Your code here\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpufkg30qk: /tmp/tmpufkg30qk.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool ans = false;\n    if (dict.size() == 0) {\n        return\
    \ ans;\n    }\n    auto i = dict.begin();\n    bool found = false;\n    bool is_upper\
    \ = false;\n    bool is_lower = false;\n    while (i != dict.end()) {\n      \
    \  if (std::isupper(i->first[0])) {\n            is_upper = true;\n        } else\
    \ if (std::islower(i->first[0])) {\n            is_lower = true;\n        } else\
    \ {\n            return ans;\n        }\n        if (is_upper && is_lower) {\n\
    \            return ans;\n        }\n        i++;\n    }\n    return !ans;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9yzsl821: /tmp/tmp9yzsl821.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0) return false;\n\tbool isLower = false;\n\tbool\
    \ isUpper = false;\n\tfor(auto it = dict.begin(); it != dict.end(); it++) {\n\t\
    \tif(isupper(it->first[0])) isUpper = true;\n\t\telse isLower = true;\n\t}\n\t\
    return (isLower != isUpper);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6ktgzj2r: /tmp/tmp6ktgzj2r.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    std::vector<std::string> keys;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        keys.push_back(it->first);\n    }\n    std::string\
    \ sample = keys[0];\n    char lower = sample[0];\n    char upper = sample[0];\n\
    \    bool allLower = true;\n    bool allUpper = true;\n    for (int i = 1; i <\
    \ sample.length(); i++) {\n        if (!islower(sample[i])) {\n            allLower\
    \ = false;\n        }\n        if (!isupper(sample[i])) {\n            allUpper\
    \ = false;\n        }\n    }\n    if (allLower == true || allUpper == true) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpygszn7hz: /tmp/tmpygszn7hz.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  int len = dict.size();\n  if(len == 0) return false;\n  std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n  bool upper = std::isupper(it->first[0]);\n  for(it = dict.begin();\
    \ it != dict.end(); it++) {\n    if(upper != std::isupper(it->first[0])) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpm1rtufr0: /tmp/tmpm1rtufr0.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    std::string prev;\n\
    \    int flag=0;\n    for(auto i:dict)\n    {\n        if(flag==0)\n        {\n\
    \            if(i.first[0]>='a' && i.first[0]<='z')\n                flag=1;\n\
    \            else if(i.first[0]>='A' && i.first[0]<='Z')\n                flag=2;\n\
    \            else\n                return false;\n        }\n        else\n  \
    \      {\n            if(flag==1)\n            {\n                if(i.first[0]>='A'\
    \ && i.first[0]<='Z')\n                    return false;\n            }\n    \
    \        else\n            {\n                if(i.first[0]>='a' && i.first[0]<='z')\n\
    \                    return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjqx0oks8: /tmp/tmpjqx0oks8.cpp:54: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n// raise NotImplementedError()\nint c=0;\nfor(auto i=dict.begin();i!=dict.end();i++)\n\
    {\nfor(int j=0;j<i->first.length();j++)\n{\nif(isupper(i->first[j]))\n{\nc++;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqabun63.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmprqabun63.cpp:28:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   28\
    \ | int main() {\n      |            ^\n/tmp/tmprqabun63.cpp:37:1: error: expected\
    \ \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmprqabun63.cpp:23:1:\
    \ note: to match this \u2018{\u2019\n   23 | {\n      | ^\n/tmp/tmprqabun63.cpp:37:1:\
    \ error: expected \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmprqabun63.cpp:21:1:\
    \ note: to match this \u2018{\u2019\n   21 | {\n      | ^\n/tmp/tmprqabun63.cpp:37:1:\
    \ error: expected \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmprqabun63.cpp:17:62:\
    \ note: to match this \u2018{\u2019\n   17 | bool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n      |                                                           \
    \   ^\n/tmp/tmprqabun63.cpp:37:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   37 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int upper = 0;\n    int lower = 0;\n    for (auto it : dict) {\n\
    \        if (islower(it.first[0])) {\n            ++lower;\n        } else if\
    \ (isupper(it.first[0])) {\n            ++upper;\n        } else {\n         \
    \   return false;\n        }\n    }\n    return (upper == 0 || lower == 0);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpux6dtocv: /tmp/tmpux6dtocv.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint size = dict.size();\n\tif (size == 0) {\n\t\treturn false;\n\t\
    }\n\tfor (std::map<std::string,std::string>::iterator it = dict.begin(); it !=\
    \ dict.end(); ++it) {\n\t\tstd::string first = it->first;\n\t\tfor (std::string::iterator\
    \ stringIt = first.begin(); stringIt != first.end(); ++stringIt) {\n\t\t\tchar\
    \ letter = *stringIt;\n\t\t\tif (isupper(letter)) {\n\t\t\t\tfor (std::map<std::string,std::string>::iterator\
    \ it2 = dict.begin(); it2 != dict.end(); ++it2) {\n\t\t\t\t\tstd::string second\
    \ = it2->first;\n\t\t\t\t\tfor (std::string::iterator stringIt2 = second.begin();\
    \ stringIt2 != second.end(); ++stringIt2) {\n\t\t\t\t\t\tchar letter2 = *stringIt2;\n\
    \t\t\t\t\t\tif (islower(letter2)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\
    }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (islower(letter)) {\n\t\t\t\t\
    for (std::map<std::string,std::string>::iterator it2 = dict.begin(); it2 != dict.end();\
    \ ++it2) {\n\t\t\t\t\tstd::string second = it2->first;\n\t\t\t\t\tfor (std::string::iterator\
    \ stringIt2 = second.begin(); stringIt2 != second.end(); ++stringIt2) {\n\t\t\t\
    \t\t\tchar letter2 = *stringIt2;\n\t\t\t\t\t\tif (isupper(letter2)) {\n\t\t\t\t\
    \t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int upper = 0;\n    int lower = 0;\n    for (auto it : dict) {\n\
    \        std::string temp = it.first;\n        if (islower(temp[0])) {\n     \
    \       lower++;\n        } else if (isupper(temp[0])) {\n            upper++;\n\
    \        } else {\n            return false;\n        }\n    }\n    if (upper\
    \ == 0 && lower == 0) {\n        return false;\n    } else if (upper == 0) {\n\
    \        return true;\n    } else if (lower == 0) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxduj_kgw: /tmp/tmpxduj_kgw.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // your code here\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbn4tz78c: /tmp/tmpbn4tz78c.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool allUpperCase = true;\n    bool allLowerCase = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (allUpperCase\
    \ && islower(it->first[0])) {\n            allUpperCase = false;\n        }\n\
    \        if (allLowerCase && isupper(it->first[0])) {\n            allLowerCase\
    \ = false;\n        }\n    }\n    return allUpperCase || allLowerCase;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdai3bryn: /tmp/tmpdai3bryn.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool lowerCase = false;\n\
    \    bool upperCase = false;\n    std::map<std::string,std::string>::iterator\
    \ dictIter;\n    std::string firstKey = dict.begin()->first;\n    for(char & c\
    \ : firstKey) {\n        if(islower(c)){\n            lowerCase = true;\n    \
    \        break;\n        }\n        else if(isupper(c)){\n            upperCase\
    \ = true;\n            break;\n        }\n    }\n    for(dictIter = dict.begin();\
    \ dictIter != dict.end(); dictIter++) {\n        std::string key = dictIter->first;\n\
    \        for(char & c : key) {\n            if(lowerCase && isupper(c)) return\
    \ false;\n            else if(upperCase && islower(c)) return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2afg0de5: /tmp/tmp2afg0de5.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool state = true;\n\
    \    char alpha = 'a';\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(it->first[0] == alpha) {\n            state = true;\n        \
    \    break;\n        }\n        else\n            state = false;\n    }\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] == alpha\
    \ && state == true)\n            continue;\n        else if(it->first[0] != alpha\
    \ && state == false)\n            continue;\n        else \n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpf2o6a7e7: /tmp/tmpf2o6a7e7.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  int lower = 0;\n  int upper = 0;\n  if (dict.size() == 0) {\n   \
    \ return false;\n  }\n  for (auto& p : dict) {\n    std::string key = p.first;\n\
    \    for (auto c : key) {\n      if (islower(c)) {\n        lower += 1;\n    \
    \  }\n      else if (isupper(c)) {\n        upper += 1;\n      }\n    }\n  }\n\
    \  if (lower == 0 || upper == 0) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgrcsxddj: /tmp/tmpgrcsxddj.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool lower = false;\n \
    \   bool upper = false;\n    for(auto it : dict) {\n        for(auto &a : it.first)\
    \ {\n            if(isupper(a)) upper = true;\n            else lower = true;\n\
    \        }\n    }\n    return (lower == upper) ? false : true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkpm36wxl: /tmp/tmpkpm36wxl.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Do your magic here\n    bool u = true, l = true;\n    if(dict.size()\
    \ > 0) {\n        for(auto x : dict) {\n            u = u && (x.first.at(0) <=\
    \ 'Z');\n            l = l && (x.first.at(0) >= 'a');\n        }\n        return\
    \ u || l;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqo8gnyyo: /tmp/tmpqo8gnyyo.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upper = true;\n    bool lower = true;\n    for (auto a: dict)\
    \ {\n        for (auto c: a.first) {\n            if (!isupper(c)) {\n       \
    \         upper = false;\n            }\n            if (!islower(c)) {\n    \
    \            lower = false;\n            }\n        }\n    }\n    return lower\
    \ || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwows9abc: /tmp/tmpwows9abc.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>()))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    auto lcase = true;\n    auto ucase = true;\n    auto neither =\
    \ true;\n    for (const auto &kvp : dict) {\n        if (islower(kvp.first[0]))\n\
    \            ucase = false;\n        else if (isupper(kvp.first[0]))\n       \
    \     lcase = false;\n        else\n            neither = false;\n    }\n    return\
    \ lcase || ucase;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppxidq9b2: /tmp/tmppxidq9b2.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool ret = true;\n    bool upper = false;\n    bool lower = false;\n\
    \    if (dict.size() == 0) {\n        return false;\n    }\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        if (islower(it->first[0]))\
    \ {\n            lower = true;\n        } else if (isupper(it->first[0])) {\n\
    \            upper = true;\n        } else {\n            return false;\n    \
    \    }\n    }\n    if (upper && lower) {\n        return false;\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpaloy8f2b: /tmp/tmpaloy8f2b.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  bool flag = false;\n  int len = 0;\n  if(dict.size() == 0)\n    return\
    \ false;\n  for(auto& i : dict) {\n    len = i.first.length();\n    for(int j\
    \ = 0; j < len; j++) {\n      if(isupper(i.first[j]))\n        flag = true;\n\
    \      else {\n        flag = false;\n        break;\n      }\n    }\n    if(flag\
    \ == false)\n      break;\n  }\n  return flag;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzkmbv287: /tmp/tmpzkmbv287.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upper, lower;\n    std::transform(dict.begin(), dict.end(),\
    \ dict.begin(), [&](std::pair<std::string, std::string> val) {\n        // printf(\"\
    %s\\n\", val.first.c_str());\n        upper = std::all_of(val.first.begin(), val.first.end(),\
    \ [](char c) {\n            return isupper(c);\n        });\n        lower = std::all_of(val.first.begin(),\
    \ val.first.end(), [](char c) {\n            return islower(c);\n        });\n\
    \        if (upper) return val;\n        if (lower) return val;\n        throw\
    \ std::exception();\n    });\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcz_6_zu1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _OIter = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _UnaryOperation\
    \ = check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)::<lambda(std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)>]\u2019:\n/tmp/tmpcz_6_zu1.cpp:30:6:   required from here\n/usr/include/c++/9/bits/stl_algo.h:4343:12:\
    \ error: use of deleted function \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >& std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::operator=(const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n 4343 |  *__result = __unary_op(*__first);\n\
    \      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcz_6_zu1.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >& std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::operator=(const std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >&)\u2019 is implicitly declared as deleted because \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 declares a move constructor or move\
    \ assignm"
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::vector<char> chars;\n  for (auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n    chars.push_back(it->first[0]);\n  }\n  bool is_lower = std::islower(chars[0]);\n\
    \  for (char ch : chars) {\n    if (is_lower != std::islower(ch)) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpt5pzplek: /tmp/tmpt5pzplek.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() < 1) return false;\n  for (auto i = dict.begin();\
    \ i != dict.end(); i++) {\n    std::string key = i->first;\n    if (!isupper(key[0])\
    \ && !islower(key[0])) return false;\n  }\n  bool all_upper = true;\n  bool all_lower\
    \ = true;\n  for (auto i = dict.begin(); i != dict.end(); i++) {\n    std::string\
    \ key = i->first;\n    if (isupper(key[0])) all_lower = false;\n    if (islower(key[0]))\
    \ all_upper = false;\n  }\n  return all_upper || all_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8x4o1ir7: /tmp/tmp8x4o1ir7.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130876
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool res1 = true;\n   \
    \ bool res2 = true;\n    bool res3 = true;\n    bool res4 = true;\n    bool res5\
    \ = true;\n    bool res6 = true;\n    bool res7 = true;\n    bool res8 = true;\n\
    \    bool res9 = true;\n    bool res10 = true;\n    bool res11 = true;\n    bool\
    \ res12 = true;\n    bool res13 = true;\n    bool res14 = true;\n    bool res15\
    \ = true;\n    bool res16 = true;\n    bool res17 = true;\n    bool res18 = true;\n\
    \    bool res19 = true;\n    bool res20 = true;\n    bool res21 = true;\n    bool\
    \ res22 = true;\n    bool res23 = true;\n    bool res24 = true;\n    bool res25\
    \ = true;\n    bool res26 = true;\n    bool res27 = true;\n    bool res28 = true;\n\
    \    bool res29 = true;\n    bool res30 = true;\n    bool res31 = true;\n    bool\
    \ res32 = true;\n    bool res33 = true;\n    bool res34 = true;\n    bool res35\
    \ = true;\n    bool res36 = true;\n    bool res37 = true;\n    bool res38 = true;\n\
    \    bool res39 = true;\n    bool res40 = true;\n    bool res41 = true;\n    bool\
    \ res42 = true;\n    bool res43 = true;\n    bool res44 = true;\n    bool res45\
    \ = true;\n    bool res46 = true;\n    bool res47 = true;\n    bool res48 = true;\n\
    \    bool res49 = true;\n    bool res50 = true;\n    bool res51 = true;\n    bool\
    \ res52 = true;\n    bool res53 = true;\n    bool res54 = true;\n    bool res55\
    \ = true;\n    bool res56 = true;\n    bool res57 = true;\n    bool res58 = true;\n\
    \    bool res59 = true;\n    bool res60 = true;\n    bool res61 = true;\n    bool\
    \ res62 = true;\n   \n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmgp2q0g7: /tmp/tmpmgp2q0g7.cpp:85: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::set<std::string> strings;\n  for (auto iter = dict.begin();\
    \ iter != dict.end(); iter++) {\n    std::string key = iter->first;\n    if (std::isupper(key[0]))\
    \ {\n      strings.insert(\"upper\");\n    } else {\n      strings.insert(\"lower\"\
    );\n    }\n  }\n  return (strings.size() == 1);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphddm_7bq: /tmp/tmphddm_7bq.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\tbool allLower = true;\n\
    \tbool allUpper = true;\n\tfor(std::map<std::string,std::string>::iterator it\
    \ = dict.begin(); it != dict.end(); it++) {\n\t\tif(allLower && !(isupper(it->first[0])))\n\
    \t\t\tallLower = false;\n\t\tif(allUpper && !(islower(it->first[0])))\n\t\t\t\
    allUpper = false;\n\t}\n\treturn allLower || allUpper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmperik2p4i: /tmp/tmperik2p4i.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint len = dict.size();\n\tif(len == 0) return false;\n\tstd::map<std::string,std::string>::iterator\
    \ it;\n\tfor(it = dict.begin(); it != dict.end(); it++) {\n\t\tstd::string key\
    \ = it->first;\n\t\tif(key.empty()) return false;\n\t\tfor(int i = 0; i < key.length();\
    \ i++) {\n\t\t\tif(key[i] >= 'A' && key[i] <= 'Z') {\n\t\t\t\tfor(int j = i +\
    \ 1; j < key.length(); j++) {\n\t\t\t\t\tif(key[j] >= 'a' && key[j] <= 'z') {\n\
    \t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(key[i]\
    \ >= 'a' && key[i] <= 'z') {\n\t\t\t\tfor(int j = i + 1; j < key.length(); j++)\
    \ {\n\t\t\t\t\tif(key[j] >= 'A' && key[j] <= 'Z') {\n\t\t\t\t\t\treturn false;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpz51ram9t: /tmp/tmpz51ram9t.cpp:49: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool lower = false;\n    bool upper = false;\n    for (auto& element\
    \ : dict) {\n        std::string key = element.first;\n        if (islower(key[0]))\
    \ {\n            lower = true;\n        } else if (isupper(key[0])) {\n      \
    \      upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower != upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpiqt9eqny: /tmp/tmpiqt9eqny.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\tbool is_lower = false;\n\
    \tbool is_upper = false;\n\tfor(auto const& x : dict) {\n\t\tif(islower(x.first[0]))\
    \ {\n\t\t\tis_lower = true;\n\t\t}\n\t\telse if(isupper(x.first[0])) {\n\t\t\t\
    is_upper = true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(is_lower\
    \ && is_upper)\n\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpraq0ofk6: /tmp/tmpraq0ofk6.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    bool UpperCase =\
    \ false;\n    bool LowerCase = false;\n    for(auto i:dict){\n        //std::cout<<i.first<<\"\
    \ \"<<i.second<<std::endl;\n        bool cur_upper = true;\n        bool cur_lower\
    \ = true;\n        for(int j=0;j<i.first.size();j++){\n            if(std::isupper(i.first[j]))\n\
    \                cur_lower = false;\n            if(std::islower(i.first[j]))\n\
    \                cur_upper = false;\n        }\n        //std::cout<<cur_upper<<\"\
    \ \"<<cur_lower<<std::endl;\n        if(!cur_upper&&!cur_lower)\n            return\
    \ false;\n        if(cur_upper)\n            UpperCase = true;\n        if(cur_lower)\n\
    \            LowerCase = true;\n    }\n    if(UpperCase&&LowerCase)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0) {\n\t\treturn false;\n\t}\n\tint isLower = 1;\n\
    \tint isUpper = 1;\n\tfor(std::map<std::string,std::string>::iterator it = dict.begin();\
    \ it != dict.end(); it++) {\n\t\tif(!(it->first[0] >= 'a' && it->first[0] <= 'z'))\
    \ {\n\t\t\tisLower = 0;\n\t\t}\n\t\tif(!(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z')) {\n\t\t\tisUpper = 0;\n\t\t}\n\t}\n\treturn isLower || isUpper;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr5efb6ks: /tmp/tmpr5efb6ks.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  assert(dict.size() > 0);\n  bool lcase = true;\n  bool ucase = true;\n\
    \  bool invalid_key = false;\n  for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n    std::string key = it->first;\n\
    \    for (int i = 0; i < key.length(); i++) {\n      if (!islower(key[i])) {\n\
    \        lcase = false;\n      }\n      if (!isupper(key[i])) {\n        ucase\
    \ = false;\n      }\n      if (lcase == false && ucase == false) {\n        invalid_key\
    \ = true;\n        break;\n      }\n    }\n    if (invalid_key) {\n      break;\n\
    \    }\n  }\n  return (lcase || ucase);\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1ckkhl8o: /tmp/tmp1ckkhl8o.cpp:18: bool check_dict_case(std::map<std::__cxx11::basic_string<char>,
    std::__cxx11::basic_string<char> >): Assertion `dict.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660130878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    //upper case\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ < 97) {\n            for(int i = 0; i < it->first.size(); i++) {\n         \
    \       if(it->first[i] >= 97)\n                    return false;\n          \
    \  }\n        }\n        else {\n            for(int i = 0; i < it->first.size();\
    \ i++) {\n                if(it->first[i] < 97)\n                    return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpc3zc82h0: /tmp/tmpc3zc82h0.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    bool flag = true;\n\
    \    std::string s;\n    std::string s1;\n    std::string s2;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    it = dict.begin();\n    s = it->first;\n    s1 = s;\n    std::transform(s1.begin(),\
    \ s1.end(), s1.begin(), ::tolower);\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::toupper);\n    if(s==s1)\n        return false;\n    else{\n        for(it\
    \ = dict.begin(); it!=dict.end(); it++){\n            s2 = it->first;\n      \
    \      if(s2!=s1 && s2!=s)\n                return false;\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgbi0i21p: /tmp/tmpgbi0i21p.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool lower = true;\n    bool upper = true;\n    for (std::pair<std::string,std::string>\
    \ kv : dict) {\n        if (!islower(kv.first[0])) {\n            lower = false;\n\
    \        }\n        if (!isupper(kv.first[0])) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsuhz2pqi: /tmp/tmpsuhz2pqi.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// check if empty\n\tif (dict.empty()) {\n\t\treturn false;\n\t}\n\
    \n\t// keys are strings, so lowercase = 1, uppercase = 0\n\tint lc_or_uc = -1;\n\
    \n\t// traverse map and store whether all keys are lower or upper case\n\tfor\
    \ (auto i : dict) {\n\t\tif (lc_or_uc == -1) {\n\t\t\tif (i.first == tolower(i.first[0]))\
    \ {\n\t\t\t\tlc_or_uc = 1;\n\t\t\t} else {\n\t\t\t\tlc_or_uc = 0;\n\t\t\t}\n\t\
    \t} else {\n\t\t\tif (lc_or_uc == 1) {\n\t\t\t\tif (i.first != tolower(i.first[0]))\
    \ {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (i.first ==\
    \ tolower(i.first[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4b3oh00q.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp4b3oh00q.cpp:29:16: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   29 |    if (i.first == tolower(i.first[0])) {\n   \
    \   |        ~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~\n      |          |              \
    \ |\n      |          |               int\n      |          const std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4b3oh00q.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4b3oh00q.cpp:29:37:\
    \ note:   \u2018const std::__cxx11::basic_string<char>\u2019 is not derived from\
    \ \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   29 |    if (i.first ==\
    \ tolower(i.first[0])) {\n      |                                     ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4b3oh00q.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4b3oh00q.cpp:29:37: note:   mismatched types \u2018const std::__cxx11::"
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// Your code here\n\t\n\tint lc_count = 0;\n\tint uc_count = 0;\n\
    \tbool result = false;\n\t\n\tif(dict.empty())\n\t\treturn false;\n\t\t\n\tfor(auto\
    \ i: dict)\n\t{\n\t\tif(islower(i.first[0]))\n\t\t\tlc_count++;\n\t\telse if(isupper(i.first[0]))\n\
    \t\t\tuc_count++;\n\t}\n\t\n\tif(lc_count == dict.size() || uc_count == dict.size())\n\
    \t\tresult = true;\n\t\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp02teauea: /tmp/tmp02teauea.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif ((it->first).length()\
    \ == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((it->first).length() == 1) {\n\t\
    \t\tif (((it->first)[0] >= 'A' && (it->first)[0] <= 'Z') || ((it->first)[0] >=\
    \ 'a' && (it->first)[0] <= 'z')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ((it->first)[0] >=\
    \ 'A' && (it->first)[0] <= 'Z') {\n\t\t\t\tfor (int i = 1; i < (it->first).length();\
    \ i++) {\n\t\t\t\t\tif ((it->first)[i] >= 'a' && (it->first)[i] <= 'z') {\n\t\t\
    \t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ((it->first)[0]\
    \ >= 'a' && (it->first)[0] <= 'z') {\n\t\t\t\tfor (int i = 1; i < (it->first).length();\
    \ i++) {\n\t\t\t\t\tif ((it->first)[i] >= 'A' && (it->first)[i] <= 'Z') {\n\t\t\
    \t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0peny81n: /tmp/tmp0peny81n.cpp:55: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    // Check if the map is empty\n    if (dict.empty())\n   \
    \ {\n        return false;\n    }\n    \n    // Check for upper case or lower\
    \ case for the first character of the first key.\n    // If it is not alphabet,\
    \ return false.\n    if (isupper(dict.begin()->first[0]))\n    {\n        // Check\
    \ if all keys are uppercase.\n        for (std::map<std::string,std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); ++it)\n        {\n            // Check for\
    \ every character\n            for (int i=0; i<(it->first).length(); i++)\n  \
    \          {\n                if (!isupper((it->first)[i]))\n                {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    else if (islower(dict.begin()->first[0]))\n    {\n        // Check\
    \ if all keys are lowercase.\n        for (std::map<std::string,std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); ++it)\n        {\n            // Check for\
    \ every character\n            for (int i=0; i<(it->first).length(); i++)\n  \
    \          {\n                if (!islower((it->first)[i]))\n                {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    else\n    {\n        return false;\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n    {\n        return false;\n    }\n    bool\
    \ check_lower=false;\n    bool check_upper=false;\n    for(auto x:dict)\n    {\n\
    \        for(int i=0;i<x.first.size();i++)\n        {\n            if(islower(x.first[i]))\n\
    \            {\n                check_lower=true;\n            }\n           \
    \ else if(isupper(x.first[i]))\n            {\n                check_upper=true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n    }\n    if(check_lower && check_upper)\n    {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int lower = 0;\n    int upper = 0;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        std::string s = it->first;\n        if (isupper(s[0]))\
    \ {\n            upper++;\n        } else {\n            lower++;\n        }\n\
    \    }\n    return (lower == 0 || upper == 0);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprl756j0p: /tmp/tmprl756j0p.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size()==0) return false;\n\tif(dict.begin()->first[0]>='a'\
    \ && dict.begin()->first[0]<='z'){\n\t\tfor(auto i = dict.begin(); i!=dict.end();\
    \ ++i){\n\t\t\tif(i->first[0]<'a' || i->first[0]>'z'){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}else if(dict.begin()->first[0]>='A' && dict.begin()->first[0]<='Z'){\n\
    \t\tfor(auto i = dict.begin(); i!=dict.end(); ++i){\n\t\t\tif(i->first[0]<'A'\
    \ || i->first[0]>'Z'){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}else{\n\t\t\
    return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0r3t_axk: /tmp/tmp0r3t_axk.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  int length = dict.size();\n  if (length == 0) {\n    return false;\n\
    \  }\n  bool all_lower = true;\n  bool all_upper = true;\n  for (auto &elem :\
    \ dict) {\n    std::string key = elem.first;\n    if (islower(key[0])) {\n   \
    \   all_upper = false;\n    } else if (isupper(key[0])) {\n      all_lower = false;\n\
    \    } else {\n      return false;\n    }\n  }\n  return (all_lower || all_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuh6unl8d: /tmp/tmpuh6unl8d.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// if dict is empty, return false\n\tif (dict.empty()) return false;\n\
    \t// check if all keys are in upper case or lower case\n\tfor (auto const& [key,\
    \ val] : dict) {\n\t\tif (key != boost::to_upper_copy(key) && key != boost::to_lower_copy(key))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8vqwv16.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpl8vqwv16.cpp:22:14: error:\
    \ \u2018boost\u2019 has not been declared\n   22 |   if (key != boost::to_upper_copy(key)\
    \ && key != boost::to_lower_copy(key)) {\n      |              ^~~~~\n/tmp/tmpl8vqwv16.cpp:22:50:\
    \ error: \u2018boost\u2019 has not been declared\n   22 |   if (key != boost::to_upper_copy(key)\
    \ && key != boost::to_lower_copy(key)) {\n      |                            \
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::string s;\n    bool flag=true;\n    if(dict.size()==0)\n \
    \       return false;\n    for(auto iter=dict.begin();iter!=dict.end();iter++)\n\
    \    {\n        s=iter->first;\n        for(auto i=0;i<s.length();i++)\n     \
    \   {\n            if(islower(s[i]))\n            {\n                if(flag==false)\n\
    \                    return false;\n                flag=true;\n            }\n\
    \            else if(isupper(s[i]))\n            {\n                if(flag==true)\n\
    \                    return false;\n                flag=false;\n            }\n\
    \            else\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpe0u768wj: /tmp/tmpe0u768wj.cpp:51: int main(): Assertion `candidate((std::map<std::string,std::string>({{"STATE",
    "NC"}, {"ZIP", "12345"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int flag=0;\n    for(auto i:dict)\n    {\n        if(i.first[0]>=65&&i.first[0]<=90)\n\
    \        {\n            flag=1;\n        }\n        else if(i.first[0]>=97&&i.first[0]<=122)\n\
    \        {\n            flag=2;\n        }\n        else\n        {\n        \
    \    return false;\n        }\n    }\n    if(flag==1)\n    {\n        for(auto\
    \ i:dict)\n        {\n            if(i.first[0]>=97&&i.first[0]<=122)\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ else if(flag==2)\n    {\n        for(auto i:dict)\n        {\n            if(i.first[0]>=65&&i.first[0]<=90)\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphr88a3gw: /tmp/tmphr88a3gw.cpp:61: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool lower = true;\n  \
    \  bool upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            upper\
    \ = false;\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n    \
    \        lower = false;\n        else return false;\n    }\n    return upper ||\
    \ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp97sw661p: /tmp/tmp97sw661p.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool is_upper = true;\n    bool is_lower = true;\n    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if (!std::isupper(it->first[0])) {\n          \
    \  is_upper = false;\n        }\n        if (!std::islower(it->first[0])) {\n\
    \            is_lower = false;\n        }\n    }\n    return is_upper || is_lower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppeatelbq: /tmp/tmppeatelbq.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upper = true;\n    bool lower = true;\n    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    for (auto i = dict.begin(); i !=\
    \ dict.end(); i++) {\n        if (i->first.size() > 0) {\n            if (isupper(i->first[0]))\
    \ {\n                lower = false;\n            } else {\n                upper\
    \ = false;\n            }\n        }\n    }\n    return upper || lower;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpswl1140j: /tmp/tmpswl1140j.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write code here\n    if(dict.size()==0)\n        return false;\n\
    \    int count1=0,count2=0;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        for(int i=0;i<it->first.length();i++)\n        {\n           \
    \ if(it->first[i]>='a'&&it->first[i]<='z')\n                count1++;\n      \
    \      else if(it->first[i]>='A'&&it->first[i]<='Z')\n                count2++;\n\
    \        }\n    }\n    if(count1==0||count2==0)\n        return true;\n    else\n\
    \        return false;\n\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprc9pji5c: /tmp/tmprc9pji5c.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int low = 0;\n    int up = 0;\n    for(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ up++;\n        else low++;\n    }\n    if(low == 0 || up == 0) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdz5m5xpm: /tmp/tmpdz5m5xpm.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    std::vector<std::string>\
    \ v;\n    for(auto& x: dict)\n        v.push_back(x.first);\n    bool first =\
    \ true;\n    char firstChar = ' ';\n    bool firstUpper = false;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(first) {\n            firstChar = v[i][0];\n\
    \            firstUpper = isupper(firstChar);\n            first = false;\n  \
    \      }\n        else {\n            if(isupper(v[i][0]) == firstUpper)\n   \
    \             continue;\n            else\n                return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr_5df_mx: /tmp/tmpr_5df_mx.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool lowercase = false;\n    bool uppercase = false;\n    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    for (auto itr = dict.begin(); itr\
    \ != dict.end(); itr++) {\n        if (isupper(itr->first[0])) {\n           \
    \ uppercase = true;\n        } else {\n            lowercase = true;\n       \
    \ }\n    }\n    if (lowercase && uppercase) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2p8vtnmc: /tmp/tmp2p8vtnmc.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  bool is_upper = true;\n  bool\
    \ is_lower = true;\n  for (auto const& [key, value] : dict) {\n    for (auto&\
    \ c : key) {\n      if (islower(c)) {\n        is_upper = false;\n      } else\
    \ if (isupper(c)) {\n        is_lower = false;\n      } else {\n        return\
    \ false;\n      }\n    }\n  }\n  return is_upper || is_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0) return false;\n\t// std::vector<std::string>\
    \ strs = dict.key();\n\tstd::vector<std::string> strs;\n\tfor(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n\t\tstrs.push_back(it->first);\n\
    \t}\n\tstd::string str = strs[0];\n\tint upper = 0;\n\tint lower = 0;\n\tfor(std::vector<std::string>::iterator\
    \ it = strs.begin(); it != strs.end(); it++) {\n\t\tif(std::all_of((*it).begin(),\
    \ (*it).end(), ::isupper)) {\n\t\t\tupper++;\n\t\t}\n\t\tif(std::all_of((*it).begin(),\
    \ (*it).end(), ::islower)) {\n\t\t\tlower++;\n\t\t}\n\t}\n\tif(upper == strs.size()\
    \ || lower == strs.size()) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130881
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // your code here\n    bool upperCaseFlag = true;\n    bool lowerCaseFlag\
    \ = true;\n    if(dict.size() == 0)\n        return false;\n    for(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++)\n    {\n        upperCaseFlag = upperCaseFlag\
    \ && (it->first == str_to_upper(it->first));\n        lowerCaseFlag = lowerCaseFlag\
    \ && (it->first == str_to_lower(it->first));\n    }\n    return upperCaseFlag\
    \ || lowerCaseFlag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcyhi91c.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmphcyhi91c.cpp:25:56: error:\
    \ \u2018str_to_upper\u2019 was not declared in this scope; did you mean \u2018\
    _toupper\u2019?\n   25 |         upperCaseFlag = upperCaseFlag && (it->first ==\
    \ str_to_upper(it->first));\n      |                                         \
    \               ^~~~~~~~~~~~\n      |                                        \
    \                _toupper\n/tmp/tmphcyhi91c.cpp:26:56: error: \u2018str_to_lower\u2019\
    \ was not declared in this scope; did you mean \u2018_tolower\u2019?\n   26 |\
    \         lowerCaseFlag = lowerCaseFlag && (it->first == str_to_lower(it->first));\n\
    \      |                                                        ^~~~~~~~~~~~\n\
    \      |                                                        _tolower\n"
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int upper_count = 0;\n    int lower_count = 0;\n    if(dict.size()\
    \ == 0)\n        return false;\n    for(auto i: dict) {\n        if(islower(i.first[0]))\
    \ {\n            lower_count++;\n        }\n        else if(isupper(i.first[0]))\
    \ {\n            upper_count++;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    if(upper_count == dict.size() || lower_count ==\
    \ dict.size())\n        return true;\n    else\n        return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpoxbxpfwk: /tmp/tmpoxbxpfwk.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) {\n    return false;\n  }\n  for (auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n    if (it->first[0] > 'Z') {\n   \
    \   for (int i = 0; i < it->first.size(); i++) {\n        if (it->first[i] < 'a'\
    \ || it->first[i] > 'z') {\n          return false;\n        }\n      }\n    }\
    \ else {\n      for (int i = 0; i < it->first.size(); i++) {\n        if (it->first[i]\
    \ < 'A' || it->first[i] > 'Z') {\n          return false;\n        }\n      }\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbkx4mjnh: /tmp/tmpbkx4mjnh.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint uppercase = 0;\n\tint lowercase = 0;\n\tint nonletter = 0;\n\t\
    int length = dict.size();\n\tfor (auto& x: dict) {\n\t\tfor (char& c: x.first)\
    \ {\n\t\t\tif (isupper(c)) {\n\t\t\t\tuppercase++;\n\t\t\t}\n\t\t\telse if (islower(c))\
    \ {\n\t\t\t\tlowercase++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnonletter++;\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (uppercase == length) {\n\t\treturn true;\n\t}\n\telse if\
    \ (lowercase == length) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn4f0hu_.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpcn4f0hu_.cpp:23:19: error:\
    \ binding reference of type \u2018char&\u2019 to \u2018const char\u2019 discards\
    \ qualifiers\n   23 |   for (char& c: x.first) {\n      |                   ^~~~~\n"
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tbool is_first_upper = false;\n\tif(dict.size() == 0)\n\t\treturn\
    \ false;\n\tfor(auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif(!is_first_upper)\
    \ {\n\t\t\tbool is_upper = isupper(it->first[0]);\n\t\t\tfor(int i = 1; i < it->first.size();\
    \ i++) {\n\t\t\t\tif(is_upper && !isupper(it->first[i]))\n\t\t\t\t\treturn false;\n\
    \t\t\t\tif(!is_upper && isupper(it->first[i]))\n\t\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tis_first_upper = is_upper;\n\t\t}\n\t\telse {\n\t\t\tfor(int i = 0; i\
    \ < it->first.size(); i++) {\n\t\t\t\tif(isupper(it->first[i]))\n\t\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpq03vrchl: /tmp/tmpq03vrchl.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n   // your code here\n   return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxvozqkgz: /tmp/tmpxvozqkgz.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // your code here\n  if(dict.size()==0)\n    return false;\n  int\
    \ state=0;\n  int upper=0;\n  int lower=0;\n  for(auto i=dict.begin();i!=dict.end();i++)\n\
    \  {\n    char c= i->first[0];\n    if(islower(c))\n    {\n      lower++;\n  \
    \  }\n    else if(isupper(c))\n    {\n      upper++;\n    }\n    else\n    {\n\
    \      return false;\n    }\n  }\n  if(lower==dict.size() || upper==dict.size())\n\
    \    return true;\n  else\n    return false;\n  return false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpc44mbyfs: /tmp/tmpc44mbyfs.cpp:51: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // your code goes here\n    bool lower = true;\n    bool upper\
    \ = true;\n    if(dict.size() == 0) return false;\n    for(auto itr = dict.begin();\
    \ itr != dict.end(); itr++){\n        std::string key = itr->first;\n        if(islower(key[0]))\
    \ upper = false;\n        else lower = false;\n    }\n    return (lower || upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2rs62d4j: /tmp/tmp2rs62d4j.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::cout << \"check_dict_case\" << '\\n';\n  // create two sets\
    \ to track upper and lower case strings\n  std::set<std::string> upper;\n  std::set<std::string>\
    \ lower;\n  // check if dictionary is empty\n  if (dict.empty()) {\n    return\
    \ false;\n  }\n  // iterate through dictionary\n  for (auto const& x : dict) {\n\
    \    // if upper case add to upper\n    if (isupper(x.first[0])) {\n      upper.insert(x.first);\n\
    \    }\n    // if lower case add to lower\n    else if (islower(x.first[0])) {\n\
    \      lower.insert(x.first);\n    }\n    // else return false\n    else {\n \
    \     return false;\n    }\n  }\n  // if upper and lower are empty return false\n\
    \  if (upper.empty() && lower.empty()) {\n    return false;\n  }\n  // check for\
    \ true case\n  if (upper.size() == dict.size() || lower.size() == dict.size())\
    \ {\n    return true;\n  }\n  // else return false\n  return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdixq_t09: /tmp/tmpdixq_t09.cpp:57: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  assert (0);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyf8ogb7o: /tmp/tmpyf8ogb7o.cpp:18: bool check_dict_case(std::map<std::__cxx11::basic_string<char>,
    std::__cxx11::basic_string<char> >): Assertion `0'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool isLower = true;\n\
    \    bool isUpper = true;\n    std::map<std::string,std::string>::iterator iter;\n\
    \    for(iter = dict.begin(); iter != dict.end(); iter++) {\n        if(islower(iter->first[0]))\
    \ {\n            isUpper = false;\n        } else {\n            isLower = false;\n\
    \        }\n    }\n    return isLower || isUpper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp50fhzn28: /tmp/tmp50fhzn28.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool lower=true;\n    bool upper=true;\n    for(auto i:dict){\n\
    \        upper=upper&&isupper(i.first[0]);\n        lower=lower&&islower(i.first[0]);\n\
    \    }\n    return lower||upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1owza9oj: /tmp/tmp1owza9oj.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool isUpper = isupper(dict.begin()->first[0]);\n\
    \    for(auto const& elem : dict) {\n        for(int i = 0; i < elem.first.size();\
    \ i++) {\n            if(isUpper) {\n                if(islower(elem.first[i]))\
    \ return false;\n            } else {\n                if(isupper(elem.first[i]))\
    \ return false;\n            }\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2kjmu71j: /tmp/tmp2kjmu71j.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool lower = false;\n\
    \    bool upper = false;\n    int count = 0;\n    for(auto&[k,v]:dict) {\n   \
    \     if(isupper(k[0]))\n            upper = true;\n        else if(islower(k[0]))\n\
    \            lower = true;\n        else\n            return false;\n        count++;\n\
    \    }\n    if(count == 1)\n        return true;\n    return (lower&&!upper)||(!lower&&upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpd7e27k46: /tmp/tmpd7e27k46.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    \n    if(dict.size() == 0) return false;\n    bool flag = false;\n\
    \    int upperCase = 0;\n    int lowerCase = 0;\n    for(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        for(int i = 0; i < it->first.length();\
    \ i++) {\n            if(it->first[i] >= 65 && it->first[i] <= 90) upperCase++;\n\
    \            else if(it->first[i] >= 97 && it->first[i] <= 122) lowerCase++;\n\
    \            else return false;\n        }\n    }\n    if(upperCase == 0) flag\
    \ = true;\n    else if(lowerCase == 0) flag = true;\n    else flag = false;\n\
    \    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(; it != dict.end(); it++) {\n        all_lower = all_lower && (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z');\n        all_upper = all_upper && (it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z');\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp887wfjlb: /tmp/tmp887wfjlb.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upper = true;\n    bool lower = true;\n    for (auto i = dict.begin();\
    \ i != dict.end(); i++) {\n        for (auto j = 0; j < i->first.length(); j++)\
    \ {\n            if (islower(i->first[j])) {\n                upper = false;\n\
    \            }\n            if (isupper(i->first[j])) {\n                lower\
    \ = false;\n            }\n        }\n    }\n    return upper || lower;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsm3sq2oo: /tmp/tmpsm3sq2oo.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int lower_count = 0;\n    int upper_count = 0;\n    int non_string_key_count\
    \ = 0;\n    for (auto i = dict.begin(); i != dict.end(); i++) {\n        std::string\
    \ curr_key = i->first;\n        if (curr_key[0] >= 'a' && curr_key[0] <= 'z')\
    \ {\n            lower_count++;\n        } else if (curr_key[0] >= 'A' && curr_key[0]\
    \ <= 'Z') {\n            upper_count++;\n        } else {\n            non_string_key_count++;\n\
    \        }\n    }\n    return (lower_count > 0 && upper_count == 0 && non_string_key_count\
    \ == 0) || (lower_count == 0 && upper_count > 0 && non_string_key_count == 0);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphi_12c6b: /tmp/tmphi_12c6b.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size()==0)\n\t\treturn false;\n\tbool isupper = std::isupper(dict.begin()->first[0]);\n\
    \tfor(auto &x:dict)\n\t\tif(isupper!=std::isupper(x.first[0]))\n\t\t\treturn false;\n\
    \treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjf0iyus3: /tmp/tmpjf0iyus3.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool lower_str\
    \ = true;\n    bool upper_str = true;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(!(isupper(it->first[0])))\n\
    \            upper_str = false;\n        if(!(islower(it->first[0])))\n      \
    \      lower_str = false;\n    }\n    if(lower_str || upper_str)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmplh3bw928: /tmp/tmplh3bw928.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool lower = false;\n\
    \    bool upper = false;\n    for(auto i = dict.begin(); i != dict.end(); i++)\
    \ {\n        if(islower(i->first[0]))\n            lower = true;\n        else\
    \ if(isupper(i->first[0]))\n            upper = true;\n        else\n        \
    \    return false;\n    }\n    return lower ^ upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpy176rq1m: /tmp/tmpy176rq1m.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool lc = false;\n    bool uc = false;\n    for (auto i : dict)\
    \ {\n        for (char c : i.first) {\n            if (islower(c)) {\n       \
    \         lc = true;\n            } else if (isupper(c)) {\n                uc\
    \ = true;\n            } else {\n                return false;\n            }\n\
    \        }\n    }\n    return lc == uc;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp07yeif_x: /tmp/tmp07yeif_x.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tbool lower = 1;\n\tbool upper = 1;\n\tif (dict.size() == 0) {\n\t\
    \treturn false;\n\t}\n\tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\
    \t\tif (it->first[0] >= 'a' && it->first[0] <= 'z') {\n\t\t\tupper = 0;\n\t\t\
    }\n\t\telse if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n\t\t\tlower = 0;\n\
    \t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (lower || upper) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1cu7ssx9: /tmp/tmp1cu7ssx9.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// first check that the map isn't empty\n\tif (dict.empty()) { return\
    \ false; }\n\t\n\t// find if any of the keys are not strings\n\tfor (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n\t\tif (!it->first.is_string())\
    \ { return false; }\n\t}\n\t\n\t// initialize the type of first key\n\tint key_type\
    \ = std::isupper(dict.begin()->first[0]);\n\t\n\t// loop through all of the keys\
    \ to check that they are all the same case\n\tfor (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n\t\tif (key_type != std::isupper(it->first[0]))\
    \ { return false; }\n\t}\n\t\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob6_ozvm.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpob6_ozvm.cpp:23:18: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018is_string\u2019; did you mean \u2018basic_string\u2019?\n   23 |   if\
    \ (!it->first.is_string()) { return false; }\n      |                  ^~~~~~~~~\n\
    \      |                  basic_string\n"
  stdout: ''
  timestamp: 1660130881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::string tmp = dict.begin()->first;\n  int res = 0;\n  for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n    if(islower(it->first[0]))\
    \ {\n      res = 1;\n    }\n    else if(isupper(it->first[0])) {\n      res =\
    \ 2;\n    }\n    else {\n      return false;\n    }\n    if(res != tmp[0])\n \
    \     return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_dojunv2: /tmp/tmp_dojunv2.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// TODO: write code here.\n\treturn false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpivn1gkru: /tmp/tmpivn1gkru.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  bool all_upper = true;\n  bool all_lower = true;\n  for (auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n    if (it->first.at(0) < 'A' ||\
    \ it->first.at(0) > 'Z') {\n      all_upper = false;\n    }\n    if (it->first.at(0)\
    \ < 'a' || it->first.at(0) > 'z') {\n      all_lower = false;\n    }\n  }\n  return\
    \ all_upper || all_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2v05vqvj: /tmp/tmp2v05vqvj.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool is_lower_or_upper = true;\n    std::cout << \"{\";\n    for\
    \ (std::map<std::string,std::string>::iterator it=dict.begin(); it!=dict.end();\
    \ ++it) {\n        std::cout << \" \" << it->first << \":\" << it->second;\n \
    \       if (is_lower_or_upper) {\n            if (it->first[0] >= 'a' && it->first[0]\
    \ <= 'z') {\n                is_lower_or_upper = true;\n            } else {\n\
    \                is_lower_or_upper = false;\n            }\n        } else {\n\
    \            if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n             \
    \   is_lower_or_upper = false;\n            } else {\n                is_lower_or_upper\
    \ = true;\n            }\n        }\n    }\n    std::cout << \" }\" << std::endl;\n\
    \    return is_lower_or_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7q2t8v39: /tmp/tmp7q2t8v39.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: '{ b:banana p:pineapple }

    { A:banana B:banana p:pineapple }

    '
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n    {\n        return false;\n    }\n    int\
    \ low = 0;\n    int high = 0;\n    int size = dict.size();\n    for(auto i : dict)\n\
    \    {\n        if(isupper(i.first[0]))\n        {\n            high++;\n    \
    \    }\n        else\n        {\n            low++;\n        }\n    }\n    if(low==size\
    \ || high==size)\n    {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgy_3aquu: /tmp/tmpgy_3aquu.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Type your code here\n    if(dict.size() == 0)\n    {\n     \
    \   return false;\n    }\n    int uppercase = 0;\n    int lowercase = 0;\n   \
    \ int flag = 0;\n    for(auto i : dict)\n    {\n        std::string s = i.first;\n\
    \        if(std::islower(s[0]))\n        {\n            lowercase++;\n       \
    \ }\n        else if(std::isupper(s[0]))\n        {\n            uppercase++;\n\
    \        }\n        else\n        {\n            flag = 1;\n            break;\n\
    \        }\n    }\n    if(flag == 1)\n    {\n        return false;\n    }\n  \
    \  else if(uppercase == dict.size() || lowercase == dict.size())\n    {\n    \
    \    return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmplbnb77m6: /tmp/tmplbnb77m6.cpp:61: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    auto it = dict.begin();\n\
    \    if(it->first[0]>='a' && it->first[0]<='z')\n    {\n        for(auto it:dict)\n\
    \        {\n            if(it.first[0]<'a' || it.first[0]>'z')\n             \
    \   return false;\n        }\n    }\n    else\n    {\n        for(auto it:dict)\n\
    \        {\n            if(it.first[0]<'A' || it.first[0]>'Z')\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqsl47rmm: /tmp/tmpqsl47rmm.cpp:44: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool is_upper = false;\n    bool is_lower = false;\n    for (auto\
    \ const& entry : dict) {\n        if (std::all_of(entry.first.begin(), entry.first.end(),\
    \ ::isupper)) {\n            is_upper = true;\n        } else if (std::all_of(entry.first.begin(),\
    \ entry.first.end(), ::islower)) {\n            is_lower = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return is_upper || is_lower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr7ytxwf1: /tmp/tmpr7ytxwf1.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    int flag = 0;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(flag == 0 && it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            flag = 1;\n        } else if(flag\
    \ == 0 && it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            flag = 2;\n\
    \        } else if(flag == 1 && it->first[0] >= 'A' && it->first[0] <= 'Z') {\n\
    \            return false;\n        } else if(flag == 2 && it->first[0] >= 'a'\
    \ && it->first[0] <= 'z') {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgc6h3etg: /tmp/tmpgc6h3etg.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // write your code here\n    auto itr = dict.begin();\n    bool\
    \ val = true;\n    int len = dict.size();\n    std::string temp;\n    if(itr ==\
    \ dict.end()){\n      return false;\n    }\n    if(len == 1){\n      return true;\n\
    \    }\n    while(itr != dict.end()){\n      temp = itr->first;\n      //std::cout<<temp<<std::endl;\n\
    \      for(int i = 0; i < temp.length(); i++){\n        if(temp[i] >= 'A' && temp[i]\
    \ <= 'Z'){\n          val = false;\n          break;\n        }\n      }\n   \
    \   itr++;\n    }\n    //std::cout<<val<<std::endl;\n    if(val == false){\n \
    \     val = true;\n      itr = dict.begin();\n      while(itr != dict.end()){\n\
    \        temp = itr->first;\n        //std::cout<<temp<<std::endl;\n        for(int\
    \ i = 0; i < temp.length(); i++){\n          if(temp[i] >= 'a' && temp[i] <= 'z'){\n\
    \            val = false;\n            break;\n          }\n        }\n      \
    \  itr++;\n      }\n    }\n    return val;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprjnlfubb: /tmp/tmprjnlfubb.cpp:62: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  int count = 0;\n  std::map<std::string,std::string>::iterator\
    \ it;\n  for (it = dict.begin(); it != dict.end(); it++) {\n    if (it->first\
    \ == \"a\") {\n      count++;\n    }\n  }\n  std::cout << count << std::endl;\n\
    \  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpt57d5ysj: /tmp/tmpt57d5ysj.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: '0

    0

    '
  timestamp: 1660130883
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::set<std::string> set_keys;\n  for (auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n    if(it->first == it->first.upper()) {\n      set_keys.insert(it->first);\n\
    \    }\n  }\n  return set_keys.size() == dict.size() || set_keys.size() == 0;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwei4p92y.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwei4p92y.cpp:20:31: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018upper\u2019\n   20 |     if(it->first == it->first.upper()) {\n      |\
    \                               ^~~~~\n"
  stdout: ''
  timestamp: 1660130883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool lower = false;\n \
    \   bool upper = false;\n    for(auto i = dict.begin(); i != dict.end(); i++)\
    \ {\n        if(islower(i->first[0])) {\n            lower = true;\n        }\
    \ else if(isupper(i->first[0])) {\n            upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return (lower && !upper) ||\
    \ (!lower && upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqap_tsp2: /tmp/tmpqap_tsp2.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your Code\n    return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjrjegp81: /tmp/tmpjrjegp81.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint numUpper = 0;\n\tint numLower = 0;\n\tfor (auto const& [key,\
    \ val] : dict) {\n\t\tif (islower(key[0])) {\n\t\t\tnumLower++;\n\t\t}\n\t\telse\
    \ if (isupper(key[0])) {\n\t\t\tnumUpper++;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif (numUpper == 0 && numLower == 0) {\n\t\treturn false;\n\t}\n\t\
    else if (numUpper == 0 || numLower == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \treturn false;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0uqhdmr3: /tmp/tmp0uqhdmr3.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    std::string str = dict.begin()->first;\n\
    \    bool isUpper = false;\n    bool isLower = false;\n    for(auto& i : str)\
    \ {\n        if(i <= 'Z' && i >= 'A') {\n            isUpper = true;\n       \
    \ }\n        if(i <= 'z' && i >= 'a') {\n            isLower = true;\n       \
    \ }\n    }\n    if(isUpper && isLower) return false;\n    if(isUpper) {\n    \
    \    for(auto& i : dict) {\n            for(auto& j : i.first) {\n           \
    \     if(j <= 'z' && j >= 'a') {\n                    return false;\n        \
    \        }\n            }\n        }\n    }\n    if(isLower) {\n        for(auto&\
    \ i : dict) {\n            for(auto& j : i.first) {\n                if(j <= 'Z'\
    \ && j >= 'A') {\n                    return false;\n                }\n     \
    \       }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmptsha5o_j: /tmp/tmptsha5o_j.cpp:55: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n// add your code here\n    \n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8hoa9zt9: /tmp/tmp8hoa9zt9.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // YOUR CODE HERE\n    if(dict.size() == 0)\n        return false;\n\
    \    bool lower=true, upper=true;\n    for(std::map<std::string,std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); ++it){\n        if(!std::isupper(it->first[0]))\n\
    \            upper = false;\n        if(!std::islower(it->first[0]))\n       \
    \     lower = false;\n    }\n    return (lower || upper);\n}\nint main() {\n \
    \   auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmptsgp9337: /tmp/tmptsgp9337.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // your code here\n    std::map<std::string,std::string>::iterator\
    \ it;\n    std::map<std::string,std::string>::iterator it1;\n    if(dict.empty())\n\
    \    {\n        return false;\n    }\n    bool lower=true;\n    bool upper=true;\n\
    \    for(it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \        {\n            lower=true;\n        }\n        else if(isupper(it->first[0]))\n\
    \        {\n            upper=true;\n        }\n        else\n        {\n    \
    \        return false;\n        }\n    }\n    if(lower==upper)\n    {\n      \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyvqotdg9: /tmp/tmpyvqotdg9.cpp:50: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n    {\n        return false;\n    }\n    bool\
    \ upper,lower;\n    upper=lower=false;\n    for(auto i:dict)\n    {\n        if(i.first==\"\
    \")\n        {\n            return false;\n        }\n        bool temp = true;\n\
    \        for(auto j:i.first)\n        {\n            if(isupper(j))\n        \
    \    {\n                upper=true;\n            }\n            else if(islower(j))\n\
    \            {\n                lower=true;\n            }\n            else\n\
    \            {\n                temp=false;\n                break;\n        \
    \    }\n        }\n        if(!temp)\n        {\n            return false;\n \
    \       }\n    }\n    if(upper && lower)\n    {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\tstd::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n\tchar ch = it->first[0];\n\tbool is_upper = (ch <= 'Z'\
    \ && ch >= 'A');\n\twhile(it != dict.end()) {\n\t\tif(it->first[0] <= 'Z' && it->first[0]\
    \ >= 'A') {\n\t\t\tif(!is_upper)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(it->first[0]\
    \ <= 'z' && it->first[0] >= 'a') {\n\t\t\tif(is_upper)\n\t\t\t\treturn false;\n\
    \t\t}\n\t\telse\n\t\t\treturn false;\n\t\tit++;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp01hsb9wx: /tmp/tmp01hsb9wx.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size()==0) return false;\n\tif(dict.begin()->first[0] >=\
    \ 'a' && dict.begin()->first[0] <= 'z') {\n\t\tfor(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif(it->first[0] >= 'A' &&\
    \ it->first[0] <= 'Z') return false;\n\t\t}\n\t}\n\telse if(dict.begin()->first[0]\
    \ >= 'A' && dict.begin()->first[0] <= 'Z') {\n\t\tfor(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif(it->first[0] >= 'a' &&\
    \ it->first[0] <= 'z') return false;\n\t\t}\n\t}\n\telse return false;\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpi12dmm8c: /tmp/tmpi12dmm8c.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint count = 0;\n\tbool upper = false;\n\tbool lower = false;\n\t\
    for (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tstd::string key = i->first;\n\
    \t\tfor (auto j = key.begin(); j != key.end(); j++) {\n\t\t\tif (std::isupper(*j))\
    \ {\n\t\t\t\tupper = true;\n\t\t\t}\n\t\t\telse if (std::islower(*j)) {\n\t\t\t\
    \tlower = true;\n\t\t\t}\n\t\t}\n\t\tif (upper && lower) {\n\t\t\treturn false;\n\
    \t\t}\n\t\tcount++;\n\t}\n\tif (count > 0) {\n\t\treturn true;\n\t}\n\telse {\n\
    \t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpijllwtpg: /tmp/tmpijllwtpg.cpp:47: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (const auto& x : dict) {\n        for (int i = 0; i < x.first.size();\
    \ i++) {\n            if (isupper(x.first[i])) {\n                for (int j =\
    \ 0; j < x.first.size(); j++) {\n                    if (islower(x.first[j]))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n            else if (islower(x.first[i])) {\n       \
    \         for (int j = 0; j < x.first.size(); j++) {\n                    if (isupper(x.first[j]))\
    \ {\n                        return false;\n                    }\n          \
    \      }\n            }\n            else {\n                return false;\n \
    \           }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ty461lc: /tmp/tmp_ty461lc.cpp:44: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool isUpper = false;\n    bool isLower = false;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        for (int i = 0; i < (*it).first.length();\
    \ i++) {\n            if (isupper((*it).first[i])) {\n                isUpper\
    \ = true;\n            } else {\n                isLower = true;\n           \
    \ }\n        }\n    }\n    return (isUpper && !isLower) || (!isUpper && isLower);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpls9j690c: /tmp/tmpls9j690c.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool allUpper = true;\n    bool allLower = true;\n    for (auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (allUpper && !std::isupper(it->first[0]))\
    \ {\n            allUpper = false;\n        }\n        if (allLower && !std::islower(it->first[0]))\
    \ {\n            allLower = false;\n        }\n    }\n    return allUpper || allLower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsu04il9w: /tmp/tmpsu04il9w.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    bool allUpperCase\
    \ = true;\n    bool allLowerCase = true;\n    for(auto x:dict){\n        // std::cout<<x.first<<\"\
    \ \"<<x.second<<std::endl;\n        std::string key = x.first;\n        for(int\
    \ i=0;i<key.length();i++){\n            if(isupper(key[i]))\n                allLowerCase\
    \ = false;\n            else if(islower(key[i]))\n                allUpperCase\
    \ = false;\n            else\n                return false;\n        }\n    }\n\
    \    if(allLowerCase || allUpperCase)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    //check if the map is empty first\n    if(dict.empty()){\n    \
    \    return false;\n    }\n    //Set the first element's key to a variable\n \
    \   auto itr = dict.begin();\n    std::string str = itr->first;\n    //If the\
    \ first letter is uppercase, the rest must be\n    if(isupper(str[0])){\n    \
    \    for(auto itr = dict.begin(); itr != dict.end(); itr++){\n            str\
    \ = itr->first;\n            for(int i = 0; i < str.length(); i++){\n        \
    \        if(islower(str[i])){\n                    return false;\n           \
    \     }\n            }\n        }\n    }\n    //If the first letter is lowercase,\
    \ the rest must be\n    else{\n        for(auto itr = dict.begin(); itr != dict.end();\
    \ itr++){\n            str = itr->first;\n            for(int i = 0; i < str.length();\
    \ i++){\n                if(isupper(str[i])){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqh1gtub5: /tmp/tmpqh1gtub5.cpp:53: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::string s=\"\";\n  for(std::map<std::string,std::string>::iterator\
    \ it=dict.begin();it!=dict.end();it++){\n    s+=(it->first);\n  }\n  for(int i=0;i<s.length();i++){\n\
    \    if(islower(s[i]))\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfssvklae: /tmp/tmpfssvklae.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    int upper = 0;\n    int\
    \ lower = 0;\n    for(auto i: dict) {\n        if(i.first[0] >= 'A' && i.first[0]\
    \ <= 'Z') upper += 1;\n        else lower += 1;\n    }\n    if(upper == 0 || lower\
    \ == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_9o2nyh_: /tmp/tmp_9o2nyh_.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  int upper = 0;\n  int lower = 0;\n  std::map<std::string,std::string>::iterator\
    \ itr;\n  for(itr = dict.begin(); itr != dict.end(); itr++) {\n    std::string\
    \ key = itr->first;\n    if(isupper(key[0])) {\n      upper += 1;\n    } else\
    \ {\n      lower += 1;\n    }\n  }\n  if(upper == 0 || lower == 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp21n2bvxz: /tmp/tmp21n2bvxz.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upperCase = false;\n    bool lowerCase = false;\n    bool\
    \ keyCase = false;\n    bool valueCase = false;\n    bool isSame = false;\n  \
    \  bool isAllSame = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        // check if the first letter of key is capital or not\n   \
    \     isSame = std::isupper(it->first[0]);\n        // checking the first element\
    \ if the next element\n        // case is same as the first element, if not, break\
    \ the loop\n        if (it != dict.begin()) {\n            if (isSame != keyCase)\
    \ {\n                break;\n            }\n        }\n        if (it == dict.begin())\
    \ {\n            keyCase = isSame;\n        }\n        // check if the first letter\
    \ of value is capital or not\n        isSame = std::isupper(it->second[0]);\n\
    \        // checking the first element if the next element\n        // case is\
    \ same as the first element, if not, break the loop\n        if (it != dict.begin())\
    \ {\n            if (isSame != valueCase) {\n                break;\n        \
    \    }\n        }\n        if (it == dict.begin()) {\n            valueCase =\
    \ isSame;\n        }\n    }\n    if (keyCase == valueCase) {\n        isAllSame\
    \ = true;\n    }\n    if (keyCase) {\n        upperCase = true;\n    } else {\n\
    \        lowerCase = true;\n    }\n    return (upperCase && isAllSame) || (lowerCase\
    \ && isAllSame);\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"},\
    \ {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbhn7s5xv: /tmp/tmpbhn7s5xv.cpp:64: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (!islower(it->first[0]) && !isupper(it->first[0])) {\n            return\
    \ false;\n        }\n    }\n    if (isupper(dict.begin()->first[0])) {\n     \
    \   for (auto it = dict.begin(); it != dict.end(); it++) {\n            if (!isupper(it->first[0]))\
    \ {\n                return false;\n            }\n        }\n    } else {\n \
    \       for (auto it = dict.begin(); it != dict.end(); it++) {\n            if\
    \ (!islower(it->first[0])) {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvf57kect: /tmp/tmpvf57kect.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0) {\n\t\treturn false;\n\t}\n\tbool check = false;\n\
    \tbool check1 = false;\n\tstd::map<std::string,std::string>::iterator it;\n\t\
    for(it = dict.begin(); it != dict.end(); it++) {\n\t\tstd::string s = it->first;\n\
    \t\tif(s[0] >= 'a' && s[0] <= 'z') {\n\t\t\tcheck = true;\n\t\t}\n\t\telse if(s[0]\
    \ >= 'A' && s[0] <= 'Z') {\n\t\t\tcheck1 = true;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif(check && check1) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdhrqczst: /tmp/tmpdhrqczst.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use\n    // cout << \"Hello world!\";\n    bool upper = false;\n\
    \    bool lower = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0])) {\n            upper = true;\n        }\n\
    \        else {\n            lower = true;\n        }\n    }\n    return upper\
    \ ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0qnxux2p: /tmp/tmp0qnxux2p.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ itr;\n    bool upper = true;\n    bool lower = true;\n    for(itr = dict.begin();\
    \ itr != dict.end(); itr++) {\n        std::string key = itr->first;\n       \
    \ if(key.length() == 0)\n            return false;\n        if(!isupper(key[0]))\n\
    \            upper = false;\n        if(!islower(key[0]))\n            lower =\
    \ false;\n    }\n    return upper || lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1f86h8ae: /tmp/tmp1f86h8ae.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) {\n    return false;\n  }\n  // Return true\
    \ if all keys are strings in lower case\n  if (dict.begin()->first == \"NAME\"\
    ) {\n    // If the first key is upper case, then all the keys will be upper case\n\
    \    return true;\n  }\n  // Return true if all keys are strings in upper case\n\
    \  if (dict.begin()->first == \"name\") {\n    // If the first key is lower case,\
    \ then all the keys will be lower case\n    return true;\n  }\n  // Else return\
    \ false\n  return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr729_8_t: /tmp/tmpr729_8_t.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool b1 = false;\n    bool b2 = false;\n    std::transform(dict.begin(),\
    \ dict.end(), dict.begin(), [](std::pair<std::string, std::string> p) -> std::pair<std::string,\
    \ std::string> { \n        return {std::tolower(p.first), p.second}; \n    });\n\
    \    std::vector<std::string> keys_lower(dict.size());\n    std::transform(dict.begin(),\
    \ dict.end(), keys_lower.begin(), [](std::pair<std::string, std::string> p) ->\
    \ std::string { \n        return p.first; \n    });\n    if(keys_lower.size()\
    \ > 0) {\n        std::sort(keys_lower.begin(), keys_lower.end());\n        if\
    \ (std::adjacent_find(keys_lower.begin(), keys_lower.end()) == keys_lower.end())\
    \ {\n            b1 = true;\n        }\n    }\n    std::transform(dict.begin(),\
    \ dict.end(), dict.begin(), [](std::pair<std::string, std::string> p) -> std::pair<std::string,\
    \ std::string> { \n        return {std::toupper(p.first), p.second}; \n    });\n\
    \    std::vector<std::string> keys_upper(dict.size());\n    std::transform(dict.begin(),\
    \ dict.end(), keys_upper.begin(), [](std::pair<std::string, std::string> p) ->\
    \ std::string { \n        return p.first; \n    });\n    if(keys_upper.size()\
    \ > 0) {\n        std::sort(keys_upper.begin(), keys_upper.end());\n        if\
    \ (std::adjacent_find(keys_upper.begin(), keys_upper.end()) == keys_upper.end())\
    \ {\n            b2 = true;\n        }\n    }\n    return b1 || b2;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpysd6dhaw.cpp: In lambda function:\n/tmp/tmpysd6dhaw.cpp:21:37:\
    \ error: no matching function for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\
    \n   21 |         return {std::tolower(p.first), p.second};\n      |         \
    \                            ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpysd6dhaw.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpysd6dhaw.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpysd6dhaw.cpp:21:37: note:   candidate expects 2 arguments,\
    \ 1 provided\n   21 |         return {std::tolower(p.first), p.second};\n    \
    \  |                                     ^\n/tmp/tmpysd6dhaw.cpp:21:48: error:\
    \ could not convert \u2018{<expression error>, p.std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::second}\u2019 from \u2018<brace-enclosed\
    \ initializer list>\u2019 to \u2018std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019\n   21 |"
  stdout: ''
  timestamp: 1660130884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here\n    if(dict.size() == 0)\n        return false;\n\
    \    bool flag = true;\n    for(auto &i : dict)\n    {\n        if(islower(i.first[0]))\n\
    \        {\n            for(auto &j : i.first)\n            {\n              \
    \  if(isupper(j))\n                {\n                    flag = false;\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ else if(isupper(i.first[0]))\n        {\n            for(auto &j : i.first)\n\
    \            {\n                if(islower(j))\n                {\n          \
    \          flag = false;\n                    break;\n                }\n    \
    \        }\n        }\n        else\n        {\n            flag = false;\n  \
    \          break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpywl14nqt: /tmp/tmpywl14nqt.cpp:57: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool mixed = false;\n \
    \   bool upper = false;\n    for(auto &p : dict) {\n        std::string key =\
    \ p.first;\n        std::string value = p.second;\n        if(mixed) return false;\n\
    \        if(key[0] <= 'Z' && key[0] >= 'A') {\n            if(!upper) {\n    \
    \            mixed = true;\n                upper = true;\n            }\n   \
    \     } else {\n            if(upper) {\n                mixed = true;\n     \
    \           upper = false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpnkck2oy9: /tmp/tmpnkck2oy9.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool up = true;\n    bool lo = true;\n    if (dict.size() == 0)\
    \ return false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        std::string k = it->first;\n        if (std::all_of(k.begin(), k.end(),\
    \ ::isupper)) {\n            lo = false;\n        } else if (std::all_of(k.begin(),\
    \ k.end(), ::islower)) {\n            up = false;\n        } else {\n        \
    \    return false;\n        }\n    }\n    return up or lo;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int count1 = 0;\n    int count2 = 0;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first == it->first) {\n          \
    \  count1++;\n        }\n        for(auto it1 = dict.begin(); it1 != dict.end();\
    \ it1++) {\n            if(it1->first == it1->first) {\n                count2++;\n\
    \            }\n        }\n    }\n    if(count1 == count2) {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgy1z3va8: /tmp/tmpgy1z3va8.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\t//bool isLover = false;\n\
    \t//bool isUpper = false;\n\tfor(auto itr = dict.begin(); itr != dict.end(); itr++)\
    \ {\n\t\tif(!isupper(itr->first[0]))\n\t\t\treturn false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsz5p_oq0: /tmp/tmpsz5p_oq0.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Write your code here\n    if(dict.size() == 0) return false;\n\
    \    bool upper = isupper(dict.begin()->first[0]);\n    for(auto& p : dict) {\n\
    \        if(upper) {\n            if(!isupper(p.first[0])) return false;\n   \
    \     } else {\n            if(!islower(p.first[0])) return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdd1dll_q: /tmp/tmpdd1dll_q.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool check = false;\n    std::vector<std::string> list;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        list.push_back(it->first);\n\
    \    }\n    int len = list.size();\n    if(len == 0)\n        return false;\n\
    \    int c_upper = 0, c_lower = 0;\n    for(int i = 0; i < len; i++) {\n     \
    \   std::string word = list[i];\n        if(isupper(word[0]))\n            c_upper++;\n\
    \        else if(islower(word[0]))\n            c_lower++;\n    }\n    if(c_upper\
    \ == len || c_lower == len)\n        check = true;\n    return check;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpf122nc_x: /tmp/tmpf122nc_x.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130885
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Check if the map is empty\n    if (dict.empty()) {\n       \
    \ return false;\n    }\n    bool foundLower = false;\n    bool foundUpper = false;\n\
    \    // Iterate over keys to check if they are lowercase or not\n    for (std::map<std::string,std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); ++it) {\n        if (std::isupper(it->first[0]))\
    \ {\n            foundUpper = true;\n        } else {\n            foundLower\
    \ = true;\n        }\n    }\n    // Only return true if only one case type is\
    \ found, else false\n    if (foundLower && !foundUpper) {\n        return true;\n\
    \    } else if (foundUpper && !foundLower) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpinwia8pa: /tmp/tmpinwia8pa.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\tstd::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n\tchar a = tolower(it->first[0]);\n\tfor(; it != dict.end();\
    \ it++) {\n\t\tif(islower(it->first[0]) != islower(a))\n\t\t\treturn false;\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp94vchaq: /tmp/tmpp94vchaq.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"STATE",
    "NC"}, {"ZIP", "12345"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  \n  std::map<std::string,std::string>::iterator itr;\n  // Write\
    \ your code here\n  int all_lower = 0;\n  int all_upper = 0;\n  for(itr = dict.begin();\
    \ itr != dict.end(); itr++)\n  {\n    if(itr->first[0] == tolower(itr->first[0]))\n\
    \      all_lower++;\n    else if(itr->first[0] == toupper(itr->first[0]))\n  \
    \    all_upper++;\n    else\n      return false;\n  }\n  if(all_lower == dict.size()\
    \ || all_upper == dict.size())\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp5l6awm3: /tmp/tmpp5l6awm3.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\t// (1) Check if dict is empty, if so, return false\n\tif (dict.empty())\
    \ {\n\t\treturn false;\n\t}\n\n\t// (2) Get the first key and check the case of\
    \ that key.\n\t// If it is lowercase, then set isUpper to false. Else, set it\
    \ to true.\n\tbool isUpper = false;\n\tstd::string first_key = dict.begin()->first;\n\
    \tchar first_key_c = first_key[0];\n\tif (isupper(first_key_c)) {\n\t\tisUpper\
    \ = true;\n\t}\n\n\t// (3) Iterate through all keys and compare to isUpper.\n\t\
    // If any are not the same, return false.\n\tfor (auto const& pair : dict) {\n\
    \t\tstd::string key = pair.first;\n\t\tchar key_c = key[0];\n\t\tif (isUpper)\
    \ {\n\t\t\tif (!isupper(key_c)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tif (!islower(key_c)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
    \n\t// (4) If we've reached this point, then return true because all keys are\
    \ either lowercase or uppercase.\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwpjv5fgr: /tmp/tmpwpjv5fgr.cpp:56: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  for (auto kv : dict) {\n \
    \   for (auto c : kv.first) {\n      if (std::isupper(c)) {\n        if (dict.size()\
    \ == 1) return true;\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjpuy62t6: /tmp/tmpjpuy62t6.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool areAllLower = true;\n\
    \    bool areAllUpper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\
    \ areAllLower = false;\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::isupper)) areAllUpper = false;\n    }\n    return areAllLower || areAllUpper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool all_lower = true;\n    bool all_upper = true;\n    for (auto\
    \ const& kv : dict) {\n        for (auto c : kv.first) {\n            if (!isupper(c))\
    \ {\n                all_upper = false;\n            }\n            if (!islower(c))\
    \ {\n                all_lower = false;\n            }\n        }\n    }\n   \
    \ return (all_lower || all_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx4ojl7j1: /tmp/tmpx4ojl7j1.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>()))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // TODO: Implement the function here\n\n    std::string temp;\n\
    \    for(auto i:dict){\n        for(auto j:i.first){\n            if(!islower(j)){\n\
    \                temp = \"Up\";\n                break;\n            }\n     \
    \       else{\n                temp = \"Lo\";\n            }\n        }\n    }\n\
    \    if(temp == \"Up\"){\n        for(auto i:dict){\n            for(auto j:i.first){\n\
    \                if(!isupper(j)){\n                    return false;\n       \
    \         }\n            }\n        }\n    }\n    else if(temp == \"Lo\"){\n \
    \       for(auto i:dict){\n            for(auto j:i.first){\n                if(!islower(j)){\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    else{\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // check if all keys are strings in lower case\n    bool all_lower\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if (!std::all_of(it->first.begin(), it->first.end(), ::islower)) {\n      \
    \      all_lower = false;\n            break;\n        }\n    }\n    if (all_lower)\
    \ {\n        return true;\n    }\n    // check if all keys are strings in upper\
    \ case\n    bool all_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (!std::all_of(it->first.begin(), it->first.end(), ::isupper))\
    \ {\n            all_upper = false;\n            break;\n        }\n    }\n  \
    \  if (all_upper) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppr7zs16n: /tmp/tmppr7zs16n.cpp:50: int main(): Assertion `candidate((std::map<std::string,std::string>()))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)return false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0])){\n            for(int i=1;i<it->first.size();i++){\n\
    \                if(!islower(it->first[i]))return false;\n            }\n    \
    \    }\n        else if(isupper(it->first[0])){\n            for(int i=1;i<it->first.size();i++){\n\
    \                if(!isupper(it->first[i]))return false;\n            }\n    \
    \    }\n        else{\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6_kgelcw: /tmp/tmp6_kgelcw.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::set<char> lower_case;\n    std::set<char> upper_case;\n  \
    \  for (char c = 'a'; c <= 'z'; c++)\n        lower_case.insert(c);\n    for (char\
    \ c = 'A'; c <= 'Z'; c++)\n        upper_case.insert(c);\n    int lower_key_counter\
    \ = 0;\n    int upper_key_counter = 0;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        bool flag = false;\n \
    \       for (int i = 0; i < it->first.length(); i++) {\n            if (lower_case.find(it->first[i])\
    \ != lower_case.end()) {\n                lower_key_counter++;\n             \
    \   flag = true;\n                break;\n            }\n            else if (upper_case.find(it->first[i])\
    \ != upper_case.end()) {\n                upper_key_counter++;\n             \
    \   flag = true;\n                break;\n            }\n        }\n        if\
    \ (!flag)\n            return false;\n    }\n    if (lower_key_counter == dict.size()\
    \ || upper_key_counter == dict.size())\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgcit2bau: /tmp/tmpgcit2bau.cpp:52: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130887
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    //your code here\n    if(dict.size() == 0)\n        return false;\n\
    \    bool flag1 = true, flag2 = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++)\n    {\n        std::string key = it->first;\n        for(int i = 0; i\
    \ < key.length(); i++)\n        {\n            if(key[i] < 'a' || key[i] > 'z')\n\
    \                flag1 = false;\n        }\n        for(int i = 0; i < key.length();\
    \ i++)\n        {\n            if(key[i] < 'A' || key[i] > 'Z')\n            \
    \    flag2 = false;\n        }\n    }\n    if(flag1)\n        return true;\n \
    \   if(flag2)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) {\n    return false;\n  }\n  bool up_case =\
    \ true;\n  bool low_case = true;\n  for (std::map<std::string,std::string>::iterator\
    \ i = dict.begin();\n       i != dict.end(); i++) {\n    std::string key = i->first;\n\
    \    if (isupper(key[0])) {\n      low_case = false;\n    } else {\n      up_case\
    \ = false;\n    }\n  }\n  return up_case || low_case;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp18bvq2w2: /tmp/tmp18bvq2w2.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    auto it=dict.begin();\n    if(it==dict.end())\n        return false;\n\
    \    bool alllower=false;\n    bool allupper=false;\n    bool allnum=false;\n\
    \    bool nonenum=false;\n    bool nonenumall=false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            alllower=true;\n        if(isupper(it->first[0]))\n\
    \            allupper=true;\n        if(isdigit(it->first[0]))\n            allnum=true;\n\
    \        if(isalpha(it->first[0]))\n            nonenum=true;\n        else\n\
    \            nonenumall=true;\n    }\n    if(alllower&&nonenumall)\n        return\
    \ true;\n    if(allupper&&nonenumall)\n        return true;\n    if(allnum&&nonenumall)\n\
    \        return true;\n    if(nonenum)\n        return false;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpaubccnw1: /tmp/tmpaubccnw1.cpp:50: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size()==0) {\n    return false;\n  }\n  auto it = dict.begin();\n\
    \  bool all_lower = true;\n  bool all_upper = true;\n  while (it != dict.end())\
    \ {\n    if (it->first[0] < 97 || it->first[0] > 122) {\n      all_lower = false;\n\
    \    }\n    if (it->first[0] < 65 || it->first[0] > 90) {\n      all_upper = false;\n\
    \    }\n    it++;\n  }\n  return all_lower || all_upper;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2tcnlxzu: /tmp/tmp2tcnlxzu.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    std::string a=dict.begin()->first;\n\
    \    int flag=0;\n    if(a[0]>='a' && a[0]<='z')\n        flag=1;\n    if(a[0]>='A'\
    \ && a[0]<='Z')\n        flag=2;\n    for(auto it:dict){\n        if(flag==1){\n\
    \            if(it.first[0]>='A' && it.first[0]<='Z')\n                return\
    \ false;\n        }\n        else if(flag==2){\n            if(it.first[0]>='a'\
    \ && it.first[0]<='z')\n                return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0iwwd5bp: /tmp/tmp0iwwd5bp.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here!\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqi3a330s: /tmp/tmpqi3a330s.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130887
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Write your code here\n  for(auto key : dict) {\n    if(key.first\
    \ != key.first.lowercase() && key.first != key.first.uppercase()) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp07229p7.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpp07229p7.cpp:20:31: error:\
    \ \u2018const class std::__cxx11::basic_string<char>\u2019 has no member named\
    \ \u2018lowercase\u2019\n   20 |     if(key.first != key.first.lowercase() &&\
    \ key.first != key.first.uppercase()) {\n      |                             \
    \  ^~~~~~~~~\n/tmp/tmpp07229p7.cpp:20:69: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018uppercase\u2019\n   20 |     if(key.first != key.first.lowercase()\
    \ && key.first != key.first.uppercase()) {\n      |                          \
    \                                           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660130886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto i = dict.begin(); i != dict.end();\
    \ i++) {\n        if(!all_lower)\n            break;\n        for(int j = 0; j\
    \ < i->first.size(); j++) {\n            if(!isupper(i->first[j])) {\n       \
    \         all_lower = false;\n                break;\n            }\n        }\n\
    \    }\n    for(auto i = dict.begin(); i != dict.end(); i++) {\n        if(!all_upper)\n\
    \            break;\n        for(int j = 0; j < i->first.size(); j++) {\n    \
    \        if(!islower(i->first[j])) {\n                all_upper = false;\n   \
    \             break;\n            }\n        }\n    }\n    return all_lower ||\
    \ all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // edge case of empty dictionary\n    if (dict.empty()) return\
    \ false;\n    // check if all keys are strings in lower case\n    bool isLower\
    \ = true;\n    for (auto it = dict.begin(); it != dict.end(); ++it) {\n      \
    \  if (it->first != std::to_string(it->first[0])) {\n            isLower = false;\n\
    \            break;\n        }\n    }\n    // check if all keys are strings in\
    \ upper case\n    bool isUpper = true;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); ++it) {\n        if (it->first != std::to_string(it->first[0]))\
    \ {\n            isUpper = false;\n            break;\n        }\n    }\n    //\
    \ return true if all keys are lowercase or uppercase\n    return isLower || isUpper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6vbfmzfg: /tmp/tmp6vbfmzfg.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0) return false;\n    std::transform(dict.begin(),\
    \ dict.end(), dict.begin(), [] (std::pair<std::string, std::string> in) -> std::pair<std::string,\
    \ std::string> {\n        return std::make_pair(std::move(in.first), std::move(in.second));\n\
    \    });\n    auto first_key = dict.begin()->first;\n    bool upper = true;\n\
    \    for(char c : first_key) {\n        if(c >= 'a' && c <= 'z') {\n         \
    \   upper = false;\n            break;\n        }\n    }\n    for(auto &pair :\
    \ dict) {\n        for(char c : pair.first) {\n            if(upper) {\n     \
    \           if(c >= 'a' && c <= 'z') {\n                    return false;\n  \
    \              }\n            } else {\n                if(c >= 'A' && c <= 'Z')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp2k0hds3t.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > >; _OIter = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _UnaryOperation\
    \ = check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)::<lambda(std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >)>]\u2019:\n/tmp/tmp2k0hds3t.cpp:21:6:   required from here\n/usr/include/c++/9/bits/stl_algo.h:4343:12:\
    \ error: use of deleted function \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >& std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >::operator=(const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n 4343 |  *__result = __unary_op(*__first);\n\
    \      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp2k0hds3t.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >& std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >::operator=(const std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >&)\u2019 is implicitly declared as deleted because \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >\u2019 declares a move constructor or move\
    \ assignm"
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6zo1qsod: /tmp/tmp6zo1qsod.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool upper = true;\n    bool lower = true;\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        upper = true;\n      \
    \  lower = true;\n        for (int i = 0; i < it->first.length(); i++) {\n   \
    \         if (isupper(it->first[i])) {\n                lower = false;\n     \
    \       }\n            if (islower(it->first[i])) {\n                upper = false;\n\
    \            }\n        }\n        if (upper == false && lower == false) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpo23zu562: /tmp/tmpo23zu562.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // Your code here\n  std::set<std::string> keys;\n  for(auto it =\
    \ dict.begin(); it != dict.end(); it++)\n    keys.insert(it->first);\n  for(auto\
    \ it = keys.begin(); it != keys.end(); it++)\n    if((*it)[0] < 'a' || (*it)[0]\
    \ > 'z')\n      return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8v3ia0eg: /tmp/tmp8v3ia0eg.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{"STATE",
    "NC"}, {"ZIP", "12345"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    std::vector<bool> vec;\n\
    \    for(auto x: dict) {\n        vec.push_back(islower(x.first[0]));\n    }\n\
    \    if(vec[0] == vec[1]) return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1srps5_a: /tmp/tmp1srps5_a.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // your code goes here\n  bool lower=false,upper=false;\n  if(dict.size()==0)\
    \ return false;\n  for(auto it=dict.begin();it!=dict.end();it++){\n    if(it->first[0]>='a'&&it->first[0]<='z')\
    \ lower=true;\n    else if(it->first[0]>='A'&&it->first[0]<='Z') upper=true;\n\
    \    else return false;\n  }\n  if(lower^upper) return true;\n  return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1_9lnzlp: /tmp/tmp1_9lnzlp.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  // YOUR CODE HERE\n  int count1 = 0;\n  int count2 = 0;\n  int count3\
    \ = 0;\n  int count4 = 0;\n  int count5 = 0;\n  std::vector<char> v;\n  for(auto\
    \ const& x : dict) {\n    v.push_back(x.first[0]);\n  }\n  for(int i = 0; i <\
    \ v.size(); i++) {\n    if(v[i] >= 'a' && v[i] <= 'z') {\n      count1++;\n  \
    \  }\n    else if(v[i] >= 'A' && v[i] <= 'Z') {\n      count2++;\n    }\n    else\
    \ if(v[i] >= '0' && v[i] <= '9') {\n      count3++;\n    }\n    else if(v[i] ==\
    \ ' ') {\n      count4++;\n    }\n    else {\n      count5++;\n    }\n  }\n  if(count1\
    \ == v.size() || count2 == v.size()) {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdbn5u_ca: /tmp/tmpdbn5u_ca.cpp:57: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int count = 0;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    if(dict.empty())\n        return false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first == toupper(it->first)) {\n \
    \           count++;\n        }\n    }\n    if(count == dict.size())\n       \
    \ return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu6z2j87p.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpu6z2j87p.cpp:23:42: error:\
    \ no matching function for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\
    \n   23 |         if(it->first == toupper(it->first)) {\n      |             \
    \                             ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpu6z2j87p.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpu6z2j87p.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpu6z2j87p.cpp:23:42: note:   candidate expects 2 arguments,\
    \ 1 provided\n   23 |         if(it->first == toupper(it->first)) {\n      | \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660130887
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tbool flag=0;\n\tstd::map<std::string,std::string>::iterator itr;\n\
    \titr=dict.begin();\n\twhile(itr!=dict.end())\n\t{\n\t\tstring str=itr->first;\n\
    \t\tfor(int i=0;i<str.length();i++)\n\t\t{\n\t\t\tif(!islower(str[i]))\n\t\t\t\
    {\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titr++;\n\t}\n\tif(flag==1)\n\
    \t{\n\t\tflag=0;\n\t\titr=dict.begin();\n\t\twhile(itr!=dict.end())\n\t\t{\n\t\
    \t\tstring str=itr->first;\n\t\t\tfor(int i=0;i<str.length();i++)\n\t\t\t{\n\t\
    \t\t\tif(!isupper(str[i]))\n\t\t\t\t{\n\t\t\t\t\tflag=1;\n\t\t\t\t\tbreak;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t\titr++;\n\t\t}\n\t}\n\tif(flag==0)\n\t\treturn true;\n\t\
    else\n\t\treturn false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfuli1xp2.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpfuli1xp2.cpp:23:3: error:\
    \ \u2018string\u2019 was not declared in this scope\n   23 |   string str=itr->first;\n\
    \      |   ^~~~~~\n/tmp/tmpfuli1xp2.cpp:23:3: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfuli1xp2.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfuli1xp2.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpfuli1xp2.cpp:24:17: error: \u2018str\u2019 was not declared in this scope;\
    \ did you mean \u2018itr\u2019?\n   24 |   for(int i=0;i<str.length();i++)\n \
    \     |                 ^~~\n      |                 itr\n/tmp/tmpfuli1xp2.cpp:40:4:\
    \ error: \u2018string\u2019 was not declared in this scope\n   40 |    string\
    \ str=itr->first;\n      |    ^~~~~~\n/tmp/tmpfuli1xp2.cpp:40:4: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/includ"
  stdout: ''
  timestamp: 1660130887
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0) return false;\n    bool allLower=true, allUpper=true;\n\
    \    for(auto i:dict){\n        allLower = allLower & std::islower(i.first[0]);\n\
    \        allUpper = allUpper & std::isupper(i.first[0]);\n    }\n    return allLower\
    \ | allUpper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3juo4iry: /tmp/tmp3juo4iry.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  bool lower = false;\n  bool upper = false;\n  for (auto &pair : dict)\
    \ {\n    auto str = pair.first;\n    lower = true;\n    upper = true;\n    for\
    \ (auto &c : str) {\n      if (c != tolower(c)) lower = false;\n      if (c !=\
    \ toupper(c)) upper = false;\n    }\n    if (!lower && !upper) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8cuu4020: /tmp/tmp8cuu4020.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    bool flag = true;\n\
    \    if(dict.begin()->first[0]>='a' && dict.begin()->first[0]<='z')\n        flag\
    \ = true;\n    else\n        flag = false;\n    std::map<std::string,std::string>::iterator\
    \ itr;\n    for(itr=dict.begin();itr!=dict.end();itr++)\n    {\n        if(flag)\n\
    \        {\n            if(itr->first[0]>='A' && itr->first[0]<='Z')\n       \
    \         return false;\n        }\n        else if(!flag)\n        {\n      \
    \      if(itr->first[0]>='a' && itr->first[0]<='z')\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp_zv3gn_: /tmp/tmpp_zv3gn_.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool all_lower = true;\n    bool all_upper = true;\n    if (dict.size()\
    \ == 0) {\n        return false;\n    }\n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        std::string key = it->first;\n\
    \        if (key[0] != std::toupper(key[0])) {\n            all_upper = false;\n\
    \        }\n        if (key[0] != std::tolower(key[0])) {\n            all_lower\
    \ = false;\n        }\n    }\n    return all_lower || all_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyjcyxp_d: /tmp/tmpyjcyxp_d.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    std::map<std::string,std::string>::iterator it;\n    bool first\
    \ = true;\n    bool lowercase = false;\n    for (it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (first) {\n            first = false;\n            lowercase\
    \ = std::islower(it->first[0]);\n        }\n        if (lowercase != std::islower(it->first[0]))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwt047yyc: /tmp/tmpwt047yyc.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    std::string* values\
    \ = new std::string[dict.size()];\n    std::map<std::string,std::string>::iterator\
    \ it = dict.begin();\n    int i = 0;\n    for(; it != dict.end(); ++it){\n   \
    \     values[i] = it->first;\n        i++;\n    }\n    std::sort(values, values\
    \ + dict.size());\n    std::string first_key = values[0];\n    int first_letter\
    \ = first_key[0];\n    int first_ascii = (int)first_letter;\n    bool result =\
    \ false;\n    if(first_ascii >= 65 && first_ascii <= 90){\n        result = true;\n\
    \        for(int i = 1; i < dict.size(); i++){\n            std::string curr_key\
    \ = values[i];\n            int curr_letter = curr_key[0];\n            int curr_ascii\
    \ = (int)curr_letter;\n            if(curr_ascii >= 97 && curr_ascii <= 122){\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    else if(first_ascii >= 97 && first_ascii <= 122){\n       \
    \ result = true;\n        for(int i = 1; i < dict.size(); i++){\n            std::string\
    \ curr_key = values[i];\n            int curr_letter = curr_key[0];\n        \
    \    int curr_ascii = (int)curr_letter;\n            if(curr_ascii >= 65 && curr_ascii\
    \ <= 90){\n                result = false;\n                break;\n         \
    \   }\n        }\n    }\n    else{\n        result = false;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfomcm1zi: /tmp/tmpfomcm1zi.cpp:66: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  bool is_upper = true;\n  bool is_lower = true;\n  for (auto itr =\
    \ dict.begin(); itr != dict.end(); itr++) {\n    is_upper = is_upper && isupper(itr->first[0]);\n\
    \    is_lower = is_lower && islower(itr->first[0]);\n  }\n  return is_upper ||\
    \ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp48wm3kfx: /tmp/tmp48wm3kfx.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool check_lower = false;\n\
    \    for(auto i: dict)\n    {\n        for(auto j: i.first)\n        {\n     \
    \       if(islower(j))\n            {\n                check_lower = true;\n \
    \               break;\n            }\n        }\n        if(check_lower) break;\n\
    \    }\n    if(check_lower)\n    {\n        for(auto i: dict)\n        {\n   \
    \         for(auto j: i.first)\n            {\n                if(isupper(j))\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n    }\n    else\n    {\n        for(auto i: dict)\n  \
    \      {\n            for(auto j: i.first)\n            {\n                if(islower(j))\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzg_8un5p: /tmp/tmpzg_8un5p.cpp:64: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n   if(dict.size() == 0) {\n      return false;\n   }\n   bool is_lower\
    \ = false;\n   bool is_upper = false;\n   for(std::map<std::string,std::string>::iterator\
    \ it=dict.begin(); it!=dict.end(); it++) {\n      if(isupper(it->first[0])) {\n\
    \         is_upper = true;\n      }\n      else if(islower(it->first[0])) {\n\
    \         is_lower = true;\n      }\n      else {\n         return false;\n  \
    \    }\n   }\n   if(is_lower && is_upper) {\n      return false;\n   }\n   return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8o5oya5o: /tmp/tmp8o5oya5o.cpp:44: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) { return false; }\n  bool all_upper = true;\n\
    \  bool all_lower = true;\n  for (auto & key : dict) {\n    if (islower(key.first[0]))\
    \ {\n      all_upper = false;\n    } else {\n      all_lower = false;\n    }\n\
    \  }\n  return all_upper || all_lower;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmj63ksfv: /tmp/tmpmj63ksfv.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n   // your code here\n   return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbuaxtjue: /tmp/tmpbuaxtjue.cpp:24: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n    {\n        return false;\n    }\n    bool\
    \ lower =true;\n    bool upper =true;\n    std::map<std::string,std::string>::iterator\
    \ iter;\n    for(iter=dict.begin();iter!=dict.end();iter++)\n    {\n        std::string\
    \ key = iter->first;\n        lower =lower && key.empty()?false:islower(key[0]);\n\
    \        upper =upper && key.empty()?false:isupper(key[0]);\n    }\n    return\
    \ lower || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv54czupu: /tmp/tmpv54czupu.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint upperCase = 0;\n\tint lowerCase = 0;\n\tfor (auto &i : dict)\
    \ {\n\t\tif (i.first[0] >= 'A' && i.first[0] <= 'Z')\n\t\t\tupperCase++;\n\t\t\
    else if (i.first[0] >= 'a' && i.first[0] <= 'z')\n\t\t\tlowerCase++;\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\tif (upperCase == 0 || lowerCase == 0)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp62earqsq: /tmp/tmp62earqsq.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    char c = dict.begin()->first[0];\n\
    \    if(c >= 'a' && c <= 'z') {\n        for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n            for(int i = 0; i < it->first.size(); i++) {\n         \
    \       if(it->first[i] < 'a' || it->first[i] > 'z') {\n                    return\
    \ false;\n                }\n            }\n        }\n    }\n    else if(c >=\
    \ 'A' && c <= 'Z') {\n        for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n            for(int i = 0; i < it->first.size(); i++) {\n               \
    \ if(it->first[i] < 'A' || it->first[i] > 'Z') {\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    else return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool is_lower = true;\n    bool is_upper = true;\n    for (auto\
    \ &kv : dict) {\n        for (auto &c : kv.first) {\n            if (isupper(c))\
    \ is_lower = false;\n            if (islower(c)) is_upper = false;\n        }\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjf_c333y: /tmp/tmpjf_c333y.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int count_upper = 0;\n    int count_lower = 0;\n    for (auto &key\
    \ : dict) {\n        if (isupper(key.first[0])) {\n            count_upper++;\n\
    \        } else if (islower(key.first[0])) {\n            count_lower++;\n   \
    \     }\n    }\n    if (count_upper && count_lower) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv8ldvtbo: /tmp/tmpv8ldvtbo.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  auto itr = dict.begin();\n\
    \  bool upper_case = isupper(itr->first[0]);\n  while (itr != dict.end()) {\n\
    \    if (upper_case) {\n      if (!isupper(itr->first[0])) return false;\n   \
    \ } else {\n      if (!islower(itr->first[0])) return false;\n    }\n    itr++;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpud6gwbvh: /tmp/tmpud6gwbvh.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool ans = true;\n    bool upper_case = true;\n    bool lower_case\
    \ = true;\n    if (dict.size() == 0) {\n        return false;\n    }\n    for\
    \ (std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end();\
    \ it++) {\n        std::string key = it->first;\n        if (islower(key[0]))\
    \ {\n            upper_case = false;\n        } else if (isupper(key[0])) {\n\
    \            lower_case = false;\n        } else {\n            ans = false;\n\
    \            break;\n        }\n    }\n    if (upper_case == false && lower_case\
    \ == false) {\n        ans = false;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpy48ihlbc: /tmp/tmpy48ihlbc.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    // assuming all keys are\
    \ in lowercase\n    bool lowercase = true;\n    for(auto entry : dict) {\n   \
    \     if(!islower(entry.first[0])) {\n            lowercase = false;\n       \
    \     break;\n        }\n    }\n    if(lowercase) return true;\n    bool uppercase\
    \ = true;\n    for(auto entry : dict) {\n        if(!isupper(entry.first[0]))\
    \ {\n            uppercase = false;\n            break;\n        }\n    }\n  \
    \  return uppercase;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7gbapz0c: /tmp/tmp7gbapz0c.cpp:42: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    std::string str = dict.begin()->first;\n\
    \    int i = 0;\n    for(; i < str.size(); i++)\n        if(str[i] >= 'a' && str[i]\
    \ <= 'z') break;\n    if(i == str.size()) {\n        auto it = dict.begin();\n\
    \        while(it != dict.end()) {\n            str = it->first;\n           \
    \ for(i = 0; i < str.size(); i++)\n                if(str[i] < 'A' || str[i] >\
    \ 'Z') return false;\n            it++;\n        }\n    }\n    else {\n      \
    \  auto it = dict.begin();\n        while(it != dict.end()) {\n            str\
    \ = it->first;\n            for(i = 0; i < str.size(); i++)\n                if(str[i]\
    \ < 'a' || str[i] > 'z') return false;\n            it++;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    int isUpper = 0;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            isUpper++;\n        }\n    }\n    if(isUpper == 0 || isUpper\
    \ == dict.size()) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpt5oow9l8: /tmp/tmpt5oow9l8.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3_4jb10p: /tmp/tmp3_4jb10p.cpp:23: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code here\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp35tdihfk: /tmp/tmp35tdihfk.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tint lower = 0;\n\tint upper = 0;\n\tfor (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n\t\tif (islower(it->first[0]))\
    \ {\n\t\t\tlower++;\n\t\t} else if (isupper(it->first[0])) {\n\t\t\tupper++;\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (lower != 0 && upper != 0)\
    \ {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbttcrrlx: /tmp/tmpbttcrrlx.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0) return false;\n    char prev_key;\n    bool\
    \ is_first = true;\n    for(auto element: dict){\n        if(!isalpha(element.first[0]))\
    \ return false;\n        if(is_first){\n            prev_key = element.first[0];\n\
    \            is_first = false;\n        }\n        else{\n            if(islower(prev_key)\
    \ && isupper(element.first[0])) return false;\n            if(isupper(prev_key)\
    \ && islower(element.first[0])) return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdeiazw1k: /tmp/tmpdeiazw1k.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n        return false;\n    int allUpper = 1;\n\
    \    int allLower = 1;\n    for(auto it:dict){\n        allUpper &= isupper(it.first[0]);\n\
    \        allLower &= islower(it.first[0]);\n    }\n    return allUpper||allLower;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpm_oeqn_1: /tmp/tmpm_oeqn_1.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int cnt_upper=0,cnt_lower=0;\n    for(auto x:dict){\n        if(isupper(x.first[0])){\n\
    \            cnt_upper++;\n        }\n        else if(islower(x.first[0])){\n\
    \            cnt_lower++;\n        }\n        else return false;\n    }\n    if(cnt_upper==dict.size()\
    \ or cnt_lower==dict.size()) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpug6jom3o: /tmp/tmpug6jom3o.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size()==0)\n    {\n        return false;\n    }\n    bool\
    \ flag = true;\n    std::string key;\n    int cap = 0;\n    int low = 0;\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++)\n    {\n        key = it->first;\n\
    \        if(islower(key[0]))\n        {\n            low++;\n        }\n     \
    \   else\n        {\n            cap++;\n        }\n    }\n    if(low == 0 ||\
    \ cap == 0)\n    {\n        flag = true;\n    }\n    else\n    {\n        flag\
    \ = false;\n    }\n    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp16yt9m0m: /tmp/tmp16yt9m0m.cpp:53: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  if (dict.size() == 0) return false;\n  for (auto [key, val] : dict)\
    \ {\n    assert(key.size() > 0);\n    if (key[0] >= 'a' && key[0] <= 'z') {\n\
    \      for (char c : key) {\n        if (c < 'a' || c > 'z') return false;\n \
    \     }\n    } else if (key[0] >= 'A' && key[0] <= 'Z') {\n      for (char c :\
    \ key) {\n        if (c < 'A' || c > 'Z') return false;\n      }\n    } else {\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp2djb17i: /tmp/tmpp2djb17i.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    // Your code goes here\n    int count=0;\n    if(dict.size()==0)\n\
    \        return false;\n    for(auto x:dict)\n    {\n        if(x.first[0]>=65\
    \ && x.first[0]<=90)\n            count++;\n    }\n    if(count==dict.size() ||\
    \ count==0)\n        return true;\n    else\n        return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9bq28qe2: /tmp/tmp9bq28qe2.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n\tif(dict.size() == 0)\n\t\treturn false;\n\tauto it = dict.begin();\n\
    \tbool upper = false;\n\tbool lower = false;\n\tif(it->first[0] > 'A' && it->first[0]\
    \ < 'Z')\n\t\tupper = true;\n\telse if(it->first[0] > 'a' && it->first[0] < 'z')\n\
    \t\tlower = true;\n\tfor(it; it != dict.end(); it++) {\n\t\tif(it->first[0] >\
    \ 'A' && it->first[0] < 'Z')\n\t\t\tupper = true;\n\t\telse if(it->first[0] >\
    \ 'a' && it->first[0] < 'z')\n\t\t\tlower = true;\n\t\tif(upper && lower)\n\t\t\
    \treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpcnynr822: /tmp/tmpcnynr822.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    assert(dict.size() > 0);\n    bool is_upper = true;\n    bool is_lower\
    \ = true;\n    // Iterate through the map and check if the keys are upper case\
    \ or lower case,\n    // and set the bool values accordingly. \n    for (std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); ++it) {\n        // If all keys are upper\
    \ case, is_lower will be false.\n        if (it->first != std::string(it->first.size(),\
    \ 'A')) {\n            is_lower = false;\n        }\n        // If all keys are\
    \ lower case, is_upper will be false.\n        if (it->first != std::string(it->first.size(),\
    \ 'a')) {\n            is_upper = false;\n        }\n    }\n    // Return true\
    \ if all keys are either upper case or lower case.\n    if (is_upper == true ||\
    \ is_lower == true) {\n        return true;\n    }\n    // If all keys are not\
    \ upper case or lower case, return false.\n    else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpchl7ygup: /tmp/tmpchl7ygup.cpp:44: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130889
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n  std::cout << dict.size() << std::endl;\n  if (dict.size() == 0) {\n\
    \    return false;\n  }\n  int upper_count = 0;\n  int lower_count = 0;\n  std::map<std::string,std::string>::iterator\
    \ it;\n  for (it = dict.begin(); it != dict.end(); it++) {\n    std::string key\
    \ = it->first;\n    for (int i = 0; i < key.length(); i++) {\n      if (std::isupper(key[i]))\
    \ {\n        upper_count++;\n      } else if (std::islower(key[i])) {\n      \
    \  lower_count++;\n      }\n    }\n  }\n  return (upper_count == 0 || lower_count\
    \ == 0);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfy25_gq3: /tmp/tmpfy25_gq3.cpp:41: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: '2

    3

    3

    '
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n   \
    \ int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 =\
    \ 0;\n    int count8 = 0;\n    for (auto i : dict) {\n        for (auto j : i.first)\
    \ {\n            if (j > 64 && j < 91) {\n                count1++;\n        \
    \    }\n            if (j > 96 && j < 123) {\n                count2++;\n    \
    \        }\n            if (j > 47 && j < 58) {\n                count3++;\n \
    \           }\n            if (j == 32) {\n                count4++;\n       \
    \     }\n            if (j == 42) {\n                count5++;\n            }\n\
    \            if (j == 44) {\n                count6++;\n            }\n      \
    \      if (j == 46) {\n                count7++;\n            }\n            if\
    \ (j == 95) {\n                count8++;\n            }\n        }\n    }\n  \
    \  if (count1 != 0 && count2 != 0 && count3 != 0 && count4 != 0 && count5 != 0\
    \ && count6 != 0 && count7 != 0 && count8 != 0) {\n        return false;\n   \
    \ }\n    if (count1 == 0 && count2 == 0 && count3 == 0 && count4 == 0 && count5\
    \ == 0 && count6 == 0 && count7 == 0 && count8 == 0) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpl9y78ud8: /tmp/tmpl9y78ud8.cpp:65: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    bool allLower = true;\n    bool allUpper = true;\n    if (dict.size()\
    \ == 0) return false;\n    std::map<std::string,std::string>::iterator it = dict.begin();\n\
    \    while (it != dict.end()) {\n        std::string k = it->first;\n        if\
    \ (isupper(k[0])) {\n            allLower = false;\n        } else {\n       \
    \     allUpper = false;\n        }\n        it++;\n    }\n    return allLower\
    \ || allUpper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9dv3vk2c: /tmp/tmp9dv3vk2c.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0)\n        return false;\n    bool lower = true;\n\
    \    for(std::map<std::string,std::string>::iterator i = dict.begin(); i != dict.end();\
    \ i++) {\n        if(islower(i->first[0])) {\n            continue;\n        }\n\
    \        else {\n            lower = false;\n            break;\n        }\n \
    \   }\n    if(lower) {\n        return true;\n    }\n    else {\n        for(std::map<std::string,std::string>::iterator\
    \ i = dict.begin(); i != dict.end(); i++) {\n            if(isupper(i->first[0]))\
    \ {\n                continue;\n            }\n            else {\n          \
    \      return false;\n            }\n        }\n        return true;\n    }\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp01c8ckwk: /tmp/tmp01c8ckwk.cpp:50: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    if(dict.size() == 0) return false;\n    bool lowerCase = false;\n\
    \    bool upperCase = false;\n    std::string sampleKey = dict.begin()->first;\n\
    \    for(char letter : sampleKey) {\n        if(letter >= 65 && letter <= 90)\
    \ upperCase = true;\n        if(letter >= 97 && letter <= 122) lowerCase = true;\n\
    \    }\n    if(lowerCase && upperCase) return false;\n    bool isLowerCase = (lowerCase\
    \ ? true : false);\n    for(auto letter : dict) {\n        if(isLowerCase) {\n\
    \            if(letter.first[0] >= 65 && letter.first[0] <= 90) return false;\n\
    \        } else {\n            if(letter.first[0] >= 97 && letter.first[0] <=\
    \ 122) return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxgob65pr: /tmp/tmpxgob65pr.cpp:22: int main(): Assertion `candidate((std::map<std::string,std::string>({{"p",
    "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
    \ if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return false.\n// The function should return false is the given map\
    \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n//\
    \ >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"},\
    \ {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
    // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
    \ dict) {\n    //std::cout << dict.size() << \"\\n\";\n    if (dict.size() ==\
    \ 0) {\n        return false;\n    }\n    else {\n        //std::cout << \"check_dict_case\\\
    n\";\n        int lowercase_count = 0;\n        int uppercase_count = 0;\n   \
    \     std::map<std::string,std::string>::iterator iter;\n        for (iter = dict.begin();\
    \ iter != dict.end(); iter++) {\n            std::string key = iter->first;\n\
    \            //std::cout << key << \"\\n\";\n            if (islower(key[0]))\
    \ {\n                lowercase_count++;\n            }\n            else if (isupper(key[0]))\
    \ {\n                uppercase_count++;\n            }\n            else {\n \
    \               return false;\n            }\n        }\n        //std::cout <<\
    \ lowercase_count << \"\\n\";\n        //std::cout << uppercase_count << \"\\\
    n\";\n        if (lowercase_count == dict.size() || uppercase_count == dict.size())\
    \ {\n            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
    }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
    \ {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
    fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgo22s7hm: /tmp/tmpgo22s7hm.cpp:55: int main(): Assertion `candidate((std::map<std::string,std::string>({{"Name",
    "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130890
