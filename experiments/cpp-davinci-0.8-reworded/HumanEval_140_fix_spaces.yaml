name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    int i, j;\n    int n = text.length();\n    char arr[n];\n    int\
    \ cnt = 0;\n    for(i = 0; i < n; i++) {\n        if(text[i] == ' ') {\n     \
    \       cnt++;\n        }\n        else {\n            cnt = 0;\n        }\n \
    \       if(cnt > 2) {\n            arr[i] = '-';\n        }\n        else if(text[i]\
    \ == ' ') {\n            arr[i] = '_';\n        }\n        else {\n          \
    \  arr[i] = text[i];\n        }\n    }\n    std::string res = \"\";\n    for(i\
    \ = 0; i < n; i++) {\n        res += arr[i];\n    }\n    return res;", '    //
    Your code goes here', "    // Write your code here\n    // You may print the string\
    \ or display it on the screen\n    int n = text.length();\n    if(n == 0){\n \
    \       return text;\n    }\n    if(n == 1){\n        if(text[0] == ' '){\n  \
    \          return \"_\";\n        }else{\n            return text;\n        }\n\
    \    }\n    int i=0;\n    int count = 0;\n    for(i=0;i<n;i++){\n        if(text[i]\
    \ == ' '){\n            count++;\n        }else{\n            break;\n       \
    \ }\n    }\n    if(count == 0){\n        return text;\n    }\n    if(count ==\
    \ 1){\n        if(text[i] == ' '){\n            text[i] = '-';\n        }else{\n\
    \            text[i-1] = '_';\n        }\n    }else{\n        if(text[i] == '\
    \ '){\n            text[i] = '-';\n        }else{\n            text[i-1] = '_';\n\
    \        }\n        for(int j=i+1;j<n;j++){\n            if(text[j] == ' '){\n\
    \                if(text[j-1] == ' '){\n                    text[j] = '-';\n \
    \               }else{\n                    text[j] = '_';\n                }\n\
    \            }\n        }\n    }\n    return text;", "\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] == '_' && text[i + 1] == '_')\
    \ {\n\t\t\tif (text[i + 2] == '_') {\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn text;", "    // Write your code here\n    std::string result = text;\n\
    \    bool twoSpaces = false;\n    int spaceCount = 0;\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            spaceCount++;\n\
    \            if (spaceCount > 2) {\n                twoSpaces = true;\n      \
    \      }\n        } else {\n            spaceCount = 0;\n        }\n    }\n  \
    \  spaceCount = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (text[i] == ' ') {\n            if (twoSpaces) {\n                spaceCount++;\n\
    \                if (spaceCount > 2) {\n                    result[i] = '-';\n\
    \                } else {\n                    result[i] = '_';\n            \
    \    }\n            } else {\n                result[i] = '_';\n            }\n\
    \        }\n    }\n    return result;", "    int len = text.length();\n    //\
    \ uppercase the first letter\n    text[0] = toupper(text[0]);\n    int i = 0;\n\
    \    int count_of_spaces = 0;\n    while(i < len) {\n        if(i+1 < len) {\n\
    \            if(text[i] == ' ' && text[i+1] == ' ') {\n                count_of_spaces++;\n\
    \            } else {\n                count_of_spaces = 0;\n            }\n \
    \       }\n        if(count_of_spaces == 2) {\n            text[i] = '-';\n  \
    \      } else if(text[i] == ' ') {\n            text[i] = '_';\n        }\n  \
    \      i++;\n    }\n    return text;", "    int count = 0;\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            count++;\n\
    \        }\n        else if (text[i] != ' ') {\n            count = 0;\n     \
    \   }\n        if (count >= 2) {\n            text[i] = '-';\n        }\n    \
    \    else if (count == 1) {\n            text[i] = '_';\n        }\n    }\n  \
    \  return text;", "    // 0. count spaces and consecutive spaces\n    int consecutive_spaces\
    \ = 0;\n    int spaces = 0;\n    for (std::string::iterator it = text.begin();\
    \ it != text.end(); ++it) {\n        if (*it == ' ') {\n            ++consecutive_spaces;\n\
    \            ++spaces;\n        } else {\n            consecutive_spaces = 0;\n\
    \        }\n    }\n    // 1. make space for an underscore or dash\n    int j =\
    \ spaces;\n    if (consecutive_spaces > 2) {\n        j += (consecutive_spaces\
    \ - 2);\n    }\n    for (int i = text.size() - 1; i >= 0; --i) {\n        if (text[i]\
    \ == ' ') {\n            if (consecutive_spaces > 2) {\n                text[j--]\
    \ = '-';\n                consecutive_spaces = 0;\n            } else {\n    \
    \            text[j--] = '_';\n            }\n        } else {\n            text[j--]\
    \ = text[i];\n        }\n    }\n    return text;", "\tstd::string ans = \"\";\n\
    \tint num_spaces = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tnum_spaces++;\n\t\t} else {\n\t\t\tnum_spaces = 0;\n\t\t}\n\
    \t\tif (num_spaces == 1) {\n\t\t\tans += \"_\";\n\t\t} else if (num_spaces ==\
    \ 2) {\n\t\t\tans += \"-\";\n\t\t} else if (num_spaces == 0) {\n\t\t\tans += text[i];\n\
    \t\t}\n\t}\n\treturn ans;", "    std::string result;\n    // write your solution\
    \ here\n    bool flag = true;\n    int count = 0;\n    for(int i = 0; i < text.length();\
    \ i++){\n        if(text[i] == ' '){\n            count++;\n            if(count\
    \ == 1){\n                if(flag){\n                    result += '_';\n    \
    \                flag = false;\n                }\n                else{\n   \
    \                 result += '-';\n                }\n            }\n        }\n\
    \        else{\n            count = 0;\n            result += text[i];\n     \
    \   }\n    }\n    return result;", "    std::string ret = \"\";\n    bool hasSpace\
    \ = false;\n    bool firstSpace = false;\n    bool firstWord = true;\n    bool\
    \ hasSpaceBefore = false;\n    for (auto it = text.begin(); it != text.end();\
    \ it++) {\n        if (*it == ' ') {\n            hasSpace = true;\n         \
    \   if (firstWord && hasSpace) {\n                firstWord = false;\n       \
    \         continue;\n            }\n            if (hasSpaceBefore) {\n      \
    \          ret.pop_back();\n                ret.push_back('-');\n            }\
    \ else {\n                ret.push_back('_');\n            }\n            hasSpaceBefore\
    \ = true;\n        } else {\n            hasSpaceBefore = false;\n           \
    \ ret.push_back(*it);\n        }\n    }\n    return ret;", "\t// remove 2 or more\
    \ spaces at the start of the text\n\twhile (text.substr(0,2) == \"  \")\n\t\t\
    text = text.substr(2);\n\t// replace spaces with underscores\n\tfor (int i = 0;\
    \ i < text.length(); i++)\n\t\tif (text[i] == ' ')\n\t\t\ttext[i] = '_';\n\t//\
    \ replace more than 2 spaces with dashes\n\tfor (int i = 0; i < text.length()-1;\
    \ i++)\n\t\tif (text.substr(i,3) == \"___\")\n\t\t\ttext[i+1] = '-';\n\t// if\
    \ the text starts with a _, remove it\n\tif (text[0] == '_')\n\t\ttext = text.substr(1);\n\
    \treturn text;", "    int count_space = 0;\n    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  count_space++;\n            if (count_space == 2) {\n                result\
    \ += \"_\";\n            }\n            else if (count_space > 2) {\n        \
    \        continue;\n            }\n        }\n        else {\n            if (count_space\
    \ == 1) {\n                result += \"_\";\n            }\n            else if\
    \ (count_space > 2) {\n                result += \"-\";\n            }\n     \
    \       count_space = 0;\n            result += text[i];\n        }\n    }\n \
    \   return result;", "    std::string new_text;\n    int count_space = 0;\n  \
    \  for (int i = 0; i < text.length(); i++) {\n        char current_char = text[i];\n\
    \        if (current_char == ' ') {\n            count_space++;\n            if\
    \ (count_space == 1) {\n                new_text.push_back('_');\n           \
    \ }\n            else if (count_space == 2) {\n                new_text.push_back('_');\n\
    \            }\n            else if (count_space > 2) {\n                new_text.push_back('-');\n\
    \            }\n        }\n        else {\n            count_space = 0;\n    \
    \        new_text.push_back(current_char);\n        }\n    }\n    return new_text;",
  "    int cnt = 0;\n    std::string res = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            cnt++;\n            if (cnt\
    \ > 2) {\n                res += '-';\n            }\n        } else {\n     \
    \       if (cnt >= 2) {\n                res += '_';\n            }\n        \
    \    cnt = 0;\n            res += text[i];\n        }\n    }\n    if (cnt >= 2)\
    \ {\n        res += '_';\n    }\n    return res;", "  int arr[256];\n  for(int\
    \ i=0;i<text.length();i++){\n    arr[i]=0;\n  }\n  for(int i=0;i<text.length();i++){\n\
    \    if(text[i]==' '){\n      arr[i]=1;\n    }\n  }\n  for(int i=0;i<text.length();i++){\n\
    \    if(arr[i]==1 && arr[i+1]==1){\n      arr[i]=2;\n    }\n  }\n  for(int i=0;i<text.length();i++){\n\
    \    if(arr[i]==2 && arr[i+1]==2){\n      arr[i+1]=3;\n    }\n  }\n  for(int i=0;i<text.length();i++){\n\
    \    if(arr[i]==2){\n      text[i]='_';\n    }\n    if(arr[i]==3){\n      text[i]='-';\n\
    \    }\n  }\n  return text;", "    // Your code goes here\n    return text;",
  "    std::string result = \"\";\n    int cnt = 0;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            cnt++;\n            if (cnt\
    \ == 1) {\n                result += \"_\";\n            }\n            else if\
    \ (cnt == 2) {\n                result += \"_\";\n            }\n            else\
    \ if (cnt > 2) {\n                result += \"-\";\n            }\n        }\n\
    \        else {\n            result += text[i];\n            cnt = 0;\n      \
    \  }\n    }\n    return result;", "    int count=0;\n    std::string result =\
    \ \"\";\n    for(int i=0;i<text.length();i++){\n        if(text[i]==' '){\n  \
    \          count++;\n            if(count==1){\n                result+=\"_\"\
    ;\n            }\n            else if(count>2){\n                result+=\"-\"\
    ;\n            }\n        }\n        else{\n            result+=text[i];\n   \
    \         count=0;\n        }\n    }\n    return result;", "\t// TODO: Implement\
    \ me\n\treturn text;", "    int len = text.length();\n    if(len == 0){\n    \
    \    return text;\n    }\n    char prev = text[0];\n    std::string output;\n\
    \    int count = 0;\n    output += text[0];\n    if(len == 1){\n        return\
    \ output;\n    }\n    if(text[0] == ' '){\n        count = 1;\n    }\n    for(int\
    \ i = 1; i < len; i++){\n        if(text[i] == ' '){\n            if(prev == '\
    \ '){\n                count++;\n            }\n            if(count == 2){\n\
    \                output += '-';\n            }\n            else if(count == 1){\n\
    \                output += '_';\n            }\n        }\n        else{\n   \
    \         output += text[i];\n            count = 0;\n        }\n        prev\
    \ = text[i];\n    }\n    return output;", "  int i = 0;\n  for (int k = 0; k <\
    \ text.size(); k++) {\n    if (text[k] == ' ') {\n      i++;\n    }\n  }\n  if\
    \ (i == 1) {\n    for (int k = 0; k < text.size(); k++) {\n      if (text[k] ==\
    \ ' ') {\n        text[k] = '_';\n      }\n    }\n  }\n  if (i > 1) {\n    int\
    \ j = 0;\n    while (text[j] == ' ') {\n      text[j] = '_';\n      j++;\n   \
    \ }\n    while (text[text.size() - 1] == ' ') {\n      text[text.size() - 1] =\
    \ '_';\n    }\n    int count = 0;\n    for (int k = 0; k < text.size(); k++) {\n\
    \      if (text[k] == ' ') {\n        count++;\n      }\n      if (text[k] !=\
    \ ' ') {\n        count = 0;\n      }\n      if (count > 2) {\n        text[k]\
    \ = '-';\n      }\n    }\n  }\n  return text;", "  \t//your code goes here\n\t\
    std::string s = \"\";\n\tint p = 0;\n\tfor(int i = 0; i < text.length(); i++){\n\
    \t\tif(text[i] != ' '){\n\t\t\ts += text[i];\n\t\t\tp = 0;\n\t\t}\n\t\telse{\n\
    \t\t\tif(p == 2){\n\t\t\t\ts += '-';\n\t\t\t\tp = 0;\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\ts += '_';\n\t\t\t\tp++;\n\t\t\t}\n\t\t}\n\t}\n\treturn s;", "  int count\
    \ = 0;\n  bool flag = false;\n  for (int i = 0; i < text.length(); i++) {\n  \
    \  if (text[i] == ' ') {\n      count++;\n      if (count == 2) {\n        flag\
    \ = true;\n      }\n    } else {\n      if (flag) {\n        text[i-1] = '-';\n\
    \        flag = false;\n      }\n      if (count == 1) {\n        text[i-1] =\
    \ '_';\n      }\n      count = 0;\n    }\n  }\n  if (flag) {\n    text[text.length()-1]\
    \ = '-';\n  }\n  if (count == 1) {\n    text[text.length()-1] = '_';\n  }\n  return\
    \ text;", "    int spaces = 0;\n    std::string output = \"\";\n    for (char\
    \ & ch : text) {\n        if (ch == ' ') {\n            spaces += 1;\n       \
    \ } else {\n            if (spaces == 1) {\n                output += '_';\n \
    \           } else if (spaces > 1) {\n                output += '-';\n       \
    \     }\n            output += ch;\n            spaces = 0;\n        }\n    }\n\
    \    if (spaces == 1) {\n        output += '_';\n    } else if (spaces > 1) {\n\
    \        output += '-';\n    }\n    return output;", "\tstd::string new_text;\n\
    \tint prev_space = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tif (prev_space == 0) {\n\t\t\t\tnew_text.push_back('_');\n\t\
    \t\t\tprev_space = 1;\n\t\t\t} else if (prev_space == 1) {\n\t\t\t\tnew_text.push_back('_');\n\
    \t\t\t\tprev_space = 2;\n\t\t\t} else if (prev_space == 2) {\n\t\t\t\tnew_text.push_back('-');\n\
    \t\t\t\tprev_space = 3;\n\t\t\t} else {\n\t\t\t\tnew_text.push_back('-');\n\t\t\
    \t\tprev_space = 3;\n\t\t\t}\n\t\t} else {\n\t\t\tnew_text.push_back(text[i]);\n\
    \t\t\tprev_space = 0;\n\t\t}\n\t}\n\treturn new_text;", "    int i, len;\n   \
    \ std::string ans = \"\";\n    for(i = 0, len = text.length(); i < len; i++) {\n\
    \        if(i == 0 && text[i] == ' ')\n            continue;\n        if(text[i]\
    \ == ' ' && text[i+1] == ' ') {\n            ans.push_back('-');\n           \
    \ while(text[i] == ' ')\n                i++;\n            i--;\n        }\n \
    \       else if(text[i] == ' ')\n            ans.push_back('_');\n        else\n\
    \            ans.push_back(text[i]);\n    }\n    return ans;", "    std::string\
    \ s = \"\";\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n\
    \        if(text[i] == ' ') {\n            count++;\n            if(count >= 2)\
    \ {\n                s.push_back('-');\n            }\n        } else {\n    \
    \        count = 0;\n            s.push_back(text[i]);\n        }\n    }\n   \
    \ return s;", "\t\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tif(text[i]=='\
    \ ' && text[i+1]==' ' && text[i+2]==' ')\n\t\t{\n\t\t\ttext[i]='-';\n\t\t\ti++;\n\
    \t\t}\n\t\telse if(text[i]==' ' && text[i+1]==' ')\n\t\t{\n\t\t\ttext[i]='_';\n\
    \t\t\ti++;\n\t\t}\n\t\telse if(text[i]==' ')\n\t\t{\n\t\t\ttext[i]='_';\n\t\t\
    }\n\t}\n\treturn text;", "    int j = 0;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            if (j > 0 && text[j - 1]\
    \ == ' ') {\n                continue;\n            }\n            if (i + 1 <\
    \ text.size() && text[i + 1] == ' ') {\n                text[j++] = '-';\n   \
    \         } else {\n                text[j++] = '_';\n            }\n        }\
    \ else {\n            text[j++] = text[i];\n        }\n    }\n    return text.substr(0,\
    \ j);", "    std::string result;\n    int count = 0;\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] == ' ') {\n            count++;\n\
    \        } else {\n            count = 0;\n        }\n        if (count <= 2)\
    \ {\n            if (text[i] == ' ') {\n                result += '_';\n     \
    \       } else {\n                result += text[i];\n            }\n        }\
    \ else {\n            if (text[i] == ' ') {\n                result += '-';\n\
    \            } else {\n                result += text[i];\n            }\n   \
    \     }\n    }\n    return result;", "\tfor (int i = 0; i < text.length(); i++)\
    \ {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i == 0) {\n\t\t\t\ttext.erase(i, 1);\n\
    \t\t\t\ti--;\n\t\t\t}\n\t\t\telse if (text[i - 1] == ' ') {\n\t\t\t\ttext.erase(i,\
    \ 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t\telse if (text[i + 1] == ' ') {\n\t\t\t\ttext[i]\
    \ = '-';\n\t\t\t}\n\t\t\telse if (text[i + 1] != ' ') {\n\t\t\t\ttext[i] = '_';\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn text;", "    std::string result;\n    bool is_space\
    \ = false;\n    int count = 0;\n    for (auto c : text) {\n        if (c == '\
    \ ') {\n            if (count > 2) {\n                result += \"-\";\n     \
    \       } else {\n                result += \"_\";\n            }\n          \
    \  is_space = true;\n            count++;\n        } else {\n            if (is_space)\
    \ {\n                count = 0;\n                is_space = false;\n         \
    \   }\n            result += c;\n        }\n    }\n    return result;", "\tfor\
    \ (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i\
    \ == 0) {\n\t\t\t\tif (text[i + 1] == ' ') {\n\t\t\t\t\ttext.erase(text.begin()\
    \ + i);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\telse if (i != text.length() - 1) {\n\t\t\t\tif (text[i\
    \ + 1] == ' ') {\n\t\t\t\t\ttext.erase(text.begin() + i);\n\t\t\t\t\ti--;\n\t\t\
    \t\t}\n\t\t\t\telse if (text[i - 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\
    \t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\
    \t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ text;", "    for(int i = 0; i < text.length(); i++) {\n        if(text[i] ==\
    \ ' ') {\n            if(i == 0) {\n                text.erase(i, 1);\n      \
    \          i--;\n            }\n            else if(text[i-1] == ' ') {\n    \
    \            text.erase(i, 1);\n                text[i-1] = '-';\n           \
    \     i--;\n            }\n            else {\n                text[i] = '_';\n\
    \            }\n        }\n    }\n    return text;", "  if (text.size() < 3) {\n\
    \    std::replace(text.begin(), text.end(), ' ', '_');\n    return text;\n  }\n\
    \  // if (text.size() == 3) {\n  //   for (int i = 0; i < text.size(); i++) {\n\
    \  //     std::replace(text.begin(), text.end(), ' ', '_');\n  //   }\n  //  \
    \ return text;\n  // }\n  int spaceCount = 0;\n  for (int i = 0; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      spaceCount++;\n    }\n  }\n  if (spaceCount\
    \ < 3) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    return text;\n\
    \  }\n  if (spaceCount == 3) {\n    std::replace(text.begin(), text.end(), ' ',\
    \ '_');\n    return text;\n  }\n  if (spaceCount > 3) {\n    std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n    return text;\n  }", "\tint prev = 0;\n\tint i =\
    \ 0;\n\tfor (i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\
    \tif (i - prev > 2) {\n\t\t\t\ttext[prev] = '-';\n\t\t\t\tprev = i;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\ttext[prev] = '_';\n\t\t\t\tprev = i;\n\t\t\t}\n\t\t}\n\t\
    }\n\tif (i - prev > 2) {\n\t\ttext[prev] = '-';\n\t}\n\telse {\n\t\ttext[prev]\
    \ = '_';\n\t}\n\treturn text;", "    std::vector<char> v(text.begin(), text.end());\n\
    \    std::vector<char> output;\n    int consecutive = 0;\n    for (int i = 0;\
    \ i < v.size(); i++) {\n        if (v[i] == ' ') {\n            if (output.size()\
    \ != 0 && output[output.size() - 1] == '_') {\n                continue;\n   \
    \         }\n            if (consecutive == 2) {\n                consecutive\
    \ = 0;\n                output.push_back('-');\n            } else {\n       \
    \         consecutive++;\n                output.push_back('_');\n           \
    \ }\n        } else {\n            consecutive = 0;\n            output.push_back(v[i]);\n\
    \        }\n    }\n    return std::string(output.begin(), output.end());", " \
    \   std::string ret = \"\";\n    int i=0;\n    while(i<text.length()){\n     \
    \   if(text[i]==' '){\n            if(i==0){\n                ret += \"_\";\n\
    \            }\n            else if(text[i-1]==' '){\n                if(ret[ret.length()-1]=='_'){\n\
    \                    ret += '-';\n                }\n                else{\n \
    \                   ret += '_';\n                }\n            }\n          \
    \  else{\n                ret += '_';\n            }\n        }\n        else{\n\
    \            ret += text[i];\n        }\n        i++;\n    }\n    return ret;",
  "\tint count_space = 0;\n\tstd::string result = \"\";\n\tint i;\n\tfor (i = 0; i\
    \ < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount_space++;\n\t\
    \t}\n\t\telse {\n\t\t\tcount_space = 0;\n\t\t}\n\t\tif (count_space == 1) {\n\t\
    \t\tresult += \"_\";\n\t\t}\n\t\telse if (count_space == 2) {\n\t\t\tresult +=\
    \ \"-\";\n\t\t}\n\t\telse if (count_space == 0) {\n\t\t\tresult += text[i];\n\t\
    \t}\n\t}\n\treturn result;", "    int consecutive_spaces = 0;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            consecutive_spaces++;\n\
    \        } else {\n            consecutive_spaces = 0;\n        }\n        if\
    \ (consecutive_spaces == 1) {\n            text[i] = '_';\n        } else if (consecutive_spaces\
    \ > 2) {\n            text[i] = '-';\n        }\n    }\n    return text;", "\t\
    int i=0;\n\twhile(i<text.length()){\n\t\tif(text[i]==' '){\n\t\t\tint j=i+1;\n\
    \t\t\twhile(j<text.length() && text[j]==' '){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j-i>=2){\n\
    \t\t\t\ttext.replace(i,j-i,\"-\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttext.replace(i,1,\"\
    _\");\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn text;", "    int x = text.length();\n\
    \    // std::cout << \"Text length: \" << x << \"\\n\";\n    std::string result\
    \ = \"\";\n    int ctr = 0;\n    for (int i = 0; i < x; i++) {\n        if (text[i]\
    \ == ' ') {\n            ctr++;\n            // std::cout << \"ctr is: \" << ctr\
    \ << \"\\n\";\n            if (ctr < 3) {\n                result += \"_\";\n\
    \            }\n            else {\n                result += \"-\";\n       \
    \     }\n        }\n        else {\n            ctr = 0;\n            result +=\
    \ text[i];\n        }\n    }\n    return result;", "    int space = 0;\n    int\
    \ i = 0;\n    std::string result = \"\";\n    while(i < text.length()) {\n   \
    \     if(text[i] == ' ') {\n            space++;\n            if(space == 2) {\n\
    \                result += '_';\n            }\n            else if(space > 2)\
    \ {\n                result += '-';\n            }\n        }\n        else {\n\
    \            result += text[i];\n            space = 0;\n        }\n        i++;\n\
    \    }\n    return result;", "  std::string output = \"\";\n  std::string prev_char\
    \ = \"\";\n  for (auto c : text) {\n    if (c == ' ' && prev_char == \" \") {\n\
    \      output.pop_back();\n      output += '-';\n    } else if (c == ' ') {\n\
    \      output += '_';\n    } else {\n      output += c;\n    }\n    prev_char\
    \ = c;\n  }\n  return output;", "    // Your code here\n    int len = text.length();\n\
    \    int count = 0;\n    int count_ = 0;\n    for(int i = 0; i < len; i++){\n\
    \        if(text[i] == ' '){\n            count++;\n        }\n        else{\n\
    \            count = 0;\n        }\n        if(count >= 2){\n            count_++;\n\
    \        }\n    }\n    if(count_ == 0){\n        for(int i = 0; i < len; i++){\n\
    \            if(text[i] == ' '){\n                text[i] = '_';\n           \
    \ }\n        }\n    }\n    else{\n        for(int i = 0; i < len; i++){\n    \
    \        if(text[i] == ' '){\n                if(text[i+1] == ' '){\n        \
    \            if(text[i+2] == ' '){\n                        text[i] = '-';\n \
    \                   }\n                    else{\n                        text[i]\
    \ = '_';\n                    }\n                }\n                else{\n  \
    \                  text[i] = '_';\n                }\n            }\n        }\n\
    \    }\n    return text;", "\tint current_space_count = 0;\n\tstd::string result\
    \ = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ')\
    \ {\n\t\t\tcurrent_space_count++;\n\t\t\tif (current_space_count == 1) {\n\t\t\
    \t\tresult += \"_\";\n\t\t\t}\n\t\t\telse if (current_space_count == 2) {\n\t\t\
    \t\tresult += \"_\";\n\t\t\t}\n\t\t\telse if (current_space_count > 2) {\n\t\t\
    \t\tresult += \"-\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcurrent_space_count =\
    \ 0;\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "\tstd::string\
    \ res = \"\";\n\tint len = text.length();\n\tint i = 0;\n\tint f = 0;\n\tint c\
    \ = 0;\n\tif(len == 0)\n\t\treturn res;\n\twhile(i < len) {\n\t\tif(text[i] ==\
    \ ' ') {\n\t\t\tc++;\n\t\t\tif(c == 1) {\n\t\t\t\tres += text[i];\n\t\t\t}\n\t\
    \t\telse if(c == 2) {\n\t\t\t\tres += '_';\n\t\t\t}\n\t\t\telse if(c > 2) {\n\t\
    \t\t\tif(f == 0) {\n\t\t\t\t\tres += '-';\n\t\t\t\t\tf = 1;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\telse {\n\t\t\tres += text[i];\n\t\t\tc = 0;\n\t\t\tf = 0;\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn res;", "    int i=0;\n    int j=0;\n    int count=0;\n\
    \    for(i=0;i<text.length();i++){\n        if(text[i]==' '){\n            count++;\n\
    \        }\n        else{\n            count=0;\n        }\n        if(count>=2){\n\
    \            text[i]='-';\n        }\n    }\n    for(i=0;i<text.length();i++){\n\
    \        if(text[i]==' '){\n            text[i]='_';\n        }\n    }\n    return\
    \ text;", "    // This is a very simple one, worth reading and understanding.\n\
    \    // Easily solved, but there are many edge cases.\n    // We can return an\
    \ new string and work with it.\n    int len = text.length();\n    std::string\
    \ res;\n    // Assume that our string is ' ' terminated and not empty.\n    //\
    \ Now we iterate over the string, there are three cases.\n    // 1) There is no\
    \ space\n    // 2) There is only one space\n    // 3) There are two or more spaces\n\
    \    // If we see the first two, no matter what the string was\n    // before\
    \ the space, we simply add the next character and ignore\n    // everything before\
    \ it.\n    // This is why we need to treat the final case differently.\n    //\
    \ If we are in the final case, then we add an underscore to our\n    // result\
    \ string and only add the next character if it is not a space.\n    // We want\
    \ to keep track of the number of spaces we see in a row.\n    // To do that, we\
    \ simply keep a counter, which we increment by one\n    // when we see a space\
    \ and set it to zero when we see a non-space.\n    int cnt = 0;\n    for (int\
    \ i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            cnt++;\n\
    \        } else {\n            if (cnt == 0) {\n                res += text[i];\n\
    \            } else if (cnt == 1) {\n                res += '_';\n           \
    \     res += text[i];\n                cnt = 0;\n            } else {\n      \
    \          res += '-';\n                res += text[i];\n                cnt =\
    \ 0;\n            }\n        }\n    }\n    // Handles case where string ends with\
    \ more than one space.\n    if (cnt > 1) {\n        res += '-';\n    }\n    return\
    \ res;", "  std::string s=\"\";\n  int count=0;\n  for(int i=0;i<text.length();i++){\n\
    \    if(text[i]==' '){\n      if(count<2){\n        s+='_';\n        count++;\n\
    \      }\n      else{\n        s+='-';\n        count++;\n      }\n    }\n   \
    \ else{\n      s+=text[i];\n      count=0;\n    }\n  }\n  return s;", "\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i ==\
    \ 0) {\n\t\t\t\ttext.erase(text.begin() + i);\n\t\t\t\ti--;\n\t\t\t}\n\t\t\telse\
    \ if (text[i - 1] == ' ') {\n\t\t\t\ttext.erase(text.begin() + i);\n\t\t\t\ti--;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\tint cnt\
    \ = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == '_') {\n\
    \t\t\tcnt++;\n\t\t}\n\t\telse {\n\t\t\tcnt = 0;\n\t\t}\n\t\tif (cnt == 3) {\n\t\
    \t\ttext[i] = '-';\n\t\t\tcnt = 0;\n\t\t}\n\t}\n\treturn text;", "\tint spaces\
    \ = 0;\n\tstd::string result;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\
    \tif (text[i] == ' ') {\n\t\t\tspaces++;\n\t\t\tif (spaces >= 2) {\n\t\t\t\tif\
    \ (result[result.length() - 1] != '-') {\n\t\t\t\t\tresult += '-';\n\t\t\t\t}\n\
    \t\t\t}\n\t\t} else {\n\t\t\tspaces = 0;\n\t\t\tresult += text[i];\n\t\t}\n\t\
    }\n\treturn result;", "    // your code here\n    std::string temp;\n    if(text[0]=='\
    \ ')\n        temp+='_';\n    int count=0;\n    for(int i=0;i<text.length();i++)\n\
    \    {\n        if(text[i]==' ')\n        {\n            count++;\n          \
    \  if(count>2)\n                temp+='-';\n            else\n               \
    \ temp+='_';\n        }\n        else\n        {\n            count=0;\n     \
    \       temp+=text[i];\n        }\n    }\n    return temp;", "    for(int i =\
    \ 0; i < text.length(); i++) {\n        // take first space of the string\n  \
    \      if(text[i] == ' ') {\n            // add underscore on that space\n   \
    \         text[i] = '_';\n            // count space\n            int space_count\
    \ = 1;\n            // check for consecutive spaces\n            for(int j = i+1;\
    \ j < text.length(); j++) {\n                if(text[j] == ' ') {\n          \
    \          // if space count is more than 2 add - instead of _\n             \
    \       if(space_count >= 2) {\n                        text[j] = '-';\n     \
    \               }\n                    space_count++;\n                }\n   \
    \             else {\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    return text;", "    int space = 0;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  space++;\n        }\n        else {\n            space = 0;\n        }\n  \
    \      if (space > 2) {\n            text[i] = '-';\n        }\n        else if\
    \ (space == 1) {\n            text[i] = '_';\n        }\n    }\n    return text;",
  "    // Write your code here\n    std::string modifiedString;\n    int spaceCount\
    \ = 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n\
    \            spaceCount++;\n            if(spaceCount == 2){\n               \
    \ modifiedString += '-';\n            }\n        }\n        else if(text[i] !=\
    \ ' '){\n            spaceCount = 0;\n            modifiedString += text[i];\n\
    \        }\n    }\n    return modifiedString;", "\t// replace all spaces with\
    \ underscores\n\twhile(text.find(\" \") != std::string::npos)\n\t\ttext.replace(text.find(\"\
    \ \"), 1, \"_\");\n\t// replace all triple spaces with dashes\n\twhile(text.find(\"\
    ___\") != std::string::npos)\n\t\ttext.replace(text.find(\"___\"), 3, \"-\");\n\
    \t// replace all double spaces with underscores\n\twhile(text.find(\"__\") !=\
    \ std::string::npos)\n\t\ttext.replace(text.find(\"__\"), 2, \"_\");\n\treturn\
    \ text;", "    // replace all spaces with underscores\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // check if there are more than 2 consecutive spaces\n\
    \    for (size_t i = 1; i < text.size(); i++) {\n        if (text[i] == '_' &&\
    \ text[i - 1] == '_') {\n            text[i] = '-';\n        }\n    }\n    //\
    \ we need to do a second pass to fix possible consecutive underscores\n    //\
    \ at the end of the string\n    for (size_t i = text.size() - 1; i > 0; i--) {\n\
    \        if (text[i] == '_' && text[i - 1] == '_') {\n            text[i] = '-';\n\
    \        }\n    }\n    return text;", "    std::string ans = \"\";\n    int cnt\
    \ = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ')\
    \ {\n            cnt++;\n            if(cnt == 1) {\n                ans += '_';\n\
    \            }\n            else if(cnt > 2) {\n                ans += '-';\n\
    \            }\n        }\n        else {\n            ans += text[i];\n     \
    \       cnt = 0;\n        }\n    }\n    return ans;", "\ttext[0] = toupper(text[0]);\n\
    \tfor (int i = 1; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\t\
    if (text[i-1] == ' ') {\n\t\t\t\ttext[i] = '-';\n\t\t\t} else {\n\t\t\t\ttext[i]\
    \ = '_';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;", "\tint len = text.length();\n\t\
    int space_count = 0;\n\tint i = 0;\n\twhile(text[i] == ' '){\n\t\ttext.erase(text.begin()\
    \ + i);\n\t\tspace_count++;\n\t}\n\tfor(i = 0; i < len; i++){\n\t\tif(text[i]\
    \ == ' '){\n\t\t\tspace_count++;\n\t\t\tif(space_count == 3){\n\t\t\t\ttext[i]\
    \ = '-';\n\t\t\t\tspace_count = 0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttext[i] = '_';\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\tspace_count = 0;\n\t\t}\n\t}\n\treturn text;",
  "    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n        }\n        else {\n            count\
    \ = 0;\n        }\n        if (count > 2) {\n            text[i] = '-';\n    \
    \    }\n        else if (count == 1) {\n            text[i] = '_';\n        }\n\
    \    }\n    return text;", "  for(int i = 0; i < text.length(); i++) {\n    if(text[i]\
    \ == ' ') {\n      if(i != 0 && text[i - 1] == ' ') {\n        text[i] = '-';\n\
    \      } else {\n        text[i] = '_';\n      }\n    }\n  }\n  return text;",
  "\tstd::string result;\n\tint count = 0;\n\tfor (char c : text) {\n\t\tif (c ==\
    \ ' ') {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tresult += c;\n\t\t\tcount = 0;\n\
    \t\t}\n\t\tif (count == 2) {\n\t\t\tresult += '-';\n\t\t\tcount = 0;\n\t\t}\n\t\
    \tif (count == 1) {\n\t\t\tresult += '_';\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn\
    \ result;", "\tint n = text.length();\n\tint count = 0;\n\tfor (int i = 0; i <\
    \ n; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count\
    \ > 2) {\n\t\tstd::string ans = \"\";\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\
    \tif (text[i] == ' ') {\n\t\t\t\tif (text[i + 1] == ' ') {\n\t\t\t\t\tans += '-';\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tans += '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tans += text[i];\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\telse {\n\
    \t\tstd::string ans = \"\";\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (text[i]\
    \ == ' ') {\n\t\t\t\tans += '_';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tans += text[i];\n\
    \t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\t// Write your solution here\n\t// return\
    \ \"\";", "    for(int i = 1; i < text.length(); i++) {\n        if(text[i-1]\
    \ != ' ' || text[i] != ' ') {\n            continue;\n        }\n        if(text[i]\
    \ == ' ' && text[i+1] == ' ') {\n            text[i] = '-';\n        }\n     \
    \   text[i] = '_';\n    }\n    if(text[0] == ' ') {\n        text[0] = '_';\n\
    \    }\n    return text;", "\tif (text.size() == 0) {\n\t\treturn \"\";\n\t}\n\
    \telse {\n\t\tchar first_char = text[0];\n\t\tif (first_char == ' ') {\n\t\t\t\
    first_char = '_';\n\t\t}\n\t\tstd::string rest_of_string = text.substr(1);\n\t\
    \tstd::string result = fix_spaces(rest_of_string);\n\t\tif (first_char == ' '\
    \ && result[0] == ' ') {\n\t\t\treturn '-' + result;\n\t\t}\n\t\telse {\n\t\t\t\
    return first_char + result;\n\t\t}\n\t}", "    std::string result = \"\";\n  \
    \  int count_space = 0;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] == ' ') {\n            count_space += 1;\n        } else {\n \
    \           count_space = 0;\n        }\n        if (count_space == 1) {\n   \
    \         result += '_';\n        } else if (count_space == 2) {\n           \
    \ result += '-';\n        } else if (count_space > 2) {\n            continue;\n\
    \        } else {\n            result += text[i];\n        }\n    }\n    return\
    \ result;", "    int last = 0;\n    int ctr = 0;\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            ctr++;\n        } else {\n\
    \            ctr = 0;\n        }\n        if(ctr == 1) {\n            text[i]\
    \ = '_';\n        } else if(ctr > 2) {\n            text[i] = '-';\n        }\n\
    \    }\n    return text;", "\tint state=0;\n\tint count =0;\n\tfor(int i=0; i<text.length();\
    \ i++){\n\t\tif(text[i]==' '){\n\t\t\tcount++;\n\t\t\tif(count==1){\n\t\t\t\t\
    state=1;\n\t\t\t}\n\t\t\telse if(count==2){\n\t\t\t\tstate=2;\n\t\t\t}\n\t\t\t\
    else if(count>2){\n\t\t\t\tstate=3;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tcount=0;\n\
    \t\t}\n\t}\n\tif(state==0){\n\t\treturn text;\n\t}\n\telse if(state==1){\n\t\t\
    return text.substr(1,text.length()-1);\n\t}\n\telse if(state==2){\n\t\tstd::string\
    \ o = \"\";\n\t\tfor(int i=0; i<text.length(); i++){\n\t\t\tif(text[i]==' '){\n\
    \t\t\t\to = o + '_';\n\t\t\t}\n\t\t\telse{\n\t\t\t\to = o + text[i];\n\t\t\t}\n\
    \t\t}\n\t\treturn o;\n\t}\n\telse if(state==3){\n\t\tstd::string o = \"\";\n\t\
    \tint count=0;\n\t\tfor(int i=0; i<text.length(); i++){\n\t\t\tif(text[i]==' '){\n\
    \t\t\t\tcount++;\n\t\t\t\tif(count==1){\n\t\t\t\t\to = o + '_';\n\t\t\t\t}\n\t\
    \t\t\telse if(count>1){\n\t\t\t\t\to = o + '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tcount=0;\n\t\t\t\to = o + text[i];\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t}",
  "    std::string b = \"\";\n    if(text[0] == ' '){\n        b += '_';\n    }\n\
    \    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' ' && text[i+1]\
    \ == ' '){\n            b += '-';\n            i++;\n        }\n        else if(text[i]\
    \ == ' '){\n            b += '_';\n        }\n        else{\n            b +=\
    \ text[i];\n        }\n    }\n    return b;", "    std::string res = \"\";\n \
    \   if(text.length() == 0){\n        return res;\n    }\n    int consecutive =\
    \ 0;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] == ' '){\n\
    \            consecutive++;\n            if(consecutive == 1){\n             \
    \   res += '_';\n            }\n            else if(consecutive == 2){\n     \
    \           res += '_';\n            }\n            else if(consecutive > 2){\n\
    \                res += '-';\n            }\n        }\n        else{\n      \
    \      consecutive = 0;\n            res += text[i];\n        }\n    }\n    return\
    \ res;", "    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            count++;\n        }\n        else\
    \ {\n            count = 0;\n        }\n        if (count == 1) {\n          \
    \  text[i] = '_';\n        }\n        else if (count > 2) {\n            text[i]\
    \ = '-';\n        }\n    }\n    return text;", "\tint count = 0;\n\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tcount++;\n\t\t\tif (count > 2) {\n\t\t\t\tresult += '-';\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\tresult += '_';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\
    count = 0;\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", '    return
    text;', "    std::string spaces = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            if (spaces.length() < 2)\
    \ {\n                spaces += ' ';\n            } else {\n                spaces\
    \ += '-';\n            }\n        } else {\n            if (spaces.length() >\
    \ 0) {\n                text.replace(i - spaces.length(), spaces.length(), spaces);\n\
    \                i += spaces.length() - 1;\n                spaces = \"\";\n \
    \           }\n        }\n    }\n    if (spaces.length() > 0) {\n        text.replace(text.length()\
    \ - spaces.length(), spaces.length(), spaces);\n    }\n    return text;", "  \
    \  int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n        }\n        else {\n            count\
    \ = 0;\n        }\n        if (count == 2) {\n            text[i] = '-';\n   \
    \     }\n        else if (count > 2) {\n            text[i] = '-';\n        }\n\
    \        else {\n            text[i] = text[i];\n        }\n    }\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  text[i] = '_';\n        }\n    }\n    std::string result = text;\n    return\
    \ result;", "    // remove all whitespaces at start of string\n    int idx = 0;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n\
    \            idx = i;\n            break;\n        }\n    }\n    std::string first\
    \ = text.substr(idx, text.length() - idx);\n    std::string res = \"\";\n    int\
    \ count = 0;\n    for (int i = 0; i < first.length(); i++) {\n        if (first[i]\
    \ == ' ') {\n            count++;\n        } else {\n            count = 0;\n\
    \        }\n        if (count == 0) {\n            res += first[i];\n        }\
    \ else if (count == 1) {\n            res += '_';\n        } else if (count ==\
    \ 2) {\n            res = res.substr(0, res.length() - 1);\n            res +=\
    \ '-';\n        }\n    }\n    return res;", "  for(int i = 0; i < text.length();\
    \ i++) {\n    if(text[i] == ' ') {\n      if(i > 0 && text[i-1] == ' ') {\n  \
    \      text[i] = '-';\n      } else {\n        text[i] = '_';\n      }\n    }\n\
    \  }\n  return text;", "    std::string result;\n    int count = 0;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            count++;\n\
    \        } else {\n            if (count == 1) {\n                result += '_';\n\
    \            } else if (count > 2) {\n                result += '-';\n       \
    \     }\n            result += text[i];\n            count = 0;\n        }\n \
    \   }\n    if (count == 1) {\n        result += '_';\n    } else if (count > 2)\
    \ {\n        result += '-';\n    }\n    return result;", "    // Implement code\
    \ here\n    int i = 0;\n    while(i < text.length()){\n        if(text[i] == '\
    \ ' && text[i+1] == ' '){\n            text.replace(i,1,\"-\");\n        }\n \
    \       else if(text[i] == ' '){\n            text.replace(i,1,\"_\");\n     \
    \   }\n        i++;\n    }\n    return text;", "\tint spaces = 0;\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tspaces++;\n\
    \t\t}\n\t}\n\tif (spaces < 2) {\n\t\tfor (int i = 0; i < text.length(); i++) {\n\
    \t\t\tif (text[i] == ' ') {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\telse\
    \ {\n\t\tint back = 0;\n\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\t\
    if (text[i] == ' ') {\n\t\t\t\tback++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (back\
    \ > 2) {\n\t\t\t\t\ttext[i - back] = '-';\n\t\t\t\t\tfor (int j = 1; j < back;\
    \ j++) {\n\t\t\t\t\t\ttext[i - back + j] = ' ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    \telse {\n\t\t\t\t\ttext[i - back] = '_';\n\t\t\t\t\tfor (int j = 1; j < back;\
    \ j++) {\n\t\t\t\t\t\ttext[i - back + j] = ' ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    \tback = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn text;", "\t// replace 1 space with\
    \ \" \"\n\tint spaces = 1;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (text[i] == ' ') {\n\t\t\tif (spaces == 1) {\n\t\t\t\ttext[i] = '_';\n\t\t\t\
    \tspaces++;\n\t\t\t}\n\t\t\telse if (spaces == 2) {\n\t\t\t\ttext[i] = '_';\n\t\
    \t\t\tspaces++;\n\t\t\t}\n\t\t\telse if (spaces > 2) {\n\t\t\t\ttext[i] = '-';\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tspaces = 1;\n\t\t}\n\t}\n\treturn text;", " \
    \   \tstd::string ans = \"\";\n\tint cnt = 0;\n\tfor(int i = 0; i < text.size();\
    \ i++) {\n\t\tif(text[i] == ' ') cnt++;\n\t\telse cnt = 0;\n\t\tif(cnt == 2) ans\
    \ += '-';\n\t\telse if(cnt == 1) ans += '_';\n\t\telse ans += text[i];\n\t}\n\t\
    return ans;", "    int count = 0;\n    std::string str = \"\";\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i]\
    \ == ' ') {\n            count++;\n            if(count > 2) {\n             \
    \   str = '-';\n            }\n            else {\n                str = '_';\n\
    \            }\n        }\n        else {\n            str = text[i];\n      \
    \      count = 0;\n        }\n        ans += str;\n    }\n    return ans;", " \
    \   // write your code here\n    std::string result = \"\";\n    int space_count\
    \ = 0;\n    bool previous_space = false;\n    for(char c : text){\n        if(c\
    \ == ' '){\n            space_count += 1;\n            if(space_count > 2 && !previous_space){\n\
    \                result.append(\"-\");\n                previous_space = true;\n\
    \            }\n        }\n        else{\n            space_count = 0;\n     \
    \       previous_space = false;\n            result.append(1, c);\n        }\n\
    \    }\n    return result;", "\tstd::string fix_spaces;\n\tfix_spaces.reserve(text.size());\n\
    \tfix_spaces.push_back(text[0]);\n\tfor (int i = 1; i < text.size(); i++) {\n\t\
    \tif (text[i] == ' ') {\n\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\tif (fix_spaces.back()\
    \ == '_')\n\t\t\t\t\tfix_spaces.push_back('-');\n\t\t\t\telse\n\t\t\t\t\tfix_spaces.push_back('_');\n\
    \t\t\t}\n\t\t\telse\n\t\t\t\tfix_spaces.push_back('_');\n\t\t}\n\t\telse\n\t\t\
    \tfix_spaces.push_back(text[i]);\n\t}\n\treturn fix_spaces;", "    assert(text\
    \ != \"\");\n    std::string result = \"\";\n    int spaces_count = 0;\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       spaces_count++;\n        } else {\n            if (spaces_count == 0)\
    \ {\n                result += text[i];\n            } else if (spaces_count ==\
    \ 1) {\n                result += '_';\n                result += text[i];\n \
    \               spaces_count = 0;\n            } else if (spaces_count == 2) {\n\
    \                result += '_';\n                result += text[i];\n        \
    \        spaces_count = 0;\n            } else {\n                result += '-';\n\
    \                result += text[i];\n                spaces_count = 0;\n     \
    \       }\n        }\n    }\n    return result;", '  // Insert code here', " \
    \   int index = 0;\n    int count = 0;\n    while(index < text.length() && text[index]\
    \ == ' ') {\n        index++;\n    }\n    text = text.substr(index);\n    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n           \
    \ count++;\n        }\n        else {\n            count = 0;\n        }\n   \
    \     if(count > 2) {\n            text[i] = '-';\n        }\n        else if(count\
    \ == 1) {\n            text[i] = '_';\n        }\n    }\n    return text;", " \
    \   std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            count++;\n        } else\
    \ {\n            if (count == 1) {\n                result += \"_\";\n       \
    \     } else if (count > 1) {\n                result += \"-\";\n            }\n\
    \            result += text[i];\n            count = 0;\n        }\n    }\n  \
    \  if (count == 1) {\n        result += \"_\";\n    } else if (count > 1) {\n\
    \        result += \"-\";\n    }\n    return result;", "    std::string result;\n\
    \    int spaceCount = 0;\n    for (auto it = text.begin(); it != text.end(); it++)\
    \ {\n        if (*it == ' ') {\n            spaceCount++;\n            if (spaceCount\
    \ > 2) {\n                result.pop_back();\n                result.push_back('-');\n\
    \            } else {\n                result.push_back('_');\n            }\n\
    \        } else {\n            spaceCount = 0;\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "  int spaces = 0;\n  for (int i = 0;\
    \ i < text.length(); i++) {\n    if (text[i] == ' ') {\n      spaces++;\n    }\n\
    \  }\n  std::string new_text;\n  if (spaces <= 2) {\n    for (int i = 0; i < text.length();\
    \ i++) {\n      if (text[i] == ' ') {\n        new_text += '_';\n      } else\
    \ {\n        new_text += text[i];\n      }\n    }\n  } else {\n    int spaces\
    \ = 0;\n    for (int i = 0; i < text.length(); i++) {\n      if (text[i] == '\
    \ ') {\n        spaces++;\n      } else {\n        if (spaces > 2) {\n       \
    \   new_text += '-';\n          spaces = 0;\n        } else if (spaces > 0) {\n\
    \          for (int j = 0; j < spaces; j++) {\n            new_text += '_';\n\
    \          }\n          spaces = 0;\n        }\n        new_text += text[i];\n\
    \      }\n    }\n  }\n  return new_text;", "\tint space = 0;\n\tfor (int i = 0;\
    \ i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tspace++;\n\t\t}\n\
    \t\telse {\n\t\t\tspace = 0;\n\t\t}\n\t\tif (space == 1) {\n\t\t\ttext[i] = '_';\n\
    \t\t}\n\t\telse if (space > 2) {\n\t\t\ttext[i] = '-';\n\t\t}\n\t}\n\treturn text;",
  "\tint count = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn text;\n\
    \t}\n\telse if (count == 1) {\n\t\tfor (int i = 0; i < text.length(); i++) {\n\
    \t\t\tif (text[i] == ' ') {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t\treturn\
    \ text;\n\t}\n\telse if (count == 2) {\n\t\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\t\tif (text[i] == ' ') {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\
    \t\treturn text;\n\t}\n\telse {\n\t\tfor (int i = 0; i < text.length(); i++) {\n\
    \t\t\tif (text[i] == ' ') {\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\t\treturn\
    \ text;\n\t}", "    std::string s;\n    int count=0;\n    for(int i=0;i<text.length();i++){\n\
    \        if(text[i]==' '){\n            count++;\n            if(count==1){\n\
    \                s+='_';\n            }\n            else if(count==2){\n    \
    \            s+='_';\n            }\n            else if(count>2){\n         \
    \       s+='-';\n            }\n        }\n        else{\n            count=0;\n\
    \            s+=text[i];\n        }\n    }\n    return s;", "\tint count = 0;\n\
    \tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\t\
    count += 1;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count == 2) {\n\
    \t\t\ttext[i - 1] = '-';\n\t\t}\n\t\telse if (count == 1) {\n\t\t\ttext[i] = '_';\n\
    \t\t}\n\t}\n\treturn text;", "    std::string result = \"\";\n    int space_count\
    \ = 0;\n    for (auto &c : text) {\n        if (c == ' ') {\n            space_count++;\n\
    \            if (space_count > 2) {\n                c = '-';\n            } else\
    \ {\n                c = '_';\n            }\n        } else {\n            space_count\
    \ = 0;\n        }\n        result += c;\n    }\n    return result;", "    // std::string\
    \ s;\n    // char prev = ' ';\n    // for(auto c : text) {\n    //     if(c ==\
    \ ' ') {\n    //         if(prev == ' ') {\n    //             s += \"-\";\n \
    \   //         } else {\n    //             s += \"_\";\n    //         }\n  \
    \  //     } else {\n    //         s += c;\n    //     }\n    //     prev = c;\n\
    \    // }\n    // return s;\n    std::string s;\n    for(int i = 0; i < text.size();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(i == 0 || (i > 0 && text[i-1]\
    \ == ' ')) {\n                s += \"-\";\n            } else {\n            \
    \    s += \"_\";\n            }\n        } else {\n            s += text[i];\n\
    \        }\n    }\n    return s;", "    int space_counter = 0;\n    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            space_counter++;\n            if (space_counter == 1)\
    \ {\n                result += '_';\n            }\n            else if (space_counter\
    \ == 2) {\n                result[result.length() - 1] = '-';\n            }\n\
    \        }\n        else {\n            space_counter = 0;\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    int i = 0;\n    int\
    \ count = 0;\n    std::string::iterator sit;\n    for(sit = text.begin(); sit\
    \ != text.end(); sit++) {\n        if(*sit == ' ') {\n            count++;\n \
    \       }\n        else {\n            count = 0;\n        }\n        if(count\
    \ > 1) {\n            *sit = '-';\n        }\n        else {\n            *sit\
    \ = '_';\n        }\n    }\n    return text;", "    int len = text.length();\n\
    \    int cspace = 0;\n    for(int i = 0; i < len; i++) {\n        if(text[i] ==\
    \ ' ') {\n            cspace++;\n        }\n        else {\n            cspace\
    \ = 0;\n        }\n        if(cspace > 2) {\n            text[i] = '-';\n    \
    \    }\n        else if(cspace == 1) {\n            text[i] = '_';\n        }\n\
    \    }\n    return text;", "    std::string result;\n    int count = 0;\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       count++;\n        } else {\n            if (count == 1) {\n          \
    \      result.push_back('_');\n            } else if (count > 2) {\n         \
    \       result.push_back('-');\n            }\n            result.push_back(text[i]);\n\
    \            count = 0;\n        }\n    }\n    return result;", "    // your code\
    \ here\n\tstring t=text;\n\tint count=0;\n\t//cout<<t;\n\tfor(int i=0;i<t.length();i++)\n\
    \t{\n\t\tif(t[i]==' ')\n\t\t{\n\t\t\tcount++;\n\t\t\tif(count==2)\n\t\t\t{\n\t\
    \t\t\tt[i]='-';\n\t\t\t}\n\t\t\telse if(count>2)\n\t\t\t{\n\t\t\t\tt[i]='-';\n\
    \t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tt[i]='_';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tcount=0;\n\t\t}\n\t}\n\t//cout<<t;\n\treturn t;", "    int count = 0;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            count++;\n        }\n        else {\n            count = 0;\n   \
    \     }\n        if (count > 2) {\n            text[i] = '-';\n        }\n   \
    \     else if (count == 1) {\n            text[i] = '_';\n        }\n    }\n \
    \   return text;", "    std::string corrected = \"\";\n    int count = 0;\n  \
    \  for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            count++;\n            if (count <= 2)\n                corrected\
    \ += \"_\";\n            else\n                corrected += \"-\";\n        }\n\
    \        else {\n            corrected += text[i];\n            count = 0;\n \
    \       }\n    }\n    return corrected;", "    std::string result;\n    int count\
    \ = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            count++;\n        } else {\n            if (count == 1)\
    \ {\n                result += '_';\n            } else if (count > 2) {\n   \
    \             result += '-';\n            }\n            result += text[i];\n\
    \            count = 0;\n        }\n    }\n    return result;", "    int len =\
    \ text.length();\n    char *new_text = new char[len];\n    int index = 0;\n  \
    \  for(int i = 0; i < len; i++) {\n        if(text[i] == ' ') {\n            if(index\
    \ == 0) {\n                continue;\n            }\n            if(new_text[index\
    \ - 1] == ' ') {\n                if(new_text[index - 2] == ' ') {\n         \
    \           new_text[index] = '-';\n                    index++;\n           \
    \     } else {\n                    new_text[index] = '_';\n                 \
    \   index++;\n                }\n            } else {\n                new_text[index]\
    \ = ' ';\n                index++;\n            }\n        } else {\n        \
    \    new_text[index] = text[i];\n            index++;\n        }\n    }\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < index; i++) {\n        ans += new_text[i];\n\
    \    }\n    return ans;", "  std::string temp;\n  temp.push_back(text[0]);\n \
    \ for(int i = 1; i < text.size(); i++) {\n    if(text[i] == ' ') {\n      if(text[i-1]\
    \ == ' ') {\n        temp.push_back('-');\n      } else {\n        temp.push_back('_');\n\
    \      }\n    } else {\n      temp.push_back(text[i]);\n    }\n  }\n  return temp;",
  "    if(text.length() == 0) return text;\n    // write your code here\n    std::string\
    \ new_text;\n    bool prev_char_is_space = false;\n    int count = 0;\n    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n           \
    \ if(prev_char_is_space) {\n                count++;\n            } else {\n \
    \               count = 1;\n                prev_char_is_space = true;\n     \
    \       }\n        } else {\n            prev_char_is_space = false;\n       \
    \     count = 0;\n        }\n        if(count == 1) {\n            new_text +=\
    \ '_';\n        } else if(count > 1) {\n            new_text += '-';\n       \
    \ } else {\n            new_text += text[i];\n        }\n    }\n    return new_text;",
  "    int count_spaces = 0;\n    std::string result;\n    for (char character : text)\
    \ {\n        if (character == ' ') {\n            count_spaces++;\n          \
    \  if (count_spaces == 2) {\n                result += '-';\n            }\n \
    \       } else {\n            count_spaces = 0;\n            result += character;\n\
    \        }\n    }\n    for (int i = 1; i < result.size(); i++) {\n        if (result[i\
    \ - 1] == '-' && result[i] == '-') {\n            result.erase(i - 1, 1);\n  \
    \      }\n    }\n    return result;", "\tif (text.size() <= 1) {\n\t\treturn text;\n\
    \t}\n\tif (text[0] == ' ') {\n\t\tif (text[1] == ' ') {\n\t\t\treturn fix_spaces(text.substr(1));\n\
    \t\t}\n\t\treturn \"_\" + fix_spaces(text.substr(1));\n\t}\n\tif (text[0] == '\
    \ ' && text[1] == ' ') {\n\t\treturn \"_\" + fix_spaces(text.substr(1));\n\t}\n\
    \tif (text[text.size() - 1] == ' ') {\n\t\tif (text[text.size() - 2] == ' ') {\n\
    \t\t\treturn fix_spaces(text.substr(0, text.size() - 1));\n\t\t}\n\t\treturn fix_spaces(text.substr(0,\
    \ text.size() - 1)) + \"_\";\n\t}\n\treturn text[0] + fix_spaces(text.substr(1));",
  "    \n    // Your code here\n    // Create a function that will read the text and\
    \ return \n    // the text after replacing the spaces with underscores \n    //\
    \ and consecutive spaces with single dash\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    // str.find(\"the\");\n    // Searches the\
    \ string for the first occurrence of the sequence specified by its arguments.\n\
    \    // When pos is specified, the search only includes characters at or after\
    \ position pos, ignoring any possible occurrences that include characters before\
    \ pos.\n    // Note:\n    // find() returns position of first occurrence of sub-string.\n\
    \    // If sub-string is not found, it returns string::npos.\n    // int find(const\
    \ string& str, size_t pos = 0) const;\n    // Parameters:\n    // str  \u2013\
    \  C++ string object\n    // pos  \u2013  Position where the search begins\n \
    \   // Returns:\n    // Position of first occurrence of str. If the string is\
    \ not found, it returns string::npos.\n    // int pos = str.find(\"the\");\n \
    \   // if (pos != string::npos) {\n    // cout << \"First occurrence is \" <<\
    \ pos << endl;\n    // }\n    // string::size_type  size_t \n    // typedef basic_string<char>\
    \ string;\n    // basic_string<char>::size_type;\n    // Return value of the find()\
    \ function is of type string::size_type \n    // which is an unsigned integral\
    \ type.\n    // The size of the string is stored in a variable of this data type.\n\
    \    // string::size_type size = str.size();\n    // cout << \"String Size is:\
    \ \" << size << endl;\n    // 0 1 2 3 4 5 6 7 8 9 10\n    // 0 2 4 6 8 10 12 14\
    \ 16 18 20\n    // 0 1 1 2 2 3 3 3 4 4 4 5 5 5 5 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8\
    \ 8 8 8 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11\
    \ 11 12 12 12 12 12 12 12 12 12 12 12\n    // 0 1 2 3 4 5 6", "    std::string\
    \ res = \"\";\n    int flag = 0;\n    for(auto c : text) {\n        if(c == '\
    \ ') {\n            if(flag == 0) {\n                res.push_back('_');\n   \
    \             flag = 1;\n            }\n            else if(flag == 1) {\n   \
    \             res.push_back('-');\n                flag = 2;\n            }\n\
    \        }\n        else {\n            flag = 0;\n            res.push_back(c);\n\
    \        }\n    }\n    return res;", "\tstd::regex space(\"\\\\s+\");\n\tstd::string\
    \ fmt = \"$1_\";\n\tstd::string s = regex_replace(text, space, fmt);\n\treturn\
    \ s;", "    int n = text.length();\n    int count = 0;\n    for(int i = 0; i <\
    \ n; i++) {\n        if(text[i] == ' ') {\n            count++;\n        }\n \
    \   }\n    char new_text[n + count * 2];\n    int i = 0;\n    int j = 0;\n   \
    \ while(i < n) {\n        if(text[i] == ' ') {\n            new_text[j] = '_';\n\
    \            j++;\n            while(text[i] == ' ') {\n                i++;\n\
    \            }\n            if(text[i] == ' ') {\n                new_text[j]\
    \ = '-';\n                j++;\n            }\n        }\n        new_text[j]\
    \ = text[i];\n        i++;\n        j++;\n    }\n    new_text[j] = '\\0';\n  \
    \  return new_text;", "\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tif (i == 0) {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t\telse\
    \ if (text[i-1] == ' ') {\n\t\t\t\tint count = 0;\n\t\t\t\twhile (text[i] == '\
    \ ') {\n\t\t\t\t\tcount++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tif (count > 2)\
    \ {\n\t\t\t\t\ti -= count;\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t\tfor (int j = i+1;\
    \ j < i+count; j++) {\n\t\t\t\t\t\ttext[j] = ' ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\
    \t\telse {\n\t\t\t\t\ti -= count-1;\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t\tfor (int\
    \ j = i+1; j < i+count; j++) {\n\t\t\t\t\t\ttext[j] = ' ';\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ text;", "\t//Your Code", "  std::string out;\n  bool char_flag = false;\n  bool\
    \ space_flag = false;\n  int space_count = 0;\n  for (char const& c : text) {\n\
    \    if (isspace(c)) {\n      space_count++;\n      if (space_count > 2) {\n \
    \       if (char_flag && space_flag) {\n          out += '-';\n        }\n   \
    \     space_flag = true;\n      } else {\n        out += '_';\n      }\n    }\
    \ else {\n      out += c;\n      char_flag = true;\n      space_flag = false;\n\
    \      space_count = 0;\n    }\n  }\n  return out;", "    int count = 0;\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n \
    \           count++;\n        }\n        else {\n            count = 0;\n    \
    \    }\n        if (count > 2) {\n            text[i] = '-';\n        }\n    \
    \    else if (count > 0) {\n            text[i] = '_';\n        }\n    }\n   \
    \ return text;", '    return {};', "    std::stringstream ss;\n    int i=0;\n\
    \    while(i<text.length()){\n        if(text[i]==' '){\n            ss<<'_';\n\
    \            i++;\n            while(text[i]==' '){\n                if(i+1<text.length()&&text[i+1]=='\
    \ '){\n                    ss<<'-';\n                    i+=2;\n             \
    \   }\n                else{\n                    ss<<'_';\n                 \
    \   i++;\n                }\n            }\n        }\n        else{\n       \
    \     ss<<text[i];\n            i++;\n        }\n    }\n    return ss.str();",
  "    std::string result = \"\";\n    int space_count = 0;\n    for (int i = 0; i\
    \ < text.length(); i++) {\n        if (text[i] == ' ') {\n            space_count++;\n\
    \        } else {\n            space_count = 0;\n        }\n        if (space_count\
    \ > 2) {\n            result += '-';\n        } else if (space_count == 1) {\n\
    \            result += '_';\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    return result;", "    assert(text.size() > 0);\n    std::string::iterator\
    \ itr = text.begin();\n    std::string::iterator itr_end = text.end();\n    while(itr\
    \ != itr_end){\n        if(*itr == ' '){\n            text.replace(itr, itr+1,\
    \ \"_\");\n        }\n        itr++;\n    }\n    return text;", "    std::string\
    \ res = \"\";\n    int i = 0;\n    int spaces = 0;\n    while(i < text.length())\
    \ {\n        if(text[i] == ' '){\n            spaces++;\n            if(spaces\
    \ == 2) {\n                res += \"-\";\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            res += text[i];\n\
    \        }\n        i++;\n    }\n    if(res[0] == '-') res.erase(0,1);\n    if(res[0]\
    \ == ' ') res.erase(0,1);\n    return res;", "    int n = text.length();\n   \
    \ std::string res = \"\";\n    bool prevIsSpace = true;\n    int count = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        if(text[i] == ' ') {\n            count++;\n\
    \            if(count == 2) {\n                if(prevIsSpace) {\n           \
    \         res += '_';\n                }\n                else {\n           \
    \         res += '-';\n                }\n            }\n            prevIsSpace\
    \ = true;\n        }\n        else {\n            if(count != 0) {\n         \
    \       count = 0;\n            }\n            res += text[i];\n            prevIsSpace\
    \ = false;\n        }\n    }\n    return res;", "\tint space_count = 0;\n\tstd::string\
    \ str;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\
    \t\t\tspace_count++;\n\t\t\tif (space_count >= 2) {\n\t\t\t\tstr.append(\"-\"\
    );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tspace_count = 0;\n\t\t\tstr.append(1, text[i]);\n\
    \t\t}\n\t}\n\treturn str;", "    int spaces = 0;\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ')\
    \ {\n            if (spaces == 0) {\n                result.push_back('_');\n\
    \            }\n            spaces++;\n        } else {\n            if (spaces\
    \ > 1) {\n                result.push_back('-');\n            }\n            result.push_back(text[i]);\n\
    \            spaces = 0;\n        }\n    }\n    return result;", "    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n           \
    \ text[i] = '_';\n        }\n    }\n    for(int i = 0; i < text.length(); i++)\
    \ {\n        if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_') {\n  \
    \          text[i] = '-';\n            text[i+1] = '-';\n            text[i+2]\
    \ = '-';\n        }\n    }\n    return text;", "    // write your code here\n\
    \    std::string res=\"\";\n    int space_count=0;\n    for(int i=0;i<text.length();i++){\n\
    \        if(text[i]==' '){\n            space_count++;\n            if(space_count==2){\n\
    \                res.append(\"_\");\n            }\n            else if(space_count>2){\n\
    \                res.append(\"-\");\n            }\n        }\n        else{\n\
    \            space_count=0;\n            res.append(1,text[i]);\n        }\n \
    \   }\n    return res;", "    std::string text1 = \"\";\n    int count = 0;\n\
    \    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ' && count\
    \ >= 2) {\n            text1 += '-';\n            count = 0;\n        }\n    \
    \    else if(text[i] == ' ') {\n            text1 += '_';\n            count++;\n\
    \        }\n        else {\n            text1 += text[i];\n            count =\
    \ 0;\n        }\n    }\n    return text1;", "\tstd::string result;\n\tfor (int\
    \ i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tresult += \"\
    _\";\n\t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\tresult += \"-\";\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t}\n\t\telse\n\t\t\tresult += text[i];\n\t}\n\treturn result;", " \
    \   for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n \
    \           if(i==0) text[i] = '_';\n            else if(text[i-1] == ' ') {\n\
    \                if(i-2>=0 && text[i-2] == ' ')\n                    text[i] =\
    \ '-';\n                else\n                    text[i] = '_';\n           \
    \ }\n            else\n                text[i] = '_';\n        }\n    }\n    return\
    \ text;", "  // Your code here\n  std::string text2;\n  for(int i=0;i<text.length();i++){\n\
    \    if(text[i]==' '){\n      if(text[i+1]==' '){\n        i++;\n        text2.push_back('-');\n\
    \      }\n      else{\n        text2.push_back('_');\n      }\n    }\n    else{\n\
    \      text2.push_back(text[i]);\n    }\n  }\n  return text2;", "    for(int i\
    \ = 0; i < text.length(); i++) {\n        if(text[i] == ' ' && text[i+1] == '\
    \ ') {\n            while(text[i] == ' ') {\n                text.erase(i, 1);\n\
    \            }\n            text.insert(i, 1, '-');\n        } else if(text[i]\
    \ == ' ') {\n            text.erase(i, 1);\n            text.insert(i, 1, '_');\n\
    \        }\n    }\n    return text;", "    int prev = 0;\n    int curr = 0;\n\
    \    std::string ans = \"\";\n    while(curr < text.length()) {\n        while(curr\
    \ < text.length() && text[curr] == ' ') {\n            curr++;\n        }\n  \
    \      if(curr - prev >= 3) {\n            ans += \"-\";\n        } else if(curr\
    \ - prev == 2) {\n            ans += \"_\";\n        } else if(curr - prev ==\
    \ 1) {\n            // Do nothing.\n        }\n        if(curr < text.length())\
    \ {\n            ans += text[curr];\n        }\n        prev = curr + 1;\n   \
    \     curr = prev;\n    }\n    return ans;", "    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(i == 0) {\n           \
    \     text.erase(i, 1);\n                i = -1;\n            }\n            else\
    \ if(text[i - 1] == ' ') {\n                if(i == 1 || text[i - 2] == ' ') {\n\
    \                    text.erase(i, 1);\n                    i = -1;\n        \
    \        }\n                else {\n                    text[i] = '-';\n     \
    \           }\n            }\n            else {\n                text[i] = '_';\n\
    \            }\n        }\n    }\n    return text;", "    // create 2 strings\n\
    \    std::string out = \"\";\n    std::string spacer = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        // if we have a space, add to spacer\n\
    \        if (text[i] == ' ') {\n            spacer += text[i];\n        }\n  \
    \      // if we have a letter, add to spacer\n        else {\n            if (spacer.length()\
    \ == 1) {\n                out += '_';\n            }\n            else if (spacer.length()\
    \ > 1) {\n                out += '-';\n            }\n            spacer = \"\"\
    ;\n            out += text[i];\n        }\n    }\n    return out;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    int count = 0;\n    for (auto ch : text) {\n   \
    \     if (ch == '_') {\n            count++;\n        } else {\n            count\
    \ = 0;\n        }\n        if (count > 2) {\n            text.replace(text.find(\"\
    ___\"), 3, \"-\");\n            count = 1;\n        }\n    }\n    return text;",
  "    std::string new_text = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            if (i == 0) {\n                continue;\n\
    \            }\n            if (text[i-1] == ' ') {\n                if (i ==\
    \ 1) {\n                    new_text += '_';\n                } else if (text[i-2]\
    \ == ' ') {\n                    new_text += '-';\n                } else {\n\
    \                    new_text += '_';\n                }\n            } else {\n\
    \                new_text += '_';\n            }\n        } else {\n         \
    \   new_text += text[i];\n        }\n    }\n    return new_text;", "    std::string\
    \ str, result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            str += ' ';\n        } else {\n            if (str.length()\
    \ == 1) {\n                result += '_';\n            } else if (str.length()\
    \ > 2) {\n                result += '-';\n            }\n            result +=\
    \ text[i];\n            str = \"\";\n        }\n    }\n    return result;", " \
    \   for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ')\n   \
    \         text[i] = '_';\n    }\n    int count = 0;\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == '_')\n            count++;\n        else\n   \
    \         count = 0;\n        if(count > 2) {\n            text[i] = '-';\n  \
    \          count = 0;\n        }\n    }\n    return text;", "    std::string s;\n\
    \    int space_count = 0;\n    for(int i = 0; i < text.length(); i++) {\n    \
    \    if(text[i] == ' ') {\n            space_count++;\n            if(space_count\
    \ == 1) {\n                s += '_';\n            }\n            else if(space_count\
    \ > 2) {\n                s.pop_back();\n                s += '-';\n         \
    \   }\n        }\n        else {\n            s += text[i];\n            space_count\
    \ = 0;\n        }\n    }\n    return s;", "    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n\
    \    }\n    int counter = 0;\n    for(int i = 0; i < text.length(); i++) {\n \
    \       if(text[i] == '_') {\n            counter++;\n        }\n        else\
    \ {\n            counter = 0;\n        }\n        if(counter == 3) {\n       \
    \     text[i] = '-';\n            for(int j = 1; j < counter; j++) {\n       \
    \         text[i-j] = '-';\n            }\n            counter = 0;\n        }\n\
    \    }\n    return text;", "    // Replaces the first instance of \"toReplace\"\
    \ with \"replaceWith\"\n    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    return text;", "\tstd::string::iterator it = text.begin();\n\twhile(it!=text.end()){\n\
    \t\twhile(*it==' '){\n\t\t\tit = text.erase(it);\n\t\t}\n\t\tif(it!=text.end()){\n\
    \t\t\tif(it+1!=text.end()){\n\t\t\t\tif(*(it+1)==' '){\n\t\t\t\t\tif(it+2!=text.end()){\n\
    \t\t\t\t\t\tif(*(it+2)==' '){\n\t\t\t\t\t\t\t*(it+1)='-';\n\t\t\t\t\t\t\tit++;\n\
    \t\t\t\t\t\t\twhile(*(it+1)==' '){\n\t\t\t\t\t\t\t\tit = text.erase(it+1);\n\t\
    \t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t*(it+1)='_';\n\t\
    \t\t\t\t\t\tit++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t*(it+1)='_';\n\
    \t\t\t\t\t\tit++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tit++;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tit++;\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
  "    std::string result = \"\";\n    bool prev_char_was_space = false;\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       if (prev_char_was_space) {\n                // Special case, we need a\
    \ dash\n                result += '-';\n            } else {\n               \
    \ result += '_';\n            }\n            prev_char_was_space = true;\n   \
    \     } else {\n            result += text[i];\n            prev_char_was_space\
    \ = false;\n        }\n    }\n    return result;", "    // TODO: implement your\
    \ solution here\n    bool consecutive = false;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            if (consecutive) {\n    \
    \            text[i] = '-';\n            } else {\n                text[i] = '_';\n\
    \                consecutive = true;\n            }\n        } else {\n      \
    \      consecutive = false;\n        }\n    }\n    return text;", "    std::string\
    \ ans;\n    int count = 0;\n    for(int i = 0; i < text.size(); i++) {\n     \
    \   if(text[i] == ' ') {\n            count++;\n        }\n        else {\n  \
    \          count = 0;\n        }\n        if(text[i] == ' ' && i != 0 && count\
    \ <= 2) {\n            ans += '_';\n        }\n        else if(text[i] == ' '\
    \ && i != 0 && count > 2) {\n            ans += '-';\n        }\n        else\
    \ {\n            ans += text[i];\n        }\n    }\n    return ans;", "    //\
    \ std::cout << \"text: \" << text << \"\\n\";\n    std::string result;\n    int\
    \ space_counter = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (text[i] == ' ') {\n            space_counter++;\n            continue;\n  \
    \      } else {\n            if (space_counter > 0) {\n                if (space_counter\
    \ == 1) {\n                    result.push_back('_');\n                } else\
    \ if (space_counter == 2) {\n                    result.push_back('_');\n    \
    \            } else {\n                    result.push_back('-');\n          \
    \      }\n                space_counter = 0;\n            }\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    bool\
    \ underscore_active = false;\n    bool dash_active = false;\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if\
    \ (dash_active) {\n                result += '-';\n            } else if (underscore_active)\
    \ {\n                result += '_';\n            } else {\n                result\
    \ += '_';\n                underscore_active = true;\n            }\n        }\
    \ else {\n            if (underscore_active) {\n                dash_active =\
    \ true;\n            }\n            underscore_active = false;\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "  for (int i = 0; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      if (i == 0) {\n        // text.erase(i,\
    \ 1);\n        text.replace(i, 1, \"_\");\n      } else if (text[i-1] == ' ')\
    \ {\n        text.replace(i, 1, \"-\");\n      } else {\n        text.replace(i,\
    \ 1, \"_\");\n      }\n    }\n  }\n  if (text[0] == '_') {\n    text.erase(0,\
    \ 1);\n  }\n  return text;", "\t// std::string result = \"\";\n\t// // while(true){\n\
    \t// // \tif(text[0] == ' '){\n\t// // \t\tresult += '-';\n\t// // \t\ttext.erase(0,1);\n\
    \t// // \t}\n\t// // \telse{\n\t// // \t\tbreak;\n\t// // \t}\n\t// // }\n\t//\
    \ for(int i = 0; i < text.length(); i++){\n\t// \tif(text[i] == ' '){\n\t// \t\
    \tif(text[i+1] == ' '){\n\t// \t\t\tresult += '-';\n\t// \t\t\twhile(text[i+1]\
    \ == ' '){\n\t// \t\t\t\ti++;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t\telse{\n\t//\
    \ \t\t\tresult += '_';\n\t// \t\t}\n\t// \t}\n\t// \telse{\n\t// \t\tresult +=\
    \ text[i];\n\t// \t}\n\t// }\n\t// // while(true){\n\t// // \tif(text[text.length()-1]\
    \ == ' '){\n\t// // \t\tresult += '-';\n\t// // \t\ttext.erase(text.length()-1,\
    \ 1);\n\t// // \t}\n\t// // \telse{\n\t// // \t\tbreak;\n\t// // \t}\n\t// //\
    \ }\n\t// return result;\n\tint i = 0;\n\twhile(text[i] == ' '){\n\t\ttext[i]\
    \ = '-';\n\t\ti++;\n\t}\n\tfor(int i = 0; i < text.length(); i++){\n\t\tif(text[i]\
    \ == ' '){\n\t\t\tif(text[i+1] == ' '){\n\t\t\t\ttext[i] = '-';\n\t\t\t\twhile(text[i+1]\
    \ == ' '){\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{", "  int m = text.length();\n\
    \  for(int i = 0; i < m; i++) {\n    if(text[i] == ' ') {\n      int c = 1;\n\
    \      int j = i+1;\n      while(text[j] == ' ') {\n        c++;\n        j++;\n\
    \      }\n      if(c == 1) {\n        text[i] = '_';\n      }\n      else if(c\
    \ > 2) {\n        text[i] = '-';\n        for(int k = i+1; k < j; k++) {\n   \
    \       text[k] = '-';\n        }\n      }\n      i = j;\n    }\n  }\n  return\
    \ text;", "  int i, j, count;\n  std::string result = \"\";\n  for (i = 0; i <\
    \ text.length(); i++) {\n    if (text[i] == ' ') {\n      result = result + text[i];\n\
    \      j = i;\n      count = 0;\n      while (text[j] == ' ') {\n        count++;\n\
    \        j++;\n      }\n      if (count > 2) {\n        result = result + '-';\n\
    \        i = j;\n      }\n    } else {\n      result = result + text[i];\n   \
    \ }\n  }\n  std::string final = \"\";\n  for (i = 0; i < result.length(); i++)\
    \ {\n    if (result[i] == ' ') {\n      final = final + '_';\n    } else {\n \
    \     final = final + result[i];\n    }\n  }\n  return final;", "    int length\
    \ = text.length();\n    std::string s = \"\";\n    int count = 0;\n    for(int\
    \ i = 0; i < length; i++) {\n        if(text[i] == ' ') {\n            count++;\n\
    \            if(count == 1) {\n                s += '_';\n            }\n    \
    \        else if(count > 2) {\n                s += '-';\n            }\n    \
    \    }\n        else {\n            s += text[i];\n            count = 0;\n  \
    \      }\n    }\n    return s;", "\tstd::string ntext;\n\tint n = text.length();\n\
    \tint i;\n\tfor(i=0;i<n;i++) {\n\t\tif(text[i] == ' ') {\n\t\t\tif(i!=0 && text[i-1]\
    \ == ' ')\n\t\t\t\tntext.append(\"-\");\n\t\t\telse\n\t\t\t\tntext.append(\"_\"\
    );\n\t\t}\n\t\telse\n\t\t\tntext.append(1,text[i]);\n\t}\n\treturn ntext;", " \
    \   int count = 0;\n    int len = text.length();\n    char *str = new char[len+1];\n\
    \    //str[len] = '\\0';\n    std::string ans;\n    for(int i=0;i<len;i++){\n\
    \        if(text[i]==' '){\n            if(count>0){\n                if(count>2){\n\
    \                    ans+='-';\n                }\n                else{\n   \
    \                 ans+='_';\n                }\n                count = 0;\n \
    \           }\n            else{\n                count++;\n            }\n  \
    \      }\n        else{\n            ans+=text[i];\n        }\n    }\n    return\
    \ ans;", "    std::string res = \"\";\n    for (auto x : text) {\n        if (x\
    \ == ' ') {\n            res += '_';\n        } else {\n            res += x;\n\
    \        }\n    }\n    for (int i = 0; i < res.size(); i++) {\n        if (res[i]\
    \ == '_' && res[i+1] == '_') {\n            if (res[i+2] == '_') {\n         \
    \       res[i] = '-';\n                res.erase(i+1, 1);\n            } else\
    \ {\n                res.erase(i, 1);\n            }\n        }\n    }\n    return\
    \ res;", "    int numOfSpace = 0;\n    int startIndex = 0;\n    int counter =\
    \ 0;\n    std::string result;\n    bool isStart = false;\n    bool isEnd = false;\n\
    \    bool isSentence = false;\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') {\n            numOfSpace++;\n            if (numOfSpace\
    \ == 1) {\n                startIndex = i;\n            }\n            if (numOfSpace\
    \ > 2) {\n                isSentence = true;\n            }\n        } else {\n\
    \            if (numOfSpace == 1) {\n                isStart = true;\n       \
    \     }\n            if (numOfSpace > 2) {\n                isEnd = true;\n  \
    \          }\n            if (i == text.length() - 1) {\n                isEnd\
    \ = true;\n            }\n            if (isStart == true && isEnd == true) {\n\
    \                numOfSpace = 1;\n                isSentence = false;\n      \
    \          isStart = false;\n                isEnd = false;\n            }\n \
    \           numOfSpace = 0;\n        }\n        if (i == text.length() - 1) {\n\
    \            if (text[i] == ' ') {\n                isEnd = true;\n          \
    \  }\n        }\n        if (isSentence == true) {\n            text[startIndex]\
    \ = '-';\n            for (int j = startIndex + 1; j < i; j++) {\n           \
    \     text[j] = ' ';\n            }\n        }\n        if (isStart == true &&\
    \ isEnd == true) {\n            text[startIndex] = '_';\n            for (int\
    \ j = startIndex + 1; j < i; j++) {\n                text[j] = ' ';\n        \
    \    }\n        }\n    }\n    for (int i = 0; i < text.length(); i++) {\n    \
    \    if (text[i] != ' ') {\n            result.push_back(text[i]);\n        }\n\
    \    }\n    return result;", '    return "";', "    // solution 1\n    // for\
    \ (int i = 0; i < text.length(); i++) {\n    //     if (text[i] == ' ') {\n  \
    \  //         if (i == 0) {\n    //             text[i] = '_';\n    //       \
    \  } else if (text[i + 1] == ' ') {\n    //             text[i] = '-';\n    //\
    \         } else {\n    //             text[i] = '_';\n    //         }\n    //\
    \     }\n    // }\n    // solution 2\n    int n = text.length();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (text[i] == ' ') {\n            if (i == 0)\
    \ {\n                text[i] = '_';\n            } else if (text[i + 1] == ' ')\
    \ {\n                text[i] = '-';\n            } else {\n                text[i]\
    \ = '_';\n            }\n        }\n    }\n    return text;", "\tstd::string res;\n\
    \tint n = text.size();\n\tint num_spaces = 0;\n\tint state = 0;\n\tfor (int i\
    \ = 0; i < n; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tnum_spaces++;\n\t\t\tif\
    \ (num_spaces >= 2)\n\t\t\t\tstate = 1;\n\t\t}\n\t\telse {\n\t\t\tif (num_spaces\
    \ == 1)\n\t\t\t\tres += '_';\n\t\t\telse if (num_spaces >= 2)\n\t\t\t\tres +=\
    \ '-';\n\t\t\tres += text[i];\n\t\t\tnum_spaces = 0;\n\t\t\tstate = 0;\n\t\t}\n\
    \t}\n\tif (num_spaces == 1)\n\t\tres += '_';\n\telse if (num_spaces >= 2)\n\t\t\
    res += '-';\n\treturn res;", "\tsize_t pos = text.find(\"  \");\n\tsize_t found\
    \ = pos;\n\twhile (pos != std::string::npos) {\n\t\tfound = pos;\n\t\tpos = text.find(\"\
    \  \", pos + 1);\n\t}\n\tif (found != std::string::npos) {\n\t\ttext.replace(found,\
    \ 2, \"-\");\n\t}\n\tpos = text.find(\" \");\n\twhile (pos != std::string::npos)\
    \ {\n\t\ttext.replace(pos, 1, \"_\");\n\t\tpos = text.find(\" \", pos + 1);\n\t\
    }\n\treturn text;", "    std::string result=\"\";\n    int count=0;\n    for(int\
    \ i=0;i<text.length();i++){\n        if(text[i]==' '){\n            count++;\n\
    \            if(count==1){\n                result+=\"_\";\n            }\n  \
    \          else if(count==2){\n                result+=\"_\";\n            }\n\
    \            else if(count>2){\n                result+=\"-\";\n            }\n\
    \        }\n        else{\n            count=0;\n            result+=text[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    int\
    \ count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n        } else {\n            count = 0;\n\
    \        }\n        if (count < 2) {\n            result += text[i];\n       \
    \ } else if (count == 2) {\n            result += '_';\n        } else {\n   \
    \         result += '-';\n        }\n    }\n    return result;", "  for (int i\
    \ = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n\
    \    }\n  }\n  int counter = 0;\n  for (int i = 0; i < text.size(); i++) {\n \
    \   if (text[i] == '_') {\n      counter++;\n    }\n    else {\n      counter\
    \ = 0;\n    }\n    if (counter > 2) {\n      text[i] = '-';\n    }\n  }\n  return\
    \ text;", "    std::string result;\n    int spacecount = 0;\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (isspace(text[i])) {\n            spacecount++;\n\
    \            if (spacecount == 2) {\n                result.push_back('_');\n\
    \            }\n            if (spacecount == 3) {\n                result.push_back('-');\n\
    \            }\n        } else {\n            spacecount = 0;\n            result.push_back(text[i]);\n\
    \        }\n    }\n    return result;", "\t// replace(\"text\",\"_\")\n\tint i;\n\
    \tint n = text.length();\n\tfor(i=0;i<n;i++){\n\t\tif(text[i]==' '){\n\t\t\t//\
    \ std::replace(text[i],text[i+1],'_');\n\t\t\ttext[i] = '_';\n\t\t}\n\t}\n\t//\
    \ find and replace consecutive blanks with -\n\t// std::replace(text.begin(),text.end(),'_','-');\n\
    \tint i,j;\n\tint n = text.length();\n\tfor(i=0;i<n;i++){\n\t\tif(text[i]=='_'){\n\
    \t\t\tfor(j=i+1;j<n;j++){\n\t\t\t\tif(text[j]!='_'){\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\tif(j-i>2){\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\t}\n\t\
    return text;", "    int count = 0;\n    int len = text.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(text[i] == ' ') {\n            count++;\n\
    \        }\n    }\n    if(count == 0) {\n        return text;\n    }\n    else\
    \ if(count == 1) {\n        for(int i = 0; i < len; i++) {\n            if(text[i]\
    \ == ' ') {\n                text[i] = '_';\n            }\n        }\n      \
    \  return text;\n    }\n    else {\n        if(text[0] == ' ') {\n           \
    \ text[0] = '_';\n        }\n        if(text[len-1] == ' ') {\n            text[len-1]\
    \ = '_';\n        }\n        for(int i = 1; i < len; i++) {\n            if(text[i]\
    \ == ' ' && text[i-1] == ' ') {\n                text[i] = '-';\n            }\n\
    \            else if(text[i] == ' ' && text[i-1] != ' ') {\n                text[i]\
    \ = '_';\n            }\n        }\n        return text;\n    }", "\tsize_t i\
    \ = 0;\n\twhile (i < text.size()) {\n\t\tif (text[i] == ' ') {\n\t\t\tint count\
    \ = 0;\n\t\t\twhile (text[i] == ' ') {\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\
    }\n\t\t\tif (count == 1) {\n\t\t\t\ttext[i - 1] = '_';\n\t\t\t} else if (count\
    \ == 2) {\n\t\t\t\ttext[i - 1] = '_';\n\t\t\t\ttext[i - 2] = '_';\n\t\t\t} else\
    \ {\n\t\t\t\ttext[i - 1] = '-';\n\t\t\t\ttext[i - 2] = '-';\n\t\t\t\ttext[i -\
    \ 3] = '-';\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn text;", "    int i = 0;\n\
    \    int count = 0;\n    while(i < text.length()){\n        if(text[i] == ' '){\n\
    \            count++;\n            text.erase(i,1);\n        }\n        else{\n\
    \            count = 0;\n            i++;\n        }\n        if(count == 3){\n\
    \            text.insert(i-1,\"-\");\n            count = 0;\n        }\n    \
    \    else if(count == 2){\n            text.insert(i-1,\"_\");\n            count\
    \ = 0;\n        }\n    }\n    if(text[0] == ' '){\n        text.erase(0,1);\n\
    \        text.insert(0,\"_\");\n    }\n    return text;", "\t//std::cout << text\
    \ << std::endl;\n\t//std::cout << text.size() << std::endl;\n\tfor (int i = 0;\
    \ i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\
    \t}\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif\
    \ (text[i] == '_') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t\
    }\n\t\tif (count == 3) {\n\t\t\ttext[i] = '-';\n\t\t\tcount = 0;\n\t\t}\n\t}\n\
    \treturn text;", "    std::string new_string;\n    std::string underscore = \"\
    _\";\n    std::string dash = \"-\";\n    std::string space = \" \";\n    int consecutive_space_counter\
    \ = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ space[0]) {\n            consecutive_space_counter++;\n            if (consecutive_space_counter\
    \ == 1) {\n                new_string += underscore;\n            }\n        \
    \    if (consecutive_space_counter > 2) {\n                new_string += dash;\n\
    \            }\n        }\n        else {\n            consecutive_space_counter\
    \ = 0;\n            new_string += text[i];\n        }\n    }\n    return new_string;",
  "\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\t\
    int count = 0;\n\t\t\tint j = i;\n\t\t\twhile (text[j] == ' ') {\n\t\t\t\tj++;\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count > 2) {\n\t\t\t\ttext[i] = '-';\n\t\t\
    \t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\ttext[k] = ' ';\n\t\t\t\t}\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
  "    int num = 0;\n    for (auto x : text)\n        if (x == ' ')\n            num++;\n\
    \    if (num == 0)\n        return text;\n    std::string result;\n    for (auto\
    \ x : text) {\n        if (x == ' ') {\n            if (num >= 2) {\n        \
    \        result += '-';\n                num = 0;\n            }\n           \
    \ else\n                result += '_';\n        }\n        else {\n          \
    \  result += x;\n            num = 0;\n        }\n    }\n    return result;",
  "  // Your code goes here\n  int l=text.length();\n  int c=0;\n  int i=0;\n  while(i<l){\n\
    \  \tif(text[i]==' '){\n  \t\tint j=i;\n  \t\twhile(text[j]==' '){\n  \t\t\tc++;\n\
    \  \t\t\tj++;\n  \t\t}\n  \t\tif(c>2){\n  \t\t\tint k=i;\n  \t\t\twhile(k<j){\n\
    \  \t\t\t\ttext[k]='-';\n  \t\t\t\tk++;\n  \t\t\t}\n  \t\t}\n  \t\telse{\n  \t\
    \t\tint k=i;\n  \t\t\twhile(k<j){\n  \t\t\t\ttext[k]='_';\n  \t\t\t\tk++;\n  \t\
    \t\t}\n  \t\t}\n  \t\ti=j;\n  \t\tc=0;\n  \t}\n  \telse{\n  \t\ti++;\n  \t}\n\
    \  }\n  return text;", "    std::string ans;\n    for(int i = 0; i < text.size();\
    \ i++) {\n        // if(text[i] == ' ' && text[i+1] == ' ') {\n        //    \
    \ ans.append(\"-\");\n        // }\n        // else if(text[i] == ' ' && text[i+1]\
    \ != ' ') {\n        //     ans.append(\"_\");\n        // }\n        // else\
    \ {\n        //     ans.append(1, text[i]);\n        // }\n        ans.append(1,\
    \ text[i]);\n    }\n    return ans;", "    std::string modified = \"\";\n    int\
    \ space_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (text[i] == ' ') {\n            space_count++;\n            if (space_count\
    \ == 2) {\n                modified += '-';\n            }\n        } else {\n\
    \            if (space_count == 1) {\n                modified += '_';\n     \
    \       }\n            modified += text[i];\n            space_count = 0;\n  \
    \      }\n    }\n    return modified;", "    std::string result = \"\";\n    int\
    \ count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n        } else {\n            count = 0;\n\
    \        }\n        if (count == 1) {\n            result += \"_\";\n        }\
    \ else if (count == 2) {\n            result += \"_\";\n        } else if (count\
    \ > 2) {\n            result += \"-\";\n        } else {\n            result +=\
    \ text[i];\n        }\n    }\n    return result;", "    std::string ans;\n   \
    \ if(text.size()==0) return ans;\n    ans += text[0];\n    int c = 1;\n    for(int\
    \ i=1;i<text.size();i++){\n        if(text[i] == ' '){\n            if(text[i-1]\
    \ == ' ') c++;\n            else c = 1;\n            if(c>2) continue;\n     \
    \       ans += '_';\n        }\n        else if(text[i] != ' '){\n           \
    \ if(text[i-1] == ' ' && c>2) ans += '-';\n            ans += text[i];\n     \
    \   }\n    }\n    return ans;", "    int num_spaces = 0;\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ') {\n            num_spaces++;\n\
    \        }\n    }\n    if (num_spaces == 0) {\n        return text;\n    }\n \
    \   std::string res(text.length() + num_spaces, ' ');\n    int pos = 0;\n    bool\
    \ consecutive = false;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] == ' ') {\n            if (consecutive) {\n                res[pos]\
    \ = '-';\n            } else {\n                res[pos] = '_';\n            }\n\
    \            consecutive = true;\n            pos++;\n        } else {\n     \
    \       res[pos] = text[i];\n            consecutive = false;\n            pos++;\n\
    \        }\n    }\n    return res;", "    std::string str;\n    int count=0;\n\
    \    for(int i=0;i<text.length();i++){\n        if(i==0 && text[i]==' '){\n  \
    \          continue;\n        }\n        if(text[i]==' '){\n            count++;\n\
    \            if(count>2){\n                str+='-';\n                count=0;\n\
    \            }\n            else{\n                str+='_';\n            }\n\
    \        }\n        else{\n            str+=text[i];\n            count=0;\n \
    \       }\n    }\n    return str;", "    std::string newString = \"\";\n    int\
    \ count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i]\
    \ == ' ') {\n            count++;\n            if(count == 2) {\n            \
    \    newString = newString + '-';\n                count = 0;\n            }\n\
    \        } else {\n            if(count == 1) {\n                newString = newString\
    \ + '_';\n                count = 0;\n            }\n            newString = newString\
    \ + text[i];\n        }\n    }\n    return newString;", "  std::string new_text\
    \ = \"\";\n  // Start replace multiple space with a single space.\n  char space_char\
    \ = ' ';\n  size_t count = 1;\n  for (int i = 0; i < text.length(); i++) {\n \
    \   if (text[i] == space_char) {\n      if (count == 1) {\n        new_text +=\
    \ text[i];\n      }\n      count++;\n    } else {\n      new_text += text[i];\n\
    \      count = 1;\n    }\n  }\n  // End of multiple space with a single space.\n\
    \  int prev_space_count = 0;\n  count = 0;\n  for (int i = 0; i < new_text.length();\
    \ i++) {\n    if (new_text[i] == space_char) {\n      prev_space_count = count;\n\
    \      count++;\n    } else {\n      count = 0;\n    }\n    if (count >= 2) {\n\
    \      // Remove the space and shift all left.\n      for (int j = i; j < new_text.length();\
    \ j++) {\n        new_text[j] = new_text[j + 1];\n      }\n      // Start replace\
    \ space with underscore.\n      if (prev_space_count == 0) {\n        new_text[i]\
    \ = '_';\n      } else {\n        new_text[i] = '-';\n      }\n      i--;\n  \
    \    count = 1;\n    }\n  }\n  return new_text;", "\t// replace all spaces with\
    \ underscores\n\ttext = std::regex_replace(text, std::regex(\" \"), \"_\");\n\t\
    // replace more than 2 consecutive spaces with -\n\ttext = std::regex_replace(text,\
    \ std::regex(\"_+\"), \"-\");\n\treturn text;", "    std::string result;\n   \
    \ size_t spacesCount = 0;\n    for (size_t i = 0; i < text.size(); i++) {\n  \
    \      if (text[i] == ' ') {\n            spacesCount++;\n        } else {\n \
    \           if (spacesCount == 0) {\n                result += text[i];\n    \
    \        } else if (spacesCount == 1) {\n                result += '_';\n    \
    \            result += text[i];\n            } else if (spacesCount == 2) {\n\
    \                result += '_';\n                result += text[i];\n        \
    \    } else {\n                result += '-';\n                result += text[i];\n\
    \            }\n            spacesCount = 0;\n        }\n    }\n    return result;",
  "\tint count = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ == ' ') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\t\
    if (count > 2) {\n\t\t\ttext[i] = '-';\n\t\t}\n\t\telse if (count == 1) {\n\t\t\
    \ttext[i] = '_';\n\t\t}\n\t}\n\treturn text;", "    // your code here\n    return\
    \ text;", "\t//your code goes here\n    int space = 0;\n    for(int i = 0; i <\
    \ text.length(); i++){\n        if(text[i] == ' '){\n            space++;\n  \
    \      }\n    }\n    if(space <= 1){\n        for(int i = 0; i < text.length();\
    \ i++){\n            if(text[i] == ' '){\n                text[i] = '_';\n   \
    \         }\n        }\n    }\n    else if(space == 2){\n        for(int i = 0;\
    \ i < text.length(); i++){\n            if(text[i] == ' '){\n                text[i]\
    \ = '_';\n            }\n        }\n    }\n    else{\n        for(int i = 0; i\
    \ < text.length(); i++){\n            if(text[i] == ' '){\n                text[i]\
    \ = '-';\n            }\n        }\n    }\n    return text;", "    std::string\
    \ ans;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ')\
    \ {\n            if(ans.size() == 0) {\n                ans += '_';\n        \
    \    } else if(ans[ans.size() - 1] == '_') {\n                ans += '-';\n  \
    \          } else {\n                ans += '_';\n            }\n        } else\
    \ {\n            ans += text[i];\n        }\n    }\n    return ans;", "    //\
    \ Write your code here\n    int n = text.length();\n    std::string res = \"\"\
    ;\n    for(int i = 0; i < n; i++){\n        if(text[i] == ' '){\n            if(res.length()\
    \ > 0){\n                if(res[res.length() - 1] == '_'){\n                 \
    \   res.push_back('-');\n                }else{\n                    res.push_back('_');\n\
    \                }\n            }\n        }else{\n            res.push_back(text[i]);\n\
    \        }\n    }\n    return res;", "    std::string line = \"\";\n    bool is_first_space\
    \ = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            if (is_first_space) {\n                line += '_';\n\
    \                is_first_space = false;\n            } else {\n             \
    \   line += '-';\n            }\n        } else {\n            line += text[i];\n\
    \            is_first_space = true;\n        }\n    }\n    return line;", "  \
    \  bool more_than_2_spaces = false;\n    // Iterate over the string\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        // If there is a space\n        if\
    \ (text[i] == ' ') {\n            // Check for 2 spaces in a row\n           \
    \ if (text[i] == text[i + 1]) {\n                // Set the flag to true\n   \
    \             more_than_2_spaces = true;\n            }\n            // Change\
    \ the second space to '-'\n            if (more_than_2_spaces) {\n           \
    \     text[i + 1] = '-';\n            }\n            // Change the first space\
    \ to '_'\n            else {\n                text[i] = '_';\n            }\n\
    \        }\n        // If there is not a space\n        else {\n            //\
    \ Set the flag to false\n            more_than_2_spaces = false;\n        }\n\
    \    }\n    return text;", "\tstd::string s = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ts = s + '_';\n\t\t}\n\t\telse {\n\t\
    \t\ts = s + text[i];\n\t\t}\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] == '_') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t\tif (count == 3) {\n\t\t\ts[i] = '-';\n\t\t\ts[i - 1] = '-';\n\
    \t\t\ts[i - 2] = '-';\n\t\t\ts[i - 3] = '-';\n\t\t}\n\t}\n\treturn s;", "    \n\
    \    return \"\";", "    std::string s = \"\";\n    int count = 0;\n    for(int\
    \ i = 0; i < text.length(); i++) {\n        if(text[i] == ' ' && count < 2) {\n\
    \            s += '_';\n            count++;\n        }\n        else if(text[i]\
    \ == ' ' && count >= 2) {\n            s += '-';\n            count++;\n     \
    \   }\n        else {\n            s += text[i];\n            count = 0;\n   \
    \     }\n    }\n    return s;", "    std::string x;\n    int n = text.length();\n\
    \    int i;\n    for(i=0;i<n;i++)\n    {\n        if(text[i] == ' ')\n       \
    \ {\n            if(i == 0)\n            {\n                continue;\n      \
    \      }\n            else if(text[i-1] == ' ')\n            {\n             \
    \   x += \"-\";\n            }\n            else\n            {\n            \
    \    x += \"_\";\n            }\n        }\n        else\n        {\n        \
    \    x += text[i];\n        }\n    }\n    return x;", "    // add your code here\n\
    \    string result;\n    bool flag = false;\n    for(int i = 0; i < text.length();\
    \ i++){\n        if(text[i] == ' '){\n            if(!flag){\n               \
    \ result.push_back('_');\n                flag = true;\n            }\n      \
    \      else{\n                continue;\n            }\n        }\n        else{\n\
    \            flag = false;\n            result.push_back(text[i]);\n        }\n\
    \    }\n    // add your code here\n    int no_of_dashes = 0;\n    for(int i =\
    \ 0; i < result.length(); i++){\n        if(result[i] == '_'){\n            no_of_dashes++;\n\
    \        }\n    }\n    if(no_of_dashes >= 2){\n        for(int i = 0; i < result.length();\
    \ i++){\n            if(result[i] == '_'){\n                result[i] = '-';\n\
    \            }\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
