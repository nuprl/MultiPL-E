language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    float tmp = std::ceil(lst[i]);\n   \
    \ result += tmp * tmp;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(float\
    \ num : lst){\n    sum += ceil(num) * ceil(num);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  int\
    \ square = 0;\n  for(std::vector<float>::iterator it = lst.begin(); it != lst.end();\
    \ ++it)\n  {\n    square += ceil((*it)*(*it));\n  }\n  return square;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpyhk4567k: /tmp/tmpyhk4567k.cpp:31: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\t// std::cout << lst[i] << std::endl;\n\t\t\
    if (lst[i] < 0)\n\t\t\tlst[i] = -1*lst[i];\n\t\tsum += ceil(lst[i])*ceil(lst[i]);\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpijhykoh5: /tmp/tmpijhykoh5.cpp:33: int main(): Assertion `candidate((std::vector<float>({(float)-2.4,
    (float)1.0, (float)1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(float\
    \ x:lst){\n        long p = ceil(x);\n        sum+=p*p;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    float sum=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        sum+=lst[i]*lst[i];\n    }\n    return ceil(sum);\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpofbri5bm: /tmp/tmpofbri5bm.cpp:29: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\t// Write your code here.\n\
    \tlong sum=0;\n\tfor(auto i:lst)\n\t{\n\t\tsum+=ceil(i)*ceil(i);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        float val = lst[i];\n        int temp\
    \ = ceil(val);\n        sum += (temp * temp);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif(lst.size() == 0) return\
    \ 0;\n\tlong sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += pow(ceil(lst[i]),\
    \ 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
