language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    float tmp = std::ceil(lst[i]);\n   \
    \ result += tmp * tmp;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(float\
    \ num : lst){\n    sum += ceil(num) * ceil(num);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  int\
    \ square = 0;\n  for(std::vector<float>::iterator it = lst.begin(); it != lst.end();\
    \ ++it)\n  {\n    square += ceil((*it)*(*it));\n  }\n  return square;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpyhk4567k: /tmp/tmpyhk4567k.cpp:31: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\t// std::cout << lst[i] << std::endl;\n\t\t\
    if (lst[i] < 0)\n\t\t\tlst[i] = -1*lst[i];\n\t\tsum += ceil(lst[i])*ceil(lst[i]);\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpijhykoh5: /tmp/tmpijhykoh5.cpp:33: int main(): Assertion `candidate((std::vector<float>({(float)-2.4,
    (float)1.0, (float)1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(float\
    \ x:lst){\n        long p = ceil(x);\n        sum+=p*p;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    float sum=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        sum+=lst[i]*lst[i];\n    }\n    return ceil(sum);\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpofbri5bm: /tmp/tmpofbri5bm.cpp:29: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\t// Write your code here.\n\
    \tlong sum=0;\n\tfor(auto i:lst)\n\t{\n\t\tsum+=ceil(i)*ceil(i);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        float val = lst[i];\n        int temp\
    \ = ceil(val);\n        sum += (temp * temp);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif(lst.size() == 0) return\
    \ 0;\n\tlong sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += pow(ceil(lst[i]),\
    \ 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  std::vector<int>::iterator\
    \ it;\n  for (it = lst.begin(); it != lst.end(); it++) {\n    std::cout << *it\
    \ << std::endl;\n    sum += std::ceil(*it) * std::ceil(*it);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbm4n9m80.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmpbm4n9m80.cpp:20:23: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019} and \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019})\n  \
    \ 20 |   for (it = lst.begin(); it != lst.end(); it++) {\n      |            \
    \           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbm4n9m80.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:784:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >& __gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator=(const __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >&)\u2019\n  784 |     class __normal_iterator\n      |   \
    \        ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:\
    \   no known conversion for argument 1 from \u2018std::vector<float>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019}\
    \ to \u2018const __gnu_cxx::__normal_iterator<int*, std::vector<int> >&\u2019\n\
    /usr/include/c++/9/bits/stl_iterator.h:784:11: note: candidate: \u2018constexpr\
    \ __gnu_cxx::__normal_iterator<int*, std::vector<int> >& __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >::operator=(__gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >&&)\u2019\n/usr/include/c++/9/bits/stl_iterator.h:784:11: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<float*, std::vector<float> >\u2019} to \u2018\
    __gnu_cxx::__normal_iterator<int*, std::vector<int> >&&\u2019\n/tmp/tmpbm4n9m80.cpp:20:29:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::vector<int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<int*"
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int s = 0;\n  for(auto i\
    \ : lst) {\n    s += ceil(i) * ceil(i);\n  }\n  return s;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif (lst.size() == 0)\n\t\
    \treturn 0;\n\tlong long int sum = 0;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(float\
    \ a : lst) {\n    ans += std::ceil(a) * std::ceil(a);\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ const& num : lst) {\n    sum += ceil(num) * ceil(num);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    int i;\n\
    \    for(i=0;i<lst.size();i++)\n    {\n        sum+=((ceil(lst[i]))*(ceil(lst[i])));\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (auto &item : lst) {\n    if (item > 0) {\n      result += (long) ceil(item)\
    \ * (long) ceil(item);\n    } else {\n      result += (long) floor(item) * (long)\
    \ floor(item);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpl5832b7g: /tmp/tmpl5832b7g.cpp:34: int main(): Assertion `candidate((std::vector<float>({(float)-2.4,
    (float)1.0, (float)1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ x : lst) {\n        sum += (long)ceil(x) * (long)ceil(x);\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132249
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\
    \treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ v : lst)\n    sum += ceil(v) * ceil(v);\n  return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ number : lst){\n        number = ceil(number);\n        sum += number * number;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  float sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    lst[i] = ceil(lst[i]);\n    sum += pow(lst[i],\
    \ 2);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  std::vector<int> v;\n  for(auto\
    \ f: lst)\n    v.push_back(std::ceil(f));\n  long result=0;\n  for(auto e: v)\n\
    \    result+=e*e;\n  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    sum += lst[i]\
    \ * lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long answer = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    answer += (long)ceil(lst[i]) * (long)ceil(lst[i]);\n\
    \  }\n  return answer;\n}\nint main() {\n    auto candidate = sum_squares;\n \
    \   assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  int\
    \ sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] >= 0)\n    \
    \  sum += ceil(lst[i]) * ceil(lst[i]);\n    else\n      sum += floor(lst[i]) *\
    \ floor(lst[i]);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp3c9q51j7: /tmp/tmp3c9q51j7.cpp:34: int main(): Assertion `candidate((std::vector<float>({(float)-2.4,
    (float)1.0, (float)1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tstd::transform(lst.begin(),\
    \ lst.end(), lst.begin(), [](float x) {\n\t\treturn std::ceil(x);\n\t});\n\tlong\
    \ result = 0;\n\tfor (auto it = lst.begin(); it != lst.end(); ++it) {\n\t\tresult\
    \ += *it * *it;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132249
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        float element = lst[i];\n        float\
    \ ceil = ceil(element);\n        int a = ceil*ceil;\n        sum = sum + a;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph45jhn2j.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmph45jhn2j.cpp:21:34: error: \u2018ceil\u2019 cannot be used as a function\n\
    \   21 |         float ceil = ceil(element);\n      |                        \
    \          ^\n"
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong x=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n\t\tx=x+ceil(lst[i])*ceil(lst[i]);\n\t}\n\treturn x;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        ans +=\
    \ (lst[i] * lst[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tsum+=std::ceil(lst[i])*std::ceil(lst[i]);\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here.\n  int\
    \ i;\n  long result=0;\n  for(i=0;i<lst.size();i++)\n  {\n    lst[i]=ceil(lst[i]);\n\
    \    result+=(long)pow(lst[i],2);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n   long sum = 0;\n   for(auto\
    \ i: lst)\n   {\n       sum += (long)ceil(i)*(long)ceil(i);\n   }\n   return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // your code here\n  \
    \  long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += pow(ceil(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long res = 0;\n    std::vector<int>\
    \ int_lst;\n    for (float elem : lst) {\n        int_lst.push_back(std::ceil(elem));\n\
    \    }\n    for (int elem : int_lst) {\n        res += std::pow(elem, 2);\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long res = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        res += pow(ceil(lst[i]), 2);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  long\
    \ sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) *\
    \ ceil(lst[i]);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tlst[i] = ceil(lst[i]);\n\t\tsum += lst[i]\
    \ * lst[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float\
    \ f : lst) {\n\t\tsum += ceil(f) * ceil(f);\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tstd::vector<float>::iterator\
    \ it;\n\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tsum += (long)ceil(*it)\
    \ * (long)ceil(*it);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong total = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\ttotal += (long)ceil(lst[i]) * (long)ceil(lst[i]);\n\
    \t}\n\treturn total;\n}\nint main() {\n    auto candidate = sum_squares;\n   \
    \ assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    lst[i]=ceil(lst[i]);\n    sum+=(lst[i]*lst[i]);\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int i;\n    float v1;\n\
    \    float v2;\n    float v3;\n    float v4;\n    float v5;\n    float v6;\n \
    \   float v7;\n    float v8;\n    float v9;\n    float v10;\n    float v11;\n\
    \    float v12;\n    float v13;\n    float v14;\n    float v15;\n    float v16;\n\
    \    float v17;\n    float v18;\n    float v19;\n    float v20;\n    float v21;\n\
    \    float v22;\n    float v23;\n    float v24;\n    float v25;\n    float v26;\n\
    \    float v27;\n    float v28;\n    float v29;\n    float v30;\n    float v31;\n\
    \    float v32;\n    float v33;\n    float v34;\n    float v35;\n    float v36;\n\
    \    float v37;\n    float v38;\n    float v39;\n    float v40;\n    float v41;\n\
    \    float v42;\n    float v43;\n    float v44;\n    float v45;\n    float v46;\n\
    \    float v47;\n    float v48;\n    float v49;\n    float v50;\n    float v51;\n\
    \    float v52;\n    float v53;\n    float v54;\n    float v55;\n    float v56;\n\
    \    float v57;\n    float v58;\n    float v59;\n    float v60;\n    float v61;\n\
    \    float v62;\n    float v63;\n    float v64;\n    float v65;\n    float v66;\n\
    \    float v67;\n    float v68;\n    float v69;\n    float v70;\n    float v71;\n\
    \    float v72;\n    float v73;\n    float v74;\n    float v75;\n    float v76;\n\
    \    float v77;\n    float v78;\n    float v79;\n    float v80;\n    float v81;\n\
    \    float v82;\n    float v83;\n    float v84;\n    float\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjwghx8sx.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmpjwghx8sx.cpp:104:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  104 | }\n      | ^\n/tmp/tmpjwghx8sx.cpp:104:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tlst[i] = ceil(lst[i]);\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tsum += lst[i] * lst[i];\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\nlong sum = 0;\nfor(float f\
    \ : lst)\n{\n    sum += std::ceil(f) * std::ceil(f);\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ap879ey.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmp3ap879ey.cpp:23:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   23 | int main() {\n      |            ^\n/tmp/tmp3ap879ey.cpp:37:1:\
    \ error: expected \u2018}\u2019 at end of input\n   37 | }\n      | ^\n/tmp/tmp3ap879ey.cpp:17:42:\
    \ note: to match this \u2018{\u2019\n   17 | long sum_squares(std::vector<float>\
    \ lst) {\n      |                                          ^\n/tmp/tmp3ap879ey.cpp:37:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   37 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ num : lst){\n        int x = ceil(num);\n        sum += x*x;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    long number = (long)lst[i];\n    sum += number\
    \ * number;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpsofj8kjh: /tmp/tmpsofj8kjh.cpp:30: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132251
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += ceil(i) * ceil(i);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  for(int i=0;i<lst.size();i++){\n\
    \    lst[i] = ceil(lst[i]);\n  }\n  long sum = 0;\n  for(int i=0;i<lst.size();i++){\n\
    \    sum = sum + lst[i]*lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int res = 0;\n    for(auto&\
    \ v : lst)\n        res += std::ceil(v) * std::ceil(v);\n    return res;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132249
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tint sum=0;\n\tint t;\n\t\
    for(int i=0;i<lst.size();i++)\n\t{\n\t\tt=ceil(lst[i]);\n\t\tsum=sum+t*t;\n\t\
    }\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  long\
    \ sum=0;\n  // long a=0;\n  for(int i=0;i<lst.size();i++){\n    lst[i]=ceil(lst[i]);\n\
    \    // cout<<\"lst[i] \"<<lst[i]<<endl;\n    sum+=lst[i]*lst[i];\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (float\
    \ num : lst) {\n\t\tint ceil = std::ceil(num);\n\t\tsum += ceil * ceil;\n\t}\n\
    \treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ &element : lst) {\n    element = ceil(element);\n    sum += element * element;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132252
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong int sum = 0;\n\tfor\
    \ (int i = 0; i < lst.size(); i++) {\n\t\tlst[i] = ceil(lst[i]);\n\t\tsum += (long\
    \ int)pow(lst[i], 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132252
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // Your code here\n  if(lst.size()==0)\n\
    \  return 0;\n  long ans=0;\n  for(auto x:lst)\n  {\n    ans+=(long)ceil(x)*(long)ceil(x);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132252
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  float count = 0;\n  int\
    \ i;\n  float e;\n  for (i = 0; i < lst.size(); i++) {\n    e = ceil(lst[i]);\n\
    \    count += pow(e, 2);\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += (int)lst[i] * (int)lst[i];\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n  \
    \  assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp96tq29x3: /tmp/tmp96tq29x3.cpp:29: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto&\
    \ i : lst) {\n        sum += pow(ceil(i), 2);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float\
    \ num : lst) {\n    int n = ceil(num);\n    sum += n * n;\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    float sum = 0;\n    for(float\
    \ num : lst){\n        int num_int = ceil(num);\n        sum += num_int * num_int;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += (long)std::ceil(lst[i]) * (long)std::ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    lst[i]=ceil(lst[i]);\n    sum+=lst[i]*lst[i];\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  float sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    float n = lst[i];\n    float nn = ceil(n);\n\
    \    sum += nn * nn;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tstd::vector<int> v1;\n\t\
    for(auto &a:lst)\n\t{\n\t\tint n=ceil(a);\n\t\tv1.push_back(n);\n\t}\n\tint sum=0;\n\
    \tfor(auto &a:v1)\n\t{\n\t\tsum+=a*a;\n\t}\n\treturn sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  long\
    \ ans=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    long a=ceil(lst[i]);\n   \
    \ ans+=a*a;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp1a3gu3ic: /tmp/tmp1a3gu3ic.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tlst[i] = ceil(lst[i]);\n\t}\n\treturn lst[0] * lst[0] + lst[1] *\
    \ lst[1] + lst[2] * lst[2];\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmplnpvxslq: /tmp/tmplnpvxslq.cpp:27: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)3.0, (float)5.0, (float)7.0}))) == (84)'' failed.

    '
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = std::ceil(lst[i]);\n        sum\
    \ += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0,\n        [](int acc, float el) {\n            return acc + (int)std::ceil(el)\
    \ * (int)std::ceil(el);\n        });\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  std::vector<float>::iterator\
    \ itr;\n  for(itr = lst.begin(); itr != lst.end(); itr++)\n    sum += (long)std::ceil(*itr)\
    \ * (long)std::ceil(*itr);\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tstd::vector<float> v;\n\t\
    for(int i=0;i<lst.size();i++){\n\t\tlst[i] = ceil(lst[i]);\n\t\tv.push_back(lst[i]);\n\
    \t}\n\tlong val = 0;\n\tfor(int i=0;i<v.size();i++){\n\t\tval += (v[i]*v[i]);\n\
    \t}\n\treturn val;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tfloat temp;\n\tlong sum\
    \ = 0;\n\tfor (std::vector<float>::iterator it = lst.begin(); it != lst.end();\
    \ ++it) {\n\t\ttemp = ceil(*it);\n\t\tsum += (long)pow(temp, 2);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  float sum = 0;\n  for(float\
    \ el: lst){\n    sum += ceil(el) * ceil(el);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tsum += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\
    \treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    std::vector<int> upper_vector;\n\
    \    //upper_vector.push_back(std::ceil(lst[0]));\n    std::vector<float>::iterator\
    \ it;\n    for(it = lst.begin(); it != lst.end(); it++)\n    {\n        int upper_number\
    \ = std::ceil(*it);\n        upper_vector.push_back(upper_number);\n    }\n  \
    \  std::vector<int>::iterator iter;\n    int sum_of_squares = 0;\n    for(iter\
    \ = upper_vector.begin(); iter != upper_vector.end(); iter++)\n    {\n       \
    \ sum_of_squares += (*iter)*(*iter);\n    }\n    return sum_of_squares;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += (int)(ceil(lst[i])) * (int)(ceil(lst[i]));\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tlong x = ceil(lst[i]);\n\t\tlong y = x*x;\n\t\tsum+=y;\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long total=0;\n    for(float\
    \ x:lst){\n        x=ceil(x);\n        total+=x*x;\n    }\n    return total;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Your code here\n  \
    \  long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i])\
    \ * ceil(lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ i : lst){\n        sum += ceil(i) * ceil(i);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\t\n\tfor(int i=0;i<lst.size();i++)\n\
    \t{\n\t\tif(lst[i]>=0)\n\t\t\tlst[i]=std::ceil(lst[i]);\n\t\telse\n\t\t\tlst[i]=std::floor(lst[i]);\n\
    \t}\n\tlong ans=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tans+=(lst[i]*lst[i]);\n\
    \t}\n\treturn ans;\n\t\n}\nint main() {\n    auto candidate = sum_squares;\n \
    \   assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmplhphbn98: /tmp/tmplhphbn98.cpp:40: int main(): Assertion `candidate((std::vector<float>({(float)-2.4,
    (float)1.0, (float)1.0}))) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // Your code here\n  for(int\
    \ i=0;i<lst.size();i++)\n    lst[i] = ceil(lst[i]);\n  long sum = 0;\n  for(int\
    \ i=0;i<lst.size();i++)\n    sum += lst[i]*lst[i];\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ x : lst) {\n        sum += ceil(x) * ceil(x);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    sum += pow(lst[i],\
    \ 2);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    std::transform(lst.begin(),\
    \ lst.end(), lst.begin(), [](float num) { return ceil(num); });\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](long num, float element) { return num + element * element;\
    \ });\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ item : lst){\n        int rounded = ceil(item);\n        sum += rounded * rounded;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result=0;\n  for(int\
    \ i=0;i<lst.size();i++){\n    lst[i]=ceil(lst[i]);\n    result+=(long)pow(lst[i],2);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n \
    \   assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ i : lst){\n        sum += ceil(i) * ceil(i);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float\
    \ ele : lst) {\n    sum += pow(ceil(ele), 2);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  long\
    \ sum=0;\n  for(float i:lst)\n  {\n      long temp=ceil(i);\n      sum+=(temp*temp);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  return -1;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpcf1innz6: /tmp/tmpcf1innz6.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long int sum = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n    \
    \    sum += (lst[i] * lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  std::for_each(lst.begin(),\
    \ lst.end(), [&](float& i){i=ceil(i);});\n  std::vector<long> v;\n  std::transform(lst.begin(),\
    \ lst.end(), std::back_inserter(v),[](float i){return pow(i,2);});\n  return std::accumulate(v.begin(),\
    \ v.end(), 0L);\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long result = 0;\n   \
    \ for (float num : lst) {\n        result += ceil(num) * ceil(num);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\t//your code here\n\tlong\
    \ sum = 0;\n\tfor (int i = 0; i < lst.size(); i++)\n\t{\n\t\tsum += pow(ceil(lst[i]),\
    \ 2);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += (int)ceil(lst[i]) * (int)ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tfloat sum = 0;\n\tfor (float\
    \ x : lst) {\n\t\tsum += (ceil(x)*ceil(x));\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    float sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        float num = lst[i];\n        sum += std::ceil(num)\
    \ * std::ceil(num);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n   long sum;\n   for(int i=0;i<lst.size();i++)\n\
    \    {\n        lst[i]=ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp501kzjwf: /tmp/tmp501kzjwf.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  return std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](int sum, float n) {\n    return sum + std::pow(std::ceil(n),\
    \ 2);\n  });\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long res = 0;\n    for(auto&\
    \ e : lst) {\n        res += std::ceil(e) * std::ceil(e);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(std::vector<float>::iterator\
    \ it=lst.begin();it!=lst.end();it++){\n        *it=ceil(*it);\n        *it=pow(*it,2);\n\
    \        sum+=*it;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum;\n    std::transform(lst.begin(),\
    \ lst.end(), lst.begin(), ceil);\n    std::for_each(lst.begin(), lst.end(), [&sum](int\
    \ x){sum += pow(x, 2);});\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp439zp2xl: /tmp/tmp439zp2xl.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int l = lst.size();\n\
    \    long sum = 0;\n    for(int i = 0; i < l; i++) {\n        lst[i] = std::ceil(lst[i]);\n\
    \        sum += (lst[i] * lst[i]);\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ num : lst){\n        sum += (long)ceil(num) * (long)ceil(num);\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // Write your code here\n\
    \    float sum = 0;\n    for(float x : lst){\n        sum += ceil(x) * ceil(x);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132255
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  std::vector<int> lstint;\n\
    \  for(std::vector<float>::iterator it=lst.begin();it!=lst.end();it++){\n    lstint.push_back(ceil(*it));\n\
    \  }\n  long sum = 0;\n  for(std::vector<int>::iterator it=lstint.begin();it!=lstint.end();it++){\n\
    \    sum+=((*it)*(*it));\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += std::ceil(i) * std::ceil(i);\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        lst[i]=std::ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    //your code here\n   \
    \ long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n\
    \        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ &i : lst) {\n    int k = ceil(i);\n    sum += k * k;\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    // your code here\n  \
    \  long sum=0;\n    for(auto &i:lst)\n    {\n        i=ceil(i);\n        sum+=(long)i*(long)i;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ number : lst) {\n    sum += ceil(number) * ceil(number);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ &x : lst) {\n    sum += (long)std::ceil(x) * (long)std::ceil(x);\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    long tmp = std::ceil(lst[i]);\n    result\
    \ += std::pow(tmp, 2);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(std::vector<float>::iterator\
    \ it = lst.begin(); it != lst.end(); ++it) {\n        sum += ceil(*it) * ceil(*it);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += std::ceil(i) * std::ceil(i);\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float\
    \ number : lst) {\n    sum += ceil(number) * ceil(number);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long int sum = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++){\n        sum += pow(ceil(lst[i]), 2);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    std::vector<float>::iterator\
    \ it;\n    float f;\n    long long int sum = 0;\n    for(it = lst.begin(); it\
    \ != lst.end(); it++) {\n        f = ceil(*it);\n        sum += f*f;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        lst[i]\
    \ = lst[i] * lst[i];\n        sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif (lst.size() < 1)\n\t\t\
    return 0;\n\tlong sum = 0;\n\tfor (float x : lst) {\n\t\tsum += ceil(x) * ceil(x);\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long answer = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    answer +=\
    \ pow(lst[i], 2);\n  }\n  return answer;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long ans = 0;\n    for(auto\
    \ x: lst) {\n        ans += ceil(x) * ceil(x);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif (lst.size() == 0) {\n\
    \t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tsum += (int)std::ceil(lst[i]) * (int)std::ceil(lst[i]);\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (size_t\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(auto\
    \ x: lst)\n    ans += std::ceil(x) * std::ceil(x);\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    return ceil(lst[0])*ceil(lst[0])+ceil(lst[1])*ceil(lst[1])+ceil(lst[2])*ceil(lst[2]);\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpsyu0u717: /tmp/tmpsyu0u717.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)3.0, (float)5.0, (float)7.0}))) == (84)'' failed.

    '
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long result=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        lst[i]= ceil(lst[i]);\n        result+=lst[i]*lst[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here :)\n \
    \ int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i])\
    \ * std::ceil(lst[i]);\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    std::vector<int> result;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        result.push_back(std::ceil(lst[i]));\n\
    \    }\n    long result_sum = 0;\n    for(int i = 0; i < result.size(); i++){\n\
    \        result_sum += result[i] * result[i];\n    }\n    return result_sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126860
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (auto &item : lst) {\n    result += ceil(item) * ceil(item);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\t// your code here\n\tlong\
    \ ans = 0;\n\tint sz = lst.size();\n\tfor (int i = 0; i < sz; i++) {\n\t\tans\
    \ += ceil(lst[i]) * ceil(lst[i]);\n\t}\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tif (lst.size() == 0) {\n\
    \t\treturn 0;\n\t}\n\telse {\n\t\tlong sum = 0;\n\t\tfor (auto itr = lst.begin();\
    \ itr != lst.end(); itr++) {\n\t\t\tsum += ceil((*itr) * (*itr));\n\t\t}\n\t\t\
    return sum;\n\t}\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpkjbcgrjy: /tmp/tmpkjbcgrjy.cpp:34: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long res = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        res += pow(ceil(lst[i]), 2);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long result=0;\n    for(int\
    \ i=0;i<lst.size();i++){\n        lst[i]=ceil(lst[i]);\n        result+=(lst[i]*lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong res = 0;\n\tfor (float\
    \ x : lst) {\n\t\tres += ceil(x) * ceil(x);\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    std::transform(lst.begin(),\
    \ lst.end(), lst.begin(), ::ceil);\n    std::transform(lst.begin(), lst.end(),\
    \ lst.begin(), lst.begin(), std::multiplies<float>());\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0.0);\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  float result = 0;\n  for\
    \ (float l : lst) {\n    l = std::ceil(l);\n    result += l * l;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum=0;\n  for(int i=0;i<lst.size();i++){\n\
    \    sum+=(ceil(lst[i])*ceil(lst[i]));\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132256
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    lst[i] = pow(lst[i],\
    \ 2);\n    sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\treturn (long)std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](int x, int y) {\n\t\treturn x + pow(std::ceil(y), 2);\n\t});\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp8m9g5buw: /tmp/tmp8m9g5buw.cpp:27: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](int total, float num) { return total + (int)std::ceil(num)\
    \ * (int)std::ceil(num); });\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int n = lst.size();\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        lst[i] = std::ceil(lst[i]);\n\
    \        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(float\
    \ elem : lst){\n        sum += ceil(elem) * ceil(elem);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (float\
    \ f : lst) {\n    sum += (long) (ceil(f) * ceil(f));\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n   return 0;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpe9b_e7sx: /tmp/tmpe9b_e7sx.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long res = 0;\n  for (size_t\
    \ i = 0; i < lst.size(); i++) {\n    res += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    float sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        float ceil = ceil(lst[i]);\n        float\
    \ square = ceil * ceil;\n        sum += square;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaw9zelds.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmpaw9zelds.cpp:20:33: error: \u2018ceil\u2019 cannot be used as a function\n\
    \   20 |         float ceil = ceil(lst[i]);\n      |                         \
    \        ^\n"
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    assert(lst.size() >= 3);\n\
    \    long sum=0;\n    for(int i=0;i<lst.size();i++){\n      sum+=ceil(lst[i])*ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpij0omlx8: /tmp/tmpij0omlx8.cpp:18: long int sum_squares(std::vector<float>):
    Assertion `lst.size() >= 3'' failed.

    '
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long int sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++)\n  {\n    sum += (long) (ceil(lst[i]) * ceil(lst[i]));\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ i : lst){\n        i = ceil(i);\n        sum += i*i;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long ans = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    lst[i] = ceil(lst[i]);\n    ans += pow(lst[i],\
    \ 2);\n  }\n  return ans;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\treturn std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](long accum, float v) {\n\t\treturn accum + std::pow(std::ceil(v),\
    \ 2);\n\t});\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // ...\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ number : lst){\n        sum += ceil(number) * ceil(number);\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tlst[i]=ceil(lst[i]);\n\t\tsum+=lst[i]*lst[i];\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\nlong result=0;\nfor(int i=0;i<lst.size();i++)\n\
    {\n    lst[i]=ceil(lst[i]);\n    result+=lst[i]*lst[i];\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtan68q4.cpp: In function \u2018long int sum_squares(std::vector<float>)\u2019\
    :\n/tmp/tmpqtan68q4.cpp:24:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   24 | int main() {\n      |            ^\n/tmp/tmpqtan68q4.cpp:38:1:\
    \ error: expected \u2018}\u2019 at end of input\n   38 | }\n      | ^\n/tmp/tmpqtan68q4.cpp:17:42:\
    \ note: to match this \u2018{\u2019\n   17 | long sum_squares(std::vector<float>\
    \ lst) {\n      |                                          ^\n/tmp/tmpqtan68q4.cpp:38:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   38 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ &x : lst) {\n    sum += ceil(x) * ceil(x);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n   long sum = 0;\n   for(int\
    \ i = 0; i < lst.size(); i++){\n      sum += pow(ceil(lst[i]), 2);\n   }\n   return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long squares = 0;\n  \
    \  for (auto &i : lst) {\n        squares += ceil(i) * ceil(i);\n    }\n    return\
    \ squares;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (auto item : lst) {\n    int newItem = ceil(item);\n    result += newItem *\
    \ newItem;\n  }\n  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132258
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tstd::vector<int>\
    \ lst2;\n\tfor(auto& elem:lst){\n\t\tlst2.push_back(std::ceil(elem));\n\t}\n\t\
    for(auto& elem:lst2){\n\t\tsum+=elem*elem;\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = std::ceil(lst[i]);\n        sum\
    \ += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        lst[i]\
    \ = pow(lst[i], 2);\n        sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tstd::vector<float> newVec;\n\
    \tfor (std::vector<float>::iterator it = lst.begin(); it != lst.end(); ++it) {\n\
    \t\tnewVec.push_back(ceil(*it));\n\t}\n\tlong sum = 0;\n\tfor (std::vector<float>::iterator\
    \ it = newVec.begin(); it != newVec.end(); ++it) {\n\t\tsum += ((*it) * (*it));\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long long sum=0;\n   \
    \ for(int i=0;i<lst.size();i++)\n    {\n        float a=lst[i];\n        lst[i]=std::ceil(a);\n\
    \        sum+=(long long)pow(lst[i],2);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        int x = ceil(lst[i]);\n        sum +=\
    \ x*x;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] < 0)\n            lst[i] = ceil(lst[i]);\n\
    \        else\n            lst[i] = floor(lst[i]);\n        sum += lst[i] * lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmp3b59aldv: /tmp/tmp3b59aldv.cpp:33: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong int ans = 0;\n\tfor(int\
    \ i = 0; i < lst.size(); i++)\n\t{\n\t\tans += ceil(lst[i]) * ceil(lst[i]);\n\t\
    }\n\treturn ans;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += (int) ceil(i) * (int) ceil(i);\n    return sum;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong total = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\ttotal += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \t}\n\treturn total;\n}\nint main() {\n    auto candidate = sum_squares;\n   \
    \ assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // Your code here\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpvyp3xk4i: /tmp/tmpvyp3xk4i.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)1.0,
    (float)2.0, (float)3.0}))) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  // your code here\n  int\
    \ sum=0;\n  for(auto a:lst)\n  {\n    sum+=(ceil(a)*ceil(a));\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long result = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    result += ceil(lst[i]) * ceil(lst[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sum_squares;\n \
    \   assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(unsigned\
    \ int i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        lst[i]\
    \ = lst[i] * lst[i];\n        sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132250
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (auto\
    \ &i : lst) {\n\t\ti = ceil(i);\n\t\tsum += (long)pow(i, 2);\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong ans = 0;\n\tfor (float\
    \ i : lst) {\n\t\tans += ceil(i) * ceil(i);\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    //\
    \ your code here\n    for(float f : lst){\n        int i = f;\n        sum +=\
    \ pow(i, 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: Exception
  stderr: 'tmpsdo5xji4: /tmp/tmpsdo5xji4.cpp:31: int main(): Assertion `candidate((std::vector<float>({(float)1.4,
    (float)4.2, (float)0.0}))) == (29)'' failed.

    '
  stdout: ''
  timestamp: 1660132259
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long s = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        lst[i] = ceil(lst[i]);\n        s +=\
    \ (long)pow(lst[i], 2);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132259
