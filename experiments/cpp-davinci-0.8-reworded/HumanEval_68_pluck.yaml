name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a vector, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
  \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
  // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
  \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
  // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
  \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["\tif (arr.size() == 0) {\n\t\treturn {};\n\t}\n\tint min = 10000;\n\
    \tint min_idx = -1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i]\
    \ % 2 == 0) {\n\t\t\tif (arr[i] < min) {\n\t\t\t\tmin = arr[i];\n\t\t\t\tmin_idx\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\tif (min_idx == -1) {\n\t\treturn {};\n\t}\n\treturn\
    \ { (long)min, (long)min_idx };", "    if(arr.size()<=0) return {};\n    std::vector<long>\
    \ res={arr[0],0};\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            if(arr[i]<res[0]){\n                res[0]=arr[i];\n            \
    \    res[1]=i;\n            }\n        }\n    }\n    if(res[0]%2!=0) return {};\n\
    \    return res;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n\
    \        return result;\n    }\n    long min = arr[0];\n    long min_i = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < min && arr[i]\
    \ % 2 == 0) {\n            min = arr[i];\n            min_i = i;\n        }\n\
    \    }\n    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(min_i);\n\
    \    }\n    return result;", "    int i;\n    vector<long> res(2);\n    for(i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]%2==0)\n        {\n            res[0]=arr[i];\n     \
    \       res[1]=i;\n            break;\n        }\n    }\n    for(int j=i+1;j<arr.size();j++)\n\
    \    {\n        if(arr[j]%2==0)\n        {\n            if(arr[j]<res[0])\n  \
    \          {\n                res[0]=arr[j];\n                res[1]=j;\n    \
    \        }\n        }\n    }\n    if(res[0]==0)\n    {\n        res.clear();\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long min = INT_MAX;\n\
    \    int index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index >= 0) {\n        res.push_back(min);\n \
    \       res.push_back(index);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    if (arr.size() == 0) return ret;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            ret.push_back(arr[i]);\n\
    \            ret.push_back(i);\n            return ret;\n        }\n    }\n  \
    \  return ret;", "    std::vector<long> new_arr;\n    long smallest_even_number\
    \ = INT_MAX;\n    int smallest_even_number_index = -1;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_even_number)\
    \ {\n            smallest_even_number = arr[i];\n            smallest_even_number_index\
    \ = i;\n        }\n    }\n    if (smallest_even_number == INT_MAX) {\n       \
    \ new_arr.push_back(smallest_even_number);\n        new_arr.push_back(smallest_even_number_index);\n\
    \    }\n    return new_arr;", "    int index = -1;\n    long min = LONG_MAX;\n\
    \    int n = arr.size();\n    for(int i = 0; i < n; i++) {\n        if(arr[i]\
    \ % 2 == 0) {\n            if(arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    if(index !=\
    \ -1) {\n        return {min, index};\n    }\n    return {};", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) return result;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long min = -1;\n    long minIndex = -1;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            min = arr[i];\n\
    \            minIndex = i;\n            break;\n        }\n    }\n    if (min\
    \ == -1) return result;\n    result.push_back(min);\n    result.push_back(minIndex);\n\
    \    return result;", "  std::vector<long> result;\n  if (arr.size() == 0) return\
    \ result;\n  long smallestEven = std::numeric_limits<long>::max();\n  int index\
    \ = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 &&\
    \ arr[i] < smallestEven) {\n      smallestEven = arr[i];\n      index = i;\n \
    \   }\n  }\n  if (index == -1) return result;\n  result.push_back(smallestEven);\n\
    \  result.push_back(index);\n  return result;", "  // your code goes here\n  int\
    \ n = arr.size();\n  if(n==0)\n  {\n    return {};\n  }\n  long min=1000000001;\n\
    \  int ind=-1;\n  for(int i=0;i<n;i++)\n  {\n    if(arr[i]%2==0 && arr[i]<min)\n\
    \    {\n      min=arr[i];\n      ind=i;\n    }\n  }\n  if(ind==-1)\n  {\n    return\
    \ {};\n  }\n  return {min,ind};", "    std::vector<long> vect = {};\n    if (arr.size()\
    \ == 0)\n        return vect;\n    long min = INT_MAX;\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n    \
    \        vect.push_back(arr[i]);\n            vect.push_back(i);\n           \
    \ return vect;\n        }\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \          min = arr[i];\n            minIndex = i;\n        }\n    }\n    if\
    \ (min == INT_MAX)\n        return vect;\n    vect.push_back(min);\n    vect.push_back(minIndex);\n\
    \    return vect;", "    if(arr.size()==0) return {};\n    long min_val=INT_MAX;\n\
    \    int min_idx=0;\n    bool val_found=false;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0 && arr[i]<min_val){\n            min_val=arr[i];\n   \
    \         min_idx=i;\n            val_found=true;\n        }\n    }\n    if(val_found)\
    \ return {min_val,min_idx};\n    else return {};", "    std::vector<long> solution;\n\
    \    if (arr.size() == 0)\n        return solution;\n    auto it = std::min_element(arr.begin(),\
    \ arr.end(), [](long i, long j) {\n        return i % 2 == 0 && j % 2 == 0 ? i\
    \ < j : (i % 2 == 0 ? true : false);\n    });\n    if (*it % 2 == 0) {\n     \
    \   solution.push_back(*it);\n        solution.push_back(std::distance(arr.begin(),\
    \ it));\n    }\n    return solution;", "\t// your code here\n\tstd::vector<long>\
    \ result;\n\tif (arr.size() == 0)\n\t\treturn result;\n\tlong min = std::numeric_limits<long>::max();\n\
    \tlong minIndex = std::numeric_limits<long>::max();\n\tfor (size_t i = 0; i <\
    \ arr.size(); i++)\n\t{\n\t\tif (arr[i] % 2 == 0 && arr[i] < min)\n\t\t{\n\t\t\
    \tmin = arr[i];\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\tif (min == std::numeric_limits<long>::max())\n\
    \t\treturn result;\n\tresult.push_back(min);\n\tresult.push_back(minIndex);\n\t\
    return result;", "  //your code here\n  std::vector<long> finalresult;\n  long\
    \ min = std::numeric_limits<long>::max();\n  std::vector<long>::iterator it;\n\
    \  if(arr.size()>=1){\n  for(it=arr.begin();it!=arr.end();it++){\n    if(*it<min\
    \ && *it%2==0){\n      min = *it;\n    }\n  }\n  }\n  if(min!=std::numeric_limits<long>::max()){\n\
    \  std::vector<long>::iterator smallit;\n  smallit = std::find(arr.begin(),arr.end(),min);\n\
    \  finalresult.push_back(min);\n  finalresult.push_back(smallit-arr.begin());\n\
    \  }\n  return finalresult;", "  long min = 0;\n  int minIndex = -1;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      if (minIndex\
    \ == -1) {\n        min = arr[i];\n        minIndex = i;\n      } else if (arr[i]\
    \ < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n\
    \  std::vector<long> result;\n  if (minIndex > -1) {\n    result.push_back(min);\n\
    \    result.push_back(minIndex);\n  }\n  return result;", "  if (arr.size() ==\
    \ 0) return std::vector<long>();\n  long min = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < min && arr[i] % 2 == 0) {\n      min = arr[i];\n  \
    \  }\n  }\n  if (min == 0) return std::vector<long>();\n  long index = std::distance(arr.begin(),\n\
    \                std::find(arr.begin(), arr.end(), min));\n  std::vector<long>\
    \ res = { min, index };\n  return res;", "  long smallest = INT_MAX;\n  std::vector<long>\
    \ res;\n  if (arr.size() == 0) {\n    return res;\n  }\n  for (long i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < smallest) {\n      smallest\
    \ = arr[i];\n      res.clear();\n      res.push_back(arr[i]);\n      res.push_back(i);\n\
    \    }\n  }\n  if (res.size() == 0) {\n    return res;\n  }\n  return res;", " \
    \   if(arr.size() == 0) return {};\n    int ans = -1;\n    for(int i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] % 2 == 0 && (ans == -1 || arr[i] < arr[ans]))\
    \ {\n            ans = i;\n        }\n    }\n    if(ans == -1) return {};\n  \
    \  return {arr[ans], ans};", "    std::vector<long> res;\n    // find the smallest\
    \ even value\n    std::vector<long>::iterator it = std::find_if(arr.begin(), arr.end(),\
    \ [](int n) { return n % 2 == 0; });\n    if (it != arr.end()) {\n        res.push_back(*it);\n\
    \        // find the index of the smallest even value\n        res.push_back(std::distance(arr.begin(),\
    \ it));\n    }\n    return res;", "    if(arr.size()==0)\n    {\n        std::vector<long>\
    \ v;\n        return v;\n    }\n    std::sort(arr.begin(),arr.end());\n    if(arr[0]==0)\n\
    \    {\n        std::vector<long> v;\n        v.push_back(0);\n        v.push_back(1);\n\
    \        return v;\n    }\n    int index=0;\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]%2==0)\n        {\n            index=i;\n           \
    \ break;\n        }\n    }\n    std::vector<long> v;\n    v.push_back(arr[index]);\n\
    \    v.push_back(index+1);\n    return v;", "    std::vector<long> result;\n \
    \   if (arr.size() == 0) return result;\n    int index = 0;\n    long value =\
    \ 1e9;\n    int i = 0;\n    for (auto a : arr) {\n        if (a % 2 == 0) {\n\
    \            if (a < value) {\n                value = a;\n                index\
    \ = i;\n            }\n        }\n        i++;\n    }\n    if (value == 1e9) return\
    \ result;\n    result.push_back(value);\n    result.push_back(index);\n    return\
    \ result;", "  if (arr.size() == 0) {\n    return {};\n  }\n\n  std::sort(arr.begin(),\
    \ arr.end());\n  int i = 0;\n  while (arr[i] % 2 != 0) {\n    i++;\n    if (i\
    \ == arr.size()) {\n      return {};\n    }\n  }\n  int j = i + 1;\n  while (arr[j]\
    \ % 2 != 0) {\n    j++;\n    if (j == arr.size()) {\n      return {};\n    }\n\
    \  }\n  std::vector<long> result = {arr[i], i};\n  return result;", "  if (arr.size()\
    \ == 0) {\n    return {};\n  }\n  std::vector<long> v;\n  long min = LONG_MAX;\n\
    \  long index = LONG_MAX;\n  bool isValid = false;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < min && arr[i] % 2 == 0) {\n      isValid = true;\n\
    \      min = arr[i];\n      index = i;\n    }\n  }\n  if (isValid) {\n    v.push_back(min);\n\
    \    v.push_back(index);\n  }\n  return v;", "    std::vector<long> ret;\n   \
    \ long min_even = INT_MAX;\n    long index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n\
    \                min_even = arr[i];\n                index = i;\n            }\n\
    \        }\n    }\n    if (index >= 0) {\n        ret.push_back(min_even);\n \
    \       ret.push_back(index);\n    }\n    return ret;", "   if(arr.size() == 0){\n\
    \    std::vector<long> ret = {};\n    return ret;\n   }\n   long min = INT_MAX;\n\
    \   long min_index = INT_MAX;\n   for(int i = 0; i < arr.size(); i++){\n     \
    \  if(arr[i] % 2 == 0 && arr[i] < min){\n           min = arr[i];\n          \
    \ min_index = i;\n       }\n   }\n   if(min == INT_MAX)\n    return {};\n   return\
    \ {min, min_index};", "    long smallestEvenValue;\n    long index;\n    int arrSize\
    \ = arr.size();\n    bool isEven = false;\n    std::vector<long> result;\n   \
    \ if (arrSize == 0) {\n        return result;\n    }\n    for (int i = 0; i <\
    \ arrSize; i++) {\n        if (arr[i] % 2 == 0) {\n            if (!isEven) {\n\
    \                smallestEvenValue = arr[i];\n                index = i;\n   \
    \             isEven = true;\n            } else {\n                if (arr[i]\
    \ < smallestEvenValue) {\n                    smallestEvenValue = arr[i];\n  \
    \                  index = i;\n                }\n            }\n        }\n \
    \   }\n    if (isEven) {\n        result.push_back(smallestEvenValue);\n     \
    \   result.push_back(index);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    std::map<long, int> map;\n    if (arr.size() == 0) {\n        return\
    \ res;\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]\
    \ = i;\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            res.push_back(arr[i]);\n            res.push_back(map[arr[i]]);\n\
    \            return res;\n        }\n    }\n    return res;", "\tlong min=0;\n\
    \tlong index=0;\n\tlong found=0;\n\tfor(long i=0;i<arr.size();i++){\n\t\tif(arr[i]%2==0){\n\
    \t\t\tif(found==0){\n\t\t\t\tmin=arr[i];\n\t\t\t\tindex=i;\n\t\t\t\tfound=1;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tif(arr[i]<min){\n\t\t\t\t\tmin=arr[i];\n\t\t\t\t\
    \tindex=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<long> v;\n\tif(found==1){\n\
    \t\tv.push_back(min);\n\t\tv.push_back(index);\n\t}\n\treturn v;", "  int n =\
    \ arr.size();\n  if(n == 0) return std::vector<long>();\n  int minVal = INT_MAX;\n\
    \  int minIndex = -1;\n  int minValIndex = -1;\n  for(int i = 0; i < n; i++) {\n\
    \    if(arr[i] % 2 == 0 && arr[i] < minVal) {\n      minVal = arr[i];\n      minValIndex\
    \ = i;\n    }\n    if(arr[i] % 2 == 0 && arr[i] == minVal && minValIndex > i)\
    \ {\n      minValIndex = i;\n    }\n  }\n  if(minValIndex == -1) return std::vector<long>();\n\
    \  return std::vector<long>({(long)minVal, (long)minValIndex});", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    int\
    \ min_val = -1;\n    int min_idx = -1;\n    int count = 0;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (min_val\
    \ == -1 || arr[i] < min_val) {\n                min_val = arr[i];\n          \
    \      min_idx = i;\n                count = 1;\n            } else if (arr[i]\
    \ == min_val) {\n                count++;\n            }\n        }\n    }\n \
    \   if (count == 0) {\n        return result;\n    }\n    result.push_back(min_val);\n\
    \    result.push_back(min_idx);\n    return result;", "    if(arr.size() == 0)\n\
    \        return {};\n    std::vector<long> res;\n    long minval = INT_MAX;\n\
    \    long index;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ % 2 == 0) {\n            if(arr[i] < minval) {\n                minval = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    if(minval ==\
    \ INT_MAX)\n        return {};\n    res.push_back(minval);\n    res.push_back(index);\n\
    \    return res;", "\t// your code goes here\n\t\n\tif(arr.size() == 0)\n\t{\n\
    \t\tstd::vector<long> vec;\n\t\tvec.push_back(-1);\n\t\tvec.push_back(-1);\n\t\
    \treturn vec;\n\t}\n\t\n\tlong i, smallIndex = -1, minElement = INT_MAX;\n\tstd::vector<long>\
    \ vec;\n\t\n\tfor(i = 0; i < arr.size(); i++)\n\t{\n\t\tif(arr[i] % 2 == 0 &&\
    \ arr[i] < minElement)\n\t\t{\n\t\t\tminElement = arr[i];\n\t\t\tsmallIndex =\
    \ i;\n\t\t}\n\t}\n\t\n\tif(smallIndex == -1)\n\t{\n\t\tvec.push_back(-1);\n\t\t\
    vec.push_back(-1);\n\t\treturn vec;\n\t}\n\t\n\tvec.push_back(minElement);\n\t\
    vec.push_back(smallIndex);\n\treturn vec;", "    std::vector<long> ans;\n    long\
    \ min = INT_MAX;\n    for(int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            ans.push_back(min);\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;", "  std::sort(arr.begin(),\
    \ arr.end());\n  std::vector<long> v;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] % 2 == 0) {\n      v.push_back(arr[i]);\n      v.push_back(i);\n\
    \      return v;\n    }\n  }\n  return v;", "    int n = arr.size();\n    if(n\
    \ == 0) return {};\n    vector<int> ans(2, 1e9);\n    for(int i = 0; i < n; i++)\
    \ {\n        if(arr[i] % 2 == 0 && arr[i] < ans[0]) {\n            ans[0] = arr[i];\n\
    \            ans[1] = i;\n        }\n    }\n    if(ans[0] == 1e9) return {};\n\
    \    return ans;", "\tstd::vector<long> no_evens = {};\n\tstd::vector<long> result\
    \ = {};\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use Printf.printf(\"%d \", value)\n\tint min = INT_MAX;\n\tint minIndex\
    \ = -1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\
    \t\t\tif (arr[i] < min) {\n\t\t\t\tmin = arr[i];\n\t\t\t\tminIndex = i;\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (minIndex != -1) {\n\t\tresult.push_back(min);\n\t\tresult.push_back(minIndex);\n\
    \t} else {\n\t\treturn no_evens;\n\t}\n\treturn result;", "    long smallest_even_value\
    \ = -1;\n    long smallest_even_value_index = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == -1 || arr[i] < smallest_even_value) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_value_index = i;\n            }\n \
    \       }\n    }\n    if (smallest_even_value == -1) {\n        return {};\n \
    \   }\n    return {smallest_even_value, smallest_even_value_index};", "  if (arr.size()\
    \ == 0) {\n    return {};\n  }\n  int index = 0;\n  long value = INT_MAX;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < value && arr[i] % 2 ==\
    \ 0) {\n      value = arr[i];\n      index = i;\n    }\n  }\n  if (value == INT_MAX)\
    \ {\n    return {};\n  }\n  return {value, index};", "  \tstd::vector<long> ans;\n\
    \  \tstd::sort(arr.begin(), arr.end());\n  \tint flag = 0;\n  \tfor(int i = 0;\
    \ i < arr.size(); i++) {\n    \tif(arr[i] % 2 == 0) {\n      \t\tans.push_back(arr[i]);\n\
    \      \t\tans.push_back(i);\n      \t\tflag = 1;\n      \t\tbreak;\n    \t}\n\
    \  \t}\n  \tif(flag == 0) {\n    \treturn {};\n  \t}\n  \treturn ans;", "    std::vector<long>\
    \ ret;\n    if (arr.size() == 0) return ret;\n    long min_val = INT_MAX;\n  \
    \  int min_index = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] < min_val && arr[i]%2 == 0) {\n            min_val = arr[i];\n  \
    \          min_index = i;\n        }\n    }\n    if (min_val != INT_MAX) {\n \
    \       ret.push_back(min_val);\n        ret.push_back(min_index);\n    }\n  \
    \  return ret;", "    std::vector<long> res(2);\n    if(arr.size() == 0)\n   \
    \ {\n        return arr;\n    }\n    else if(arr.size() == 1)\n    {\n       \
    \ if(arr[0] % 2 == 0)\n        {\n            res[0] = arr[0];\n            res[1]\
    \ = 0;\n            return res;\n        }\n        else\n        {\n        \
    \    return arr;\n        }\n    }\n    else\n    {\n        long min = -1;\n\
    \        for(int i = 0; i < arr.size(); i++)\n        {\n            if(arr[i]\
    \ != 0 && min == -1 && arr[i] % 2 == 0)\n            {\n                min =\
    \ arr[i];\n                res[0] = min;\n                res[1] = i;\n      \
    \      }\n            else if(arr[i] != 0 && min != -1 && arr[i] % 2 == 0 && arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                res[0]\
    \ = min;\n                res[1] = i;\n            }\n        }\n        if(min\
    \ == -1)\n        {\n            return arr;\n        }\n        else\n      \
    \  {\n            return res;\n        }\n    }", "    long minv = INT_MAX;\n\
    \    long result[2] = {-1, -1};\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] < minv && arr[i]%2 == 0) {\n            minv = arr[i];\n \
    \           result[0] = arr[i];\n            result[1] = i;\n        }\n    }\n\
    \    if (result[0] == -1) {\n        return {};\n    }\n    return {result[0],\
    \ result[1]};", "    // Good luck!\n    std::vector<long> res;\n    int res_idx\
    \ = 0;\n    int res_val = 0;\n    bool exist = false;\n    int i = 0;\n    for\
    \ (long each: arr) {\n        if (each % 2 == 0) {\n            if (!exist) {\n\
    \                res_val = each;\n                res_idx = i;\n             \
    \   exist = true;\n            } else {\n                if (each < res_val) {\n\
    \                    res_val = each;\n                    res_idx = i;\n     \
    \           }\n            }\n        }\n        i++;\n    }\n    if (exist) {\n\
    \        res.push_back(res_val);\n        res.push_back(res_idx);\n    }\n   \
    \ return res;", "    std::vector<long> evens;\n    std::vector<long> indexes;\n\
    \    std::vector<long> no_evens = {};\n    if (arr.size() == 0) {\n        return\
    \ no_evens;\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            evens.push_back(arr[i]);\n            indexes.push_back(i);\n\
    \        }\n    }\n    if (evens.size() == 0) {\n        return no_evens;\n  \
    \  }\n    size_t smallest_index = 0;\n    long smallest_value = evens[0];\n  \
    \  for (size_t i = 0; i < evens.size(); i++) {\n        if (evens[i] < smallest_value)\
    \ {\n            smallest_value = evens[i];\n            smallest_index = i;\n\
    \        }\n    }\n    std::vector<long> output;\n    output.push_back(smallest_value);\n\
    \    output.push_back(indexes[smallest_index]);\n    return output;", "\tlong\
    \ index = -1;\n\tlong minimum = -1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\
    \t\tif (arr[i] % 2 == 0 && (minimum == -1 || arr[i] < minimum)) {\n\t\t\tminimum\
    \ = arr[i];\n\t\t\tindex = i;\n\t\t}\n\t}\n\tstd::vector<long> result;\n\tif (index\
    \ != -1) {\n\t\tresult.push_back(minimum);\n\t\tresult.push_back(index);\n\t}\n\
    \treturn result;", "    if(arr.size() == 0) return {};\n    long min_val = LONG_MAX;\n\
    \    int min_idx = -1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ % 2 == 0 && arr[i] < min_val) {\n            min_val = arr[i];\n           \
    \ min_idx = i;\n        }\n    }\n    if(min_idx == -1) return {};\n    else return\
    \ {min_val, min_idx};", "    int start = arr.size()-1;\n    if(start < 0) return\
    \ {};\n    int last = -1;\n    while(start >= 0){\n        if(arr[start]%2 ==\
    \ 0){\n            last = start;\n            break;\n        }\n        start--;\n\
    \    }\n    if(last == -1) return {};\n    for(int i = 0; i < last; i++){\n  \
    \      if(arr[i]%2 == 0 && arr[i] < arr[last]){\n            last = i;\n     \
    \   }\n    }\n    return {arr[last], last};", "\tstd::vector<long> res = {};\n\
    \tlong minIndex = -1;\n\tlong min = INT_MAX;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] < min) {\n\t\t\tmin = arr[i];\n\t\t\
    \tminIndex = i;\n\t\t}\n\t}\n\tif (minIndex == -1) {\n\t\treturn res;\n\t}\n\t\
    res.push_back(min);\n\tres.push_back(minIndex);\n\treturn res;", "    vector<long>\
    \ ans;\n    vector<long> odd;\n    vector<long> even;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0){\n            even.push_back(arr[i]);\n        }\n  \
    \      else{\n            odd.push_back(arr[i]);\n        }\n    }\n    if(even.size()==0){\n\
    \        return ans;\n    }\n    sort(even.begin(),even.end());\n    ans.push_back(even[0]);\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]==even[0]){\n         \
    \   ans.push_back(i);\n            break;\n        }\n    }\n    return ans;",
  "  long min = 1000000;\n  int ind = -1;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      ind\
    \ = i;\n    }\n  }\n  if (ind == -1) {\n    std::vector<long> ans;\n    return\
    \ ans;\n  }\n  std::vector<long> ans;\n  ans.push_back(min);\n  ans.push_back(ind);\n\
    \  return ans;", "    std::vector<long> ret;\n    if (arr.size()==0) {\n     \
    \   return ret;\n    }\n    long minIndex = 0;\n    long min = arr[0];\n    for\
    \ (int i=0; i<arr.size(); ++i) {\n        if (arr[i]%2==0 && arr[i]<min) {\n \
    \           min = arr[i];\n            minIndex = i;\n        }\n    }\n    if\
    \ (minIndex == 0 && min%2!=0) {\n        return ret;\n    }\n    ret.push_back(min);\n\
    \    ret.push_back(minIndex);\n    return ret;", "  std::vector<long> result;\n\
    \  int size = arr.size();\n  if (size == 0) {\n    return result;\n  }\n  int\
    \ minIndex = -1;\n  long minVal = -1;\n  for (int i = 0; i < size; i++) {\n  \
    \  if (arr[i] % 2 == 0) {\n      if (minIndex == -1) {\n        minIndex = i;\n\
    \        minVal = arr[i];\n      } else {\n        if (arr[i] < minVal) {\n  \
    \        minIndex = i;\n          minVal = arr[i];\n        }\n      }\n    }\n\
    \  }\n  if (minIndex == -1) {\n    return result;\n  }\n  result.push_back(minVal);\n\
    \  result.push_back(minIndex);\n  return result;", "    int i;\n    int number_index;\n\
    \    long number;\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (number == NULL || arr[i] < number) {\n        \
    \        number = arr[i];\n                number_index = i;\n            }\n\
    \        }\n    }\n    if (number != NULL) {\n        std::vector<long> result;\n\
    \        result.push_back(number);\n        result.push_back(number_index);\n\
    \        return result;\n    }\n    std::vector<long> empty;\n    return empty;",
  "  // your code here\n  return {};", "    if(arr.size() == 0)\n        return {};\n\
    \    long index = -1;\n    long smallest = INT_MAX;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0 && arr[i] < smallest) {\n            smallest\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if(index != -1)\n \
    \       return {smallest, index};\n    return {};", "  std::vector<long> newArr;\n\
    \  newArr.push_back(1);\n  return newArr;", "    std::vector<long> minimum;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            minimum.push_back(arr[i]);\n            minimum.push_back(i);\n \
    \           break;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < minimum[0]) {\n            minimum[0]\
    \ = arr[i];\n            minimum[1] = i;\n        }\n    }\n    return minimum;",
  "\tstd::vector<long> result;\n\tint smlst_index, smlst_value = INT_MAX;\n\tfor (int\
    \ i = 0; i < arr.size(); i++) {\n\t\tif ((arr[i] < smlst_value) && (arr[i] % 2\
    \ == 0)) {\n\t\t\tsmlst_value = arr[i];\n\t\t\tsmlst_index = i;\n\t\t}\n\t}\n\t\
    if (smlst_value == INT_MAX) {\n\t\treturn result;\n\t}\n\tresult.push_back(smlst_value);\n\
    \tresult.push_back(smlst_index);\n\treturn result;", "  long min_even = INT_MAX;\n\
    \  int min_index = INT_MAX;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0) {\n      if (arr[i] < min_even) {\n        min_even = arr[i];\n\
    \        min_index = i;\n      }\n    }\n  }\n  std::vector<long> res;\n  if (min_even\
    \ == INT_MAX) return res;\n  res.push_back(min_even);\n  res.push_back(min_index);\n\
    \  return res;", "\tstd::vector<long> smallest;\n\tlong pos = -1;\n\tlong min\
    \ = 9999999;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 ==\
    \ 0) {\n\t\t\tif (arr[i] < min) {\n\t\t\t\tmin = arr[i];\n\t\t\t\tpos = i;\n\t\
    \t\t}\n\t\t}\n\t}\n\tif (pos != -1) {\n\t\tsmallest.push_back(min);\n\t\tsmallest.push_back(pos);\n\
    \t}\n\treturn smallest;", "\tif (arr.size() <= 0) {\n\t\treturn std::vector<long>();\n\
    \t}\n\tif (arr.size() == 1) {\n\t\treturn arr;\n\t}\n\tstd::vector<long>::iterator\
    \ min = std::min_element(arr.begin(), arr.end());\n\tstd::vector<long>::iterator\
    \ max = std::max_element(arr.begin(), arr.end());\n\tif (*min % 2 == 0) {\n\t\t\
    return std::vector<long>({*min, (long)std::distance(arr.begin(), min)});\n\t}\n\
    \telse if (*max % 2 == 0) {\n\t\treturn std::vector<long>({*max, (long)std::distance(arr.begin(),\
    \ max)});\n\t}\n\treturn std::vector<long>();", "    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    long min = arr[0];\n\
    \    if (min % 2 == 0) {\n        result.push_back(min);\n        result.push_back(0);\n\
    \    }\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (min % 2 == 0) {\n                if (arr[i] < min) {\n\
    \                    min = arr[i];\n                    result.pop_back();\n \
    \                   result.pop_back();\n                    result.push_back(min);\n\
    \                    result.push_back(i);\n                }\n            } else\
    \ {\n                min = arr[i];\n                result.pop_back();\n     \
    \           result.pop_back();\n                result.push_back(min);\n     \
    \           result.push_back(i);\n            }\n        }\n    }\n    return\
    \ result;", "  std::vector<long> result(2);\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      result[0] = arr[i];\n      result[1]\
    \ = i;\n      break;\n    }\n  }\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0 && arr[i] < result[0]) {\n      result[0] = arr[i];\n\
    \      result[1] = i;\n    }\n  }\n  return result;", "    int index = -1;\n \
    \   long value = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (index == -1) {\n                index = i;\n  \
    \              value = arr[i];\n            } else {\n                if (arr[i]\
    \ < value) {\n                    index = i;\n                    value = arr[i];\n\
    \                }\n            }\n        }\n    }\n    std::vector<long> result;\n\
    \    if (index == -1) {\n        return result;\n    }\n    result.push_back(value);\n\
    \    result.push_back(index);\n    return result;", "    // your code here\n \
    \   long val,index;\n    val=index=INT_MAX;\n    if(arr.size()>0){\n        std::vector<long>::iterator\
    \ it;\n        it=std::find_if(arr.begin(),arr.end(),[](long x){return (x%2==0);});\n\
    \        if(it==arr.end()){\n            return {};\n        }\n        else{\n\
    \            std::vector<long>::iterator it2;\n            val=INT_MAX;\n    \
    \        for(it2=arr.begin();it2!=arr.end();it2++){\n                if(*it2%2==0){\n\
    \                    if(*it2<val){\n                        val=*it2;\n      \
    \                  index=it2-arr.begin();\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return {val,index};", "  std::vector<long>\
    \ result{};\n  long min = LONG_MAX;\n  for (size_t i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      result.clear();\n\
    \      result.push_back(arr[i]);\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;", "  // your code here\n  int smallest_even_value_index = -1;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      if (smallest_even_value_index\
    \ == -1) {\n        smallest_even_value_index = i;\n      } else {\n        if\
    \ (arr[i] < arr[smallest_even_value_index]) {\n          smallest_even_value_index\
    \ = i;\n        }\n      }\n    }\n  }\n  if (smallest_even_value_index != -1)\
    \ {\n    std::vector<long> solution;\n    solution.push_back(arr[smallest_even_value_index]);\n\
    \    solution.push_back(smallest_even_value_index);\n    return solution;\n  }\
    \ else {\n    std::vector<long> solution;\n    return solution;\n  }", "\tstd::vector<long>\
    \ ans = {};\n\t// add code here\n\t// get minimum even number\n\tlong int min_even\
    \ = INT_MAX;\n\tfor (long long int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i]\
    \ % 2 == 0 && arr[i] < min_even) {\n\t\t\tmin_even = arr[i];\n\t\t}\n\t}\n\t//\
    \ check if the min even val exist\n\tif (min_even == INT_MAX) {\n\t\treturn ans;\n\
    \t}\n\t// select the minimum even val and push it to ans vector\n\tfor (long long\
    \ int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == min_even) {\n\t\t\tans.push_back(arr[i]);\n\
    \t\t\tans.push_back(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;", "\tlong mn\
    \ = 10000;\n\tlong pos;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i]\
    \ % 2 == 0) {\n\t\t\tif (arr[i] < mn) {\n\t\t\t\tmn = arr[i];\n\t\t\t\tpos = i;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (mn == 10000) {\n\t\treturn std::vector<long>();\n\t\
    }\n\treturn std::vector<long>({mn, pos});", "\tif (arr.size() == 0) {\n\t\treturn\
    \ {};\n\t}\n\tstd::sort(arr.begin(), arr.end());\n\tlong index = -1;\n\tfor (int\
    \ i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\tindex = i;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn {};\n\t}\n\treturn\
    \ { arr[index], index };", "\tstd::vector<long> result;\n\tif(arr.size()==0) return\
    \ result;\n\tif(arr.size()==1) return arr;\n\tif(arr.size()==2) {\n\t\tif(arr[0]%2==0)\
    \ return arr;\n\t\telse if(arr[1]%2==0) return arr;\n\t\telse return result;\n\
    \t}\n\tstd::vector<long> temp;\n\tfor(int i=0;i<arr.size();i++) {\n\t\tif(arr[i]%2==0)\
    \ temp.push_back(arr[i]);\n\t}\n\tif(temp.size()==0) return result;\n\telse if(temp.size()==1)\
    \ {\n\t\tfor(int i=0;i<arr.size();i++) {\n\t\t\tif(arr[i]==temp[0]) result.push_back(arr[i]);\n\
    \t\t\tresult.push_back(i);\n\t\t\treturn result;\n\t\t}\n\t}\n\tstd::sort(temp.begin(),temp.end());\n\
    \tlong smallest=temp[0];\n\tresult.push_back(smallest);\n\tfor(int i=0;i<arr.size();i++)\
    \ {\n\t\tif(arr[i]==smallest) {\n\t\t\tresult.push_back(i);\n\t\t\treturn result;\n\
    \t\t}\n\t}\n\treturn result;", "  std::vector<long> v;\n  if(arr.size() == 0)\n\
    \    return v;\n  long min_even_value = INT_MAX;\n  long index = -1;\n  for(int\
    \ i = 0; i < arr.size(); i++) {\n    if(arr[i] % 2 == 0) {\n      if(arr[i] <\
    \ min_even_value) {\n        min_even_value = arr[i];\n        index = i;\n  \
    \    }\n    }\n  }\n  if(index == -1)\n    return v;\n  v.push_back(min_even_value);\n\
    \  v.push_back(index);\n  return v;", "    // your code here\n    return std::vector<long>({1,2});",
  "    std::vector<long> result;\n    long minEven = -1;\n    long minEvenIndex =\
    \ -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (minEven == -1) {\n                minEven = arr[i];\n   \
    \             minEvenIndex = i;\n            } else if (arr[i] < minEven) {\n\
    \                minEven = arr[i];\n                minEvenIndex = i;\n      \
    \      }\n        }\n    }\n    if (minEven != -1) {\n        result.push_back(minEven);\n\
    \        result.push_back(minEvenIndex);\n    }\n    return result;", "    std::vector<long>\
    \ ans{};\n    int n = arr.size();\n    long mx = -1;\n    long i = -1;\n    for(int\
    \ j = 0; j < n; j++) {\n        if(arr[j] % 2 == 0) {\n            if(mx == -1)\
    \ {\n                mx = arr[j];\n                i = j;\n            }\n   \
    \         else if(arr[j] < mx) {\n                mx = arr[j];\n             \
    \   i = j;\n            }\n        }\n    }\n    if(mx != -1) {\n        ans.push_back(mx);\n\
    \        ans.push_back(i);\n    }\n    return ans;", "  std::vector<long> result;\n\
    \  if (arr.size() == 0) return result;\n  long smallest = arr[0];\n  long smallest_idx\
    \ = 0;\n  bool found = false;\n  for (long i = 0; i < arr.size(); i++) {\n   \
    \ long num = arr[i];\n    if (num % 2 == 0) {\n      if (!found) {\n        smallest\
    \ = num;\n        smallest_idx = i;\n        found = true;\n      } else {\n \
    \       if (num < smallest) {\n          smallest = num;\n          smallest_idx\
    \ = i;\n        }\n      }\n    }\n  }\n  if (found) {\n    result.push_back(smallest);\n\
    \    result.push_back(smallest_idx);\n  }\n  return result;", "    int n = arr.size();\n\
    \    if(n == 0)\n        return {};\n    int i = 0;\n    int j = 0;\n    int min\
    \ = INT_MAX;\n    while(i < n){\n        if(arr[i] % 2 == 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                j = i;\n           \
    \ }\n        }\n        i++;\n    }\n    if(min == INT_MAX)\n        return {};\n\
    \    return {min, j};", "    std::vector<long> result;\n    int index, max = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ >= max) {\n            max = arr[i];\n            index = i;\n        }\n  \
    \  }\n    if (max > 0) {\n        result.push_back(max);\n        result.push_back(index);\n\
    \    }\n    return result;", "    long min = 2147483647;\n    long minIndex =\
    \ 2147483647;\n    bool found = false;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            minIndex = i;\n            found = true;\n        }\n    }\n    if\
    \ (found) {\n        return {min, minIndex};\n    }\n    return {};", "    std::vector<long>\
    \ ret;\n    // do all validations\n    if(arr.size()==0) return ret;\n    long\
    \ min_even = std::numeric_limits<long>::max();\n    long min_even_idx = 0;\n \
    \   for(int i=0;i<arr.size();i++){\n        if(arr[i]>=0){\n            if(arr[i]%2==0){\n\
    \                if(arr[i]<min_even){\n                    min_even = arr[i];\n\
    \                    min_even_idx = i;\n                }\n            }\n   \
    \     }else{\n            return ret;\n        }\n    }\n    if(min_even==std::numeric_limits<long>::max())\
    \ return ret;\n    ret.push_back(min_even);\n    ret.push_back(min_even_idx);\n\
    \    return ret;", "  std::vector<long> result = {};\n  if(arr.size() == 0) return\
    \ result;\n  long min = (long)1e9;\n  long index = 0;\n  long smallestValue =\
    \ 0;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i]%2 == 0 && arr[i]\
    \ < min) {\n      min = arr[i];\n      index = i;\n      smallestValue = arr[i];\n\
    \    }\n  }\n  if(min == (long)1e9) return result;\n  result.push_back(smallestValue);\n\
    \  result.push_back(index);\n  return result;", "    long min = -1;\n    int minIndex\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (min == -1) {\n                min = arr[i];\n        \
    \        minIndex = i;\n            } else if (arr[i] < min) {\n             \
    \   min = arr[i];\n                minIndex = i;\n            }\n        }\n \
    \   }\n    if (min == -1) {\n        return {};\n    }\n    return {min, minIndex};",
  "  std::vector<long> ret;\n  long smallestEven = std::numeric_limits<long>::max();\n\
    \  for (size_t i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i]\
    \ < smallestEven) {\n      smallestEven = arr[i];\n      ret.clear();\n      ret.push_back(arr[i]);\n\
    \      ret.push_back(i);\n    }\n  }\n  return ret;", "    std::vector<long> ret;\n\
    \    long m = 10000000;\n    long minidx = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if ((arr[i] % 2 == 0) && (arr[i] < m)) {\n            m = arr[i];\n\
    \            minidx = i;\n        }\n    }\n    if (m < 10000000) {\n        ret.push_back(m);\n\
    \        ret.push_back(minidx);\n    }\n    return ret;", "    long min = LONG_MAX;\n\
    \    long min_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n       \
    \     min_index = i;\n        }\n    }\n    if (min_index == -1)\n        return\
    \ {};\n    else\n        return {min, min_index};", "    if(arr.size() == 0)\n\
    \        return {};\n    int i = 0;\n    int min = arr[0];\n    int min_index\
    \ = 0;\n    while(i < arr.size()){\n        if(arr[i] % 2 == 0){\n           \
    \ if(arr[i] < min){\n                min = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n        i++;\n    }\n    if(min % 2 == 0)\n\
    \        return {min, min_index};\n    else\n        return {};", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    long\
    \ minValue = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == 0) {\n            minValue = 0;\n            minIndex\
    \ = i;\n            break;\n        }\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minValue) {\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    result.push_back(minValue);\n    result.push_back(minIndex);\n\
    \    return result;", "    std::vector<long> result;\n    // Check empty array\n\
    \    if (arr.size() == 0)\n        return result;\n    long min = LONG_MAX;\n\
    \    int min_pos = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        //\
    \ Check if even\n        if (arr[i] % 2 == 0) {\n            // Check if minimum\
    \ even\n            if (arr[i] < min) {\n                min = arr[i];\n     \
    \           min_pos = i;\n            }\n        }\n    }\n    // Check if even\
    \ number found\n    if (min_pos == -1)\n        return result;\n    // Else push\
    \ minimum even number\n    result.push_back(min);\n    result.push_back(min_pos);\n\
    \    return result;", "  std::vector<long> temp;\n  if(arr.size()==0)\n    return\
    \ temp;\n  long int min=INT_MAX;\n  int flag=0;\n  int index=0;\n  for(int i=0;i<arr.size();i++)\n\
    \  {\n    if(arr[i]%2==0)\n    {\n      flag=1;\n      if(arr[i]<min)\n      {\n\
    \        min=arr[i];\n        index=i;\n      }\n    }\n  }\n  if(flag==0)\n \
    \   return temp;\n  temp.push_back(min);\n  temp.push_back(index);\n  return temp;",
  "  std::vector<long> plucked;\n  if (arr.size() == 0) return plucked;\n  long min_value\
    \ = INT_MAX;\n  long min_index = 0;\n  bool found = false;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_value) {\n \
    \     min_value = arr[i];\n      min_index = i;\n      found = true;\n    }\n\
    \  }\n  if (found) {\n    plucked.push_back(min_value);\n    plucked.push_back(min_index);\n\
    \  }\n  return plucked;", '  // your code here', "    vector<long> res;\n    for(int\
    \ i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            res.push_back(arr[i]);\n\
    \            res.push_back(i);\n            return res;\n        }\n    }\n  \
    \  return res;", "  using namespace std;\n  if (arr.size() == 0) {\n    return\
    \ vector<long>();\n  }\n  int min_value = -1;\n  int min_index = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      if (min_value\
    \ == -1) {\n        min_value = arr[i];\n        min_index = i;\n      } else\
    \ if (arr[i] < min_value) {\n        min_value = arr[i];\n        min_index =\
    \ i;\n      }\n    }\n  }\n  if (min_value == -1) {\n    return vector<long>();\n\
    \  }\n  vector<long> res(2);\n  res[0] = min_value;\n  res[1] = min_index;\n \
    \ return res;", "    std::vector<long> answer;\n    if (arr.size() == 0) {\n \
    \       return answer;\n    }\n    int min = INT_MAX;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] < min && arr[i] % 2 == 0) {\n       \
    \     min = arr[i];\n        }\n    }\n    if (min == INT_MAX) {\n        return\
    \ answer;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == min) {\n            answer.push_back(min);\n            answer.push_back(i);\n\
    \            return answer;\n        }\n    }\n    return answer;", "    std::vector<long>\
    \ ans;\n    long minVal = INT_MAX;\n    int minIndex = -1;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < minVal) {\n\
    \            minVal = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   if (minIndex == -1) return ans;\n    ans.push_back(minVal);\n    ans.push_back(minIndex);\n\
    \    return ans;", "    std::vector<long> result;\n    int size = arr.size();\n\
    \    if(size == 0)\n        return result;\n    std::sort(arr.begin(), arr.end());\n\
    \    if(arr[0] % 2 == 0) {\n        result.push_back(arr[0]);\n        result.push_back(1);\n\
    \        return result;\n    }\n    if(arr[0] % 2 != 0) {\n        int i = 0;\n\
    \        while(arr[i] % 2 != 0) {\n            i++;\n        }\n        result.push_back(arr[i]);\n\
    \        result.push_back(i + 1);\n        return result;\n    }\n    return result;",
  "\tif (arr.size() == 0) {\n\t\treturn std::vector<long>();\n\t}\n\tstd::vector<long>\
    \ result(2);\n\tlong minEven = INT_MAX;\n\tfor (long i = 0; i < arr.size(); i++)\
    \ {\n\t\tif (arr[i] % 2 == 0 && arr[i] < minEven) {\n\t\t\tminEven = arr[i];\n\
    \t\t\tresult[0] = minEven;\n\t\t\tresult[1] = i;\n\t\t}\n\t}\n\tif (minEven ==\
    \ INT_MAX) {\n\t\treturn std::vector<long>();\n\t}\n\treturn result;", "    if(arr.size()\
    \ == 0) return {};\n    int min = INT_MAX;\n    int min_i = -1;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            min_i = i;\n        }\n    }\n    if(min_i\
    \ != -1) {\n        return {arr[min_i], min_i};\n    }\n    return {};", "  int\
    \ i;\n  std::vector<long> values;\n  for (i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0) {\n      values.push_back(arr[i]);\n    }\n  }\n  if (values.size()\
    \ > 0) {\n    std::sort(values.begin(), values.end());\n    int value = values[0];\n\
    \    for (i = 0; i < arr.size(); i++) {\n      if (arr[i] == value) {\n      \
    \  break;\n      }\n    }\n    return {value, i};\n  }\n  return {};", "    if(arr.size()==0)\n\
    \        return {};\n    std::vector<long> res;\n    std::map<long, long> m;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0)\n            m[arr[i]]=i;\n\
    \    }\n    if(m.size()==0)\n        return {};\n    auto it=m.begin();\n    res.push_back(it->first);\n\
    \    res.push_back(it->second);\n    return res;", "  std::vector<long> even_vec;\n\
    \  std::vector<long> res_vec;\n  std::vector<long> empty_vec;\n  long min_even_num;\n\
    \  long min_even_num_idx;\n  long min_even_num_count = 0;\n  if (arr.size() ==\
    \ 0) {\n    return empty_vec;\n  }\n  for (std::vector<long>::iterator it = arr.begin();\
    \ it != arr.end(); ++it) {\n    if (*it % 2 == 0) {\n      even_vec.push_back(*it);\n\
    \    }\n  }\n  if (even_vec.size() == 0) {\n    return empty_vec;\n  }\n  min_even_num\
    \ = *std::min_element(even_vec.begin(), even_vec.end());\n  std::cout << \"min_even_num\
    \ : \" << min_even_num << std::endl;\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] == min_even_num) {\n      min_even_num_count += 1;\n     \
    \ min_even_num_idx = i;\n      if (min_even_num_count > 1) {\n        break;\n\
    \      }\n    }\n  }\n  res_vec.push_back(min_even_num);\n  res_vec.push_back(min_even_num_idx);\n\
    \  return res_vec;", "    std::vector<long> result;\n    int firstEven = std::find_if(arr.begin(),\
    \ arr.end(),\n                                 [](int i) { return i % 2 == 0;\
    \ }) - arr.begin();\n    if (firstEven == arr.size())\n        return result;\n\
    \    auto minElement = std::min_element(arr.begin() + firstEven, arr.end(),\n\
    \                                       [](int i, int j) { return i % 2 == 0 &&\
    \ j % 2 == 0 ? i < j : false; });\n    result.push_back(*minElement);\n    result.push_back(minElement\
    \ - arr.begin());\n    return result;", "    std::vector<long> result;\n    long\
    \ min = 0;\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0) {\n            if (count == 0) {\n              \
    \  min = arr[i];\n                result.push_back(min);\n                result.push_back(i);\n\
    \                count++;\n            } else if (arr[i] < min) {\n          \
    \      min = arr[i];\n                result.pop_back();\n                result.pop_back();\n\
    \                result.push_back(min);\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    return result;", "    // your code here\n\
    \    long min_index=arr.size();\n    long min_num=1000000001;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0 && arr[i]<min_num){\n            min_num=arr[i];\n   \
    \         min_index=i;\n        }\n    }\n    if(min_index==arr.size()){\n   \
    \     return {};\n    }\n    return {min_num,min_index};", "  std::vector<long>\
    \ result = {};\n  long smallestEven = INT_MAX;\n  int index = -1;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      index = i;\n    }\n  }\n  if (index ==\
    \ -1) {\n    return result;\n  }\n  result.push_back(smallestEven);\n  result.push_back(index);\n\
    \  return result;", "    std::vector<long> result;\n    int len = arr.size();\n\
    \    if(len <= 0) return result;\n    long min = INT_MAX;\n    int minIndex =\
    \ -1;\n    for(int i = 0; i < len; i++) {\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if(minIndex != -1) {\n        result.push_back(min);\n        result.push_back(minIndex);\n\
    \    }\n    return result;", "  long minIndex = -1;\n  long min = 2147483647;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] <\
    \ min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex\
    \ == -1) {\n    return {};\n  }\n  return {min, minIndex};", "    std::vector<long>\
    \ solu(2);\n    if(arr.size() == 0) return solu;\n    long min_value = INT_MAX;\n\
    \    long min_value_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n  \
    \      if(arr[i] % 2 == 0 && arr[i] < min_value){\n            min_value = arr[i];\n\
    \            min_value_index = i;\n        }\n    }\n    if(min_value_index !=\
    \ -1){\n        solu[0] = min_value;\n        solu[1] = min_value_index;\n   \
    \ }\n    return solu;", "    int n = arr.size();\n    std::vector<long> ans(2);\n\
    \    if(n==0) return ans;\n    for(int i=0;i<n;i++){\n        if(arr[i]%2==0){\n\
    \            ans[0] = arr[i];\n            ans[1] = i;\n            break;\n \
    \       }\n    }\n    if(ans[0]==0) return ans;\n    for(int i=0;i<n;i++){\n \
    \       if(arr[i]%2==0){\n            if(arr[i]<ans[0]){\n                ans[0]\
    \ = arr[i];\n                ans[1] = i;\n            }\n        }\n    }\n  \
    \  return ans;", "    std::vector<long> result;\n    if (arr.size() == 0) {\n\
    \        return result;\n    }\n    int i, smallIndex = -1;\n    long smallEven\
    \ = INT_MAX;\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < smallEven) {\n            smallEven = arr[i];\n            smallIndex\
    \ = i;\n        }\n    }\n    if (smallIndex == -1) {\n        return result;\n\
    \    }\n    result.push_back(smallEven);\n    result.push_back(smallIndex);\n\
    \    return result;", "    long min_even = -1;\n    long min_index = -1;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (min_even\
    \ == -1 || arr[i] < min_even)) {\n            min_even = arr[i];\n           \
    \ min_index = i;\n        }\n    }\n    if (min_even == -1) return {};\n    return\
    \ {min_even, min_index};", "    std::vector<long> result;\n    int min = INT_MAX;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            result.push_back(min);\n  \
    \          result.push_back(i);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ res;\n  if (arr.size() == 0) {\n    return res;\n  }\n  long min = arr[0];\n\
    \  long idx = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2\
    \ == 0 && arr[i] < min) {\n      min = arr[i];\n      idx = i;\n    }\n  }\n \
    \ if (min % 2 == 0) {\n    res.push_back(min);\n    res.push_back(idx);\n  }\n\
    \  return res;", "  long min = 2147483647;\n  long minIndex = 2147483647;\n  bool\
    \ hasEven = false;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ % 2 == 0) {\n      hasEven = true;\n      if (arr[i] < min) {\n        min =\
    \ arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  if (hasEven) {\n    return\
    \ {min, minIndex};\n  } else {\n    return {};\n  }", "    std::vector<long> result;\n\
    \    long minEvenValue = INT_MAX;\n    for (size_t i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < minEvenValue) {\n            minEvenValue\
    \ = arr[i];\n            result.push_back(minEvenValue);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    int index = -1;\n    long small_value\
    \ = INT_MAX;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2\
    \ == 0 && arr[i] < small_value) {\n            small_value = arr[i];\n       \
    \     index = i;\n        }\n    }\n    if(index == -1) {\n        return {};\n\
    \    }\n    return {small_value, index};", "    int j = arr.size();\n    long\
    \ first;\n    if(j==0)\n        return {};\n    else\n    {\n        for(int i=0;i<j;i++)\n\
    \        {\n            if(arr[i]%2==0)\n            {\n                first\
    \ = arr[i];\n                break;\n            }\n        }\n        for(int\
    \ i=0;i<j;i++)\n        {\n            if(arr[i]<first && arr[i]%2==0)\n     \
    \       {\n                first = arr[i];\n            }\n        }\n       \
    \ for(int i=0;i<j;i++)\n        {\n            if(arr[i]==first)\n           \
    \ {\n                return {first,i};\n            }\n        }\n    }", "  if\
    \ (arr.size() == 0) {\n    return {};\n  }\n  std::vector<long> res;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      res.push_back(arr[i]);\n\
    \      res.push_back(i);\n      return res;\n    }\n  }\n  return {};", "    long\
    \ minValue = INT_MAX;\n    int index = 0;\n    bool found = false;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < minValue)\
    \ {\n            minValue = arr[i];\n            index = i;\n            found\
    \ = true;\n        }\n    }\n    std::vector<long> ans;\n    if (found) {\n  \
    \      ans.push_back(minValue);\n        ans.push_back(index);\n    }\n    return\
    \ ans;", "    std::vector<long> res = {};\n    long index = 0;\n    long value\
    \ = LONG_MAX;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       temp = arr[i];\n        if (temp % 2 == 0 && temp < value) {\n       \
    \     value = temp;\n            index = i;\n        }\n    }\n    if (value !=\
    \ LONG_MAX) {\n        res.push_back(value);\n        res.push_back(index);\n\
    \    }\n    return res;", "\tbool is_found = false;\n\tint found_min = 0;\n\t\
    int index_min = 0;\n\t//validate\n\tif (arr.size() <= 0) {\n\t\treturn std::vector<long>();\n\
    \t}\n\tif (arr.size() > 10000) {\n\t\tthrow std::invalid_argument(\"A large vector\
    \ was passed to function pluck, size should be less than or equal to 10000\");\n\
    \t}\n\tfor (size_t i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] < 0) {\n\t\t\t\
    throw std::invalid_argument(\"The passed vector has an element less than 0\");\n\
    \t\t}\n\t}\n\tfor (size_t i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 ==\
    \ 0) {\n\t\t\tis_found = true;\n\t\t\tfound_min = arr[i];\n\t\t\tindex_min = i;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (is_found) {\n\t\tfor (size_t i = 0; i < arr.size();\
    \ i++) {\n\t\t\tif (arr[i] % 2 == 0 && arr[i] < found_min) {\n\t\t\t\tfound_min\
    \ = arr[i];\n\t\t\t\tindex_min = i;\n\t\t\t}\n\t\t}\n\t\treturn std::vector<long>({\
    \ (long)found_min, (long)index_min });\n\t}\n\telse {\n\t\treturn std::vector<long>();\n\
    \t}", "    int min = INT_MAX;\n    int minIndex = INT_MAX;\n    int index = 0;\n\
    \    for (auto &i : arr) {\n        if (i % 2 == 0 && i < min) {\n           \
    \ min = i;\n            minIndex = index;\n        }\n        index++;\n    }\n\
    \    std::vector<long> result;\n    if (min != INT_MAX) {\n        result.push_back(min);\n\
    \        result.push_back(minIndex);\n    }\n    return result;", "  int n = arr.size();\n\
    \  if(n == 0) return std::vector<long>();\n  std::vector<long> res(2);\n  int\
    \ min_even = INT_MAX;\n  int min_even_index = INT_MAX;\n  for(int i = 0; i < n;\
    \ i++) {\n    if(arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n\
    \      min_even_index = i;\n    }\n  }\n  if(min_even == INT_MAX) return std::vector<long>();\n\
    \  res[0] = min_even;\n  res[1] = min_even_index;\n  return res;", "    if(arr.size()==0)\n\
    \        return arr;\n    std::vector<long> res;\n    long min_value = INT_MAX;\n\
    \    int index = 0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0\
    \ && arr[i]<min_value){\n            min_value = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if(min_value==INT_MAX)\n        return res;\n    res.push_back(min_value);\n\
    \    res.push_back(index);\n    return res;", "\tlong min=INT_MAX;\n\tlong index=INT_MAX;\n\
    \tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]%2==0 && arr[i]<min){\n\t\t\tmin=arr[i];\n\
    \t\t\tindex=i;\n\t\t}\n\t}\n\tif(min==INT_MAX)\n\t\treturn {};\n\treturn {min,index};",
  "    // your code here\n    if(arr.size()==0)\n        return {};\n    else{\n \
    \       std::vector<long> ret;\n        long c_smallest_even=INT_MAX;\n      \
    \  long c_smallest_even_i=-1;\n        for(int i=0;i<arr.size();i++){\n      \
    \      if(arr[i]%2==0 && arr[i]<c_smallest_even){\n                c_smallest_even=arr[i];\n\
    \                c_smallest_even_i=i;\n            }\n        }\n        if(c_smallest_even_i==-1)\n\
    \            return {};\n        else{\n            ret.push_back(c_smallest_even);\n\
    \            ret.push_back(c_smallest_even_i);\n            return ret;\n    \
    \    }\n    }", "    std::vector<long> result;\n    long smallestValue = 0;\n\
    \    long smallestIndex = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (smallestValue == 0) {\n     \
    \           smallestValue = arr[i];\n                smallestIndex = i;\n    \
    \        } else if (arr[i] < smallestValue) {\n                smallestValue =\
    \ arr[i];\n                smallestIndex = i;\n            }\n        }\n    }\n\
    \    if (smallestValue == 0) {\n        return result;\n    }\n    result.push_back(smallestValue);\n\
    \    result.push_back(smallestIndex);\n    return result;", "    std::vector<long>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    long\
    \ smallestEvenValue = 10001;\n    long smallestEvenValueIndex = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i]%2 == 0 && arr[i] < smallestEvenValue)\
    \ {\n            smallestEvenValue = arr[i];\n            smallestEvenValueIndex\
    \ = i;\n        }\n    }\n    if (smallestEvenValue == 10001) {\n        return\
    \ result;\n    }\n    result.push_back(smallestEvenValue);\n    result.push_back(smallestEvenValueIndex);\n\
    \    return result;", "\t\n\t\tif(arr.size()==0)\n\t\t\treturn {};\n\t\t\n\t\t\
    long min=INT_MAX;\n\t\tint index=-1;\n\t\tfor(int i=0;i<arr.size();i++)\n\t\t\
    {\n\t\t\tif(arr[i]%2==0)\n\t\t\t{\n\t\t\t\tif(arr[i]<min)\n\t\t\t\t{\n\t\t\t\t\
    \tmin=arr[i];\n\t\t\t\t\tindex=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(index!=-1)\n\
    \t\t{\n\t\t\treturn {min,index};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn {};\n\t\
    \t}\n\t\t\t", "  int min;\n  int index = -1;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      if (index == -1) {\n        min =\
    \ arr[i];\n        index = i;\n      } else {\n        if (arr[i] < min) {\n \
    \         min = arr[i];\n          index = i;\n        }\n      }\n    }\n  }\n\
    \  std::vector<long> result;\n  if (index == -1) {\n    return result;\n  }\n\
    \  result.push_back(min);\n  result.push_back(index);\n  return result;", "  std::vector<long>\
    \ ans;\n  if (arr.size() == 0) {\n    return ans;\n  }\n  long min = 100001;\n\
    \  long index = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ != 0 && arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      index\
    \ = i;\n    }\n  }\n  if (min == 100001) {\n    return ans;\n  }\n  ans.push_back(min);\n\
    \  ans.push_back(index);\n  return ans;", "    long m = LONG_MAX;\n    int index\
    \ = -1;\n    int i = 0;\n    for (auto& num : arr) {\n        if (num > 0 && num\
    \ % 2 == 0 && num < m) {\n            m = num;\n            index = i;\n     \
    \   }\n        i++;\n    }\n    std::vector<long> vec;\n    if (index != -1) {\n\
    \        vec.push_back(m);\n        vec.push_back(index);\n    }\n    return vec;",
  "\tstd::vector<long> result;\n\tstd::vector<long> evenArr;\n\tlong counter = 0;\n\
    \tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\t\
    evenArr.push_back(arr[i]);\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif (counter > 0) {\n\
    \t\t// std::cout << \"evenArr \" << std::endl;\n\t\t// for (long i = 0; i < evenArr.size();\
    \ i++) {\n\t\t// \tstd::cout << evenArr[i] << \" \";\n\t\t// }\n\t\t// std::cout\
    \ << std::endl;\n\t\tlong min = evenArr[0];\n\t\tlong minIdx = 0;\n\t\tfor (long\
    \ i = 0; i < evenArr.size(); i++) {\n\t\t\tif (evenArr[i] < min) {\n\t\t\t\tmin\
    \ = evenArr[i];\n\t\t\t\tminIdx = i;\n\t\t\t}\n\t\t}\n\t\tresult.push_back(min);\n\
    \t\tlong counterIdx = 0;\n\t\tfor (long i = 0; i < arr.size(); i++) {\n\t\t\t\
    if (arr[i] == min) {\n\t\t\t\tif (counterIdx == minIdx) {\n\t\t\t\t\tresult.push_back(i);\n\
    \t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tcounterIdx++;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result;", "    int count = 0;\n    int tmp = -1;\n    for (long l\
    \ : arr) {\n        if (l % 2 == 0) {\n            count++;\n            if (tmp\
    \ == -1) {\n                tmp = l;\n            } else {\n                tmp\
    \ = std::min(tmp, l);\n            }\n        }\n    }\n    std::vector<long>\
    \ res;\n    if (count == 0) {\n        return res;\n    }\n    int index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == tmp) {\n  \
    \          index = i;\n            break;\n        }\n    }\n    res.push_back(tmp);\n\
    \    res.push_back(index);\n    return res;", "  std::vector<long> ret;\n  int\
    \ min = INT_MAX;\n  int minIdx = INT_MAX;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] < min && arr[i] % 2 == 0) {\n      min = arr[i];\n      minIdx\
    \ = i;\n    }\n  }\n  if (minIdx != INT_MAX) {\n    ret.push_back(min);\n    ret.push_back(minIdx);\n\
    \  }\n  return ret;", "    int min_index, min_value;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            min_index =\
    \ i;\n            min_value = arr[i];\n            break;\n        }\n    }\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < min_value) {\n                min_index = i;\n     \
    \           min_value = arr[i];\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (min_value % 2 == 0) {\n        result.push_back(min_value);\n\
    \        result.push_back(min_index);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    // loop over the array\n    int minVal = -1;\n    int minValIndex\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != 0 &&\
    \ arr[i] % 2 == 0) {\n            if (minVal == -1) {\n                minVal\
    \ = arr[i];\n                minValIndex = i;\n            } else if (arr[i] <\
    \ minVal) {\n                minVal = arr[i];\n                minValIndex = i;\n\
    \            }\n        }\n    }\n    if (minVal != -1) {\n        res.push_back(minVal);\n\
    \        res.push_back(minValIndex);\n    }\n    return res;", "   if(arr.size()\
    \ == 0)\n      return arr;\n   long min = arr[0];\n   int index = 0;\n   bool\
    \ found = false;\n   for(int i = 0; i < arr.size(); i++) {\n      if(arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n         min = arr[i];\n         index = i;\n   \
    \      found = true;\n      }\n   }\n   if(found) {\n      std::vector<long> res;\n\
    \      res.push_back(min);\n      res.push_back(index);\n      return res;\n \
    \  }\n   return arr;", "  if (arr.size() == 0) {\n    return {};\n  }\n  std::vector<long>\
    \ ans;\n  auto it = std::find_if(arr.begin(), arr.end(), [](long i) { return i\
    \ % 2 == 0; });\n  if (it == arr.end()) {\n    return {};\n  }\n  ans.push_back(*it);\n\
    \  ans.push_back(std::distance(arr.begin(), it));\n  return ans;", "  long n =\
    \ arr.size();\n  if (n == 0) return {};\n  long ans = INT_MAX;\n  int idx = 0;\n\
    \  for (int i = 0; i < n; i++) {\n    if (arr[i] == 0) {\n      ans = 0;\n   \
    \   idx = i;\n      break;\n    }\n    if (arr[i] % 2 == 0) {\n      if (arr[i]\
    \ < ans) {\n        ans = arr[i];\n        idx = i;\n      }\n    }\n  }\n  return\
    \ {ans, idx};", "    long min_even=std::numeric_limits<long>::max();\n    long\
    \ min_index=0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0 &&\
    \ arr[i]<min_even){\n            min_even=arr[i];\n            min_index=i;\n\
    \        }\n    }\n    if(min_even==std::numeric_limits<long>::max()){\n     \
    \   return {};\n    }\n    return {min_even,min_index};", "    // Good luck!\n\
    \    int n = arr.size();\n    int i, j;\n    int flag = 0;\n    int cnt = 0;\n\
    \    long min_even = INT_MAX;\n    std::vector<long> sol;\n    if(n == 0)\n  \
    \      return sol;\n    for(i = 0; i < n; i++)\n    {\n        if(arr[i]%2 ==\
    \ 0)\n        {\n            flag = 1;\n            cnt++;\n            if(arr[i]\
    \ < min_even)\n            {\n                min_even = arr[i];\n           \
    \     j = i;\n            }\n        }\n    }\n    if(cnt == 0)\n        return\
    \ sol;\n    sol.push_back(min_even);\n    sol.push_back(j);\n    return sol;",
  "    // Your code here.\n    if(arr.size()==0)\n    {\n        return arr;\n   \
    \ }\n    else\n    {\n        long min=INT_MAX;\n        int index;\n        for(int\
    \ i=0;i<arr.size();i++)\n        {\n            if(arr[i]%2==0 && arr[i]<min)\n\
    \            {\n                min=arr[i];\n                index=i;\n      \
    \      }\n        }\n        std::vector<long> vec;\n        if(min==INT_MAX)\n\
    \        {\n            return vec;\n        }\n        else\n        {\n    \
    \        vec.push_back(min);\n            vec.push_back(index);\n            return\
    \ vec;\n        }\n    }", "    long min_even = LONG_MAX;\n    long min_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min_index == -1) {\n        return {};\n   \
    \ }\n    return {min_even, min_index};", "    std::vector<long> result = {};\n\
    \    int min = 10000;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] < min && arr[i] % 2 == 0) {\n            min = arr[i];\n           \
    \ result.push_back(min);\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    if(arr.size() == 0) return std::vector<long>();\n \
    \   std::vector<long> result;\n    long min_even_value = INT_MAX;\n    long min_index\
    \ = INT_MAX;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] ==\
    \ 0) {\n            result.push_back(0);\n            result.push_back(i);\n \
    \           return result;\n        }\n        if(arr[i] % 2 == 0 && arr[i] <\
    \ min_even_value) {\n            min_even_value = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if(min_even_value == INT_MAX) return std::vector<long>();\n\
    \    result.push_back(min_even_value);\n    result.push_back(min_index);\n   \
    \ return result;", "  std::vector<long> vec;\n  if(arr.size()==0)\n    return\
    \ vec;\n  else{\n    std::sort(arr.begin(),arr.end());\n    std::vector<long>::iterator\
    \ it;\n    it=std::find_if(arr.begin(),arr.end(),[](long i){return i%2==0;});\n\
    \    if(it==arr.end())\n      return vec;\n    else{\n      long value=*it;\n\
    \      long index=it-arr.begin();\n      vec.push_back(value);\n      vec.push_back(index);\n\
    \      return vec;\n    }\n  }", "\tlong min = 999999999;\n\tint  min_idx = 0;\n\
    \tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] <\
    \ min) {\n\t\t\tmin = arr[i];\n\t\t\tmin_idx = i;\n\t\t}\n\t}\n\tif (min == 999999999)\n\
    \t\treturn {};\n\treturn { min, min_idx };", "\t\tstd::vector<long> index = {\
    \ -1 };\n\t\tlong min = 0;\n\t\tfor (long i = 0; i < arr.size(); i++) {\n\t\t\t\
    \tif (arr[i] % 2 == 0) {\n\t\t\t\t\t\tif (index[0] == -1) {\n\t\t\t\t\t\t\t\t\
    index[0] = i;\n\t\t\t\t\t\t\t\tmin = arr[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\
    \ if (arr[i] < min) {\n\t\t\t\t\t\t\t\tindex[0] = i;\n\t\t\t\t\t\t\t\tmin = arr[i];\n\
    \t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tindex.push_back(min);\n\t\treturn index;",
  "    long min = INT_MAX;\n    int index = -1;\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if(index\
    \ == -1) {\n        return res;\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;", "  std::vector<long> v;\n  long i = 0;\n  long val = 10000000000;\n\
    \  long pos = 0;\n  for (auto& el : arr) {\n    if (el % 2 == 0 && el < val) {\n\
    \      val = el;\n      pos = i;\n    }\n    i++;\n  }\n  if (val == 10000000000)\n\
    \    return v;\n  v.push_back(val);\n  v.push_back(pos);\n  return v;", "    std::vector<long>\
    \ ans;\n    if(arr.size()==0) return ans;\n    int smeven = INT_MAX;\n    int\
    \ min_idx = 0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<smeven &&\
    \ arr[i]%2==0){\n            smeven = arr[i];\n            min_idx = i;\n    \
    \    }\n    }\n    if(smeven == INT_MAX) return ans;\n    ans.push_back(smeven);\n\
    \    ans.push_back(min_idx);\n    return ans;", "  int min = INT_MAX;\n  int minIndex\
    \ = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] != 0 && arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n\
    \  }\n  std::vector<long> result;\n  if (minIndex == -1) {\n    return result;\n\
    \  }\n  result.push_back(min);\n  result.push_back(minIndex);\n  return result;",
  "    std::vector<long> c = {};\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            c.push_back(arr[i]);\n        }\n\
    \    }\n    std::sort(c.begin(), c.end());\n    if (c.size() == 0) {\n       \
    \ return {};\n    }\n    long ans = c[0];\n    long index = std::find(arr.begin(),\
    \ arr.end(), ans) - arr.begin();\n    std::vector<long> ans1 = { ans, index };\n\
    \    return ans1;", "\tint num=0;\n\tint idx=0;\n\tint count = 0;\n\tfor(int i=0;i<arr.size();i++){\n\
    \t\tif(arr[i]%2==0){\n\t\t\tif(count==0){\n\t\t\t\tnum = arr[i];\n\t\t\t\tidx\
    \ = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(arr[i]<num){\n\t\t\t\
    \t\tnum = arr[i];\n\t\t\t\t\tidx = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<long>\
    \ vec;\n\tif(count>0){\n\t\tvec.push_back(num);\n\t\tvec.push_back(idx);\n\t}\n\
    \treturn vec;", "  std::vector<long> ret;\n  if (arr.size() == 0) return ret;\n\
    \  int min = INT_MAX;\n  int minIndex = -1;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n  \
    \    minIndex = i;\n    }\n  }\n  if (minIndex >= 0) {\n    ret.push_back(min);\n\
    \    ret.push_back(minIndex);\n  }\n  return ret;", "    std::vector<long> resp;\n\
    \    if(arr.size() == 0)\n        return resp;\n    long smallest_value = 1000*1000*1000*1000;\n\
    \    int smallest_index = 0;\n    for(unsigned int i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] % 2 == 0){\n            if(arr[i] < smallest_value){\n    \
    \            smallest_value = arr[i];\n                smallest_index = i;\n \
    \           }\n        }\n    }\n    if(smallest_value == 1000*1000*1000*1000)\n\
    \        return resp;\n    resp.push_back(smallest_value);\n    resp.push_back(smallest_index);\n\
    \    return resp;", "    if(arr.size() == 0)\n        return {};\n    int min,\
    \ min_index;\n    min = min_index = -1;\n    for(int i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i]%2 == 0) {\n            if(min == -1) {\n              \
    \  min = arr[i];\n                min_index = i;\n            }\n            else\
    \ if(arr[i] < min) {\n                min = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n    }\n    if(min == -1)\n        return {};\n\
    \    return {(long)min, (long)min_index};", "    std::vector<long> result;\n \
    \   long min_even = LONG_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n       \
    \         min_even = arr[i];\n                result.clear();\n              \
    \  result.push_back(min_even);\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    return result;", "    std::vector<long> output;\n\
    \    if(arr.size() == 0)\n        return output;\n    else{\n        std::sort(arr.begin(),\
    \ arr.end());\n        int i = 0;\n        while(i < arr.size() && arr[i] % 2\
    \ != 0)\n            i++;\n        if(i == arr.size())\n            return output;\n\
    \        else{\n            output.push_back(arr[i]);\n            output.push_back(i);\n\
    \            return output;\n        }\n    }", "    long ind = -1;\n    long\
    \ val = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (ind == -1) {\n                ind = i;\n        \
    \        val = arr[i];\n            } else if (arr[i] < val) {\n             \
    \   ind = i;\n                val = arr[i];\n            }\n        }\n    }\n\
    \    std::vector<long> ret;\n    if (ind != -1) {\n        ret.push_back(val);\n\
    \        ret.push_back(ind);\n    }\n    return ret;", "    std::vector<long>\
    \ v;\n    if(arr.size()==0) return v;\n    long min=INT_MAX;\n    long index=INT_MAX;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0 && arr[i]<min){\n\
    \            min=arr[i];\n            index=i;\n        }\n    }\n    if(min==INT_MAX)\
    \ return v;\n    v.push_back(min);\n    v.push_back(index);\n    return v;", " \
    \   int l = arr.size();\n    int min = INT_MAX;\n    int minInd = INT_MAX;\n \
    \   std::vector<long> ret;\n    int cnt = 0;\n    bool flag = false;\n    for(int\
    \ i = 0; i < l; i++) {\n        if(arr[i]%2 == 0) {\n            if(arr[i] < min)\
    \ {\n                min = arr[i];\n                minInd = i;\n            \
    \    cnt = 1;\n                flag = true;\n            } else if(arr[i] == min)\
    \ {\n                cnt++;\n            }\n        }\n    }\n    if(flag) {\n\
    \        ret.push_back(min);\n        ret.push_back(minInd);\n    }\n    return\
    \ ret;", "  if (arr.size() == 0) return {};\n  if (arr.size() == 1) {\n    if\
    \ (arr[0] % 2 == 0) return {arr[0], 0};\n    else return {};\n  }\n  std::vector<long>\
    \ res = {};\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0)\
    \ {\n      if (res.size() == 0) res = {arr[i], i};\n      else if (arr[i] < res[0])\
    \ res = {arr[i], i};\n    }\n  }\n  return res;", "    std::vector<long> answer;\n\
    \    answer.resize(2);\n    if (arr.size() == 0) {\n        return answer;\n \
    \   }\n    else {\n        int i, j;\n        int smallest = 0;\n        int index\
    \ = 0;\n        for (i = 0; i < arr.size(); i++) {\n            if (arr[i] % 2\
    \ == 0) {\n                smallest = arr[i];\n                index = i;\n  \
    \              break;\n            }\n        }\n        for (j = i + 1; j < arr.size();\
    \ j++) {\n            if (arr[j] % 2 == 0) {\n                if (arr[j] < smallest)\
    \ {\n                    smallest = arr[j];\n                    index = j;\n\
    \                }\n            }\n        }\n        if (smallest == 0) {\n \
    \           return answer;\n        }\n        else {\n            answer[0] =\
    \ smallest;\n            answer[1] = index;\n            return answer;\n    \
    \    }\n    }", "    std::vector<long> result;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \            result.push_back(i);\n            return result;\n        }\n   \
    \ }\n    return result;", "    int x=0;\n    int y=0;\n    bool is_first=true;\n\
    \    int l=arr.size();\n    for(int i=0;i<l;i++){\n        if(arr[i]%2==0){\n\
    \            if(is_first){\n                x=arr[i];\n                y=i;\n\
    \                is_first=false;\n            }\n            else{\n         \
    \       if(arr[i]<x){\n                    x=arr[i];\n                    y=i;\n\
    \                }\n            }\n        }\n    }\n    std::vector<long> v;\n\
    \    if(!is_first){\n        v.push_back(x);\n        v.push_back(y);\n    }\n\
    \    return v;", "\tint m = 100001;\n\tint index = 0;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tif (arr[i] < m && arr[i] % 2 == 0) {\n\t\t\tm = arr[i];\n\t\t\t\
    index = i;\n\t\t}\n\t}\n\tif (m != 100001) {\n\t\tstd::vector<long> ans{m, index};\n\
    \t\treturn ans;\n\t}\n\treturn {};", "    long size = arr.size();\n    if(size\
    \ == 0) return std::vector<long>();\n    std::vector<long> ans(2);\n    ans[0]\
    \ = LONG_MAX;\n    ans[1] = LONG_MAX;\n    long i;\n    for(i = 0; i < size; i++)\
    \ {\n        if(arr[i] == 0) {\n            ans[0] = 0;\n            ans[1] =\
    \ i;\n            break;\n        }\n        if(arr[i] % 2 == 0 && arr[i] < ans[0])\
    \ {\n            ans[0] = arr[i];\n            ans[1] = i;\n        }\n    }\n\
    \    if(ans[0] == LONG_MAX) return std::vector<long>();\n    return ans;", " \
    \ std::vector<long> ans;\n  if (arr.size()==0) return ans;\n  int sm = INT_MAX;\n\
    \  for (int i=0; i<arr.size(); i++) {\n    if (arr[i]%2==0 && arr[i]<sm) {\n \
    \     sm = arr[i];\n      ans.clear();\n      ans.push_back(arr[i]);\n      ans.push_back(i);\n\
    \    }\n  }\n  return ans;", "\tstd::vector<long> res;\n\tif (arr.size() == 0)\
    \ {\n\t\treturn res;\n\t}\n\tstd::sort(arr.begin(), arr.end());\n\tint i = 0;\n\
    \tfor (i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\tres.push_back(arr[i]);\n\
    \t\t\tres.push_back(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr.size()) {\n\t\
    \tres.clear();\n\t}\n\treturn res;", "    // Write your code here\n    int min\
    \ = INT_MAX;\n    std::vector<long> result;\n    for(int i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] % 2 == 0 && arr[i] < min){\n            min = arr[i];\n\
    \            result.clear();\n            result.push_back(arr[i]);\n        \
    \    result.push_back(i);\n        }\n    }\n    return result;", "    if(arr.size()\
    \ == 0)\n        return {};\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ result;\n    int i = 0;\n    for(; i < arr.size(); i++) {\n        if(arr[i]%2\
    \ == 0) {\n            result.push_back(arr[i]);\n            result.push_back(i);\n\
    \            break;\n        }\n    }\n    if(i == arr.size())\n        return\
    \ {};\n    return result;", "    long minVal = INT_MAX;\n    int minVal_index\
    \ = INT_MAX;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2\
    \ == 0 && arr[i] < minVal) {\n            minVal = arr[i];\n            minVal_index\
    \ = i;\n        }\n    }\n    if(minVal == INT_MAX) {\n        std::vector<long>\
    \ empty_vec;\n        return empty_vec;\n    }\n    std::vector<long> res;\n \
    \   res.push_back(minVal);\n    res.push_back(minVal_index);\n    return res;",
  "    std::vector<long> ans;\n    int cnt = 0;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            if(cnt == 0) {\n        \
    \        ans.push_back(arr[i]);\n                ans.push_back(i);\n         \
    \       cnt++;\n            } else {\n                if(arr[i] < ans[0]) {\n\
    \                    ans[0] = arr[i];\n                    ans[1] = i;\n     \
    \           }\n            }\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    long minimum = 0;\n    int index = arr.size();\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] < minimum && arr[i] % 2 == 0)\
    \ {\n            minimum = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (index == arr.size()) {\n        return result;\n    }\n    result.push_back(minimum);\n\
    \    result.push_back(index);\n    return result;", "\tstd::vector<long> ans;\n\
    \tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\tif\
    \ (ans.size() == 0) {\n\t\t\t\tans.push_back(arr[i]);\n\t\t\t\tans.push_back(i);\n\
    \t\t\t}\n\t\t\telse if (arr[i] < ans[0]) {\n\t\t\t\tans[0] = arr[i];\n\t\t\t\t\
    ans[1] = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;", "    std::vector<long> res;\n\
    \    if(arr.size() == 0) return res;\n    long min = 99999999999999;\n    int\
    \ min_idx = -1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx\
    \ = i;\n        }\n    }\n    if(min_idx == -1) return res;\n    res.push_back(min);\n\
    \    res.push_back(min_idx);\n    return res;", "    std::vector<long> res;\n\
    \    long min = INT_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n        \
    \    res.clear();\n            res.push_back(arr[i]);\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    long\
    \ min = 0;\n    int i = 0;\n    int k = 0;\n    if(arr.size() <= 0)\n        return\
    \ result;\n    for(i = 0; i < arr.size(); i++)\n    {\n        if(arr[i] % 2 ==\
    \ 0)\n        {\n            min = arr[i];\n            k = i;\n            break;\n\
    \        }\n    }\n    if(i == arr.size())\n        return result;\n    for(int\
    \ j = i + 1; j < arr.size(); j++)\n    {\n        if(arr[j] % 2 == 0 && arr[j]\
    \ < min)\n        {\n            min = arr[j];\n            k = j;\n        }\n\
    \    }\n    result.push_back(min);\n    result.push_back(k);\n    return result;",
  "    // your code here\n    std::vector<long> ret;\n    if(arr.size()==0)\n    \
    \    return ret;\n    std::sort(arr.begin(),arr.end());\n    long min_even_index=arr.size();\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]==0)\n\
    \                min_even_index=i;\n            ret.push_back(arr[i]);\n     \
    \       ret.push_back(i);\n            return ret;\n        }\n    }\n    if(min_even_index!=arr.size()){\n\
    \        ret.push_back(0);\n        ret.push_back(min_even_index);\n    }\n  \
    \  return ret;", "    std::vector<long> result = {};\n    std::set<long> s;\n\
    \    if(arr.size() < 1)\n        return result;\n    if(arr.size() == 1)\n   \
    \     return arr;\n    for(long i = 0; i < arr.size(); i++)\n    {\n        if(arr[i]\
    \ % 2 == 0)\n            s.insert(arr[i]);\n    }\n    if(s.size() == 0)\n   \
    \     return result;\n    long smallest_value = *s.begin();\n    long smallest_index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++)\n    {\n        if(arr[i] ==\
    \ smallest_value)\n        {\n            smallest_index = i;\n            break;\n\
    \        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    std::vector<long> res;\n    if(arr.size() == 0)\n \
    \       return res;\n    int min = 100000;\n    int index = 0;\n    int temp_index\
    \ = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < min && arr[i]\
    \ % 2 == 0){\n            index = i;\n            min = arr[i];\n        }\n \
    \       else if(arr[i] == min && arr[i] % 2 == 0 && temp_index > i){\n       \
    \     index = i;\n            min = arr[i];\n        }\n        temp_index = i;\n\
    \    }\n    if(min == 100000)\n        return res;\n    res.push_back(min);\n\
    \    res.push_back(index);\n    return res;", "    if(arr.size()==0)\n       \
    \ return arr;\n    long smallest=arr[0];\n    int index=0;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0 && arr[i]<smallest){\n            smallest=arr[i];\n \
    \           index=i;\n        }\n    }\n    if(smallest%2!=0)\n        return\
    \ {};\n    else{\n        return {smallest,(long)index};\n    }", "    int s =\
    \ arr.size();\n    std::vector<long> res;\n    int minimum_value = INT_MAX;\n\
    \    int index = -1;\n    int index_min = -1;\n    for(int i = 0; i < s; i++)\
    \ {\n        if(arr[i]%2 == 0 && arr[i] < minimum_value) {\n            minimum_value\
    \ = arr[i];\n            index_min = i;\n        }\n    }\n    if(index_min ==\
    \ -1) {\n        return res;\n    }\n    res.push_back(minimum_value);\n    res.push_back(index_min);\n\
    \    return res;", "    std::vector<long> result;\n    long min = INT_MAX;\n \
    \   int min_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n           \
    \ min_index = i;\n        }\n    }\n    if (min_index != -1) {\n        result.push_back(min);\n\
    \        result.push_back(min_index);\n    }\n    return result;", "\tstd::vector<long>\
    \ result;\n\tint smallest = 99999;\n\tint index = 99999;\n\tfor (int i = 0; i\
    \ < arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] < smallest) {\n\t\t\t\
    smallest = arr[i];\n\t\t\tindex = i;\n\t\t}\n\t}\n\tif (smallest == 99999) {\n\
    \t\treturn result;\n\t}\n\tresult.push_back(smallest);\n\tresult.push_back(index);\n\
    \treturn result;", "    std::vector<long> res;\n    if(arr.size()==0)return res;\n\
    \    long min_val=-1;\n    int min_idx=-1;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0){\n            if(min_val==-1 || min_val>arr[i]){\n  \
    \              min_val=arr[i];\n                min_idx=i;\n            }\n  \
    \      }\n    }\n    if(min_val==-1)return res;\n    else{\n        res.push_back(min_val);\n\
    \        res.push_back(min_idx);\n        return res;\n    }", "    if(arr.size()\
    \ == 0)\n        return {};\n    if(arr.size() == 1)\n        return arr[0] %\
    \ 2 == 0 ? arr : {};\n    long minValue = INT_MAX;\n    int minIdx = INT_MAX;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i]\
    \ < minValue) {\n            minValue = arr[i];\n            minIdx = i;\n   \
    \     }\n    }\n    return minValue == INT_MAX ? std::vector<long>() : std::vector<long>({minValue,\
    \ minIdx});", "\t// your code here", "    // your code here\n    if(arr.size()==0)\n\
    \    {\n        return {};\n    }\n    std::vector<long>result;\n    auto min=std::min_element(arr.begin(),arr.end());\n\
    \    if(min%2==0)\n    {\n        result.push_back(*min);\n        auto position=std::find(arr.begin(),arr.end(),*min);\n\
    \        result.push_back(position-arr.begin());\n        return result;\n   \
    \ }\n    else\n    {\n    auto position=std::find(arr.begin(),arr.end(),*min);\n\
    \    arr.erase(position);\n    return pluck(arr);\n    }", "\t// Your code here\n\
    \t// vector<long> v;\n\tif (arr.size() == 0) {\n\t\treturn {};\n\t}\n\tlong min\
    \ = INT_MAX;\n\tint index = -1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\
    if (arr[i] % 2 == 0 && arr[i] < min) {\n\t\t\tmin = arr[i];\n\t\t\tindex = i;\n\
    \t\t}\n\t}\n\tif (index == -1) {\n\t\treturn {};\n\t}\n\treturn {min, index};",
  "  // your code here\n  std::vector<long> newarr;\n  if(arr.size()==0)\n  {\n  \
    \  return newarr;\n  }\n  else\n  {\n    long min=INT_MAX;\n    int index=-1;\n\
    \    for(int i=0;i<arr.size();i++)\n    {\n      if(arr[i]%2==0 && arr[i]<min)\n\
    \      {\n        min=arr[i];\n        index=i;\n      }\n    }\n    if(index==-1)\n\
    \    {\n      return newarr;\n    }\n    else\n    {\n      newarr.push_back(min);\n\
    \      newarr.push_back(index);\n      return newarr;\n    }\n  }", "    std::vector<long>\
    \ output = {};\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        if ((arr[i] % 2) == 0) {\n            output.push_back(arr[i]);\n\
    \            output.push_back(i);\n            return output;\n        }\n   \
    \ }\n    return output;", "    int minVal = INT_MAX;\n    int minValIndex = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < minVal) {\n            minVal = arr[i];\n            minValIndex = i;\n  \
    \      }\n    }\n    std::vector<long> res;\n    if (minValIndex != -1) {\n  \
    \      res.push_back(minVal);\n        res.push_back(minValIndex);\n    }\n  \
    \  return res;", "  //your code here\n  std::vector<long> result;\n  if(arr.size()\
    \ == 0) return result;\n  std::vector<long>::iterator smallest = std::min_element(arr.begin(),\
    \ arr.end());\n  if(arr.size() == 1) {\n    result.push_back(*smallest);\n   \
    \ result.push_back(0);\n    return result;\n  }\n  int second_smallest_index =\
    \ -1;\n  while(*smallest % 2 != 0) {\n    arr.erase(smallest);\n    if(arr.size()\
    \ == 0) return result;\n    smallest = std::min_element(arr.begin(), arr.end());\n\
    \  }\n  int i = 0;\n  for(; i < arr.size(); i++) {\n    if(arr[i] % 2 == 0 &&\
    \ arr[i] != *smallest) {\n      second_smallest_index = i;\n      break;\n   \
    \ }\n  }\n  for(; i < arr.size(); i++) {\n    if(arr[i] % 2 == 0 && arr[i] !=\
    \ *smallest && arr[i] < arr[second_smallest_index])\n      second_smallest_index\
    \ = i;\n  }\n  if(second_smallest_index != -1) {\n    result.push_back(arr[second_smallest_index]);\n\
    \    result.push_back(second_smallest_index);\n  }\n  else {\n    result.push_back(*smallest);\n\
    \    result.push_back(0);\n  }\n  return result;", "  std::vector<long> ans;\n\
    \  if (arr.size() == 0) {\n    return ans;\n  }\n  long min = -1;\n  int minIndex\
    \ = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n\
    \      if (min == -1) {\n        min = arr[i];\n        minIndex = i;\n      }\
    \ else if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n   \
    \   }\n    }\n  }\n  if (min == -1) {\n    return ans;\n  }\n  ans.push_back(min);\n\
    \  ans.push_back(minIndex);\n  return ans;", "  std::vector<long> ans;\n  long\
    \ small = 10001;\n  int index = 0;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] % 2 == 0) {\n      if (arr[i] < small) {\n        small = arr[i];\n\
    \        index = i;\n      }\n    }\n  }\n  if (small != 10001) {\n    ans.push_back(small);\n\
    \    ans.push_back(index);\n  }\n  return ans;"]
stop_tokens:
- "\n}"
