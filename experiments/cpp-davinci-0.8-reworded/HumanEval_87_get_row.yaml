name: HumanEval_87_get_row
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
  \ data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n\
  // each row may contain a different number of columns.\n// Given lst, and integer\
  \ x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1),\
  \ (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort\
  \ coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
  \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
  \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
  \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
  \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
  \ lst, long x) {\n"
tests: "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
  \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
  \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
  \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
  \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
  \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
  \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
  \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
  \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
  \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
  \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
  \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
  \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
  \ long>)std::make_tuple(2, 2)})));\n}\n"
completions: ["\tstd::vector<std::tuple<long, long>> v;\n\tfor (long i = 0; i < lst.size();\
    \ i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j]\
    \ == x)\n\t\t\t\tv.push_back(std::make_tuple(i, j));\n\t\t}\n\t}\n\tsort(v.begin(),\
    \ v.end());\n\treturn v;", "    std::vector<std::tuple<long, long>> result;\n\
    \    std::vector<std::tuple<long, long>> row;\n    int lst_size = lst.size();\n\
    \    for (int i = 0; i < lst_size; i++) {\n        int lst_row_size = lst[i].size();\n\
    \        for (int j = 0; j < lst_row_size; j++) {\n            if (lst[i][j] ==\
    \ x) {\n                row.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n    }\n    std::sort(row.begin(), row.end());\n    int row_size =\
    \ row.size();\n    for (int i = 0; i < row_size; i++) {\n        int j = i;\n\
    \        while (j < row_size && std::get<0>(row[i]) == std::get<0>(row[j])) {\n\
    \            j++;\n        }\n        std::sort(row.begin() + i, row.begin() +\
    \ j, std::greater<std::tuple<long, long>>());\n        i = j - 1;\n    }\n   \
    \ return row;", "\tstd::vector<std::tuple<long, long>> ans;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\t\
    if (lst[i][j] == x) {\n\t\t\t\tans.push_back(std::make_tuple(i, j));\n\t\t\t}\n\
    \t\t}\n\t}\n\tstd::sort(ans.begin(), ans.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n\t\t\tif (std::get<0>(a) == std::get<0>(b)) {\n\t\t\t\treturn std::get<1>(a)\
    \ > std::get<1>(b);\n\t\t\t}\n\t\t\treturn std::get<0>(a) < std::get<0>(b);\n\t\
    \t\t});\n\treturn ans;", "    int index_i, index_j;\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        index_i = i;\n\
    \        for (int j = 0; j < lst[i].size(); j++) {\n            index_j = j;\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(index_i,\
    \ index_j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    for (int i = 0; i < res.size(); i++) {\n        for (int j = i + 1; j < res.size();\
    \ j++) {\n            if (std::get<0>(res[i]) == std::get<0>(res[j])) {\n    \
    \            if (std::get<1>(res[i]) < std::get<1>(res[j])) {\n              \
    \      std::swap(res[i], res[j]);\n                }\n            }\n        }\n\
    \    }\n    return res;", "  std::vector<std::tuple<long, long>> v;\n  // Dont\
    \ forget the corner case of empty vector\n  if(lst.size() == 0)\n    return v;\n\
    \  for(unsigned long int i = 0; i < lst.size(); i++) {\n    for(unsigned long\
    \ int j = 0; j < lst[i].size(); j++) {\n      if(lst[i][j] == x) {\n        std::tuple<long,\
    \ long> t = std::make_tuple(i, j);\n        v.push_back(t);\n      }\n    }\n\
    \  }\n  // write your code here.\n  std::sort(v.begin(), v.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) == std::get<0>(b)\
    \ ? std::get<1>(a) > std::get<1>(b) : std::get<0>(a) < std::get<0>(b);\n  });\n\
    \  return v;", "    long n = lst.size();\n    std::vector<std::tuple<long, long>>\
    \ result;\n    for (long i = 0; i < n; i++) {\n        long m = lst[i].size();\n\
    \        for (long j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n \
    \               result.push_back(std::make_tuple(i, j));\n            }\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> v;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tint j = 0;\n\t\twhile\
    \ (j < lst[i].size()) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tstd::tuple<long,\
    \ long> t(i, j);\n\t\t\t\tv.push_back(t);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\t\
    for (int i = 0; i < v.size(); i++) {\n\t\tstd::cout << std::get<0>(v[i]) << \"\
    ,\" << std::get<1>(v[i]) << std::endl;\n\t}\n\treturn v;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    // solution starts here\n    if(lst.size() == 0)\n    {\n\
    \        return result;\n    }\n    int count = 0;\n    std::vector<std::vector<long>>\
    \ tmp;\n    std::vector<long> a;\n    for(auto it : lst)\n    {\n        for(auto\
    \ itr : it)\n        {\n            if(itr == x)\n            {\n            \
    \    a.push_back(count);\n                a.push_back(std::distance(it.begin(),\
    \ std::find(it.begin(), it.end(), x)));\n                tmp.push_back(a);\n \
    \               a.clear();\n            }\n        }\n        count++;\n    }\n\
    \    std::sort(tmp.begin(), tmp.end());\n    for(auto it : tmp)\n    {\n     \
    \   for(auto itr : it)\n        {\n            result.push_back(std::make_tuple(itr,\
    \ itr));\n        }\n    }\n    // solution ends here\n    return result;", " \
    \   std::vector<std::tuple<long, long>> coordinates;\n    // Write your code here\n\
    \    // To print results to the standard output you can use std::cout\n    //\
    \ Example: std::cout << \"Hello world!\";\n    long rows = lst.size();\n    for(long\
    \ i = 0; i < rows; i++) {\n        std::vector<long> row = lst[i];\n        long\
    \ cols = row.size();\n        for(long j = 0; j < cols; j++) {\n            if(row[j]\
    \ == x) {\n                coordinates.push_back(std::make_tuple(i, j));\n   \
    \         }\n        }\n    }\n    std::sort(coordinates.begin(), coordinates.end(),\
    \ [] (std::tuple<long, long> a, std::tuple<long, long> b) {\n        if(std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ coordinates;", "  std::vector<std::tuple<long, long>> ret;\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    for (int j = 0; j < lst[i].size(); j++) {\n    \
    \  if (lst[i][j] == x)\n        ret.push_back(std::make_tuple(i, j));\n    }\n\
    \  }\n  std::sort(ret.begin(), ret.end(), [](const std::tuple<long, long> &p1,\
    \ const std::tuple<long, long> &p2) {\n    if (std::get<0>(p1) == std::get<0>(p2))\n\
    \      return std::get<1>(p1) > std::get<1>(p2);\n    return std::get<0>(p1) <\
    \ std::get<0>(p2);\n  });\n  return ret;", "    // your code goes here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(int i = 0; i < lst.size(); i++) {\n        std::vector<long>\
    \ temp = lst[i];\n        std::sort(temp.begin(), temp.end(), std::greater<int>());\n\
    \        for(int j = 0; j < temp.size(); j++) {\n            if(temp[j] == x)\
    \ {\n                res.push_back(std::make_tuple(i, j));\n            }\n  \
    \      }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   // your code here\n    std::vector<std::tuple<long, long>> ans;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n\
    \            if(lst[i][j] == x){\n                ans.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    sort(ans.begin(), ans.end());\n \
    \   return ans;", "    std::vector<std::tuple<long, long>> ans;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j\
    \ = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n         \
    \       ans.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    for(long i = 0; i < ans.size(); i++) {\n        for(long j = i+1; j < ans.size();\
    \ j++) {\n            if(std::get<0>(ans[i]) > std::get<0>(ans[j])) {\n      \
    \          temp = ans;\n                ans[i] = temp[j];\n                ans[j]\
    \ = temp[i];\n            }\n        }\n    }\n    for(long i = 0; i < ans.size();\
    \ i++) {\n        for(long j = i+1; j < ans.size(); j++) {\n            if(std::get<0>(ans[i])\
    \ == std::get<0>(ans[j])) {\n                if(std::get<1>(ans[i]) < std::get<1>(ans[j]))\
    \ {\n                    temp = ans;\n                    ans[i] = temp[j];\n\
    \                    ans[j] = temp[i];\n                }\n            }\n   \
    \     }\n    }\n    return ans;", "  // your code goes here\n  std::vector<std::tuple<long,\
    \ long>> answer;\n  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0;\
    \ j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        answer.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  auto lambda = [](std::tuple<long, long> & a, std::tuple<long,\
    \ long> & b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a)\
    \ > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  };\n\
    \  std::sort(answer.begin(), answer.end(), lambda);\n  return answer;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::map<long, std::vector<long>> tmp;\n    long start_position\
    \ = 0;\n    for (auto& row : lst) {\n        long i = 0;\n        while (i < row.size())\
    \ {\n            if (row[i] == x) {\n                auto t = std::make_tuple(start_position,\
    \ i);\n                res.push_back(t);\n            }\n            i++;\n  \
    \      }\n        start_position++;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto& a, auto& b) {\n        auto res1 = std::get<0>(a) - std::get<0>(b);\n\
    \        if (res1 != 0) return res1 < 0;\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "  std::vector<std::tuple<long, long>> result;\n \
    \ // Remove this line and add your code here\n  int n = lst.size();\n  int m =\
    \ lst[0].size();\n  for(int i = 0; i < n; i++) {\n    for(int j = 0; j < m; j++)\
    \ {\n      if(lst[i][j] == x) {\n        result.push_back(std::make_tuple(i, j));\n\
    \      }\n    }\n  }\n  sort(result.begin(), result.end());\n  return result;",
  "\tstd::vector<std::tuple<long, long>> result;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] ==\
    \ x) {\n\t\t\t\tresult.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\
    \tstd::sort(result.begin(), result.end(), [](const std::tuple<long, long>& t1,\
    \ const std::tuple<long, long>& t2) {\n\t\tif (std::get<0>(t1) != std::get<0>(t2))\
    \ {\n\t\t\treturn std::get<0>(t1) < std::get<0>(t2);\n\t\t}\n\t\telse {\n\t\t\t\
    return std::get<1>(t1) > std::get<1>(t2);\n\t\t}\n\t});\n\treturn result;", "\t\
    std::vector<std::tuple<long, long>> res;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\
    \t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t}\n\t}\n\tstd::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\t\t\
    if (std::get<0>(a) == std::get<0>(b))\n\t\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\
    \t\t\treturn std::get<0>(a) < std::get<0>(b);\n\t\t\t});\n\treturn res;", "  \
    \  // YOUR CODE GOES HERE\n    std::vector<std::tuple<long, long>> vec;\n    for(int\
    \ i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n        \
    \    if(lst[i][j]==x){\n                vec.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    sort(vec.begin(),vec.end());\n    return\
    \ vec;", "    std::vector<std::tuple<long, long>> ret;\n    long i = 0;\n    for\
    \ (std::vector<long> row : lst) {\n        long j = 0;\n        for (long e :\
    \ row) {\n            if (e == x) {\n                ret.push_back(std::make_tuple(i,\
    \ j));\n            }\n            j++;\n        }\n        i++;\n    }\n    std::sort(ret.begin(),\
    \ ret.end(), [&](std::tuple<long, long> lhs, std::tuple<long, long> rhs) {\n \
    \       if (std::get<0>(lhs) == std::get<0>(rhs)) {\n            return std::get<1>(lhs)\
    \ > std::get<1>(rhs);\n        }\n        return std::get<0>(lhs) < std::get<0>(rhs);\n\
    \    });\n    return ret;", "    std::vector<std::tuple<long, long>> rtn;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                rtn.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(rtn.begin(), rtn.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ != std::get<0>(b)) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        } else {\n            return std::get<1>(a) > std::get<1>(b);\n     \
    \   }\n    });\n    return rtn;", '    // your code here', "\t// check if lst\
    \ is empty\n\t// if so, return empty vector\n\n\t// create a new vector of tuples,\
    \ result\n\tstd::vector<std::tuple<long, long>> result;\n\n\t// loop over all\
    \ rows\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\t// loop over all columns\n\
    \t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\t// check if i, j contains\
    \ x\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\t// if so, add it to result\n\t\t\t\t\
    result.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\n\t// return sorted\
    \ result\n\treturn result;", "\tstd::vector<std::tuple<long, long>> my_lst;\n\t\
    for (unsigned long i = 0; i < lst.size(); i++) {\n\t\tfor (unsigned long j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tmy_lst.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(my_lst.begin(), my_lst.end());\n\treturn my_lst;",
  "    // let's use the following scheme:\n    // a tuple is pair of row and column,\
    \ where they are numbered from 0\n    // lst[row][column] = x\n    // to not allocate\
    \ a lot of memory, we could return a list of\n    // pair of row, column\n   \
    \ // this is in the form of a tuple, but what is the best way to do that?\n  \
    \  // let's create a list\n    // std::vector<std::pair<long, long>> results;\n\
    \    // let's create a list of tuples\n    std::vector<std::tuple<long, long>>\
    \ results;\n    for (size_t row = 0; row < lst.size(); row++) {\n        for (size_t\
    \ column = 0; column < lst[row].size(); column++) {\n            if (lst[row][column]\
    \ == x) {\n                // found a match\n                // results.push_back(std::make_pair(row,\
    \ column));\n                results.push_back(std::make_tuple(row, column));\n\
    \            }\n        }\n    }\n    // sort them here\n    // also, create a\
    \ comparison function\n    // std::sort(results.begin(), results.end(), [](std::pair<long,\
    \ long>\n    // p1, std::pair<long, long> p2) {\n    //    if (p1.first < p2.first)\
    \ {\n    //        return true;\n    //    } else if (p1.first == p2.first) {\n\
    \    //        return p1.second > p2.second;\n    //    } else {\n    //     \
    \   return false;\n    //    }\n    //});\n    std::sort(results.begin(), results.end(),\
    \ [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        if (std::get<0>(t1)\
    \ < std::get<0>(t2)) {\n            return true;\n        } else if (std::get<0>(t1)\
    \ == std::get<0>(t2)) {\n            return std::get<1>(t1) > std::get<1>(t2);\n\
    \        }", "    // Write your code here\n    std::vector<std::tuple<long, long>>\
    \ ans;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n\
    \            if(lst[i][j]==x){\n                ans.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    std::sort(ans.begin(),ans.end());\n    for(int\
    \ i=0;i<ans.size();i++){\n        for(int j=i+1;j<ans.size();j++){\n         \
    \   if(std::get<0>(ans[i])==std::get<0>(ans[j])){\n                if(std::get<1>(ans[i])<std::get<1>(ans[j])){\n\
    \                    std::swap(ans[i],ans[j]);\n                }\n          \
    \  }\n        }\n    }\n    return ans;", "  std::vector<std::tuple<long, long>>\
    \ res;\n  int row = 0;\n  for (auto const &vec : lst) {\n    for (int i = 0; i\
    \ < vec.size(); i++) {\n      if (vec[i] == x) {\n        res.push_back(std::make_tuple(row,\
    \ i));\n      }\n    }\n    row++;\n  }\n  std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) < std::get<0>(b);\n\
    \  });\n  for (auto &vec : res) {\n    std::cout << std::get<0>(vec) << \" \"\
    \ << std::get<1>(vec) << std::endl;\n  }\n  return res;", "\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tint m = lst.size();\n\tfor (int i = 0; i < m; i++) {\n\t\tint\
    \ n = lst[i].size();\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (lst[i][j] ==\
    \ x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\t\
    return res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        long p = std::get<0>(a);\n\
    \        long q = std::get<0>(b);\n        long r = std::get<1>(a);\n        long\
    \ s = std::get<1>(b);\n        if (p < q) {\n            return true;\n      \
    \  } else if (p == q) {\n            if (r > s) {\n                return true;\n\
    \            } else {\n                return false;\n            }\n        }\
    \ else {\n            return false;\n        }\n    });\n    return result;",
  "    // create vector of tuple to return\n    std::vector<std::tuple<long, long>>\
    \ result;\n    // if empty, return empty vector\n    if (lst.empty()) {\n    \
    \    return result;\n    }\n    // iterate through rows\n    for (long row = 0;\
    \ row < lst.size(); row++) {\n        // iterate through cols\n        for (long\
    \ col = 0; col < lst[row].size(); col++) {\n            // if val equals x, add\
    \ tuple of row and col\n            if (lst[row][col] == x) {\n              \
    \  result.push_back(std::make_tuple(row, col));\n            }\n        }\n  \
    \  }\n    // sort tuples based on row, then col\n    std::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \     if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    int row = 0;\n    for (auto i = lst.begin(); i != lst.end(); i++) {\n   \
    \     int col = 0;\n        for (auto j = i->begin(); j != i->end(); j++) {\n\
    \            if (*j == x) {\n                result.push_back(std::make_tuple(row,\
    \ col));\n            }\n            col++;\n        }\n        row++;\n    }\n\
    \    sort(result.begin(), result.end());\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> v;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j <\
    \ lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tv.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(v.begin(), v.end(), [](std::tuple<long,\
    \ long> t1, std::tuple<long, long> t2) {\n\t\tif (std::get<0>(t1) != std::get<0>(t2))\
    \ {\n\t\t\treturn std::get<0>(t1) < std::get<0>(t2);\n\t\t}\n\t\telse {\n\t\t\t\
    return std::get<1>(t1) > std::get<1>(t2);\n\t\t}\n\t});\n\treturn v;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long len = lst.size();\n    for (long i = 0; i < len; i++)\
    \ {\n        long size = lst[i].size();\n        for (long j = 0; j < size; j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\n\
    \              [](std::tuple<long, long> a, std::tuple<long, long> b) -> bool\
    \ {\n                  if (std::get<0>(a) < std::get<0>(b)) {\n              \
    \        return true;\n                  } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n                      return std::get<1>(a) > std::get<1>(b);\n         \
    \         } else {\n                      return false;\n                  }\n\
    \              });\n    return res;", '    // Your code here', "    std::vector<std::tuple<long,\
    \ long>> out;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          out.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    sort(out.begin(), out.end());\n    std::vector<std::tuple<long, long>>\
    \ out2;\n    std::map<long, std::vector<long>> vals;\n    for (auto val : out)\
    \ {\n        vals[std::get<0>(val)].push_back(std::get<1>(val));\n    }\n    for\
    \ (auto val : vals) {\n        sort(val.second.begin(), val.second.end(), std::greater<long>());\n\
    \        for (auto v : val.second) {\n            out2.push_back(std::make_tuple(val.first,\
    \ v));\n        }\n    }\n    return out2;", "\tstd::vector<std::tuple<long, long>>\
    \ res;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        std::vector<long> lst_row\
    \ = lst[i];\n        std::vector<long> coordinates;\n        for (int j = 0; j\
    \ < lst_row.size(); j++) {\n            if (lst_row[j] == x) {\n             \
    \   coordinates.push_back(i);\n                coordinates.push_back(j);\n   \
    \         }\n        }\n        for (int k = 0; k < coordinates.size(); k += 2)\
    \ {\n            result.push_back(std::make_tuple(coordinates[k], coordinates[k\
    \ + 1]));\n        }\n    }\n    std::sort(result.begin(), result.end(),\n   \
    \         [](std::tuple<long, long> &t1, std::tuple<long, long> &t2) {\n     \
    \       if (std::get<0>(t1) != std::get<0>(t2)) {\n            return std::get<0>(t1)\
    \ < std::get<0>(t2);\n            } else {\n            return std::get<1>(t1)\
    \ > std::get<1>(t2);\n            }\n            });\n    return result;", " \
    \   std::vector<std::tuple<long, long>> result;\n    for (unsigned long i = 0;\
    \ i < lst.size(); i++) {\n        for (unsigned long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> &a, std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::stable_sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> &a, std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ == std::get<0>(b) && std::get<1>(a) > std::get<1>(b);\n    });\n    return result;",
  "    // your code here\n    std::vector<std::tuple<long, long>> res;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        long x1 =\
    \ std::get<0>(a);\n        long y1 = std::get<1>(a);\n        long x2 = std::get<0>(b);\n\
    \        long y2 = std::get<1>(b);\n        if (x1 == x2) {\n            return\
    \ y1 > y2;\n        }\n        return x1 < x2;\n    });\n    return res;", " \
    \   std::vector<std::tuple<long, long>> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [&](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [&](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    // Your code here!\n    std::vector<std::tuple<long,\
    \ long>> coordinates;\n    std::vector<std::tuple<long, long>> sorted_coordinates;\n\
    \    std::vector<std::tuple<long, long>> final_coordinates;\n    int ctr = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0; j < lst[i].size();\
    \ j++){\n            if(lst[i][j] == x){\n                coordinates.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    for(int i = 0; i < coordinates.size();\
    \ i++){\n        sorted_coordinates.push_back(std::make_tuple(i, coordinates[i]));\n\
    \    }\n    std::sort(sorted_coordinates.begin(), sorted_coordinates.end(),\n\
    \              [](std::tuple<long, long> t1, std::tuple<long, long> t2){\n   \
    \     if(std::get<0>(t1) < std::get<0>(t2))\n            return true;\n      \
    \  else if(std::get<0>(t1) == std::get<0>(t2)){\n            if(std::get<1>(t1)\
    \ > std::get<1>(t2))\n                return true;\n            else\n       \
    \         return false;\n        }\n        else\n            return false;\n\
    \    });\n    for(int i = 0; i < sorted_coordinates.size(); i++){\n        final_coordinates.push_back(std::get<1>(sorted_coordinates[i]));\n\
    \    }\n    return final_coordinates;", "\t// Implement here!\n    std::vector<std::tuple<long,\
    \ long>> result;\n    if(lst.size() == 0) return result;\n    for(int i = 0; i\
    \ < lst.size(); i++){\n        for(int j = 0; j < lst[i].size(); j++){\n     \
    \       if(lst[i][j] == x){\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](const std::tuple<long, long>& a, const std::tuple<long, long>& b){\n    \
    \    if(std::get<0>(a) < std::get<0>(b)) return true;\n        if(std::get<0>(a)\
    \ > std::get<0>(b)) return false;\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "\tstd::vector<std::tuple<long, long>> res;\n\t\
    for (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "\t// your code here", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\t// Read Nested vectors lst\n\t// Read the integer x\n\t//\
    \ Write the code to find the x in lst,\n\t// and return vector of tuples,\n\t\
    // [(x1, y1), (x2, y2) ...] such that\n\t// each tuple is a coordinate - (row,\
    \ columns),\n\t// starting with 0.\n\t// Sort coordinates initially by rows in\
    \ ascending order.\n\t// Also, sort coordinates of the row by columns in descending\
    \ order.\n\t// Example:\n\t// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n\t// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n\t// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n\t// (std::vector<std::tuple<long, long>>())\n\t// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector", "  std::vector<std::tuple<long,\
    \ long>> sol;\n  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0; j\
    \ < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        sol.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(sol.begin(), sol.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n    if (std::get<0>(a) == std::get<0>(b))\
    \ {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a)\
    \ < std::get<0>(b);\n  });\n  return sol;", "\tstd::vector<std::tuple<long, long>>\
    \ list;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tstd::tuple<long, long> temp = std::make_tuple(i,\
    \ j);\n\t\t\t\tlist.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\tsort(list.begin(),\
    \ list.end());\n\tstd::vector<std::tuple<long, long>> list1;\n\tstd::vector<std::tuple<long,\
    \ long>> temp1;\n\tint current = -1;\n\tfor (int i = 0; i < list.size(); i++)\
    \ {\n\t\tif (current != std::get<0>(list[i])) {\n\t\t\tif (current != -1) {\n\t\
    \t\t\tfor (int j = temp1.size() - 1; j >= 0; j--) {\n\t\t\t\t\tlist1.push_back(temp1[j]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tcurrent = std::get<0>(list[i]);\n\t\t\ttemp1.clear();\n\
    \t\t}\n\t\ttemp1.push_back(list[i]);\n\t}\n\tfor (int j = temp1.size() - 1; j\
    \ >= 0; j--) {\n\t\tlist1.push_back(temp1[j]);\n\t}\n\treturn list1;", "\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "  std::vector<std::tuple<long, long>>\
    \ res;\n  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0; j < lst[i].size();\
    \ j++) {\n      if (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  // sort rows in ascending order\n  std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long>& lhs, const std::tuple<long, long>&\
    \ rhs) -> bool {\n    if (std::get<0>(lhs) < std::get<0>(rhs)) {\n      return\
    \ true;\n    } else if (std::get<0>(lhs) == std::get<0>(rhs)) {\n      return\
    \ std::get<1>(lhs) > std::get<1>(rhs);\n    } else {\n      return false;\n  \
    \  }\n  });\n  return res;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    if (result.size() == 0) {\n     \
    \   return result;\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return (std::get<0>(a) < std::get<0>(b))\
    \ || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b));\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    std::reverse(result.begin(), result.end());\n    return result;", "\t// write\
    \ your code here\n\t// You may use a map, vector, set, or any other STL\n\t//\
    \ data structure here, if you'd like to.\n\t// You are not allowed to use any\
    \ loops.\n\tstd::vector<std::tuple<long, long>> result;\n\tfor (long i = 0; i\
    \ < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\t\
    if (lst[i][j] == x)\n\t\t\t\tresult.push_back(std::make_tuple(i, j));\n\t\t}\n\
    \t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long, long> t1, std::tuple<long,\
    \ long> t2) {\n\t\tif (std::get<0>(t1) < std::get<0>(t2))\n\t\t\treturn true;\n\
    \t\telse if (std::get<0>(t1) == std::get<0>(t2)) {\n\t\t\tif (std::get<1>(t1)\
    \ > std::get<1>(t2))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\
    \t\t}\n\t\telse\n\t\t\treturn false;\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    // write your code here\n    // struct myComparator {\n\
    \    //     bool operator() (std::tuple<long, long> a, std::tuple<long, long>\
    \ b) {\n    //         if (std::get<0>(a) > std::get<0>(b)) {\n    //        \
    \     return false;\n    //         } else if (std::get<0>(a) < std::get<0>(b))\
    \ {\n    //             return true;\n    //         } else {\n    //        \
    \     if (std::get<1>(a) > std::get<1>(b)) {\n    //                 return false;\n\
    \    //             } else {\n    //                 return true;\n    //    \
    \         }\n    //         }\n    //     }\n    // };\n    // std::set<std::tuple<long,\
    \ long>, myComparator> result_set;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    // sorting the result vector\n    std::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \     if (std::get<0>(a) > std::get<0>(b)) {\n            return false;\n    \
    \    } else if (std::get<0>(a) < std::get<0>(b)) {\n            return true;\n\
    \        } else {\n            if (std::get<1>(a) > std::get<1>(b)) {\n      \
    \          return false;\n            } else {\n                return true;\n\
    \            }\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> ret;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        ret.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    sort(ret.begin(), ret.end(), [](std::tuple<long, long> t1, std::tuple<long,\
    \ long> t2) {\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n  \
    \  for (int i = 0; i < ret.size(); i++) {\n        if (i + 1 < ret.size() && std::get<0>(ret[i])\
    \ == std::get<0>(ret[i + 1])) {\n            sort(ret.begin() + i, ret.begin()\
    \ + i + 2, [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n      \
    \          return std::get<1>(t1) > std::get<1>(t2);\n            });\n      \
    \      i++;\n        }\n    }\n    return ret;", "    std::vector<std::tuple<long,\
    \ long>> myvector;\n    for(long i=0;i<lst.size();i++){\n        for(long j=0;j<lst[i].size();j++){\n\
    \            if(lst[i][j]==x){\n                myvector.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    std::sort(myvector.begin(),myvector.end());\n\
    \    // std::cout<<\"size = \"<<myvector.size()<<std::endl;\n    // for(long i=0;i<myvector.size();i++){\n\
    \    //     std::cout<<std::get<0>(myvector[i])<<\" \"<<std::get<1>(myvector[i])<<std::endl;\n\
    \    // }\n    return myvector;", "    std::vector<std::tuple<long, long>> result;\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        int len1\
    \ = lst[i].size();\n        for (int j = 0; j < len1; j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> &a, std::tuple<long, long> &b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", '    // start
    from here', "    std::vector<std::tuple<long, long>> res;\n    for (size_t i =\
    \ 0; i < lst.size(); i++) {\n        for (size_t j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::stable_sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "\t// your code here\n    std::vector<std::tuple<long,\
    \ long>> v;\n    std::tuple<long, long> t;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        for(int j=0;j<lst[i].size();j++)\n        {\n            if(lst[i][j]==x)\n\
    \            {\n                std::get<0>(t)=i;\n                std::get<1>(t)=j;\n\
    \                v.push_back(t);\n            }\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;", "    std::vector<std::tuple<long, long>> v;\n    for(long i =\
    \ 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n\
    \            if(lst[i][j] == x) {\n                v.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return v;", "    std::vector<std::tuple<long,\
    \ long>> ret;\n    long r = 0;\n    for (auto row: lst) {\n        auto it = std::find(row.begin(),\
    \ row.end(), x);\n        if (it != row.end()) {\n            ret.push_back(std::make_tuple(r,\
    \ it - row.begin()));\n        }\n        r++;\n    }\n    std::sort(ret.begin(),\
    \ ret.end(), [&](std::tuple<long, long> &left, std::tuple<long, long> &right)\
    \ {\n        if (std::get<0>(left) < std::get<0>(right)) {\n            return\
    \ true;\n        } else if (std::get<0>(left) == std::get<0>(right)) {\n     \
    \       return std::get<1>(left) > std::get<1>(right);\n        } else {\n   \
    \         return false;\n        }\n    });\n    return ret;", "\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j\
    \ < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\
    \t});\n\tstd::stable_sort(res.begin(), res.end(), [](std::tuple<long, long> a,\
    \ std::tuple<long, long> b) {\n\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\
    });\n\treturn res;", "    std::vector<std::tuple<long, long>> myList;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++)\
    \ {\n            if(lst[i][j] == x) {\n                myList.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(myList.begin(), myList.end());\n\
    \    for(long i = 0; i < myList.size(); i++) {\n        for(long j = 0; j < myList.size()\
    \ - 1; j++) {\n            if(std::get<0>(myList[j]) == std::get<0>(myList[j +\
    \ 1])) {\n                if(std::get<1>(myList[j]) < std::get<1>(myList[j + 1]))\
    \ {\n                    std::swap(myList[j], myList[j + 1]);\n              \
    \  }\n            }\n        }\n    }\n    return myList;", "\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\t// sort(res.begin(), res.end());\n\treturn res;",
  "    vector<tuple<long, long>> indexes;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        int j = 0;\n        while (j < lst[i].size()) {\n            if (lst[i][j]\
    \ == x) {\n                indexes.push_back(make_tuple(i, j));\n            }\n\
    \            j++;\n        }\n    }\n    sort(indexes.begin(), indexes.end());\n\
    \    return indexes;", "\tstd::vector<std::tuple<long, long>> res;\n\tfor (size_t\
    \ row = 0; row < lst.size(); row++) {\n\t\tstd::vector<long> row_lst = lst[row];\n\
    \t\tfor (size_t col = 0; col < row_lst.size(); col++) {\n\t\t\tif (row_lst[col]\
    \ == x) {\n\t\t\t\tres.push_back(std::make_tuple(row, col));\n\t\t\t}\n\t\t}\n\
    \t}\n\tstd::sort(res.begin(), res.end(),\n\t\t[](std::tuple<long, long> lhs, std::tuple<long,\
    \ long> rhs) {\n\t\tif (std::get<0>(lhs) < std::get<0>(rhs)) {\n\t\t\treturn true;\n\
    \t\t}\n\t\telse if (std::get<0>(lhs) == std::get<0>(rhs)) {\n\t\t\treturn std::get<1>(lhs)\
    \ > std::get<1>(rhs);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t});\n\t\
    return res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (int i = 0; i < result.size(); i++) {\n\
    \        std::cout << std::get<0>(result[i]) << \" \" << std::get<1>(result[i])\
    \ << std::endl;\n    }\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (unsigned long i = 0; i < lst.size(); i++) {\n     \
    \   for (unsigned long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> &a, std::tuple<long, long> &b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "  // write\
    \ code here\n  std::vector<std::tuple<long, long>> res;\n  for (int i = 0; i <\
    \ lst.size(); i++) {\n    for (int j = 0; j < lst[i].size(); j++) {\n      if\
    \ (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i, j));\n      }\n\
    \    }\n  }\n  std::sort(res.begin(), res.end(), [](std::tuple<long, long> t1,\
    \ std::tuple<long, long> t2) {\n    return std::get<0>(t1) < std::get<0>(t2);\n\
    \  });\n  for (int i = 0; i < res.size(); i++) {\n    for (int j = i + 1; j <\
    \ res.size(); j++) {\n      if (std::get<0>(res[i]) == std::get<0>(res[j])) {\n\
    \        if (std::get<1>(res[i]) < std::get<1>(res[j])) {\n          std::swap(res[i],\
    \ res[j]);\n        }\n      }\n    }\n  }\n  return res;", "    std::vector<std::tuple<long,\
    \ long>> ans;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x)\n          \
    \      ans.push_back(std::make_tuple(i, j));\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    for (int i = 0; i < ans.size(); i++) {\n        for (int j\
    \ = i + 1; j < ans.size(); j++) {\n            if (std::get<0>(ans[i]) == std::get<0>(ans[j]))\
    \ {\n                if (std::get<1>(ans[i]) < std::get<1>(ans[j])) {\n      \
    \              std::tuple<long, long> tmp = ans[i];\n                    ans[i]\
    \ = ans[j];\n                    ans[j] = tmp;\n                }\n          \
    \  }\n        }\n    }\n    return ans;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0;\
    \ j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n             \
    \   result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return\
    \ true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n\
    \        }\n    });\n    return result;", "  std::vector<std::tuple<long, long>>\
    \ result;\n  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0; j <\
    \ lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> t1, std::tuple<long, long> t2) {\n    if (std::get<0>(t1) < std::get<0>(t2))\
    \ {\n      return true;\n    } else if (std::get<0>(t1) == std::get<0>(t2)) {\n\
    \      return std::get<1>(t1) > std::get<1>(t2);\n    } else {\n      return false;\n\
    \    }\n  });\n  return result;", "\t//std::cout << \"get_row()\\n\";\n\tstd::vector<std::tuple<long,\
    \ long>> result;\n\t//std::cout << \"lst.size() = \" << lst.size() << \"\\n\"\
    ;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\t//std::cout << \"lst[\" << i\
    \ << \"].size() = \" << lst[i].size() << \"\\n\";\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\t//std::cout << \"lst[\" << i << \"][\" << j << \"] = \" << lst[i][j]\
    \ << \"\\n\";\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\t//std::cout << \"pushing \"\
    \ << i << \", \" << j << \"\\n\";\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\t//std::cout << \"sorting...\\n\";\n\tstd::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> x, std::tuple<long, long> y) {\n\t\t\
    if (std::get<0>(x) == std::get<0>(y)) {\n\t\t\t//std::cout << \"x = \" << std::get<0>(x)\
    \ << \", y = \" << std::get<0>(y) << \"\\n\";\n\t\t\t//std::cout << \"x.1 = \"\
    \ << std::get<1>(x) << \", y.1 = \" << std::get<1>(y) << \"\\n\";\n\t\t\t//std::cout\
    \ << \"x.1 > y.1 = \" << (std::get<1>(x) > std::get<1>(y)) << \"\\n\";\n\t\t\t\
    return std::get<1>(x) > std::get<1>(y);\n\t\t}\n\t\t//std::cout << \"x = \" <<\
    \ std::get<0>(x) << \", y = \" << std::", "    std::vector<std::tuple<long, long>>\
    \ ret_val;\n    if (lst.size() == 0) {\n        return ret_val;\n    }\n    if\
    \ (lst[0].size() == 0) {\n        return ret_val;\n    }\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        std::vector<long> row = lst[i];\n        for\
    \ (long j = 0; j < row.size(); j++) {\n            if (row[j] == x) {\n      \
    \          ret_val.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(ret_val.begin(), ret_val.end(),\n              [](const\
    \ std::tuple<long, long>& lhs, const std::tuple<long, long>& rhs) {\n        if\
    \ (std::get<0>(lhs) < std::get<0>(rhs)) {\n            return true;\n        }\
    \ else if (std::get<0>(lhs) > std::get<0>(rhs)) {\n            return false;\n\
    \        } else {\n            return std::get<1>(lhs) > std::get<1>(rhs);\n \
    \       }\n    });\n    return ret_val;", "// your code goes here\n    vector<tuple<long,\
    \ long>> result;\n    std::vector<long>::iterator it;\n    int rows = lst.size();\n\
    \    if(rows == 0)\n        return result;\n    for(int i = 0; i < rows; i++){\n\
    \        std::vector<long>::iterator it = std::find(lst[i].begin(), lst[i].end(),\
    \ x);\n        if(it != lst[i].end()){\n            result.push_back(make_tuple(i,\
    \ it - lst[i].begin()));\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    for(int i = 0; i < result.size(); i++){\n        if(i != 0 && get<0>(result[i])\
    \ == get<0>(result[i-1])){\n            int j = i-1;\n            while(j >= 0\
    \ && get<0>(result[j]) == get<0>(result[i])){\n                j--;\n        \
    \    }\n            j++;\n            for(int k = j; k < i; k++){\n          \
    \      if(get<1>(result[k]) < get<1>(result[i])){\n                    tuple<long,\
    \ long> temp = result[k];\n                    result[k] = result[i];\n      \
    \              result[i] = temp;\n                }\n            }\n        }\n\
    \    }\n    return result;", "\tstd::vector<std::tuple<long, long>> result;\n\t\
    for (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\tfor (int\
    \ i = 0; i < result.size(); i++) {\n\t\tstd::tuple<long, long> tup = result[i];\n\
    \t\tlong x1 = std::get<0>(tup);\n\t\tlong y1 = std::get<1>(tup);\n\t\tif (i ==\
    \ 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (x1 == std::get<0>(result[i - 1])) {\n\t\
    \t\tfor (int j = i - 1; j >= 0; j--) {\n\t\t\t\tstd::tuple<long, long> tup2 =\
    \ result[j];\n\t\t\t\tlong x2 = std::get<0>(tup2);\n\t\t\t\tlong y2 = std::get<1>(tup2);\n\
    \t\t\t\tif (x1 == x2) {\n\t\t\t\t\tif (y1 > y2) {\n\t\t\t\t\t\tstd::tuple<long,\
    \ long> t3 = result[i];\n\t\t\t\t\t\tresult[i] = result[j];\n\t\t\t\t\t\tresult[j]\
    \ = t3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;", "   \
    \ std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        if (std::get<0>(a) ==\
    \ std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n   \
    \     }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "\tstd::vector<std::tuple<long, long>> vector_of_tuples;\n\tlong i=0;\n\
    \tfor(auto vec:lst){\n\t\tlong j=0;\n\t\tfor(auto num:vec){\n\t\t\tif(num==x){\n\
    \t\t\t\tvector_of_tuples.push_back(std::make_tuple(i,j));\n\t\t\t}\n\t\t\tj++;\n\
    \t\t}\n\t\ti++;\n\t}\n\tauto cmp=[](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n\t\tif(std::get<0>(a)<std::get<0>(b))\n\t\t\treturn true;\n\t\telse\
    \ if(std::get<0>(a)==std::get<0>(b)){\n\t\t\tif(std::get<1>(a)>std::get<1>(b))\n\
    \t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\
    \treturn false;\n\t};\n\tstd::sort(vector_of_tuples.begin(),vector_of_tuples.end(),cmp);\n\
    \treturn vector_of_tuples;", "    std::vector<std::tuple<long, long>> result;\n\
    \    if (lst.size()==0)\n    {\n        return result;\n    }\n    int i,j;\n\
    \    for (i=0;i<lst.size();i++)\n    {\n        for (j=0;j<lst[i].size();j++)\n\
    \        {\n            if (lst[i][j]==x)\n            {\n                result.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    std::sort(result.begin(),result.end());\n\
    \    // reverse(lst.begin(),lst.end());\n    return result;", "  std::vector<std::tuple<long,\
    \ long>> res;\n  int row = 0;\n  for (auto v : lst) {\n    int col = 0;\n    for\
    \ (auto i : v) {\n      if (i == x) {\n        res.push_back(std::make_tuple(row,\
    \ col));\n      }\n      col++;\n    }\n    row++;\n  }\n  std::sort(res.begin(),\
    \ res.end(), [](auto &left, auto &right) {\n    return (std::get<0>(left) < std::get<0>(right));\n\
    \  });\n  for (int i = 0; i < res.size(); i++) {\n    for (int j = i + 1; j <\
    \ res.size(); j++) {\n      if (std::get<0>(res[i]) == std::get<0>(res[j])) {\n\
    \        std::swap(res[i + 1], res[j]);\n        i++;\n      }\n    }\n  }\n \
    \ return res;", "\tstd::vector<std::tuple<long, long>> res;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\t\
    if (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t\t}\n\
    \t\t}\n\t}\n\tsort(res.begin(), res.end());\n\treturn res;", "  std::vector<std::tuple<long,\
    \ long>> v;\n  for (size_t i = 0; i < lst.size(); i++) {\n    for (size_t j =\
    \ 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        v.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(v.begin(), v.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n    if (std::get<0>(a) != std::get<0>(b))\
    \ {\n      return std::get<0>(a) < std::get<0>(b);\n    }\n    return std::get<1>(a)\
    \ > std::get<1>(b);\n  });\n  return v;", "    assert(lst.size() <= 1000);\n \
    \   for (auto v : lst)\n        assert(v.size() <= 1000);\n    std::vector<std::tuple<long,\
    \ long>> answer;\n    std::vector<std::tuple<long, long>> row_index_list;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        std::vector<long> row = lst[i];\n\
    \        for (long j = 0; j < row.size(); j++) {\n            if (row[j] == x)\
    \ {\n                row_index_list.push_back(std::make_tuple(i, j));\n      \
    \      }\n        }\n    }\n    // sort by rows in ascending order\n    std::sort(row_index_list.begin(),\
    \ row_index_list.end(),\n              [](const std::tuple<long, long> &left,\
    \ const std::tuple<long, long> &right) {\n                  return std::get<0>(left)\
    \ < std::get<0>(right);\n              });\n    std::vector<std::vector<std::tuple<long,\
    \ long>>> matrix;\n    long last_row = -1;\n    std::vector<std::tuple<long, long>>\
    \ row;\n    for (auto tup : row_index_list) {\n        if (std::get<0>(tup) !=\
    \ last_row) {\n            if (last_row != -1) {\n                matrix.push_back(row);\n\
    \            }\n            row.clear();\n            last_row = std::get<0>(tup);\n\
    \        }\n        row.push_back(tup);\n    }\n    if (row.size() > 0) {\n  \
    \      matrix.push_back(row);\n    }\n    for (auto v : matrix) {\n        //\
    \ sort by columns in descending order\n        std::sort(v.begin(), v.end(),\n\
    \                  [](const std::tuple<long, long> &left, const std::tuple<long,\
    \ long> &right) {\n                      return std::get<1>(left) > std::get<1>(right);\n\
    \                  });\n        for", "// you write code here\n    std::vector<std::tuple<long,\
    \ long>> final_list;\n    for(long i = 0; i < lst.size(); i++){\n        for(long\
    \ j = 0; j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n         \
    \       final_list.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(final_list.begin(), final_list.end());\n    return final_list;",
  "    if (lst.empty()) return {};\n    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        std::vector<long> row = lst[i];\n\
    \        for (int j = 0; j < row.size(); j++) {\n            if (row[j] == x)\
    \ {\n                result.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) != std::get<0>(b))\
    \ {\n            return std::get<0>(a) < std::get<0>(b);\n        } else {\n \
    \           return std::get<1>(a) > std::get<1>(b);\n        }\n    });\n    return\
    \ result;", "  std::vector<std::tuple<long, long>> res;\n  for (int i = 0; i <\
    \ lst.size(); i++) {\n    for (int j = 0; j < lst[i].size(); j++) {\n      if\
    \ (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i, j));\n      }\n\
    \    }\n  }\n  std::sort(res.begin(), res.end(),\n            [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n              if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n                return std::get<1>(a) > std::get<1>(b);\n\
    \              }\n              return std::get<0>(a) < std::get<0>(b);\n    \
    \        });\n  return res;", "    std::vector<std::tuple<long, long>> ret;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                ret.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(ret.begin(), ret.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     if (std::get<0>(a) < std::get<0>(b)) return true;\n        if (std::get<0>(a)\
    \ > std::get<0>(b)) return false;\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return ret;", "\tstd::vector<std::tuple<long, long>>  vec;\n\tfor\
    \ (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tvec.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\t// Sort coordinates initially by rows in ascending\
    \ order.\n\tsort(vec.begin(), vec.end());\n\tfor (long i = 0; i < vec.size();\
    \ i++) {\n\t\tfor (long j = 0; j < vec.size() - 1; j++) {\n\t\t\tif (std::get<0>(vec[j])\
    \ == std::get<0>(vec[j + 1])) {\n\t\t\t\tif (std::get<1>(vec[j]) < std::get<1>(vec[j\
    \ + 1])) {\n\t\t\t\t\tstd::tuple<long, long> temp = vec[j];\n\t\t\t\t\tvec[j]\
    \ = vec[j + 1];\n\t\t\t\t\tvec[j + 1] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn vec;", "    std::vector<std::tuple<long, long>> results;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                results.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(results.begin(), results.end(),\
    \ [&](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) return true;\n        if (std::get<0>(a) > std::get<0>(b))\
    \ return false;\n        return std::get<1>(a) > std::get<1>(b);\n    });\n  \
    \  return results;", "\tstd::vector<std::tuple<long, long>> result;\n\tfor (long\
    \ row = 0; row < lst.size(); row++) {\n\t\tfor (long col = 0; col < lst[row].size();\
    \ col++) {\n\t\t\tif (lst[row][col] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(row,\
    \ col));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [&](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> ans;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          ans.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(ans.begin(), ans.end(), [&](std::tuple<long, long> t1, std::tuple<long,\
    \ long> t2) {\n        return ((std::get<0>(t1) < std::get<0>(t2)) || (std::get<0>(t1)\
    \ == std::get<0>(t2) && std::get<1>(t1) > std::get<1>(t2)));\n    });\n    return\
    \ ans;", "    // your code goes here\n    std::vector<std::tuple<long, long>>\
    \ result;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = 0; j\
    \ < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return result;", "\t// your code\
    \ here!\n\tstd::vector<std::tuple<long, long>> ret;\n\tstd::vector<std::tuple<long,\
    \ long>>::iterator it;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int\
    \ j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tret.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(ret.begin(), ret.end(), [&](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\
    \t});\n\tfor (int i = 0; i < ret.size(); i++) {\n\t\tfor (int j = i + 1; j < ret.size();\
    \ j++) {\n\t\t\tif (std::get<0>(ret[i]) == std::get<0>(ret[j])) {\n\t\t\t\tif\
    \ (std::get<1>(ret[i]) < std::get<1>(ret[j])) {\n\t\t\t\t\tstd::swap(ret[i], ret[j]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;", "  long row_size = lst.size();\n\
    \  long column_size = 0;\n  std::vector<std::tuple<long, long>> result;\n  for\
    \ (long i = 0; i < row_size; i++) {\n    column_size = lst[i].size();\n    for\
    \ (long j = 0; j < column_size; j++) {\n      if (lst[i][j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(result.begin(), result.end());\n  std::sort(result.begin(),\
    \ result.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a)\
    \ > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  });\n\
    \  return result;", "    //your code here\n    vector<tuple<long, long>> res;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    sort(res.begin(), res.end());\n \
    \   for (long i = 0; i < res.size(); i++) {\n        if (i > 0 && get<0>(res[i])\
    \ == get<0>(res[i - 1])) {\n            continue;\n        }\n        vector<tuple<long,\
    \ long>> tmp;\n        for (long j = i; j < res.size(); j++) {\n            if\
    \ (get<0>(res[j]) == get<0>(res[i])) {\n                tmp.push_back(res[j]);\n\
    \            }\n        }\n        sort(tmp.begin(), tmp.end(), greater<tuple<long,\
    \ long>>());\n        for (long j = 0; j < tmp.size(); j++) {\n            res[i\
    \ + j] = tmp[j];\n        }\n        i += tmp.size() - 1;\n    }\n    return res;",
  "\tint len = lst.size();\n\tstd::vector<std::tuple<long, long>> result;\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tint lenn = lst[i].size();\n\t\tfor (int j = 0; j\
    \ < lenn; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [&](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "\t// your code here\n\n\treturn\
    \ std::vector<std::tuple<long, long>>();", "    std::vector<std::tuple<long, long>>\
    \ r1;\n    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n      \
    \  for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x)\
    \ {\n                r1.push_back(std::make_tuple(i, j));\n                count++;\n\
    \            }\n        }\n    }\n    std::sort(r1.begin(), r1.end());\n    for\
    \ (int i = 0; i < r1.size(); i++) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        if (std::get<0>(r1[i]) == std::get<0>(r1[i - 1])) {\n    \
    \        std::tuple<long, long> temp;\n            temp = r1[i];\n           \
    \ while (i >= 1 && std::get<0>(r1[i]) == std::get<0>(r1[i - 1])) {\n         \
    \       if (std::get<1>(r1[i]) > std::get<1>(r1[i - 1])) {\n                 \
    \   r1[i] = r1[i - 1];\n                    r1[i - 1] = temp;\n              \
    \  }\n                i--;\n            }\n        }\n    }\n    return r1;",
  "    std::vector<std::tuple<long, long>> result;\n    // Write your code here\n\
    \    // To print results to the standard output you can use cout\n    // Example:\
    \ cout << \"Hello world!\";\n    long i,j;\n    for(i=0;i<lst.size();i++)\n  \
    \  {\n        for(j=0;j<lst[i].size();j++)\n        {\n            if(lst[i][j]==x)\n\
    \            {\n                result.push_back(std::make_tuple(i,j));\n    \
    \        }\n        }\n    }\n    std::sort(result.begin(),result.end());\n  \
    \  for(i=0;i<result.size();i++)\n    {\n        if(i!=0 && std::get<0>(result[i])==std::get<0>(result[i-1]))\n\
    \        {\n            std::swap(result[i],result[i-1]);\n        }\n    }\n\
    \    return result;", "    // your code here\n    std::vector<std::tuple<long,\
    \ long>> coordinates;\n    for (int i = 0; i < lst.size(); i++) {\n        for\
    \ (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n \
    \               coordinates.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n    }\n    std::sort(coordinates.begin(), coordinates.end(), [](auto\
    \ a, auto b) {\n        if (std::get<0>(a) == std::get<0>(b))\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return coordinates;", "\tstd::vector<std::tuple<long, long>> res;\n\
    \tint i = 0;\n\tfor (auto &it : lst) {\n\t\tint j = 0;\n\t\tfor (auto &i : it)\
    \ {\n\t\t\tif (i == x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t\t\
    }\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tstd::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tint aa = std::get<0>(a);\n\t\tint\
    \ bb = std::get<0>(b);\n\t\tint cc = std::get<1>(a);\n\t\tint dd = std::get<1>(b);\n\
    \t\tif (aa < bb) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (aa == bb) {\n\t\t\t\
    if (cc > dd) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t});\n\treturn res;",
  "\tstd::vector<std::tuple<long, long>> result;\n\tint n = lst.size();\n\tint i =\
    \ 0;\n\twhile (i < n) {\n\t\tint m = lst[i].size();\n\t\tint j = 0;\n\t\twhile\
    \ (j < m) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tstd::tuple<long, long> t = std::make_tuple(i,\
    \ j);\n\t\t\t\tresult.push_back(t);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t\
    }\n\tstd::sort(result.begin(), result.end(), [&](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\tstd::sort(result.begin(),\
    \ result.end(), [&](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\t\
    return std::get<1>(a) > std::get<1>(b);\n\t});\n\treturn result;", "    // your\
    \ code here\n    std::vector<std::tuple<long, long>> ans;\n    std::vector<long>\
    \ ans_temp;\n    for(int i = 0; i < lst.size(); i++){\n        for(int j = 0;\
    \ j < lst[i].size(); j++){\n            if(lst[i][j] == x){\n                ans_temp.push_back(i);\n\
    \                ans_temp.push_back(j);\n            }\n        }\n    }\n   \
    \ // Sort rows in ascending order\n    int k = 0;\n    long temp;\n    while(k\
    \ < ans_temp.size() - 2){\n        if(ans_temp[k] > ans_temp[k+2]){\n        \
    \    temp = ans_temp[k];\n            ans_temp[k] = ans_temp[k+2];\n         \
    \   ans_temp[k+2] = temp;\n            temp = ans_temp[k+1];\n            ans_temp[k+1]\
    \ = ans_temp[k+3];\n            ans_temp[k+3] = temp;\n            k = 0;\n  \
    \      }else{\n            k += 2;\n        }\n    }\n    // Sort column in descending\
    \ order\n    for(int i = 0; i < ans_temp.size(); i++){\n        if(i == 0){\n\
    \            k = 0;\n        }else if(ans_temp[i-2] != ans_temp[i]){\n       \
    \     k = i;\n        }\n        while(k < ans_temp.size() - 2){\n           \
    \ if(ans_temp[k+1] < ans_temp[k+3]){\n                temp = ans_temp[k];\n  \
    \              ans_temp[k] = ans_temp[k+2];\n                ans_temp[k+2] = temp;\n\
    \                temp = ans_temp[k+1];\n                ans_temp[k+1] = ans_temp[k+3];\n\
    \                ans_temp[k+3] = temp;\n                k = 0;\n            }else{\n\
    \                k += 2;\n            }\n        }\n    }\n    // Transform into\
    \ tuple\n   ", "\t// Your code here.\n\tvector<tuple<long, long>> result;\n\t\
    for (int i = 0; i < lst.size(); i++) {\n\t\tvector<long> v = lst[i];\n\t\tfor\
    \ (int j = 0; j < v.size(); j++) {\n\t\t\tif (v[j] == x) {\n\t\t\t\tresult.push_back(make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\tfor (int\
    \ i = 0; i < result.size(); i++) {\n\t\tfor (int j = i + 1; j < result.size();\
    \ j++) {\n\t\t\tif (get<0>(result[i]) == get<0>(result[j])) {\n\t\t\t\tif (get<1>(result[i])\
    \ < get<1>(result[j])) {\n\t\t\t\t\tswap(result[i], result[j]);\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::tuple<long, long>>\
    \ ans;\n    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n     \
    \   for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x)\
    \ {\n                ans.push_back(std::make_tuple(i, j));\n                count++;\n\
    \            }\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n   \
    \ std::vector<std::tuple<long, long>> ans1;\n    std::vector<std::tuple<long,\
    \ long>>::iterator it;\n    int i = 0;\n    while (ans.size() > 0) {\n       \
    \ it = ans.begin();\n        ans1.push_back(std::make_tuple(std::get<0>(*it),\
    \ std::get<1>(*it)));\n        for (int j = 0; j < ans.size(); j++) {\n      \
    \      if (std::get<0>(*it) == std::get<0>(ans[j])) {\n                it = ans.erase(it);\n\
    \                j--;\n            }\n        }\n    }\n    std::vector<std::tuple<long,\
    \ long>> ans2;\n    for (int i = 0; i < ans1.size(); i++) {\n        for (int\
    \ j = 0; j < ans1.size(); j++) {\n            if (std::get<0>(ans1[i]) == std::get<0>(ans1[j]))\
    \ {\n                std::get<1>(ans1[i]) = j;\n            }\n        }\n   \
    \ }\n    std::sort(ans1.begin(), ans1.end(),\n              [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n                  return std::get<1>(a)\
    \ > std::get<1>(b);\n              });\n    return ans1;", "\t//your code goes\
    \ here\n\t// vector to return\n\tstd::vector<std::tuple<long, long>> ret;\n\t\
    // iterate over rows\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tstd::vector<long>\
    \ current = lst[i];\n\t\t// iterate over cols\n\t\tfor (int j = 0; j < current.size();\
    \ j++) {\n\t\t\t// if current is x, push into vector\n\t\t\tif (current[j] ==\
    \ x) {\n\t\t\t\tret.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\t\
    // sort vectors\n\tstd::sort(ret.begin(), ret.end());\n\treturn ret;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    std::vector<std::tuple<long, long>> row_result;\n    for\
    \ (unsigned long index = 0; index < lst.size(); index++) {\n        row_result.clear();\n\
    \        for (unsigned long index_col = 0; index_col < lst[index].size(); index_col++)\
    \ {\n            if (lst[index][index_col] == x) {\n                row_result.push_back(std::make_tuple(index,\
    \ index_col));\n            }\n        }\n        if (row_result.size() > 0) {\n\
    \            std::sort(row_result.begin(), row_result.end(), [](std::tuple<long,\
    \ long> &a, std::tuple<long, long> &b) {\n                if (std::get<1>(a) <\
    \ std::get<1>(b)) {\n                    return true;\n                }\n   \
    \             return false;\n            });\n            result.insert(result.end(),\
    \ row_result.begin(), row_result.end());\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> &a, std::tuple<long, long> &b) {\n \
    \       if (std::get<0>(a) < std::get<0>(b)) {\n            return true;\n   \
    \     }\n        return false;\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    auto cmp = [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    };\n    std::priority_queue<std::tuple<long, long>, std::vector<std::tuple<long,\
    \ long>>, decltype(cmp)> pq(cmp);\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                pq.push(std::make_tuple(i, j));\n            }\n  \
    \      }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> v;\n\tif (lst.size() == 0) {\n\t\treturn v;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\t\
    if (lst[i][j] == x) {\n\t\t\t\tv.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\
    \t}\n\t}\n\tstd::sort(v.begin(), v.end(), [](const std::tuple<long, long>& a,\
    \ const std::tuple<long, long>& b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn v;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j\
    \ < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n               \
    \ res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n   \
    \ std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return\
    \ true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n\
    \        }\n    });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0;\
    \ j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n             \
    \   result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    std::sort(result.begin(), result.end(),\n              [](std::tuple<long,\
    \ long> const &t1, std::tuple<long, long> const &t2) {\n                  return\
    \ std::get<0>(t1) == std::get<0>(t2) ? std::get<1>(t1) > std::get<1>(t2) : std::get<0>(t1)\
    \ < std::get<0>(t2);\n              });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>>result;\n    for(long i=0;i<lst.size();i++){\n        for(long j=0;j<lst[i].size();j++){\n\
    \            if(lst[i][j]==x){\n                result.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    sort(result.begin(),result.end());\n   \
    \ std::vector<std::tuple<long, long>>result2;\n    long index=0;\n    for(long\
    \ i=0;i<result.size();i++){\n        if(i==0){\n            result2.push_back(result[i]);\n\
    \            index++;\n        }\n        else{\n            if(std::get<0>(result[i])==std::get<0>(result[i-1])){\n\
    \                result2.push_back(result[i]);\n                index++;\n   \
    \         }\n            else{\n                sort(result2.begin()+index-index,result2.begin()+index,std::greater<std::tuple<long,\
    \ long>>());\n                result2.push_back(result[i]);\n                index++;\n\
    \            }\n        }\n    }\n    sort(result2.begin()+index-index,result2.begin()+index,std::greater<std::tuple<long,\
    \ long>>());\n    return result2;", "  std::vector<std::tuple<long, long>> result;\n\
    \  for (size_t i = 0; i < lst.size(); i++) {\n    auto &row = lst[i];\n    for\
    \ (size_t j = 0; j < row.size(); j++) {\n      if (row[j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(result.begin(), result.end(), [&](std::tuple<long,\
    \ long> x, std::tuple<long, long> y) {\n    if (std::get<0>(x) == std::get<0>(y))\
    \ {\n      return std::get<1>(x) > std::get<1>(y);\n    }\n    return std::get<0>(x)\
    \ < std::get<0>(y);\n  });\n  return result;", "\t// TODO Implement me!\n\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j\
    \ < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) {\n        return (std::get<0>(a) < std::get<0>(b))\
    \ || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b));\n\
    \    });\n    return res;", "   std::vector<std::tuple<long, long>> coordinates;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0; j < lst[i].size();\
    \ j++) {\n      if (lst[i][j] == x) {\n        coordinates.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(coordinates.begin(), coordinates.end(),\
    \ [](auto l, auto r) {\n    return std::get<0>(l) < std::get<0>(r);\n  });\n \
    \ std::stable_sort(coordinates.begin(), coordinates.end(), [](auto l, auto r)\
    \ {\n    return std::get<0>(l) == std::get<0>(r) ? std::get<1>(l) > std::get<1>(r)\
    \ : false;\n  });\n  return coordinates;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j =\
    \ 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n          \
    \      result.push_back(std::make_tuple(i, j));\n            }\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>&\
    \ a, const std::tuple<long, long>& b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(),\n\t          [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n\t\t        \
    \  return std::get<0>(a) < std::get<0>(b);\n\t          });\n\tfor (int i = 0;\
    \ i < result.size(); i++) {\n\t\tfor (int j = i + 1; j < result.size(); j++) {\n\
    \t\t\tif (std::get<0>(result[i]) == std::get<0>(result[j])) {\n\t\t\t\tif (std::get<1>(result[i])\
    \ < std::get<1>(result[j])) {\n\t\t\t\t\tstd::tuple<long, long> temp = result[i];\n\
    \t\t\t\t\tresult[i] = result[j];\n\t\t\t\t\tresult[j] = temp;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;", "  std::vector<std::tuple<long, long>> result;\n\
    \  std::map<long, long> count;\n  for (long i = 0; i < lst.size(); i++) {\n  \
    \  for (long j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n \
    \       result.push_back(std::make_tuple(i, j));\n        count[i]++;\n      }\n\
    \    }\n  }\n  std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n    if (std::get<0>(a) < std::get<0>(b)) {\n\
    \      return true;\n    } else if (std::get<0>(a) == std::get<0>(b)) {\n    \
    \  if (std::get<1>(a) > std::get<1>(b)) {\n        return true;\n      } else\
    \ {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\
    \  });\n  return result;", "\tstd::vector<std::tuple<long, long>> result;\n\t\
    for (size_t i = 0; i < lst.size(); i++) {\n\t\tstd::vector<long> v = lst[i];\n\
    \t\tfor (size_t j = 0; j < v.size(); j++) {\n\t\t\tif (v[j] == x) {\n\t\t\t\t\
    result.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\t\
    if (std::get<0>(a) < std::get<0>(b)) {\n\t\t\treturn true;\n\t\t}\n\t\telse if\
    \ (std::get<0>(a) == std::get<0>(b)) {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\
    \t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t});\n\treturn result;", "   \
    \ // Convert 2D vector to 1D vector to sort it\n    std::vector<std::tuple<long,\
    \ long>> lst1D;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            std::tuple<long, long> tmp = std::make_tuple(i,\
    \ j);\n            lst1D.push_back(tmp);\n        }\n    }\n    // Sort by row\n\
    \    std::sort(lst1D.begin(), lst1D.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::vector<std::tuple<long, long>> result;\n    for (auto tup :\
    \ lst1D) {\n        if (lst[std::get<0>(tup)][std::get<1>(tup)] == x) {\n    \
    \        result.push_back(tup);\n        }\n    }\n    // Sort each row by column\n\
    \    std::sort(result.begin(), result.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "  std::vector<std::tuple<long, long>> vec;\n \
    \ std::vector<std::vector<long>>::iterator itr, end;\n  std::vector<long>::iterator\
    \ lst_itr, lst_end;\n  end = lst.end();\n  long index1 = 0, index2 = 0;\n  for\
    \ (itr = lst.begin(); itr != end; itr++) {\n    lst_end = (*itr).end();\n    for\
    \ (lst_itr = (*itr).begin(); lst_itr != lst_end; lst_itr++) {\n      if ((*lst_itr)\
    \ == x) {\n        vec.push_back(std::make_tuple(index1, index2));\n      }\n\
    \      index2++;\n    }\n    index1++;\n    index2 = 0;\n  }\n  std::sort(vec.begin(),\
    \ vec.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      return\
    \ std::get<0>(a) < std::get<0>(b);\n      });\n  std::stable_sort(vec.begin(),\
    \ vec.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      return\
    \ std::get<1>(a) > std::get<1>(b);\n      });\n  return vec;", "  std::vector<std::tuple<long,\
    \ long>> result;\n  //\n  int i, j;\n  for(i = 0; i < lst.size(); i++) {\n   \
    \ for(j = 0; j < lst[i].size(); j++) {\n      if(lst[i][j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  //\n  std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> tup1, std::tuple<long, long> tup2) {\n    if(std::get<0>(tup1) < std::get<0>(tup2))\
    \ {\n      return true;\n    }\n    else if(std::get<0>(tup1) == std::get<0>(tup2))\
    \ {\n      if(std::get<1>(tup1) > std::get<1>(tup2)) {\n        return true;\n\
    \      }\n      else {\n        return false;\n      }\n    }\n    else {\n  \
    \    return false;\n    }\n  });\n  //\n  return result;", "  std::vector<std::tuple<long,\
    \ long>> result;\n  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0;\
    \ j < lst[i].size(); j++) {\n      if (lst[i][j] == x)\n        result.push_back(std::make_tuple(i,\
    \ j));\n    }\n  }\n  std::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long> &t1, const std::tuple<long, long> &t2) {\n    if (std::get<0>(t1) == std::get<0>(t2))\n\
    \      return std::get<1>(t1) > std::get<1>(t2);\n    return std::get<0>(t1) <\
    \ std::get<0>(t2);\n  });\n  return result;", "\tstd::vector<std::tuple<long,\
    \ long>> arr;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j\
    \ < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tarr.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(arr.begin(), arr.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn arr;", "\t// write your code here", "   \
    \ std::vector<std::tuple<long, long>> ans;\n    long count = -1;\n    for (auto\
    \ &i : lst) {\n        count++;\n        long count1 = -1;\n        for (auto\
    \ &j : i) {\n            count1++;\n            if (j == x) {\n              \
    \  ans.push_back(std::make_tuple(count, count1));\n            }\n        }\n\
    \    }\n    sort(ans.begin(), ans.end());\n    for (auto &i : ans) {\n       \
    \ std::get<0>(i) = lst[std::get<0>(i)].size() - std::get<0>(i);\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    for (auto &i : ans) {\n        std::get<0>(i) = lst[std::get<0>(i)].size()\
    \ - std::get<0>(i);\n    }\n    return ans;", "    std::vector<std::tuple<long,\
    \ long>> temp;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n\
    \            if(lst[i][j]==x){\n                temp.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n  \
    \  for(int i=0;i<temp.size();i++){\n        std::cout<<temp[i]<<\" \";\n    }\n\
    \    return temp;", "\t//write your code here\n\tstd::vector<std::tuple<long,\
    \ long>> v;\n\tfor (auto i = 0; i < lst.size(); i++) {\n\t\tfor (auto j = 0; j\
    \ < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tv.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(v.begin(), v.end(), [](std::tuple<long,\
    \ long> t1, std::tuple<long, long> t2) {\n\t\tif (std::get<0>(t1) < std::get<0>(t2))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\telse if (std::get<0>(t1) == std::get<0>(t2))\
    \ {\n\t\t\tif (std::get<1>(t1) > std::get<1>(t2)) {\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t});\n\treturn v;", "\tstd::vector<std::tuple<long, long>> result;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> const &t1, std::tuple<long, long> const &t2) {\n\t\treturn std::get<0>(t1)\
    \ < std::get<0>(t2);\n\t});\n\tfor (long i = 0; i < result.size(); i++) {\n\t\t\
    std::sort(result.begin() + i, result.end(), [](std::tuple<long, long> const &t1,\
    \ std::tuple<long, long> const &t2) {\n\t\t\treturn std::get<0>(t1) == std::get<0>(t2)\
    \ && std::get<1>(t1) > std::get<1>(t2);\n\t\t});\n\t}\n\treturn result;", "\t\
    std::vector<std::tuple<long, long>> result;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tstd::vector<long> row = lst[i];\n\t\tfor (int j = 0; j < row.size();\
    \ j++) {\n\t\t\tif (row[j] == x) {\n\t\t\t\tstd::tuple<long, long> coord = std::make_tuple(i,\
    \ j);\n\t\t\t\tresult.push_back(coord);\n\t\t\t}\n\t\t}\n\t}\n\t// sort by rows\
    \ in ascending order\n\tsort(result.begin(), result.end(),\n\t\t[](const std::tuple<long,\
    \ long>& t1, const std::tuple<long, long>& t2) {\n\t\tif (std::get<0>(t1) == std::get<0>(t2))\
    \ {\n\t\t\treturn (std::get<1>(t1) > std::get<1>(t2));\n\t\t}\n\t\treturn (std::get<0>(t1)\
    \ < std::get<0>(t2));\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    // write your code here\n    std::vector<std::vector<long>>::iterator\
    \ it;\n    for(it = lst.begin(); it != lst.end(); it++) {\n        int r = distance(lst.begin(),\
    \ it);\n        auto it1 = find(it->begin(), it->end(), x);\n        int c = distance(it->begin(),\
    \ it1);\n        result.push_back(std::make_tuple(r, c));\n    }\n    sort(result.begin(),\
    \ result.end());\n    std::vector<std::tuple<long, long>>::iterator it2;\n   \
    \ for(it2 = result.begin(); it2 != result.end(); it2++) {\n        int r = distance(result.begin(),\
    \ it2);\n        if(r + 1 < result.size()) {\n            if(std::get<0>(result[r])\
    \ == std::get<0>(result[r + 1])) {\n                result.push_back(result[r]);\n\
    \                result.erase(result.begin() + r);\n            }\n        }\n\
    \    }\n    sort(result.begin(), result.end(), [](std::tuple<long, long> i, std::tuple<long,\
    \ long> j) {\n        if(std::get<0>(i) < std::get<0>(j))\n            return\
    \ true;\n        else if(std::get<0>(i) == std::get<0>(j)) {\n            if(std::get<1>(i)\
    \ > std::get<1>(j))\n                return true;\n            else\n        \
    \        return false;\n        }\n        else\n            return false;\n \
    \   });\n    return result;", "    if(lst.size()==0)\n        return {};\n   \
    \ if(lst[0].size()==0)\n        return {};\n    std::vector<std::tuple<long, long>>\
    \ answer;\n    std::vector<std::tuple<long, long>> answer1;\n    std::vector<std::tuple<long,\
    \ long>> answer2;\n    std::tuple<long, long> temp;\n    for(long i=0;i<lst.size();i++)\n\
    \    {\n        for(long j=0;j<lst[i].size();j++)\n        {\n            if(lst[i][j]==x)\n\
    \            {\n                temp=std::make_tuple(i,j);\n                answer.push_back(temp);\n\
    \            }\n        }\n    }\n    for(long i=0;i<answer.size();i++)\n    {\n\
    \        for(long j=i+1;j<answer.size();j++)\n        {\n            if(std::get<0>(answer[i])>std::get<0>(answer[j]))\n\
    \            {\n                temp=answer[i];\n                answer[i]=answer[j];\n\
    \                answer[j]=temp;\n            }\n        }\n    }\n    for(long\
    \ i=0;i<answer.size();i++)\n    {\n        for(long j=i+1;j<answer.size();j++)\n\
    \        {\n            if(std::get<0>(answer[i])==std::get<0>(answer[j]))\n \
    \           {\n                if(std::get<1>(answer[i])<std::get<1>(answer[j]))\n\
    \                {\n                    temp=answer[i];\n                    answer[i]=answer[j];\n\
    \                    answer[j]=temp;\n                }\n            }\n     \
    \   }\n    }\n    return answer;", "  std::vector<std::tuple<long, long>> v;\n\
    \  long i, j;\n  for (i = 0; i < lst.size(); i++) {\n    for (j = 0; j < lst[i].size();\
    \ j++) {\n      if (lst[i][j] == x) {\n        v.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(v.begin(), v.end(),\n            [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n              return std::get<0>(a) <\
    \ std::get<0>(b);\n            });\n  return v;", "    std::vector<std::tuple<long,\
    \ long>> ret;\n    long count=0;\n    for(int i=0;i<lst.size();i++){\n       \
    \ for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n         \
    \       ret.push_back(std::make_tuple(i,j));\n                count++;\n     \
    \       }\n        }\n    }\n    if(count==0){\n        return ret;\n    }\n \
    \   std::sort(ret.begin(),ret.end());\n    long j=0;\n    while(j<ret.size()){\n\
    \        long temp=j;\n        while(temp<ret.size()-1 && std::get<0>(ret[temp])==std::get<0>(ret[temp+1])){\n\
    \            temp++;\n        }\n        std::sort(ret.begin()+j,ret.begin()+temp+1,std::greater<std::tuple<long,long>>());\n\
    \        j=temp+1;\n    }\n    return ret;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        long n\
    \ = lst[i].size();\n        long low = 0, high = n - 1;\n        while (low <=\
    \ high) {\n            long mid = (low + high) / 2;\n            if (lst[i][mid]\
    \ == x) {\n                result.push_back(std::make_tuple(i, mid));\n      \
    \          break;\n            }\n            else if (lst[i][mid] < x) {\n  \
    \              low = mid + 1;\n            }\n            else {\n           \
    \     high = mid - 1;\n            }\n        }\n    }\n    return result;", " \
    \   std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        std::vector<long> row = lst[i];\n        for (long j = 0; j\
    \ < row.size(); j++) {\n            if (row[j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> results;\n    long row = 0;\n    for (auto vec : lst) {\n        long\
    \ col = 0;\n        for (auto item : vec) {\n            if (item == x) {\n  \
    \              results.push_back(std::make_tuple(row, col));\n            }\n\
    \            col++;\n        }\n        row++;\n    }\n    std::sort(results.begin(),\
    \ results.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n  \
    \      if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return results;", "    // Write your code here\n    // To print\
    \ results to the standard output you can use cout << \"Hello world!\" << endl;\n\
    \    // Use cerr to print to cerr cerr << \"Hello world!\" << endl;\n    std::vector<std::tuple<long,\
    \ long>> v;\n    std::vector<std::tuple<long, long>> v1;\n    std::vector<std::tuple<long,\
    \ long>> v2;\n    std::vector<std::tuple<long, long>> v3;\n    std::vector<std::tuple<long,\
    \ long>> v4;\n    std::vector<std::tuple<long, long>> v5;\n    std::vector<std::tuple<long,\
    \ long>> v6;\n    std::vector<std::tuple<long, long>> v7;\n    for(long i=0;i<lst.size();i++)\n\
    \    {\n        for(long j=0;j<lst[i].size();j++)\n        {\n            v.push_back(std::make_tuple(i,j));\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++)\n    {\n        if(std::get<0>(v[i])==x)\n\
    \        {\n            v1.push_back(v[i]);\n        }\n    }\n    v2=v1;\n  \
    \  std::sort(v1.begin(),v1.end());\n    for(long i=0;i<v1.size();i++)\n    {\n\
    \        for(long j=0;j<v2.size();j++)\n        {\n            if(std::get<0>(v1[i])==std::get<0>(v2[j]))\n\
    \            {\n                v3.push_back(v2[j]);\n            }\n        }\n\
    \        v4.push_back(v3[0]);\n        v3.clear();\n    }\n    for(long i=0;i<v4.size();i++)\n\
    \    {\n        for(long j=0;j<v2.size();j++)\n        {\n            if(std::",
  "    // Use STL vector instead of python list\n    // std::vector<std::tuple<long,\
    \ long>> res;\n    // for (auto it = lst.begin(); it != lst.end(); ++it) {\n \
    \   //     std::vector<long> row = *it;\n    //     for (auto it = row.begin();\
    \ it != row.end(); ++it) {\n    //         if (*it == x) {\n    //           \
    \  res.push_back(std::make_tuple(it - row.begin(), it - row.begin()));\n    //\
    \         }\n    //     }\n    // }\n    // return res;\n    std::vector<std::tuple<long,\
    \ long>> res;\n    // for (auto it = lst.begin(); it != lst.end(); ++it) {\n \
    \   //     std::vector<long> row = *it;\n    //     for (auto it = row.begin();\
    \ it != row.end(); ++it) {\n    //         if (*it == x) {\n    //           \
    \  res.push_back(std::make_tuple(it - row.begin(), it - row.begin()));\n    //\
    \         }\n    //     }\n    // }\n    // return res;\n    for (int i = 0; i\
    \ < lst.size(); ++i) {\n        std::vector<long> row = lst[i];\n        for (int\
    \ j = 0; j < row.size(); ++j) {\n            if (row[j] == x) {\n            \
    \    res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    return res;", "\t// your code here\n\tstd::vector<std::tuple<long, long>>\
    \ result;\n\tif (lst.size() == 0) {\n\t\treturn result;\n\t}\n\tstd::vector<std::vector<long>>\
    \ rows;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tstd::vector<long> a;\n\t\
    \tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\
    \t\tresult.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n\t\
    \treturn std::get<0>(t1) == std::get<0>(t2) ? std::get<1>(t1) > std::get<1>(t2)\
    \ : std::get<0>(t1) < std::get<0>(t2);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> v;\n    for(int i=0;i<lst.size();i++){\n        std::vector<long> xs\
    \ = lst[i];\n        for(int j=0;j<xs.size();j++){\n            if(xs[j]==x){\n\
    \                v.push_back(std::make_tuple(i,j));\n            }\n        }\n\
    \    }\n    sort(v.begin(),v.end());\n    int i=0;\n    while(i<v.size()){\n \
    \       int j=i+1;\n        int count=0;\n        while(j<v.size()){\n       \
    \     if(std::get<0>(v[i])==std::get<0>(v[j])){\n                count++;\n  \
    \              j++;\n            }\n            else{\n                break;\n\
    \            }\n        }\n        if(count>0){\n            sort(v.begin()+i,v.begin()+i+count+1,greater<std::tuple<long,\
    \ long>>());\n        }\n        i+=count+1;\n    }\n    return v;", "  std::vector<std::tuple<long,\
    \ long>> result;\n  //write your code here\n  int row = lst.size();\n  int column;\n\
    \  for(int i = 0; i < row; i++){\n      column = lst[i].size();\n      for(int\
    \ j = 0; j < column; j++){\n          if(lst[i][j] == x){\n              result.push_back(std::make_tuple(i,\
    \ j));\n          }\n      }\n  }\n  return result;", "    std::vector<std::tuple<long,\
    \ long>> v;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j =\
    \ 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n           \
    \     v.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n \
    \   std::sort(v.begin(), v.end(), [&](auto t1, auto t2) {\n        return (std::get<0>(t1)\
    \ == std::get<0>(t2)) ? (std::get<1>(t1) > std::get<1>(t2)) : (std::get<0>(t1)\
    \ < std::get<0>(t2));\n    });\n    return v;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    //result.clear();\n    //printf(\"%d\", lst.size());\n \
    \   for(int i = 0; i < lst.size(); i++) {\n        for(int j = 0; j < lst[i].size();\
    \ j++) {\n            if(lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;", "  std::vector<std::tuple<long, long>> result;\n  int count\
    \ = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    for (int j = 0; j < lst[i].size();\
    \ j++) {\n      if (lst[i][j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  // your code goes here\n  return result;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long>& t1, const std::tuple<long, long>& t2) {\n        if (std::get<0>(t1)\
    \ == std::get<0>(t2)) {\n            return std::get<1>(t1) > std::get<1>(t2);\n\
    \        }\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n    return\
    \ res;", "  std::vector<std::tuple<long, long>> res;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    for (int j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] ==\
    \ x) {\n        res.push_back(std::make_tuple(i, j));\n      }\n    }\n  }\n \
    \ sort(res.begin(), res.end());\n  return res;", "  std::vector<std::tuple<long,\
    \ long>> ans;\n  for (int i = 0; i < lst.size(); i++) {\n    int pos = -1;\n \
    \   for (int j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n \
    \       pos = j;\n        break;\n      }\n    }\n    if (pos != -1)\n      ans.push_back(std::make_tuple(i,\
    \ pos));\n  }\n  std::sort(ans.begin(), ans.end(), [](std::tuple<long, long>&\
    \ a, std::tuple<long, long>& b) {\n    if (std::get<0>(a) == std::get<0>(b))\n\
    \      return std::get<1>(a) > std::get<1>(b);\n    return std::get<0>(a) < std::get<0>(b);\n\
    \  });\n  return ans;", '   return std::vector<std::tuple<long, long>>();', " \
    \   std::vector<std::tuple<long, long>> v;\n    for(int i=0;i<lst.size();i++){\n\
    \        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n  \
    \              v.push_back(std::make_tuple(i,j));\n            }\n        }\n\
    \    }\n    sort(v.begin(),v.end());\n    for(int i=0;i<v.size();i++){\n     \
    \   for(int j=i+1;j<v.size();j++){\n            if(std::get<0>(v[i])==std::get<0>(v[j])){\n\
    \                if(std::get<1>(v[i])<std::get<1>(v[j])){\n                  \
    \  std::swap(v[i],v[j]);\n                }\n            }\n        }\n    }\n\
    \    return v;", "    std::vector<std::tuple<long, long>> res;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (long i = 0; i < res.size(); i++) {\n  \
    \      for (long j = i + 1; j < res.size(); j++) {\n            if (std::get<0>(res[i])\
    \ == std::get<0>(res[j])) {\n                std::swap(res[i + 1], res[j]);\n\
    \                i++;\n            }\n        }\n    }\n    for (long i = 0; i\
    \ < res.size(); i++) {\n        for (long j = i + 1; j < res.size(); j++) {\n\
    \            if (std::get<0>(res[i]) == std::get<0>(res[j])) {\n             \
    \   if (std::get<1>(res[i]) < std::get<1>(res[j])) {\n                    std::swap(res[i],\
    \ res[j]);\n                }\n            }\n        }\n    }\n    return res;",
  "    std::vector<std::tuple<long, long>> result;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<long> temp1;\n    for(int i=0;i<lst.size();i++){\n  \
    \      for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n    \
    \            result.push_back(std::make_tuple(i,j));\n            }\n        }\n\
    \    }\n    for(int i=0;i<result.size();i++){\n        temp1.push_back(std::get<0>(result[i]));\n\
    \    }\n    std::sort(temp1.begin(),temp1.end());\n    std::vector<long>::iterator\
    \ it = std::unique(temp1.begin(),temp1.end());\n    temp1.resize(std::distance(temp1.begin(),it));\n\
    \    for(int i=0;i<temp1.size();i++){\n        for(int j=0;j<result.size();j++){\n\
    \            if(temp1[i]==std::get<0>(result[j])){\n                temp.push_back(result[j]);\n\
    \            }\n        }\n    }\n    result.clear();\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=0;j<temp[i].size();j++){\n            result.push_back(temp[i][j]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    std::vector<std::vector<long>>::iterator it;\n    int row_num =\
    \ 0;\n    for (it = lst.begin(); it != lst.end(); it++) {\n        std::vector<long>::iterator\
    \ vt;\n        int idx = 0;\n        for (vt = (*it).begin(); vt != (*it).end();\
    \ vt++) {\n            if (*vt == x) {\n                result.push_back(std::make_tuple(row_num,\
    \ idx));\n            }\n            idx++;\n        }\n        row_num++;\n \
    \   }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long> const\
    \ &a, std::tuple<long, long> const &b) {\n        if (std::get<0>(a) == std::get<0>(b))\n\
    \            return std::get<1>(a) > std::get<1>(b);\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    return result;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> a;\n    std::map<int,std::vector<int>>\
    \ b;\n    for(int i=0;i<lst.size();i++)\n    {\n      int count=0;\n      for(int\
    \ j=0;j<lst[i].size();j++)\n      {\n        if(lst[i][j]==x)\n        {\n   \
    \       count++;\n          b[i].push_back(j);\n        }\n      }\n      if(count!=0)\n\
    \      {\n        std::tuple<long, long> c;\n        c=std::make_tuple(i,count);\n\
    \        a.push_back(c);\n      }\n    }\n    for(int i=0;i<a.size();i++)\n  \
    \  {\n      for(int j=0;j<std::get<1>(a[i]);j++)\n      {\n        int c=(int)std::get<0>(a[i]);\n\
    \        std::sort(b[c].begin(),b[c].end());\n        int l=b[c].size();\n   \
    \     std::tuple<long, long> d;\n        d=std::make_tuple(c,b[c][l-1-j]);\n \
    \       a.push_back(d);\n      }\n    }\n    std::sort(a.begin(),a.end());\n \
    \   std::vector<std::tuple<long, long>>::iterator it=std::unique(a.begin(),a.end());\n\
    \    a.resize(std::distance(a.begin(),it));\n    return a;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    int row = 0;\n    for (std::vector<long> &sub : lst) {\n\
    \        int col = 0;\n        for (long &subsub : sub) {\n            if (subsub\
    \ == x) {\n                result.push_back(std::make_tuple(row, col));\n    \
    \        }\n            col++;\n        }\n        row++;\n    }\n    std::sort(result.begin(),\
    \ result.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b)\
    \ {\n            return std::get<0>(a) < std::get<0>(b);\n        });\n    std::sort(result.begin(),\
    \ result.end(),\n        [](std::tuple<long, long> a, std::tuple<long, long> b)\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n    return\
    \ result;", "  std::vector<std::tuple<long, long>> ans;\n  for (long i = 0; i\
    \ < lst.size(); i++) {\n    for (long j = 0; j < lst[i].size(); j++) {\n     \
    \ if (lst[i][j] == x) {\n        ans.push_back(std::make_tuple(i, j));\n     \
    \ }\n    }\n  }\n  std::sort(ans.begin(), ans.end(), [&](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n    return std::get<0>(a) < std::get<0>(b);\n\
    \  });\n  for (long i = 0; i < ans.size(); i++) {\n    for (long j = i + 1; j\
    \ < ans.size(); j++) {\n      if (std::get<0>(ans[i]) == std::get<0>(ans[j]))\
    \ {\n        std::swap(ans[i + 1], ans[j]);\n      }\n    }\n  }\n  for (long\
    \ i = 0; i < ans.size(); i++) {\n    for (long j = i + 1; j < ans.size(); j++)\
    \ {\n      if (std::get<0>(ans[i]) == std::get<0>(ans[j])) {\n        if (std::get<1>(ans[i])\
    \ < std::get<1>(ans[j])) {\n          std::swap(ans[i], ans[j]);\n        }\n\
    \      }\n    }\n  }\n  return ans;", "\tstd::vector<std::tuple<long, long>> result;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\n\
    \t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\
    \t});\n\treturn result;", "    std::vector<std::tuple<long, long>> result = std::vector<std::tuple<long,\
    \ long>>();\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    for (long i = 0; i < result.size();\
    \ i++) {\n        for (long j = i + 1; j < result.size(); j++) {\n           \
    \ if (std::get<0>(result[i]) == std::get<0>(result[j])) {\n                if\
    \ (std::get<1>(result[i]) < std::get<1>(result[j])) {\n                    std::tuple<long,\
    \ long> temp = result[i];\n                    result[i] = result[j];\n      \
    \              result[j] = temp;\n                }\n            }\n        }\n\
    \    }\n    return result;", "    std::vector<std::tuple<long, long>> res;\n \
    \   for (long row = 0; row < lst.size(); row++) {\n        for (long col = 0;\
    \ col < lst[row].size(); col++) {\n            if (lst[row][col] == x) {\n   \
    \             res.push_back(std::make_tuple(row, col));\n            }\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end(),\n              [](std::tuple<long,\
    \ long>& a, std::tuple<long, long>& b) {\n                  return std::get<0>(a)\
    \ < std::get<0>(b);\n              });\n    for (auto& el : res) {\n        std::get<0>(el)\
    \ = std::get<0>(el) * 100000;\n    }\n    std::sort(res.begin(), res.end(),\n\
    \              [](std::tuple<long, long>& a, std::tuple<long, long>& b) {\n  \
    \                return std::get<1>(a) > std::get<1>(b);\n              });\n\
    \    for (auto& el : res) {\n        std::get<0>(el) = std::get<0>(el) / 100000;\n\
    \    }\n    return res;", "    std::vector<std::tuple<long, long>> ans;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                ans.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(ans.begin(), ans.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return (std::get<0>(a)\
    \ < std::get<0>(b)) || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b));\n\
    \    });\n    return ans;", "    std::vector<std::tuple<long, long>> tuples;\n\
    \    for (long row = 0; row < lst.size(); row++) {\n        std::vector<long>\
    \ inner = lst[row];\n        for (long col = 0; col < inner.size(); col++) {\n\
    \            if (inner[col] == x) {\n                tuples.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    std::sort(tuples.begin(), tuples.end(),\
    \ [](const std::tuple<long, long>& t1, const std::tuple<long, long>& t2) {\n \
    \       return std::get<0>(t1) < std::get<0>(t2);\n    });\n    for (long i =\
    \ 0; i < tuples.size(); i++) {\n        std::tuple<long, long> next = tuples[i];\n\
    \        std::tuple<long, long> prev = tuples[i];\n        for (long j = i + 1;\
    \ j < tuples.size(); j++) {\n            std::tuple<long, long> t = tuples[j];\n\
    \            if (std::get<0>(next) != std::get<0>(t)) {\n                break;\n\
    \            }\n            next = t;\n        }\n        for (long j = i - 1;\
    \ j >= 0; j--) {\n            std::tuple<long, long> t = tuples[j];\n        \
    \    if (std::get<0>(prev) != std::get<0>(t)) {\n                break;\n    \
    \        }\n            prev = t;\n        }\n        std::sort(prev, next + 1,\
    \ [](const std::tuple<long, long>& t1, const std::tuple<long, long>& t2) {\n \
    \           return std::get<1>(t1) > std::get<1>(t2);\n        });\n    }\n  \
    \  return tuples;", "\tstd::vector<std::tuple<long, long>> out;\n\tfor (long i\
    \ = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\
    \t\t\tif (lst[i][j] == x) {\n\t\t\t\tout.push_back(std::make_tuple(i, j));\n\t\
    \t\t}\n\t\t}\n\t}\n\tsort(out.begin(), out.end());\n\tstd::vector<std::tuple<long,\
    \ long>> out_new;\n\tstd::vector<std::vector<std::tuple<long, long>>> arr;\n\t\
    long x_ = std::get<0>(out[0]);\n\tfor (long i = 0; i < out.size(); i++) {\n\t\t\
    if (x_ == std::get<0>(out[i])) {\n\t\t\tout_new.push_back(out[i]);\n\t\t}\n\t\t\
    else {\n\t\t\tarr.push_back(out_new);\n\t\t\tout_new.clear();\n\t\t\tout_new.push_back(out[i]);\n\
    \t\t\tx_ = std::get<0>(out[i]);\n\t\t}\n\t}\n\tarr.push_back(out_new);\n\tstd::vector<std::tuple<long,\
    \ long>> out_new_new;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tstd::sort(arr[i].begin(),\
    \ arr[i].end(), std::greater<std::tuple<long, long>>());\n\t\tfor (long j = 0;\
    \ j < arr[i].size(); j++) {\n\t\t\tout_new_new.push_back(arr[i][j]);\n\t\t}\n\t\
    }\n\treturn out_new_new;", "  std::vector<std::tuple<long, long>> ans;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    for (int j = 0; j < lst[i].size(); j++)\
    \ {\n      if (lst[i][j] == x) {\n        ans.push_back(std::make_tuple(i, j));\n\
    \      }\n    }\n  }\n  sort(ans.begin(), ans.end());\n  return ans;", "  std::vector<std::tuple<long,\
    \ long>> v;\n  if (lst.size() == 0)\n    return v;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    std::vector<long> temp = lst[i];\n    for (long j = 0; j < temp.size();\
    \ j++) {\n      if (temp[j] == x) {\n        v.push_back(std::make_tuple(i, j));\n\
    \      }\n    }\n  }\n  std::sort(v.begin(), v.end());\n  return v;", "    std::vector<std::tuple<long,\
    \ long>> rv;\n    int i = 0;\n    for (std::vector<long> &vec : lst) {\n     \
    \   int j = 0;\n        for (long l : vec) {\n            if (l == x) {\n    \
    \            rv.push_back(std::make_tuple(i, j));\n            }\n           \
    \ j++;\n        }\n        i++;\n    }\n    std::sort(rv.begin(), rv.end(), [](std::tuple<long,\
    \ long> &a, std::tuple<long, long> &b) {\n            if (std::get<0>(a) == std::get<0>(b))\
    \ {\n                return std::get<1>(a) > std::get<1>(b);\n            }\n\
    \            return std::get<0>(a) < std::get<0>(b);\n            });\n    return\
    \ rv;", '  // your code here', "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&](std::tuple<long, long> x, std::tuple<long, long> y) {\n        return std::get<0>(x)\
    \ == std::get<0>(y) ? std::get<1>(x) > std::get<1>(y) : std::get<0>(x) < std::get<0>(y);\n\
    \    });\n    return result;", "    // create a new vector of coordinate tuples\n\
    \    std::vector<std::tuple<long, long>> coordinates;\n    // iterate through\
    \ the rows\n    for (int i = 0; i < lst.size(); i++) {\n        // iterate through\
    \ the columns\n        for (int j = 0; j < lst[i].size(); j++) {\n           \
    \ // if the row element is equal to the given number,\n            // append a\
    \ new coordinate tuple (row, column) to the coordinates vector\n            if\
    \ (lst[i][j] == x) {\n                coordinates.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    // sort the coordinates by ascending\
    \ row value and descending column value\n    std::sort(coordinates.begin(), coordinates.end(),\
    \ [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n   \
    \     if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    // return the sorted coordinates\n    return coordinates;", "  \
    \  std::vector<std::tuple<long, long>> rows;\n    for (long row = 0; row < lst.size();\
    \ row++) {\n        for (long col = 0; col < lst[row].size(); col++) {\n     \
    \       if (lst[row][col] == x) {\n                rows.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    std::sort(rows.begin(), rows.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(rows.begin(), rows.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return rows;", "\tstd::vector<std::tuple<long, long>> result;\n\t\
    int row = 0;\n\tfor (auto i : lst) {\n\t\tint col = i.size() - 1;\n\t\tfor (auto\
    \ j : i) {\n\t\t\tif (j == x) {\n\t\t\t\tstd::tuple<long, long> temp = std::make_tuple(row,\
    \ col);\n\t\t\t\tresult.push_back(temp);\n\t\t\t}\n\t\t\tcol--;\n\t\t}\n\t\trow++;\n\
    \t}\n\tsort(result.begin(), result.end());\n\treturn result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j =\
    \ 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tif (result.size() > 0) {\n\t\tstd::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long>& a, std::tuple<long, long>& b) {\n\t\
    \t\tif (std::get<0>(a) < std::get<0>(b)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    \telse if (std::get<0>(a) == std::get<0>(b)) {\n\t\t\t\treturn std::get<1>(a)\
    \ > std::get<1>(b);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t});\n\t}\n\treturn result;", "\tstd::vector<std::tuple<long, long>> res;\n\t\
    int c = 0;\n\tfor (auto v : lst) {\n\t\tint i = 0;\n\t\tfor (auto d : v) {\n\t\
    \t\tif (d == x) {\n\t\t\t\tres.push_back(std::make_tuple(c, i));\n\t\t\t}\n\t\t\
    \ti++;\n\t\t}\n\t\tc++;\n\t}\n\tstd::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> x, std::tuple<long, long> y) {\n\t\treturn std::get<0>(x) < std::get<0>(y);\n\
    \t});\n\tfor (int j = 0; j < res.size(); j++) {\n\t\tfor (int k = j + 1; k < res.size();\
    \ k++) {\n\t\t\tif (std::get<0>(res[j]) == std::get<0>(res[k])) {\n\t\t\t\tif\
    \ (std::get<1>(res[j]) < std::get<1>(res[k])) {\n\t\t\t\t\tstd::swap(res[j], res[k]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j =\
    \ 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\tfor (long i = 0;\
    \ i < result.size(); i++) {\n\t\tstd::tuple<long, long> temp = result[i];\n\t\t\
    std::get<1>(temp) = -1 * std::get<1>(temp);\n\t\tresult[i] = temp;\n\t}\n\tsort(result.begin(),\
    \ result.end());\n\tfor (long i = 0; i < result.size(); i++) {\n\t\tstd::tuple<long,\
    \ long> temp = result[i];\n\t\tstd::get<1>(temp) = -1 * std::get<1>(temp);\n\t\
    \tresult[i] = temp;\n\t}\n\treturn result;", "\tstd::vector<std::tuple<long, long>>\
    \ res;\n\tif(lst.size() == 0) return res;\n\tfor(int i = 0; i < lst.size(); i++)\
    \ {\n\t\tstd::vector<long> row = lst[i];\n\t\tfor(int j = 0; j < row.size(); j++)\
    \ {\n\t\t\tif(row[j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\
    \t\t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [] (std::tuple<long, long>\
    \ t1, std::tuple<long, long> t2) {\n\t\tif(std::get<0>(t1) < std::get<0>(t2))\
    \ return true;\n\t\tif(std::get<0>(t1) > std::get<0>(t2)) return false;\n\t\t\
    if(std::get<1>(t1) > std::get<1>(t2)) return true;\n\t\treturn false;\n\t});\n\
    \treturn res;", "    std::vector<std::tuple<long, long>> result;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        auto it = std::find(lst[i].begin(), lst[i].end(),\
    \ x);\n        if (it != lst[i].end()) {\n            result.push_back(std::make_tuple(i,\
    \ std::distance(lst[i].begin(), it)));\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \     if (std::get<0>(a) < std::get<0>(b)) {\n            return true;\n     \
    \   } else if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        } else {\n            return false;\n        }\n\
    \    });\n    return result;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use std::cout\n    // Example: std::cout << \"\
    Hello world!\";\n    vector<tuple<long, long>> res;\n    sort(lst.begin(), lst.end(),\
    \ \n        [](const vector<long>& lhs, const vector<long>& rhs) {\n        return\
    \ lhs.size() < rhs.size();\n    });\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        auto p = lower_bound(lst[i].begin(), lst[i].end(), x);\n        if\
    \ (p != lst[i].end() && *p == x) {\n            res.push_back(make_tuple(i, p\
    \ - lst[i].begin()));\n        }\n    }\n    sort(res.begin(), res.end(), \n \
    \       [](const tuple<long, long>& lhs, const tuple<long, long>& rhs) {\n   \
    \     return get<0>(lhs) < get<0>(rhs);\n    });\n    for (int i = 0; i < res.size();\
    \ i++) {\n        if (i + 1 < res.size() && get<0>(res[i]) == get<0>(res[i + 1]))\
    \ {\n            sort(res.begin() + i, res.begin() + i + 2, \n               \
    \ [](const tuple<long, long>& lhs, const tuple<long, long>& rhs) {\n         \
    \       return get<1>(lhs) > get<1>(rhs);\n            });\n            i++;\n\
    \        }\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ tuple_list;\n    int row_index = 0;\n    for (auto &row : lst) {\n        int\
    \ col_index = 0;\n        for (auto &col : row) {\n            if (col == x) {\n\
    \                tuple_list.push_back(std::make_tuple(row_index, col_index));\n\
    \            }\n            col_index++;\n        }\n        row_index++;\n  \
    \  }\n    std::sort(tuple_list.begin(), tuple_list.end(), [] (std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) == std::get<0>(b)\
    \ ? std::get<1>(a) > std::get<1>(b) : std::get<0>(a) < std::get<0>(b);\n    });\n\
    \    return tuple_list;", "    std::vector<std::tuple<long, long>> res;\n    int\
    \ row,col;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n\
    \            if(lst[i][j]==x){\n                res.push_back(std::make_tuple(i,j));\n\
    \            }\n        }\n    }\n    //sort by row\n    std::sort(res.begin(),res.end());\n\
    \    //sort by column\n    std::vector<std::tuple<long, long>> temp;\n    int\
    \ i=0;\n    while(i<res.size()){\n        temp.push_back(res[i]);\n        row=std::get<0>(res[i]);\n\
    \        i++;\n        while(i<res.size() && std::get<0>(res[i])==row){\n    \
    \        temp.push_back(res[i]);\n            i++;\n        }\n        std::sort(temp.begin(),temp.end(),[](std::tuple<long,\
    \ long> x,std::tuple<long, long> y){\n            int a=std::get<1>(x);\n    \
    \        int b=std::get<1>(y);\n            return a>b;\n        });\n       \
    \ while(!temp.empty()){\n            res.push_back(temp.back());\n           \
    \ temp.pop_back();\n        }\n    }\n    res.erase(res.begin(),res.begin()+i);\n\
    \    return res;", "    // Implement your solution here\n    std::vector<std::tuple<long,\
    \ long>> result;\n    long temp1, temp2;\n    for(long i = 0; i < lst.size();\
    \ i++){\n        for(long j = 0; j < lst[i].size(); j++){\n            if(lst[i][j]\
    \ == x){\n                temp1 = i;\n                temp2 = j;\n           \
    \     result.push_back(std::make_tuple(temp1, temp2));\n            }\n      \
    \  }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<std::tuple<long, long>> ans;\n    std::vector<std::vector<std::tuple<long,\
    \ long>>> co_ord;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long\
    \ j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n       \
    \         std::tuple<long, long> temp(i, j);\n                ans.push_back(temp);\n\
    \            }\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n   \
    \ std::reverse(ans.begin(), ans.end());\n    return ans;", "  std::vector<std::tuple<long,\
    \ long>> tup;\n  for (size_t i = 0; i < lst.size(); i++) {\n    for (size_t j\
    \ = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        tup.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(tup.begin(), tup.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n    return (std::get<0>(a) < std::get<0>(b));\n\
    \  });\n  std::sort(tup.begin(), tup.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n    return (std::get<0>(a) == std::get<0>(b) ? std::get<1>(a) >\
    \ std::get<1>(b) : true);\n  });\n  return tup;", "    std::vector<std::tuple<long,\
    \ long>> ans;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        ans.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(ans.begin(), ans.end(), [&](std::tuple<long, long> tup1, std::tuple<long,\
    \ long> tup2) {\n        return std::get<0>(tup1) < std::get<0>(tup2);\n    });\n\
    \    std::sort(ans.begin(), ans.end(), [&](std::tuple<long, long> tup1, std::tuple<long,\
    \ long> tup2) {\n        if (std::get<0>(tup1) == std::get<0>(tup2)) {\n     \
    \       return std::get<1>(tup1) > std::get<1>(tup2);\n        }\n        return\
    \ false;\n    });\n    return ans;", "\tstd::vector<std::tuple<long, long>> vec;\n\
    \tint index = 0;\n\tfor (auto it = lst.begin(); it != lst.end(); it++) {\n\t\t\
    for (auto it2 = it->begin(); it2 != it->end(); it2++) {\n\t\t\tif (*it2 == x)\
    \ {\n\t\t\t\tvec.push_back(std::make_tuple(index, it2 - it->begin()));\n\t\t\t\
    }\n\t\t}\n\t\tindex++;\n\t}\n\tstd::sort(vec.begin(), vec.end(), [](std::tuple<long,\
    \ long>a, std::tuple<long, long>b) {\n\t\tlong c = std::get<0>(a);\n\t\tlong d\
    \ = std::get<0>(b);\n\t\tlong e = std::get<1>(a);\n\t\tlong f = std::get<1>(b);\n\
    \t\tif (c < d) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (c == d) {\n\t\t\tif\
    \ (e > f) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t});\n\treturn vec;",
  "    std::vector<std::tuple<long, long>> ans;\n    for (size_t row = 0; row < lst.size();\
    \ row++) {\n        for (size_t col = 0; col < lst[row].size(); col++) {\n   \
    \         if (lst[row][col] == x) {\n                ans.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    std::sort(ans.begin(), ans.end(),\
    \ [](std::tuple<long, long>& a, std::tuple<long, long>& b) {\n        return (std::get<0>(a)\
    \ < std::get<0>(b)) || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b));\n\
    \    });\n    return ans;", "    std::vector<std::tuple<long, long>> result;\n\
    \    std::vector<std::tuple<long, long>> row;\n    long i = 0;\n    while (i <\
    \ lst.size()) {\n        long j = 0;\n        while (j < lst[i].size()) {\n  \
    \          if (lst[i][j] == x) {\n                row.push_back(std::make_tuple(i,\
    \ j));\n            }\n            j++;\n        }\n        i++;\n    }\n    sort(row.begin(),\
    \ row.end());\n    for (auto t : row) {\n        std::cout << std::get<0>(t) <<\
    \ \"  \" << std::get<1>(t) << std::endl;\n    }\n    std::vector<std::tuple<long,\
    \ long>> row_set;\n    long row_index = -1;\n    for (auto t : row) {\n      \
    \  if (std::get<0>(t) != row_index) {\n            if (row_index != -1) {\n  \
    \              sort(row_set.begin(), row_set.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n                    return std::get<1>(a) >\
    \ std::get<1>(b);\n                });\n                for (auto t1 : row_set)\
    \ {\n                    result.push_back(t1);\n                }\n          \
    \  }\n            row_index = std::get<0>(t);\n            row_set.clear();\n\
    \        }\n        row_set.push_back(t);\n    }\n    sort(row_set.begin(), row_set.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    for (auto t1 : row_set) {\n        result.push_back(t1);\n\
    \    }\n    return result;", "\tstd::vector<std::tuple<long, long>> result;\n\t\
    for (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size();\
    \ j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> v;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j =\
    \ 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n           \
    \     v.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n \
    \   sort(v.begin(), v.end());\n    long row = -1;\n    for(long i = 0; i < v.size();\
    \ i++) {\n        if(std::get<0>(v[i]) == row) {\n            continue;\n    \
    \    }\n        else {\n            row = std::get<0>(v[i]);\n            std::sort(v.begin()\
    \ + i, v.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \             return std::get<1>(a) > std::get<1>(b);\n            });\n     \
    \   }\n    }\n    return v;", "    std::vector<std::tuple<long, long>> ans;\n\
    \    std::vector<std::vector<long>>::iterator row;\n    std::vector<long>::iterator\
    \ col;\n    int i, j;\n    i = 0;\n    for (row = lst.begin(); row != lst.end();\
    \ ++row) {\n        j = 0;\n        for (col = row->begin(); col != row->end();\
    \ ++col) {\n            if (*col == x) {\n                ans.push_back(std::make_tuple(i,\
    \ j));\n            }\n            j++;\n        }\n        i++;\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;", "    std::vector<std::tuple<long, long>> ans;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                ans.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(ans.begin(), ans.end(),\
    \ [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n   \
    \     if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return ans;", "    std::vector<std::tuple<long, long>> ans;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        std::vector<long> row = lst[i];\n\
    \        for (long j = 0; j < row.size(); j++) {\n            if (row[j] == x)\
    \ {\n                ans.push_back(std::make_tuple(i, j));\n            }\n  \
    \      }\n    }\n    return ans;", "  std::vector<std::tuple<long, long>> res;\n\
    \  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0; j < lst[i].size();\
    \ j++) {\n      if (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> x, std::tuple<long, long> y) {\n    if (std::get<0>(x) < std::get<0>(y))\
    \ {\n      return true;\n    } else if (std::get<0>(x) == std::get<0>(y)) {\n\
    \      return std::get<1>(x) > std::get<1>(y);\n    } else {\n      return false;\n\
    \    }\n  });\n  return res;", "    std::vector<std::tuple<long, long>> ret;\n\
    \    for (int row = 0; row < lst.size(); row++) {\n        for (int col = 0; col\
    \ < lst[row].size(); col++) {\n            if (lst[row][col] == x) {\n       \
    \         ret.push_back(std::make_tuple(row, col));\n            }\n        }\n\
    \    }\n    std::sort(ret.begin(), ret.end(),\n            [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n                if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n                    return std::get<1>(a) > std::get<1>(b);\n\
    \                }\n                return std::get<0>(a) < std::get<0>(b);\n\
    \            });\n    return ret;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&](auto& a, auto& b) {\n        if (std::get<0>(a) != std::get<0>(b)) {\n \
    \           return std::get<0>(a) < std::get<0>(b);\n        }\n        return\
    \ std::get<1>(a) > std::get<1>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> ret;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        ret.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(ret.begin(), ret.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) != std::get<0>(b)) {\n            return\
    \ std::get<0>(a) < std::get<0>(b);\n        } else {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n    });\n    return ret;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    // write your code here\n    if(lst.size()==0)\n       \
    \ return result;\n    long i=0;\n    while(i<lst.size()){\n        long j=0;\n\
    \        while(j<lst[i].size()){\n            if(lst[i][j]==x){\n            \
    \    result.push_back(std::make_tuple(i,j));\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long>& a, std::tuple<long,\
    \ long>& b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "\tstd::vector<std::tuple<long,\
    \ long>> ret;\n\t//assert(ret.size()==0);\n\tfor(int i=0;i<lst.size();i++){\n\t\
    \tfor(int j=0;j<lst[i].size();j++){\n\t\t\tif(lst[i][j]==x){\n\t\t\t\tstd::tuple<long,\
    \ long> t = std::make_tuple(i,j);\n\t\t\t\tret.push_back(t);\n\t\t\t}\n\t\t}\n\
    \t}\n\tsort(ret.begin(),ret.end());\n\tstd::vector<std::tuple<long, long>> temp;\n\
    \tint k=0;\n\tstd::vector<std::tuple<long, long>> r;\n\tfor(int i=0;i<ret.size();i++){\n\
    \t\tint flag=0;\n\t\tfor(int j=0;j<r.size();j++){\n\t\t\tif(std::get<0>(ret[i])==std::get<0>(r[j])){\n\
    \t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==0){\n\t\t\tr.push_back(ret[i]);\n\
    \t\t}\n\t}\n\tfor(int i=0;i<r.size();i++){\n\t\ttemp.push_back(r[i]);\n\t\tfor(int\
    \ j=0;j<ret.size();j++){\n\t\t\tif(std::get<0>(ret[j])==std::get<0>(r[i])){\n\t\
    \t\t\ttemp.push_back(ret[j]);\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<std::tuple<long,\
    \ long>> ans;\n\tfor(int i=0;i<temp.size();i++){\n\t\tif(i%2==0){\n\t\t\tans.push_back(temp[i]);\n\
    \t\t}\n\t}\n\treturn ans;", "// Write your code here.\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(int i = 0; i < lst.size(); i++){\n        std::vector<long>\
    \ row = lst[i];\n        for(int j = 0; j < row.size(); j++){\n            if(row[j]\
    \ == x){\n                res.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b){\n        if(std::get<0>(a) < std::get<0>(b)){\n\
    \            return true;\n        }\n        else if(std::get<0>(a) == std::get<0>(b)){\n\
    \            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ false;\n    });\n    return res;"]
stop_tokens:
- "\n}"
