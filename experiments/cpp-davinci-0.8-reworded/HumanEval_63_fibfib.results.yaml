language: cpp
name: HumanEval_63_fibfib
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  long a = 0, b = 0, c = 1, d = 0;\n  for (int i = 2; i <= n; i++) {\n    d =\
    \ a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpxu2dsgv7: /tmp/tmpxu2dsgv7.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a[n+1];\n    if(n == 0)\n        return 0;\n    else if(n == 1)\n  \
    \      return 0;\n    else if(n == 2)\n        return 1;\n    else{\n        a[0]\
    \ = 0;\n        a[1] = 0;\n        a[2] = 1;\n        for(int i = 3; i <= n; i++){\n\
    \            a[i] = a[i-1] + a[i-2] + a[i-3];\n        }\n        return a[n];\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    int a = 0, b = 0, c = 1, d = 0;\n    if (n == 0)\n        return 0;\n   \
    \ for (int i = 2; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpghqmueb9: /tmp/tmpghqmueb9.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a=0,b=0,c=1,d;\n    if(n==0) return a;\n    if(n==1) return b;\n   \
    \ if(n==2) return c;\n    for(int i=3;i<=n;i++){\n        d=a+b+c;\n        a=b;\n\
    \        b=c;\n        c=d;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n <= 2) return n - 1;\n    long a = 0, b = 0, c\
    \ = 1, result = 0;\n    for (int i = 3; i <= n; i++) {\n        result = a + b\
    \ + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    long a, b, c, d, e;\n    a = 0;\n    b = 0;\n    c = 1;\n    for (d\
    \ = 3; d <= n; d++) {\n        e = c + b + a;\n        a = b;\n        b = c;\n\
    \        c = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    long a = 0, b = 0, c = 1;\n    long result = 0;\n    for (int\
    \ i = 3; i <= n; i++) {\n        result = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = result;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 2) {\n        return 0;\n    } else if (n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 3) return n == 0 ? 0 : 1;\n    long a = 0, b = 1, c = 1, d = 1;\n\
    \    while (n > 3) {\n        a = a + b + c;\n        b = c;\n        c = d;\n\
    \        d = a;\n        n--;\n    }\n    return a;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp8xzhnl7p: /tmp/tmp8xzhnl7p.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // your code goes here\n  long fib[n+1];\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2]\
    \ = 1;\n  for(int i = 3; i<=n; i++)\n  {\n      fib[i] = fib[i-1] + fib[i-2] +\
    \ fib[i-3];\n  }\n  return fib[n];\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a[n];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 1;\n    for(int i =\
    \ 3; i <= n; i++) {\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    }\n    return\
    \ a[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // your code goes here\n    if(n == 0 || n == 1){\n        return 0;\n  \
    \  }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a = 0, b = 0, c = 1, d;\n    if (n <= 1)\n        return n;\n    for\
    \ (int i = 2; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpt22ex92t: /tmp/tmpt22ex92t.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n \
    \ std::vector<long> cache(n+1);\n  cache[0] = 0;\n  cache[1] = 0;\n  cache[2]\
    \ = 1;\n  for (long i = 3; i <= n; i++) {\n    cache[i] = cache[i-1] + cache[i-2]\
    \ + cache[i-3];\n  }\n  return cache[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long first = 0;\n    long second = 0;\n    long third = 1;\n    if (n ==\
    \ 0) {\n        return first;\n    }\n    if (n == 1) {\n        return second;\n\
    \    }\n    if (n == 2) {\n        return third;\n    }\n    while (n > 3) {\n\
    \        long temp = first + second + third;\n        first = second;\n      \
    \  second = third;\n        third = temp;\n        n--;\n    }\n    return third;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp5xc6r5sq: /tmp/tmp5xc6r5sq.cpp:41: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // your code here\n    long int a[n];\n    a[0]=0;\n    a[1]=0;\n    a[2]=1;\n\
    \    int i;\n    for(i=3;i<=n;i++)\n    {\n        a[i]=a[i-1]+a[i-2]+a[i-3];\n\
    \    }\n    return a[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \     if(n==0)\n        return 0;\n     if(n==1)\n        return 0;\n     if(n==2)\n\
    \        return 1;\n     long *arr = new long[n];\n     arr[0] = 0;\n     arr[1]\
    \ = 0;\n     arr[2] = 1;\n     for(int i=3;i<n;i++)\n     {\n         arr[i] =\
    \ arr[i-1] + arr[i-2] + arr[i-3];\n     }\n     return arr[n-1];\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpijerfi_6: /tmp/tmpijerfi_6.cpp:36: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n < 2) return 0;\n  if (n == 2) return 1;\n  long fib[n+1];\n  fib[0] =\
    \ 0;\n  fib[1] = 0;\n  fib[2] = 1;\n  for (int i = 3; i <= n; i++) {\n    fib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  \
    \  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  long a = 0, b = 0, c = 1, temp;\n  for (int i = 0; i < n;\
    \ i++) {\n    temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n  }\n\
    \  return a;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // your code here\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp280tza4f: /tmp/tmp280tza4f.cpp:20: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660126758
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n>=0);\n    long a[n+1];\n    a[0]=0;\n    a[1]=0;\n    a[2]=1;\n\
    \    if(n==0 || n==1 || n==2)\n        return a[n];\n    else\n    {\n       \
    \ for(int i=3;i<=n;i++)\n        {\n            a[i]=a[i-1]+a[i-2]+a[i-3];\n \
    \       }\n        return a[n];\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long i = 0;\n    long j = 0;\n    long k = 1;\n    for (int x = 1; x < n;\
    \ x++) {\n        i = j;\n        j = k;\n        k = i + j + k;\n    }\n    return\
    \ k;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp644nvdz7: /tmp/tmp644nvdz7.cpp:28: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a=0,b=0,c=1,d;\n    if(n==0)\n        return a;\n    if(n==1)\n    \
    \    return b;\n    if(n==2)\n        return c;\n    for(int i=3;i<=n;i++)\n \
    \   {\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n   \
    \ return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fibfib[n+1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2]\
    \ = 1;\n    for (int i = 3; i <= n; i++)\n       fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    return fibfib[n];\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif\
    \ (n == 2) {\n\t\treturn 1;\n\t}\n\tlong* output = new long[n + 1];\n\toutput[0]\
    \ = 0;\n\toutput[1] = 0;\n\toutput[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\toutput[i] = output[i - 1] + output[i - 2] + output[i - 3];\n\t}\n\tlong ans\
    \ = output[n];\n\tdelete[] output;\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126758
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    std::unordered_map<long, long> cache;\n    cache[0] = 0;\n    cache[1] =\
    \ 0;\n    cache[2] = 1;\n    return fibfibHelper(n, cache);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8pomzuz.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpo8pomzuz.cpp:20:12: error: \u2018fibfibHelper\u2019 was not declared\
    \ in this scope\n   20 |     return fibfibHelper(n, cache);\n      |         \
    \   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 3) {\n        return n-1;\n    }\n    long fib[n+1];\n    fib[0]\
    \ = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for (int i = 3; i <= n; i++) {\n\
    \        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0) return 0;\n    else if (n == 1) return 0;\n\
    \    else if (n == 2) return 1;\n    else {\n        std::vector<long> vec = {0,\
    \ 0, 1};\n        for (int i = 3; i <= n; i++) {\n            vec.push_back(vec[i-1]\
    \ + vec[i-2] + vec[i-3]);\n        }\n        return vec[n];\n    }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  // your code goes here\n  std::vector<long> fib{0, 0, 1};\n\
    \  if (n < 3) return fib[n];\n  for (int i = 3; i <= n; i++) {\n    fib.push_back(fib[i-1]\
    \ + fib[i-2] + fib[i-3]);\n  }\n  return fib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tstd::vector<long> res(n+1);\n\tres[0] = 0;\n\tres[1] = 0;\n\tres[2] = 1;\n\t\
    for(int i = 3; i < n+1; i++) {\n\t\tres[i] = res[i-1] + res[i-2] + res[i-3];\n\
    \t}\n\treturn res[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long* ar = new long[n];\n    ar[0] = 0;\n    ar[1] = 0;\n    ar[2] = 1;\n\
    \    for(int i = 3; i <= n; i++) {\n        ar[i] = ar[i-1] + ar[i-2] + ar[i-3];\n\
    \    }\n    return ar[n];\n}\nint main() {\n    auto candidate = fibfib;\n   \
    \ assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 2) return 0;\n    else if (n == 2) return 1;\n    else {\n      \
    \  std::vector<long> f(n + 1);\n        f[0] = 0;\n        f[1] = 0;\n       \
    \ f[2] = 1;\n        for (long i = 3; i <= n; i++) {\n            f[i] = f[i -\
    \ 1] + f[i - 2] + f[i - 3];\n        }\n        return f[n];\n    }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \   int f[n+1];\n   int i;\n   f[0] = 0;   f[1] = 0;  f[2] = 1;\n   for (i = 3;\
    \ i <= n; i++)\n      f[i] = f[i-1] + f[i-2] + f[i-3];\n   return f[n];\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// Insert your code here.\n\t//  You will need to add arguments\n\t//  to this\
    \ function for it to compile.\n\t// Please remove this comment when you\n\t//\
    \  have added the necessary arguments.\n\tif (n == 0)\n\t\treturn 0;\n\tif (n\
    \ == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\tlong a = 0, b = 0, c =\
    \ 1, d;\n\tfor (int i = 3; i <= n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // your code here\n  // std::cerr << \"fibfib(\" << n << \") == \";\n  if (n\
    \ == 0) {\n    // std::cerr << \"0\" << std::endl;\n    return 0;\n  }\n  else\
    \ if (n == 1) {\n    // std::cerr << \"0\" << std::endl;\n    return 0;\n  }\n\
    \  else if (n == 2) {\n    // std::cerr << \"1\" << std::endl;\n    return 1;\n\
    \  }\n  else {\n    // std::cerr << \"recursive\" << std::endl;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong a = 0, b = 0, c = 1, d;\n\tif (n == 0) {\n\t\treturn a;\n\t}\n\telse if\
    \ (n == 1) {\n\t\treturn b;\n\t}\n\telse if (n == 2) {\n\t\treturn c;\n\t}\n\t\
    for (int i = 2; i < n; i++) {\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\t\
    c = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0 || n == 1) return 0;\n  if (n == 2) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    long a = 0, b = 0, c = 1, d;\n    for (int i = 3; i\
    \ <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return c;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpkd0l7lqm: /tmp/tmpkd0l7lqm.cpp:29: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// your code here...\n\tlong a = 0, b = 0, c = 1, d;\n\tif (n == 0)\n\t\treturn\
    \ a;\n\tfor (int i = 2; i <= n; i++)\n\t{\n\t\td = a + b + c;\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp7_zyterr: /tmp/tmp7_zyterr.cpp:32: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  long a = 0, b = 0, c = 1, d;\n  if (n == 0)\n    return a;\n  for (int i =\
    \ 2; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n\
    \  }\n  return d;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpkhu3__vy: /tmp/tmpkhu3__vy.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 1) {\n        return 0;\n    }\n    else if (n == 2) {\n       \
    \ return 1;\n    }\n    else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // your code here\n    if(n==0 || n==1)\n    return 0;\n    if(n==2)\n  \
    \  return 1;\n    if(n==3)\n    return 2;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) ==\
    \ (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpb5esruhq: /tmp/tmpb5esruhq.cpp:30: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  int a,b,c,d;\n  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n\
    \    return 1;\n  a=0;\n  b=0;\n  c=1;\n  for(int i=3;i<=n;i++)\n  {\n    d=a+b+c;\n\
    \    a=b;\n    b=c;\n    c=d;\n  }\n  return d;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    \n    if(n <= 1)\n    {\n        return 0;\n    }\n    else if(n == 2)\n\
    \    {\n        return 1;\n    }\n    else\n    {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// your code here\n\tlong fibfib [n+1];\n\tfibfib[0] = 0;\n\tfibfib[1] = 0;\n\
    \tfibfib[2] = 1;\n\tfor(int i = 3; i <= n; i++)\n\t{\n\t\tfibfib[i] = fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3];\n\t}\n\treturn fibfib[n];\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    int fib0 = 0;\n    int fib1 = 0;\n    int fib2 = 1;\n    int fibn =\
    \ 0;\n    int curr = 0;\n    while (curr != n) {\n        fibn = fib2 + fib1 +\
    \ fib0;\n        fib0 = fib1;\n        fib1 = fib2;\n        fib2 = fibn;\n  \
    \      curr++;\n    }\n    return fibn;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpgrm9spz1: /tmp/tmpgrm9spz1.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // TODO: Your code here\n    if(n==0)\n        return 0;\n    if(n==1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    else\n        return\
    \ fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    return (n==0)?0:(n==1)?0:(n==2)?1:fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n>=0);\n    std::vector<long> cache(n + 1);\n    cache[0] = 0;\n \
    \   cache[1] = 0;\n    cache[2] = 1;\n    for (long i = 3; i <= n; i++) {\n  \
    \      cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3];\n    }\n    return\
    \ cache[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong zero, one, two, temp;\n\tzero = 0;\n\tone = 0;\n\ttwo = 1;\n\tfor (int\
    \ i = 2; i <= n; i++) {\n\t\ttemp = zero + one + two;\n\t\tzero = one;\n\t\tone\
    \ = two;\n\t\ttwo = temp;\n\t}\n\treturn two;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpoj9rjgaf: /tmp/tmpoj9rjgaf.cpp:31: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 1;\n    }\n    long x = 0;\n  \
    \  long y = 0;\n    long z = 1;\n    long result = 0;\n    for (int i = 3; i <=\
    \ n; i++) {\n        result = x + y + z;\n        x = y;\n        y = z;\n   \
    \     z = result;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    \n  if(n==0) return 0;\n  if(n==1) return 0;\n  if(n==2) return 1;\n  if(n==3)\
    \ return 1;\n  \n  long x = 1;\n  long y = 1;\n  long z = 2;\n  for(int i=4;i<=n;i++){\n\
    \    long temp = z;\n    z = x+y+z;\n    x = y;\n    y = temp;\n  }\n  return\
    \ z;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpj_iut6s8: /tmp/tmpj_iut6s8.cpp:37: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n>=0);\n  if(n==0)\n  return 0;\n  if(n==1)\n  return 0;\n  if(n==2)\n\
    \  return 1;\n  else\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // WRITE YOUR CODE HERE!\n  if(n<=2) return n-1;\n  long f0=0,f1=0,f2=1,res=0;\n\
    \  for(int i=3;i<=n;i++){\n    res=f0+f1+f2;\n    f0=f1;\n    f1=f2;\n    f2=res;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // assert n>= 0\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n\
    \ == 2) return 1;\n  if (n == 3) return 1;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126761
