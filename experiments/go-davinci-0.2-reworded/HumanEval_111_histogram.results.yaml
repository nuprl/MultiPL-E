language: go_test.go
name: HumanEval_111_histogram
results:
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: initialize the map\n\
    \    hist := make(map[string]int)\n    // PATCH: if test is empty, return the\
    \ map\n    if test == \"\" {\n        return hist\n    }\n    // PATCH: split\
    \ the string into a slice\n    letters := strings.Split(test, \" \")\n    // PATCH:\
    \ initialize the max count\n    maxCount := 0\n    // PATCH: loop over the slice\n\
    \    for _, letter := range letters {\n        // PATCH: if the letter is not\
    \ in the map, add it\n        if _, ok := hist[letter]; !ok {\n            hist[letter]\
    \ = 0\n        }\n        // PATCH: increment the count\n        hist[letter]++\n\
    \        // PATCH: if the count is greater than the max count, update the max\
    \ count\n        if hist[letter] > maxCount {\n            maxCount = hist[letter]\n\
    \        }\n    }\n    // PATCH: loop over the map\n    for letter, count := range\
    \ hist {\n        // PATCH: if the count is less than the max count, delete the\
    \ letter\n        if count < maxCount {\n            delete(hist, letter)\n  \
    \      }\n    }\n    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz26_y9ll_test.go:30:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpxb623rey_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histo = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histo[string(letter)] += 1\n        if histo[string(letter)] > max\
    \ {\n            max = histo[string(letter)]\n            max_letters = []string{string(letter)}\n\
    \        } else if histo[string(letter)] == max {\n            max_letters = append(max_letters,\
    \ string(letter))\n        }\n    }\n    for _, letter := range max_letters {\n\
    \        histo[letter] = max\n    }\n    return histo\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4zh72kix_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4zh72kix_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4zh72kix_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4zh72kix_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4zh72kix_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4zh72kix_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for letter, count\
    \ := range histogram {\n        if count == max {\n            result[letter]\
    \ = count\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpy60ikw1s_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpy60ikw1s_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpy60ikw1s_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpy60ikw1s_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpy60ikw1s_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpy60ikw1s_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: return an empty map\
    \ if the string is empty\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: remove the space at the end of the string\n    if test[len(test)-1]\
    \ == ' ' {\n        test = test[:len(test)-1]\n    }\n    // PATCH: remove the\
    \ space at the beginning of the string\n    if test[0] == ' ' {\n        test\
    \ = test[1:]\n    }\n    // PATCH: remove the space at the end of the string\n\
    \    if test[len(test)-1] == ' ' {\n        test = test[:len(test)-1]\n    }\n\
    \    // PATCH: remove the space at the beginning of the string\n    if test[0]\
    \ == ' ' {\n        test = test[1:]\n    }\n    // PATCH: remove the space at\
    \ the end of the string\n    if test[len(test)-1] == ' ' {\n        test = test[:len(test)-1]\n\
    \    }\n    // PATCH: remove the space at the beginning of the string\n    if\
    \ test[0] == ' ' {\n        test = test[1:]\n    }\n    // PATCH: remove the space\
    \ at the end of the string\n    if test[len(test)-1] == ' ' {\n        test =\
    \ test[:len(test)-1]\n    }\n    // PATCH: remove the space at the beginning of\
    \ the string\n    if test[0] == ' ' {\n        test = test[1:]\n    }\n    //\
    \ PATCH: remove the space at the end of the string\n    if test[len(test)-1] ==\
    \ ' ' {\n        test = test[:len(test)-1]\n    }\n    // PATCH: remove the space\
    \ at the beginning of the string\n    if test[0] == ' ' {\n        test = test[1:]\n\
    \    }\n    // PATCH: remove the space at the end of the string\n    if test[len(test)-1]\
    \ == ' ' {\n        test = test[:len(test)-1]\n    }\n    // PATCH: remove the\
    \ space at the beginning of the string\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf4q1uqtc_test.go:73:6: expected ''('', found TestHistogram

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074516
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histo = make(map[string]int)\n\
    \    for _, letter := range test {\n        histo[string(letter)]++\n    }\n \
    \   return histo\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpsa1emq_1_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpsa1emq_1_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    for _, letter := range max_letters {\n        histogram[letter] =\
    \ max\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxpvwujd7_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpxpvwujd7_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpxpvwujd7_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpxpvwujd7_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpxpvwujd7_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpxpvwujd7_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    for _, letter := range max_letters {\n        histogram[letter] =\
    \ max\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpf6m_tg1f_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpf6m_tg1f_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    for _, letter := range max_letters {\n        histogram[letter] =\
    \ max\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpf6m_tg1f_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpf6m_tg1f_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ylg6m_e_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ylg6m_e_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]++\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpmk8ifznt_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpmk8ifznt_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, letter := range test {\n      \
    \  result[string(letter)] += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcln2wjhy_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcln2wjhy_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    m := make(map[string]int)\n\
    \    for _, v := range test {\n        m[string(v)]++\n    }\n    return m\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp0xk_c0tm_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp0xk_c0tm_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    letters := strings.Split(test,\
    \ \" \")\n    // PATCH: initialize the map\n    histogram := map[string]int{}\n\
    \    // PATCH: initialize the max count\n    max := 0\n    // PATCH: iterate over\
    \ the letters\n    for _, letter := range letters {\n        // PATCH: increment\
    \ the count for the letter\n        histogram[letter]++\n        // PATCH: if\
    \ the count is greater than the max, update the max\n        if histogram[letter]\
    \ > max {\n            max = histogram[letter]\n        }\n    }\n    // PATCH:\
    \ initialize the result map\n    result := map[string]int{}\n    // PATCH: iterate\
    \ over the histogram\n    for letter, count := range histogram {\n        // PATCH:\
    \ if the count is equal to the max, add the letter to the result\n        if count\
    \ == max {\n            result[letter] = count\n        }\n    }\n    // PATCH:\
    \ return the result\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4mk6mmq_test.go:28:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO\n    return map[string]int{}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn3777yh2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn3777yh2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn3777yh2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn3777yh2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn3777yh2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn3777yh2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn3777yh2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpev0cosvq_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpev0cosvq_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpev0cosvq_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpev0cosvq_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpev0cosvq_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpev0cosvq_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    var max_key string\n    for _, v := range test {\n     \
    \   result[string(v)] += 1\n        if result[string(v)] > max {\n           \
    \ max = result[string(v)]\n            max_key = string(v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeunk5ulc_test.go:25:9: max_key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram map[string]int\
    \ = make(map[string]int)\n    var max int = 0\n    var max_key string\n    for\
    \ _, letter := range test {\n        histogram[string(letter)] += 1\n        if\
    \ histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            max_key = string(letter)\n        }\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsw4he57q_test.go:25:9: max_key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmph7kg3_mx_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmph7kg3_mx_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmph7kg3_mx_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmph7kg3_mx_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmph7kg3_mx_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmph7kg3_mx_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_keys []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_keys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_keys = append(max_keys, string(letter))\n        }\n    }\n\
    \n    var result = make(map[string]int)\n    for _, key := range max_keys {\n\
    \        result[key] = max\n    }\n\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp1wutmdx_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpp1wutmdx_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpp1wutmdx_test.go:65: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp1wutmdx_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpp1wutmdx_test.go:65: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpp1wutmdx_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074518
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH\n    return map[string]int{}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4mj8kna8_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4mj8kna8_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpl04kbcd3_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpl04kbcd3_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4905hm67_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp4905hm67_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp4905hm67_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4905hm67_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4905hm67_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp4905hm67_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    histo := make(map[string]int)\n\
    \    for _, letter := range test {\n        histo[string(letter)] += 1\n    }\n\
    \    return histo\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkiqb8g36_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpkiqb8g36_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpkiqb8g36_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpkiqb8g36_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkiqb8g36_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpkiqb8g36_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var letters = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        letters[string(letter)]\
    \ += 1\n        if letters[string(letter)] > max {\n            max = letters[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for letter, count\
    \ := range letters {\n        if count == max {\n            result[letter] =\
    \ count\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp5pam7my9_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp5pam7my9_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp5pam7my9_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp5pam7my9_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp5pam7my9_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp5pam7my9_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var dict = make(map[string]int)\n\
    \    for _, letter := range test {\n        dict[string(letter)]++\n    }\n  \
    \  return dict\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpkqye586l_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpkqye586l_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    testSplit := split(test)\n\
    \    // PATCH: create a map to store the result\n    result := make(map[string]int)\n\
    \    // PATCH: create a map to store the count\n    count := make(map[string]int)\n\
    \    // PATCH: loop through the testSplit\n    for _, value := range testSplit\
    \ {\n        // PATCH: if the value is not in the count map, add it\n        if\
    \ _, ok := count[value]; !ok {\n            count[value] = 1\n        } else {\n\
    \            // PATCH: if the value is in the count map, increment it\n      \
    \      count[value]++\n        }\n    }\n    // PATCH: find the max value in the\
    \ count map\n    max := 0\n    for _, value := range count {\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    // PATCH: loop through\
    \ the count map\n    for key, value := range count {\n        // PATCH: if the\
    \ value is equal to the max, add it to the result map\n        if value == max\
    \ {\n            result[key] = value\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4h_1vrav_test.go:28:18: undefined: split

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    fmt.Println(histogram)\n    fmt.Println(max_letters)\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[ :3 a:2 b:2]\n[ ]\nmap[ :4 a:2 b:2 c:1]\n[ ]\nmap[ :4 a:1 b:1 c:1 d:1\
    \ g:1]\n[ ]\nmap[ :2 g:1 r:1 t:1]\n[ ]\nmap[ :4 a:1 b:4]\n[b  ]\nmap[ :2 g:1 r:1\
    \ t:1]\n[ ]\nmap[]\n[]\nmap[a:1]\n[a]\n--- FAIL: TestHistogram (0.00s)\n    ---\
    \ FAIL: TestHistogram/test_num__0 (0.00s)\n        tmpz_7ra8_2_test.go:60: expected\
    \ 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n\
    \    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpz_7ra8_2_test.go:60:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[ :%!s(int=4) a:%!s(int=2)\
    \ b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n\
    \        tmpz_7ra8_2_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpz_7ra8_2_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__4 (0.00s)\n        tmpz_7ra8_2_test.go:60:\
    \ expected 'map[b:%!s(int=4)]', got 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n\
    \    --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpz_7ra8_2_test.go:60:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpddrzd2z1_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpddrzd2z1_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range histogram {\n        if value == max {\n            result[key] = value\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO\n    return nil\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpno26gwf5_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpno26gwf5_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpno26gwf5_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpno26gwf5_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxhuw58le_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpxhuw58le_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpxhuw58le_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxhuw58le_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpxhuw58le_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpxhuw58le_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpxhuw58le_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n    for _, letter := range maxLetters {\n        histogram[letter] = max\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp5qzka2yt_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp5qzka2yt_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp5qzka2yt_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp5qzka2yt_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp5qzka2yt_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp5qzka2yt_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range histogram {\n        if value == max {\n            result[key] = value\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ylg6m_e_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ylg6m_e_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        if _, ok := result[string(v)];\
    \ ok {\n            result[string(v)] += 1\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    var max_result = make(map[string]int)\n    for k, v :=\
    \ range result {\n        if v == max {\n            max_result[k] = v\n     \
    \   }\n    }\n    return max_result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp65nu2b2l_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp65nu2b2l_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp65nu2b2l_test.go:64: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp65nu2b2l_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp65nu2b2l_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp65nu2b2l_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram map[string]int\n\
    \    histogram = make(map[string]int)\n    for _, letter := range test {\n   \
    \     histogram[string(letter)] += 1\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpq11yagvm_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpq11yagvm_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var dict = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        dict[string(letter)]\
    \ += 1\n        if dict[string(letter)] > max {\n            max = dict[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range dict {\n        if value == max {\n            result[key] = value\n \
    \       }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcyzkwvra_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpcyzkwvra_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpcyzkwvra_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpcyzkwvra_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcyzkwvra_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpcyzkwvra_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpubqtxwe5_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpubqtxwe5_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_keys []string\n    for _, letter := range test {\n\
    \        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_keys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_keys = append(max_keys, string(letter))\n        }\n    }\n\
    \    return map[string]int{\n        \"max\": max,\n        \"max_keys\": max_keys,\n\
    \    }\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd0ees2kt_test.go:37:21: cannot use max_keys (variable of type []string)
    as type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpvjp29hjk_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpvjp29hjk_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    // PATCH: if test is not empty, split it\n    return letters\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9zfxb7ao_test.go:56: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9zfxb7ao_test.go:56: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9zfxb7ao_test.go:56: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9zfxb7ao_test.go:56:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9zfxb7ao_test.go:56: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9zfxb7ao_test.go:56: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: If the string is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: If the string is not empty, split it into a slice of strings\n\
    \    // and iterate over it\n    letters := make(map[string]int)\n    for _, letter\
    \ := range test {\n        letters[string(letter)]++\n    }\n    return letters\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmp395g79_test.go:56: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpmp395g79_test.go:56: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpmp395g79_test.go:56: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpmp395g79_test.go:56:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpmp395g79_test.go:56: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpmp395g79_test.go:56: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp6pn3y280_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp6pn3y280_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH\n    return map[string]int{}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4mj8kna8_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4mj8kna8_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, char := range test {\n        result[string(char)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpbn_qa5l4_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpbn_qa5l4_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074521
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max_count int\n    var max_letters []string\n\n    for _, letter := range\
    \ test {\n        histogram[string(letter)]++\n    }\n\n    for _, count := range\
    \ histogram {\n        if count > max_count {\n            max_count = count\n\
    \        }\n    }\n\n    for letter, count := range histogram {\n        if count\
    \ == max_count {\n            max_letters = append(max_letters, letter)\n    \
    \    }\n    }\n\n    return map[string]int{\n        fmt.Sprintf(\"%s\", max_letters):\
    \ max_count,\n    }\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9841jj9__test.go:68: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[[ ]:%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n\
    \        tmp9841jj9__test.go:68: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[[ ]:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n   \
    \     tmp9841jj9__test.go:68: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[[ ]:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp9841jj9__test.go:68: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[[ ]:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9841jj9__test.go:68: expected 'map[b:%!s(int=4)]', got 'map[[b\
    \  ]:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp9841jj9__test.go:68:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[[ ]:%!s(int=2)]'\n\
    \    --- FAIL: TestHistogram/test_num__6 (0.00s)\n        tmp9841jj9__test.go:68:\
    \ expected 'map[]', got 'map[[]:%!s(int=0)]'\n    --- FAIL: TestHistogram/test_num__7\
    \ (0.00s)\n        tmp9841jj9__test.go:68: expected 'map[a:%!s(int=1)]', got 'map[[a]:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := strings.Split(test,\
    \ \" \")\n    // PATCH: create a map of string and int\n    hist := map[string]int{}\n\
    \    // PATCH: loop over letters\n    for _, letter := range letters {\n     \
    \   // PATCH: if letter is not in hist, add it\n        if _, ok := hist[letter];\
    \ !ok {\n            hist[letter] = 0\n        }\n        // PATCH: increment\
    \ hist[letter]\n        hist[letter]++\n    }\n    // PATCH: return hist\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsqn0ln8g_test.go:28:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074521
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var letterCount = make(map[string]int)\n\
    \    var maxCount = 0\n    var maxLetters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        letterCount[string(letter)]++\n        if letterCount[string(letter)]\
    \ > maxCount {\n            maxCount = letterCount[string(letter)]\n         \
    \   maxLetters = make(map[string]int)\n            maxLetters[string(letter)]\
    \ = maxCount\n        } else if letterCount[string(letter)] == maxCount {\n  \
    \          maxLetters[string(letter)] = maxCount\n        }\n    }\n    return\
    \ maxLetters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvbc7nvf9_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpvbc7nvf9_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpvbc7nvf9_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvbc7nvf9_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvbc7nvf9_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpvbc7nvf9_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074521
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, letter := range test {\n      \
    \  result[string(letter)] += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcln2wjhy_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcln2wjhy_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: If the string is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: If the string contains only one letter, return a map with\
    \ this letter\n    if len(test) == 1 {\n        return map[string]int{test: 1}\n\
    \    }\n    // PATCH: If the string contains only two letters, return a map with\
    \ these letters\n    if len(test) == 3 {\n        return map[string]int{string(test[0]):\
    \ 1, string(test[2]): 1}\n    }\n    // PATCH: If the string contains only three\
    \ letters, return a map with these letters\n    if len(test) == 5 {\n        return\
    \ map[string]int{string(test[0]): 1, string(test[2]): 1, string(test[4]): 1}\n\
    \    }\n    // PATCH: If the string contains only four letters, return a map with\
    \ these letters\n    if len(test) == 7 {\n        return map[string]int{string(test[0]):\
    \ 1, string(test[2]): 1, string(test[4]): 1, string(test[6]): 1}\n    }\n    //\
    \ PATCH: If the string contains only five letters, return a map with these letters\n\
    \    if len(test) == 9 {\n        return map[string]int{string(test[0]): 1, string(test[2]):\
    \ 1, string(test[4]): 1, string(test[6]): 1, string(test[8]): 1}\n    }\n    //\
    \ PATCH: If the string contains only six letters, return a map with these letters\n\
    \    if len(test) == 11 {\n        return map[string]int{string(test[0]): 1, string(test[2]):\
    \ 1, string(test[4]): 1, string(test[6]): 1, string(test[8]): 1, string(test[10]):\
    \ 1}\n    }\n    // PATCH: If the string contains only seven letters, return a\
    \ map with these letters\n    if len(test) == 13 {\n        return map[string]int{string\n\
    func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp0svagfx_test.go:53:37: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074521
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // END PATCH\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmphh0jd9si_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmphh0jd9si_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmphh0jd9si_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmphh0jd9si_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmphh0jd9si_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmphh0jd9si_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: return an empty map\n\
    \    if test == \"\" {\n        return map[string]int{}\n    }\n    // PATCH:\
    \ return an empty map\n    if test == \" \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: return an empty map\n    if test == \"  \" {\n        return\
    \ map[string]int{}\n    }\n    // PATCH: return an empty map\n    if test == \"\
    \   \" {\n        return map[string]int{}\n    }\n    // PATCH: return an empty\
    \ map\n    if test == \"    \" {\n        return map[string]int{}\n    }\n   \
    \ // PATCH: return an empty map\n    if test == \"     \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: return an empty map\n    if test == \"      \" {\n     \
    \   return map[string]int{}\n    }\n    // PATCH: return an empty map\n    if\
    \ test == \"       \" {\n        return map[string]int{}\n    }\n    // PATCH:\
    \ return an empty map\n    if test == \"        \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: return an empty map\n    if test == \"         \" {\n  \
    \      return map[string]int{}\n    }\n    // PATCH: return an empty map\n   \
    \ if test == \"          \" {\n        return map[string]int{}\n    }\n    //\
    \ PATCH: return an empty map\n    if test == \"           \" {\n        return\
    \ map[string]int{}\n    }\n    // PATCH: return an empty map\n    if test == \"\
    \            \" {\n        return map[string]int{}\n    }\n    // PATCH: return\
    \ an empty map\n    if test == \"             \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: return an empty map\n    if test == \"              \" {\n\
    \        return map[string]int{}\n    }\n    // PATCH: return an empty map\n \
    \   if test == \"               \" {\n        return map[string]int{}\n    }\n\
    \    //\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwu25h3lz_test.go:88:6: expected ''('', found TestHistogram

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074521
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: return empty map if\
    \ empty string\n    if test == \"\" {\n        return map[string]int{}\n    }\n\
    \    // PATCH: split string on spaces\n    test_split := strings.Split(test, \"\
    \ \")\n    // PATCH: initialize map\n    hist := make(map[string]int)\n    //\
    \ PATCH: initialize max_count\n    max_count := 0\n    // PATCH: initialize max_count_letters\n\
    \    max_count_letters := []string{}\n    // PATCH: loop through test_split\n\
    \    for _, letter := range test_split {\n        // PATCH: increment count\n\
    \        hist[letter]++\n        // PATCH: update max_count\n        if hist[letter]\
    \ > max_count {\n            max_count = hist[letter]\n            max_count_letters\
    \ = []string{letter}\n        } else if hist[letter] == max_count {\n        \
    \    max_count_letters = append(max_count_letters, letter)\n        }\n    }\n\
    \    // PATCH: loop through max_count_letters\n    for _, letter := range max_count_letters\
    \ {\n        // PATCH: update hist\n        hist[letter] = max_count\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbsw39by_test.go:28:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    if test == \"\" {\n        return\
    \ map[string]int{}\n    }\n    histogram := make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp0w3ko7b1_test.go:53: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp0w3ko7b1_test.go:53: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp0w3ko7b1_test.go:53: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp0w3ko7b1_test.go:53:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp0w3ko7b1_test.go:53: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp0w3ko7b1_test.go:53: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    m := make(map[string]int)\n\
    \    for _, v := range test {\n        m[string(v)]++\n    }\n    return m\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp0xk_c0tm_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp0xk_c0tm_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp0xk_c0tm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)] +=\
    \ 1\n    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpq16ac890_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpq16ac890_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)] += 1\n   \
    \ }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp70y7mr7c_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp70y7mr7c_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp70y7mr7c_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp70y7mr7c_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp70y7mr7c_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp70y7mr7c_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    return map[string]int{\n        \"max\": max,\n        \"letters\"\
    : max_letters,\n    }\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbzw7vngd_test.go:37:20: cannot use max_letters (variable of type []string)
    as type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split the string into a slice of strings\n\
    \    // and iterate over the slice\n    var max int\n    var maxLetters []string\n\
    \    letters := make(map[string]int)\n    for _, letter := range test {\n    \
    \    letters[string(letter)] += 1\n        if letters[string(letter)] > max {\n\
    \            max = letters[string(letter)]\n            maxLetters = []string{string(letter)}\n\
    \        } else if letters[string(letter)] == max {\n            maxLetters =\
    \ append(maxLetters, string(letter))\n        }\n    }\n    // PATCH: if the letter\
    \ is not in the map, add it with a value of 1\n    // else, increment the value\
    \ of the letter\n    // PATCH: if the value of the letter is greater than the\
    \ max, set the max\n    // to the value of the letter and set the maxLetters to\
    \ a slice containing\n    // the letter\n    // PATCH: if the value of the letter\
    \ is equal to the max, append the letter\n    // to the maxLetters slice\n   \
    \ // PATCH: return a map with the maxLetters as the keys and the max as the\n\
    \    // value\n    maxMap := make(map[string]int)\n    for _, letter := range\
    \ maxLetters {\n        maxMap[letter] = max\n    }\n    return maxMap\n}\n\n\
    func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_dst49wv_test.go:77: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp_dst49wv_test.go:77: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp_dst49wv_test.go:77: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_dst49wv_test.go:77: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp_dst49wv_test.go:77: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp_dst49wv_test.go:77: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_key string\n    for _, key := range test {\n   \
    \     histogram[string(key)] += 1\n        if histogram[string(key)] > max {\n\
    \            max = histogram[string(key)]\n            max_key = string(key)\n\
    \        }\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimbp4b0t_test.go:25:9: max_key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpjqbbmz5r_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpjqbbmz5r_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpjqbbmz5r_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpjqbbmz5r_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpjqbbmz5r_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpjqbbmz5r_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp500u8oly_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp500u8oly_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp500u8oly_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp500u8oly_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp500u8oly_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp500u8oly_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH\n    // return map[string]int{}\n\
    \    // END PATCH\n    // TODO\n    return map[string]int{}\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptaqfg_fh_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmptaqfg_fh_test.go:50:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmptaqfg_fh_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmptaqfg_fh_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmptaqfg_fh_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmptaqfg_fh_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmptaqfg_fh_test.go:50: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp1aq1ntkx_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp1aq1ntkx_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp1aq1ntkx_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp1aq1ntkx_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp1aq1ntkx_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp1aq1ntkx_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, value := range test {\n       \
    \ result[string(value)]++\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpptq59l2w_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpptq59l2w_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpptq59l2w_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpptq59l2w_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpptq59l2w_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpptq59l2w_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // Your code goes here\n   \
    \ return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpuefx8w0n_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpuefx8w0n_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpuefx8w0n_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpuefx8w0n_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpuefx8w0n_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpuefx8w0n_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpuefx8w0n_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max_count = 0\n    var max_letters = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max_count {\n            max_count = histogram[string(letter)]\n         \
    \   max_letters = make(map[string]int)\n            max_letters[string(letter)]\
    \ = histogram[string(letter)]\n        } else if histogram[string(letter)] ==\
    \ max_count {\n            max_letters[string(letter)] = histogram[string(letter)]\n\
    \        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp82gsfe1v_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp82gsfe1v_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp82gsfe1v_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp82gsfe1v_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp82gsfe1v_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp82gsfe1v_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: return an empty map\
    \ if the string is empty\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: initialize the map with the first letter\n    hist := map[string]int{test[0:1]:\
    \ 1}\n    for _, letter := range test[1:] {\n        // PATCH: use the string\
    \ representation of the letter\n        // PATCH: initialize the count to 0 if\
    \ the letter is not in the map\n        hist[string(letter)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpowbgk9yl_test.go:57: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpowbgk9yl_test.go:57: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpowbgk9yl_test.go:57: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpowbgk9yl_test.go:57:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpowbgk9yl_test.go:57: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpowbgk9yl_test.go:57: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)] +=\
    \ 1\n    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpq16ac890_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpq16ac890_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpq16ac890_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpl04kbcd3_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpl04kbcd3_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpl04kbcd3_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpubqtxwe5_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpubqtxwe5_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp6pn3y280_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp6pn3y280_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpubqtxwe5_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpubqtxwe5_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var dict = make(map[string]int)\n\
    \    for _, letter := range test {\n        dict[string(letter)]++\n    }\n  \
    \  return dict\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpkqye586l_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpkqye586l_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpvjp29hjk_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpvjp29hjk_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO\n    return nil\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpno26gwf5_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpno26gwf5_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpno26gwf5_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpno26gwf5_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpno26gwf5_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histo = make(map[string]int)\n\
    \    for _, letter := range test {\n        histo[string(letter)]++\n    }\n \
    \   return histo\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpsa1emq_1_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpsa1emq_1_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpsa1emq_1_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8htae3gv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp8htae3gv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp8htae3gv_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp8htae3gv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8htae3gv_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp8htae3gv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpubqtxwe5_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpubqtxwe5_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpxb623rey_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, letter := range test {\n      \
    \  result[string(letter)] += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcln2wjhy_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcln2wjhy_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcln2wjhy_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpxb623rey_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    var letters\
    \ = make([]string, 0)\n    for _, letter := range test {\n        letters = append(letters,\
    \ string(letter))\n    }\n    for _, letter := range letters {\n        if _,\
    \ ok := histogram[letter]; ok {\n            histogram[letter] += 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    for letter,\
    \ count := range histogram {\n        if count > max {\n            max = count\n\
    \            max_letters = make(map[string]int)\n            max_letters[letter]\
    \ = count\n        } else if count == max {\n            max_letters[letter] =\
    \ count\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmphu7b1p3i_test.go:69: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmphu7b1p3i_test.go:69: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmphu7b1p3i_test.go:69: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmphu7b1p3i_test.go:69: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmphu7b1p3i_test.go:69: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmphu7b1p3i_test.go:69: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: add a default value\
    \ to the map\n    hist := make(map[string]int)\n    // PATCH: add a default value\
    \ to the map\n    max := 0\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \        if hist[string(letter)] > max {\n            max = hist[string(letter)]\n\
    \        }\n    }\n    // PATCH: add a default value to the map\n    max_letters\
    \ := make(map[string]int)\n    for letter, count := range hist {\n        if count\
    \ == max {\n            max_letters[letter] = count\n        }\n    }\n    return\
    \ max_letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp66p95q7m_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp66p95q7m_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp66p95q7m_test.go:63: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp66p95q7m_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp66p95q7m_test.go:63: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp66p95q7m_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ylg6m_e_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ylg6m_e_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_keys []string\n    for _, key := range test {\n\
    \        histogram[string(key)] += 1\n        if histogram[string(key)] > max\
    \ {\n            max = histogram[string(key)]\n            max_keys = []string{string(key)}\n\
    \        } else if histogram[string(key)] == max {\n            max_keys = append(max_keys,\
    \ string(key))\n        }\n    }\n    return map[string]int{max_keys[0]: max}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.histogram(...)\n\t/tmp/tmpvhu5jrdr_test.go:35\n\
    command-line-arguments_test.TestHistogram(0xc0001a0340?)\n\t/tmp/tmpvhu5jrdr_test.go:51\
    \ +0x206c\ntesting.tRunner(0xc0001a0340, 0x529f70)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    for _, letter := range max_letters {\n        histogram[letter] =\
    \ max\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpf6m_tg1f_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpf6m_tg1f_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histo = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histo[string(letter)] += 1\n        if histo[string(letter)]\
    \ > max {\n            max = histo[string(letter)]\n            max_letters =\
    \ make(map[string]int)\n            max_letters[string(letter)] = max\n      \
    \  } else if histo[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpjxpdwev1_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpjxpdwev1_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpjxpdwev1_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpjxpdwev1_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpjxpdwev1_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpjxpdwev1_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH\n    return map[string]int{}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4mj8kna8_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4mj8kna8_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4mj8kna8_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4mj8kna8_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpieyv9cjd_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpieyv9cjd_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpieyv9cjd_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpieyv9cjd_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: return empty map if\
    \ test is empty\n    if test == \"\" {\n        return map[string]int{}\n    }\n\
    \    // PATCH: split string into array of strings\n    testArr := strings.Split(test,\
    \ \" \")\n    // PATCH: create map of strings to ints\n    histo := make(map[string]int)\n\
    \    // PATCH: iterate over array of strings\n    for _, val := range testArr\
    \ {\n        // PATCH: increment value in map for each string\n        histo[val]++\n\
    \    }\n    return histo\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcd2im7_n_test.go:28:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    letters := strings.Split(test,\
    \ \" \")\n    // PATCH: create a map to store the result\n    result := map[string]int{}\n\
    \    // PATCH: create a map to store the count of each letter\n    count := map[string]int{}\n\
    \    // PATCH: create a variable to store the max count\n    max := 0\n    //\
    \ PATCH: loop through each letter\n    for _, letter := range letters {\n    \
    \    // PATCH: if the letter is not in the count map, set its count to 0\n   \
    \     if _, ok := count[letter]; !ok {\n            count[letter] = 0\n      \
    \  }\n        // PATCH: increment the count of the letter\n        count[letter]++\n\
    \        // PATCH: if the count of the letter is greater than the max, set the\
    \ max to the count\n        if count[letter] > max {\n            max = count[letter]\n\
    \        }\n    }\n    // PATCH: loop through each letter\n    for _, letter :=\
    \ range letters {\n        // PATCH: if the count of the letter is equal to the\
    \ max, add it to the result\n        if count[letter] == max {\n            result[letter]\
    \ = max\n        }\n    }\n    // PATCH: return the result\n    return result\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nltkub4_test.go:28:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    fmt.Println(max_letters)\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[ ]\n[ ]\n[ ]\n[ ]\n[b  ]\n[ ]\n[]\n[a]\n--- FAIL: TestHistogram (0.00s)\n\
    \    --- FAIL: TestHistogram/test_num__0 (0.00s)\n        tmpm6n47e9m_test.go:59:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[ :%!s(int=3) a:%!s(int=2)\
    \ b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpm6n47e9m_test.go:59:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[ :%!s(int=4) a:%!s(int=2)\
    \ b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n\
    \        tmpm6n47e9m_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpm6n47e9m_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__4 (0.00s)\n        tmpm6n47e9m_test.go:59:\
    \ expected 'map[b:%!s(int=4)]', got 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n\
    \    --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpm6n47e9m_test.go:59:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpvjp29hjk_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpvjp29hjk_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, char := range test {\n        result[string(char)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpbn_qa5l4_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpbn_qa5l4_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpbn_qa5l4_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074521
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_letters = append(max_letters, string(letter))\n        }\n\
    \    }\n    for _, letter := range max_letters {\n        histogram[letter] =\
    \ max\n    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpf6m_tg1f_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpf6m_tg1f_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpf6m_tg1f_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_pzcqibh_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_pzcqibh_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_pzcqibh_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_pzcqibh_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = histogram[string(letter)]\n\
    \        } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = histogram[string(letter)]\n        }\n    }\n    return max_letters\n}\n\n\
    func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkta01szo_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkta01szo_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkta01szo_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkta01szo_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkta01szo_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkta01szo_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]++\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpmk8ifznt_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpmk8ifznt_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpmk8ifznt_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    var max_key string\n    for _, value := range test {\n \
    \       result[string(value)] += 1\n        if result[string(value)] > max {\n\
    \            max = result[string(value)]\n            max_key = string(value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1cnl73f_test.go:25:9: max_key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test == \"\"\
    \ {\n        return map[string]int{}\n    }\n    // PATCH: add a default case\
    \ for empty string\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: add a default case for empty string\n    if test\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn4aib096_test.go:85:6: expected ''('', found TestHistogram

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpig6vuxp9_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpig6vuxp9_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpig6vuxp9_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpddrzd2z1_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpddrzd2z1_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ylg6m_e_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ylg6m_e_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ylg6m_e_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ylg6m_e_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return an empty map\n    if test == \"\" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: if test is not empty, split it\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpddrzd2z1_test.go:55: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpddrzd2z1_test.go:55:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpddrzd2z1_test.go:55: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var count int\n    var max int\n\
    \    var max_letters []string\n    var letters map[string]int\n    letters = make(map[string]int)\n\
    \    for _, letter := range test {\n        count = letters[string(letter)]\n\
    \        letters[string(letter)] = count + 1\n        if count + 1 > max {\n \
    \           max = count + 1\n            max_letters = []string{string(letter)}\n\
    \        } else if count + 1 == max {\n            max_letters = append(max_letters,\
    \ string(letter))\n        }\n    }\n    for _, letter := range max_letters {\n\
    \        letters[letter] = max\n    }\n    return letters\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyg6oqybd_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyg6oqybd_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyg6oqybd_test.go:64: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyg6oqybd_test.go:64:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyg6oqybd_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyg6oqybd_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: if test is empty,\
    \ return empty map\n    if test == \"\" {\n        return map[string]int{}\n \
    \   }\n    // PATCH: if test is not empty, split it\n    letters := strings.Split(test,\
    \ \" \")\n    // PATCH: create a map to store the result\n    result := map[string]int{}\n\
    \    // PATCH: create a map to store the count\n    count := map[string]int{}\n\
    \    // PATCH: loop through the letters\n    for _, letter := range letters {\n\
    \        // PATCH: if the letter is not in the count map, add it\n        if _,\
    \ ok := count[letter]; !ok {\n            count[letter] = 0\n        }\n     \
    \   // PATCH: increase the count of the letter\n        count[letter] += 1\n \
    \   }\n    // PATCH: create a variable to store the maximum count\n    max :=\
    \ 0\n    // PATCH: loop through the count map\n    for letter, c := range count\
    \ {\n        // PATCH: if the count is greater than the maximum, update the maximum\n\
    \        if c > max {\n            max = c\n        }\n    }\n    // PATCH: loop\
    \ through the count map\n    for letter, c := range count {\n        // PATCH:\
    \ if the count is equal to the maximum, add the letter to the result\n       \
    \ if c == max {\n            result[letter] = c\n        }\n    }\n    // PATCH:\
    \ return the result\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpna3njeli_test.go:28:16: undefined: strings

    /tmp/tmpna3njeli_test.go:45:9: letter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range histogram {\n        if value == max {\n            result[key] = value\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpqs0_abhf_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqs0_abhf_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpqs0_abhf_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074519
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram map[string]int\n\
    \    histogram = make(map[string]int)\n    for _, letter := range test {\n   \
    \     histogram[string(letter)] += 1\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpq11yagvm_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpq11yagvm_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpq11yagvm_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_keys []string\n\n    for _, c := range test {\n\
    \        histogram[string(c)] += 1\n        if histogram[string(c)] > max {\n\
    \            max = histogram[string(c)]\n            max_keys = []string{string(c)}\n\
    \        } else if histogram[string(c)] == max {\n            max_keys = append(max_keys,\
    \ string(c))\n        }\n    }\n\n    return map[string]int{\n        \"max\"\
    : max,\n        \"keys\": max_keys,\n    }\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpter0l7ge_test.go:39:17: cannot use max_keys (variable of type []string)
    as type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp6pn3y280_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp6pn3y280_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp6pn3y280_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_keys []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_keys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_keys = append(max_keys, string(letter))\n        }\n    }\n\
    \n    for _, key := range max_keys {\n        histogram[key] = max\n    }\n\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpr8pv_l_t_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpr8pv_l_t_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpr8pv_l_t_test.go:64: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpr8pv_l_t_test.go:64:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpr8pv_l_t_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpr8pv_l_t_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpubqtxwe5_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpubqtxwe5_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpubqtxwe5_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpte89vg4q_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpte89vg4q_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpte89vg4q_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvjp29hjk_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpvjp29hjk_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpvjp29hjk_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpvjp29hjk_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpf09ts06p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpf09ts06p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpf09ts06p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpf09ts06p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqinzhb4d_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqinzhb4d_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqinzhb4d_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqinzhb4d_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpxb623rey_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpxb623rey_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpxb623rey_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpxb623rey_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    // PATCH: add a default case\n\
    \    if test == \"\" {\n        return map[string]int{}\n    }\n    // PATCH:\
    \ add a default case\n    if test == \" \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: add a default case\n    if test == \"  \" {\n        return\
    \ map[string]int{}\n    }\n    // PATCH: add a default case\n    if test == \"\
    \   \" {\n        return map[string]int{}\n    }\n    // PATCH: add a default\
    \ case\n    if test == \"    \" {\n        return map[string]int{}\n    }\n  \
    \  // PATCH: add a default case\n    if test == \"     \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: add a default case\n    if test == \"      \" {\n      \
    \  return map[string]int{}\n    }\n    // PATCH: add a default case\n    if test\
    \ == \"       \" {\n        return map[string]int{}\n    }\n    // PATCH: add\
    \ a default case\n    if test == \"        \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: add a default case\n    if test == \"         \" {\n   \
    \     return map[string]int{}\n    }\n    // PATCH: add a default case\n    if\
    \ test == \"          \" {\n        return map[string]int{}\n    }\n    // PATCH:\
    \ add a default case\n    if test == \"           \" {\n        return map[string]int{}\n\
    \    }\n    // PATCH: add a default case\n    if test == \"            \" {\n\
    \        return map[string]int{}\n    }\n    // PATCH: add a default case\n  \
    \  if test == \"             \" {\n        return map[string]int{}\n    }\n  \
    \  // PATCH: add a default case\n    if test == \"              \" {\n       \
    \ return map[string]int{}\n    }\n    // PATCH: add a default case\n    if test\
    \ == \"               \" {\n        return map[string]int{}\n    }\n    //\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq4j10i_6_test.go:88:6: expected ''('', found TestHistogram

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var dict = make(map[string]int)\n\
    \    for _, letter := range test {\n        dict[string(letter)]++\n    }\n  \
    \  return dict\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpkqye586l_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpkqye586l_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpkqye586l_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a map\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// PATCH dict\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyhzci0uw_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyhzci0uw_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyhzci0uw_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
