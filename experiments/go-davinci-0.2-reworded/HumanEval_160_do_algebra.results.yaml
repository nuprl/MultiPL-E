language: go_test.go
name: HumanEval_160_do_algebra
results:
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mxm7368_test.go:43:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpd0umzrss_test.go:76: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpd0umzrss_test.go:76:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpzy5f7eq1_test.go:72: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpzy5f7eq1_test.go:72:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = result ^ operand[i+1]\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp72_w704s_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp72_w704s_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_29t8hs1_test.go:42:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return do_algebra_2(operator[0], operand[0], operand[1])\n \
    \   }\n    if len(operand) == 3 {\n        return do_algebra_3(operator[0], operator[1],\
    \ operand[0], operand[1], operand[2])\n    }\n    if len(operand) == 4 {\n   \
    \     return do_algebra_4(operator[0], operator[1], operator[2], operand[0], operand[1],\
    \ operand[2], operand[3])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x7678yq_test.go:34:16: undefined: do_algebra_2

    /tmp/tmp4x7678yq_test.go:37:16: undefined: do_algebra_3

    /tmp/tmp4x7678yq_test.go:40:16: undefined: do_algebra_4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var op string\n    if len(operator) ==\
    \ 0 {\n        return operand[0]\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        op = operator[i]\n        switch op {\n\
    \        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n\
    \            result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpyjqalh59_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpyjqalh59_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmmsfw2i_test.go:43:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[1]\n    }\n    if len(operator) == 1 {\n    \
    \    return operand[1]\n    }\n    if len(operator) == 2 {\n        return operand[2]\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpj8npzh9z_test.go:60: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpj8npzh9z_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpj8npzh9z_test.go:60: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[1]\n    }\n    if len(operator) == 1 {\n    \
    \    return operand[1]\n    }\n    var result int\n    switch operator[0] {\n\
    \    case \"+\":\n        result = operand[0] + operand[1]\n    case \"-\":\n\
    \        result = operand[0] - operand[1]\n    case \"*\":\n        result = operand[0]\
    \ * operand[1]\n    case \"//\":\n        result = operand[0] / operand[1]\n \
    \   case \"**\":\n        result = operand[0] ^ operand[1]\n    }\n    return\
    \ do_algebra(operator[1:], append([]int{result}, operand[2:]...))\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpcjsbsjol_test.go:70: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpcjsbsjol_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpcjsbsjol_test.go:70: expected '%!s(int=8)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    if len(operand) == 3 {\n        switch operator[0]\
    \ {\n            case \"+\":\n                return operand[0] + operand[1] +\
    \ operand[2]\n            case \"-\":\n                return operand[0] - operand[1]\
    \ - operand[2]\n            case \"*\":\n                return operand[0] * operand[1]\
    \ * operand[2]\n            case \"//\":\n                return operand[0] /\
    \ operand[1] / operand[2]\n            case \"**\":\n                return operand[0]\
    \ ^ operand[1] ^ operand[2]\n        }\n    }\n    if len(operand) == 4 {\n  \
    \      switch operator[0] {\n            case \"+\":\n                return operand[0]\
    \ + operand[1] + operand[2] + operand[3]\n            case \"-\":\n          \
    \      return operand[0] - operand[1] - operand[2] - operand[3]\n            case\
    \ \"*\":\n                return operand[0] * operand[1] * operand[2] * operand[3]\n\
    \            case \"//\":\n                return operand[0] / operand[1] / operand[2]\
    \ / operand[3]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1] ^ operand[2] ^ operand[3]\n        }\n    }\n    return 0\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_f_kmgiw_test.go:93: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_f_kmgiw_test.go:93:\
    \ expected '%!s(int=9)', got '%!s(int=14)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp_f_kmgiw_test.go:93: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        switch operator[0] {\n            case \"+\":\n               \
    \ return operand[0] + operand[1]\n            case \"-\":\n                return\
    \ operand[0] - operand[1]\n            case \"*\":\n                return operand[0]\
    \ * operand[1]\n            case \"//\":\n                return operand[0] /\
    \ operand[1]\n            case \"**\":\n                return operand[0] ^ operand[1]\n\
    \        }\n    }\n    switch operator[0] {\n        case \"+\":\n           \
    \ return operand[0] + do_algebra(operator[1:], operand[1:])\n        case \"-\"\
    :\n            return operand[0] - do_algebra(operator[1:], operand[1:])\n   \
    \     case \"*\":\n            return operand[0] * do_algebra(operator[1:], operand[1:])\n\
    \        case \"//\":\n            return operand[0] / do_algebra(operator[1:],\
    \ operand[1:])\n        case \"**\":\n            return operand[0] ^ do_algebra(operator[1:],\
    \ operand[1:])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp74ehasua_test.go:77: expected '%!s(int=37)', got '%!s(int=25)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp74ehasua_test.go:77:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp74ehasua_test.go:77: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = result ^ operand[i+1]\n        }\n \
    \   }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp56txrra__test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp56txrra__test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        return operand[0] +\
    \ operand[1]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n\
    \    }\n    return operand[0] + operand[1]\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp82tehae8_test.go:63: expected '%!s(int=37)', got '%!s(int=5)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp82tehae8_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=5)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp82tehae8_test.go:63: expected '%!s(int=8)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var op string\n    for i, op := range\
    \ operator {\n        switch op {\n        case \"+\":\n            result +=\
    \ operand[i] + operand[i+1]\n        case \"-\":\n            result += operand[i]\
    \ - operand[i+1]\n        case \"*\":\n            result += operand[i] * operand[i+1]\n\
    \        case \"//\":\n            result += operand[i] / operand[i+1]\n     \
    \   case \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8yoo9hm_test.go:28:9: op declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        switch operator[0] {\n            case \"+\":\n               \
    \ return operand[0] + operand[1]\n            case \"-\":\n                return\
    \ operand[0] - operand[1]\n            case \"*\":\n                return operand[0]\
    \ * operand[1]\n            case \"//\":\n                return operand[0] /\
    \ operand[1]\n            case \"**\":\n                return operand[0] ^ operand[1]\n\
    \        }\n    }\n    var result int\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n            case \"+\":\n                result\
    \ = operand[i] + operand[i+1]\n            case \"-\":\n                result\
    \ = operand[i] - operand[i+1]\n            case \"*\":\n                result\
    \ = operand[i] * operand[i+1]\n            case \"//\":\n                result\
    \ = operand[i] / operand[i+1]\n            case \"**\":\n                result\
    \ = operand[i] ^ operand[i+1]\n        }\n        operand[i+1] = result\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmfdoa7ii_test.go:81: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmfdoa7ii_test.go:81:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var op string\n    var op1 int\n    var\
    \ op2 int\n    var op_index int\n    var op_len int\n    var op_len_minus_one\
    \ int\n    var op_len_minus_two int\n    var op_len_minus_three int\n    var op_len_minus_four\
    \ int\n    var op_len_minus_five int\n    var op_len_minus_six int\n    var op_len_minus_seven\
    \ int\n    var op_len_minus_eight int\n    var op_len_minus_nine int\n    var\
    \ op_len_minus_ten int\n    var op_len_minus_eleven int\n    var op_len_minus_twelve\
    \ int\n    var op_len_minus_thirteen int\n    var op_len_minus_fourteen int\n\
    \    var op_len_minus_fifteen int\n    var op_len_minus_sixteen int\n    var op_len_minus_seventeen\
    \ int\n    var op_len_minus_eighteen int\n    var op_len_minus_nineteen int\n\
    \    var op_len_minus_twenty int\n    var op_len_minus_twenty_one int\n    var\
    \ op_len_minus_twenty_two int\n    var op_len_minus_twenty_three int\n    var\
    \ op_len_minus_twenty_four int\n    var op_len_minus_twenty_five int\n    var\
    \ op_len_minus_twenty_six int\n    var op_len_minus_twenty_seven int\n    var\
    \ op_len_minus_twenty_eight int\n    var op_len_minus_twenty_nine int\n    var\
    \ op_len_minus_thirty int\n    var op_len_minus_thirty_one int\n    var op_len_minus_thirty_two\
    \ int\n    var op_len_minus_thirty_three int\n    var op_len_minus_thirty_four\
    \ int\n    var op_len_minus_thirty_five int\n    var op_len_minus_thirty_six int\n\
    \    var op_len_minus_thirty_seven int\n    var op_len_minus_\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz5re6jwk_test.go:70:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttvze00m_test.go:43:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp7wp29yyh_test.go:69: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp7wp29yyh_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttvze00m_test.go:43:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpooor85mi_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6hfjknt_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp82283asq_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp82283asq_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    var result int\n    for i,\
    \ op := range operator {\n        switch op {\n        case \"+\":\n         \
    \   result += operand[i] + operand[i+1]\n        case \"-\":\n            result\
    \ += operand[i] - operand[i+1]\n        case \"*\":\n            result += operand[i]\
    \ * operand[i+1]\n        case \"//\":\n            result += operand[i] / operand[i+1]\n\
    \        case \"**\":\n            result += operand[i] ^ operand[i+1]\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpoboiou59_test.go:69: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpoboiou59_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpoboiou59_test.go:69: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    var result int\n   \
    \ result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp3kz9c2r5_test.go:67: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp3kz9c2r5_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplod9fme4_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator\
    \ and operand length not match\")\n    }\n    if len(operator) == 0 {\n      \
    \  panic(\"operator list is empty\")\n    }\n    if len(operand) < 2 {\n     \
    \   panic(\"operand list is empty\")\n    }\n    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        default:\n\
    \            panic(\"unknown operator\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpi5arx7cz_test.go:72: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpi5arx7cz_test.go:72:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n            default:\n    \
    \            return 0\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp40pbtnjj_test.go:77: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp40pbtnjj_test.go:77:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = result ^ operand[i+1]\n        }\n \
    \   }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp56txrra__test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp56txrra__test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator\
    \ and operand length mismatch\")\n    }\n    if len(operator) == 0 {\n       \
    \ panic(\"operator is empty\")\n    }\n    if len(operand) == 0 {\n        panic(\"\
    operand is empty\")\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        default:\n            panic(\"unknown operator\"\
    )\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ywne6sr_test.go:51:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_k7n3uf_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n       \
    \ switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd36z6kwm_test.go:43:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n    }\n   \
    \ result = operand[0]\n    for i, op := range operator {\n        switch op {\n\
    \        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n\
    \            result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpul4i7yv0_test.go:46:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp82283asq_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp82283asq_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_5r_ssza_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_5r_ssza_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvz36xkkp_test.go:43:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var op string\n    var op1 int\n    var\
    \ op2 int\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n\
    \    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n\
    \    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n\
    \    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n\
    \    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n\
    \    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n\
    \    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff\
    \ int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n  \
    \  var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo\
    \ int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n  \
    \  var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx\
    \ int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n\
    \    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var\
    \ gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk\
    \ int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl15olus4_test.go:117:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073157
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_5r_ssza_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_5r_ssza_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    var result int\n    switch operator[0] {\n\
    \        case \"+\":\n            result = operand[0] + operand[1]\n        case\
    \ \"-\":\n            result = operand[0] - operand[1]\n        case \"*\":\n\
    \            result = operand[0] * operand[1]\n        case \"//\":\n        \
    \    result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ^ operand[1]\n    }\n    return do_algebra(operator[1:], append([]int{result},\
    \ operand[2:]...))\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpw20ai4n8_test.go:78: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpw20ai4n8_test.go:78:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ 0\n    }\n    if len(operand) == 0 {\n        return 0\n    }\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprdrc84iw_test.go:67: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprdrc84iw_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var op string\n    for i, v := range operand\
    \ {\n        if i == 0 {\n            result = v\n            continue\n     \
    \   }\n        op = operator[i-1]\n        switch op {\n        case \"+\":\n\
    \            result += v\n        case \"-\":\n            result -= v\n     \
    \   case \"*\":\n            result *= v\n        case \"//\":\n            result\
    \ /= v\n        case \"**\":\n            result = result ^ v\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplb54gz7r_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplb54gz7r_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \       case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = result ^ operand[i+1]\n            default:\n                return 0\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpes16eduv_test.go:74: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpes16eduv_test.go:74:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg_ge9z7a_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpjfasj3s7_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpjfasj3s7_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n\
    \        case \"+\":\n            operand[i+1] = operand[i] + operand[i+1]\n \
    \       case \"-\":\n            operand[i+1] = operand[i] - operand[i+1]\n  \
    \      case \"*\":\n            operand[i+1] = operand[i] * operand[i+1]\n   \
    \     case \"//\":\n            operand[i+1] = operand[i] / operand[i+1]\n   \
    \     case \"**\":\n            operand[i+1] = operand[i] ^ operand[i+1]\n   \
    \     }\n    }\n    return operand[len(operand)-1]\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp3w6q0e44_test.go:65: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp3w6q0e44_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        switch operator[0] {\n            case\
    \ \"+\":\n                return operand[0] + operand[1]\n            case \"\
    -\":\n                return operand[0] - operand[1]\n            case \"*\":\n\
    \                return operand[0] * operand[1]\n            case \"//\":\n  \
    \              return operand[0] / operand[1]\n            case \"**\":\n    \
    \            return operand[0] ^ operand[1]\n            default:\n          \
    \      return 0\n        }\n    }\n    result := operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i + 1]\n            case \"-\":\n       \
    \         result -= operand[i + 1]\n            case \"*\":\n                result\
    \ *= operand[i + 1]\n            case \"//\":\n                result /= operand[i\
    \ + 1]\n            case \"**\":\n                result ^= operand[i + 1]\n \
    \           default:\n                return 0\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpdiofyme9_test.go:84: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpdiofyme9_test.go:84:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_5r_ssza_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_5r_ssza_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6hfjknt_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n\
    \        } else if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\n\
    \        } else if operator[0] == \"**\" {\n            return operand[0] ^ operand[1]\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpddlqwlwb_test.go:64: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpddlqwlwb_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpddlqwlwb_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n    }\n   \
    \ result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n            case \"+\":\n                result += operand[i+1]\n\
    \            case \"-\":\n                result -= operand[i+1]\n           \
    \ case \"*\":\n                result *= operand[i+1]\n            case \"//\"\
    :\n                result /= operand[i+1]\n            case \"**\":\n        \
    \        result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp5mx108yx_test.go:67: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp5mx108yx_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    if len(operator) == 0 || len(operand) < 2 {\n        return 0\n  \
    \  }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n   \
    \     switch operator[i] {\n            case \"+\":\n                result +=\
    \ operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphqu4j8_7_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphqu4j8_7_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpq1dq7w1r_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpq1dq7w1r_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpq1dq7w1r_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return operand[0] + operand[1]\n    }\n  \
    \  if len(operator) == 3 {\n        return operand[0] + operand[1] + operand[2]\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpcsonuofn_test.go:57: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__2 (0.00s)\n        tmpcsonuofn_test.go:57:\
    \ expected '%!s(int=8)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjzwv1txx_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator\
    \ and operand length mismatch\")\n    }\n    if len(operator) == 0 {\n       \
    \ panic(\"operator list is empty\")\n    }\n    if len(operand) == 0 {\n     \
    \   panic(\"operand list is empty\")\n    }\n    if len(operand) == 1 {\n    \
    \    return operand[0]\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        default:\n\
    \            panic(\"invalid operator\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi9j7dnw_test.go:51:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpooor85mi_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6hfjknt_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplod9fme4_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    var i int\n    result = operand[0]\n \
    \   for i = 0; i < len(operator); i++ {\n        switch operator[i] {\n      \
    \  case \"+\":\n            result += operand[i+1]\n        case \"-\":\n    \
    \        result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp2fai8jne_test.go:62: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp2fai8jne_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp6nrr_apz_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp6nrr_apz_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator\
    \ and operand length mismatch\")\n    }\n    if len(operator) == 0 {\n       \
    \ panic(\"operator list is empty\")\n    }\n    if len(operand) == 0 {\n     \
    \   panic(\"operand list is empty\")\n    }\n    if len(operand) == 1 {\n    \
    \    return operand[0]\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        default:\n\
    \            panic(\"unknown operator\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc442t3m9_test.go:51:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjlemtkl_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return do_algebra_2(operator[0], operand[0],\
    \ operand[1])\n    }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0],\
    \ operand[0], operator[1], operand[1], operand[2])\n    }\n    if len(operator)\
    \ == 4 {\n        return do_algebra_4(operator[0], operand[0], operator[1], operand[1],\
    \ operator[2], operand[2], operand[3])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofooy8p2_test.go:34:16: undefined: do_algebra_2

    /tmp/tmpofooy8p2_test.go:37:16: undefined: do_algebra_3

    /tmp/tmpofooy8p2_test.go:40:16: undefined: do_algebra_4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    if len(operand) == 0 {\n        return 0\n    }\n\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i + 1]\n            case\
    \ \"-\":\n                result -= operand[i + 1]\n            case \"*\":\n\
    \                result *= operand[i + 1]\n            case \"//\":\n        \
    \        result /= operand[i + 1]\n            case \"**\":\n                result\
    \ = result ^ operand[i + 1]\n            default:\n                return 0\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpfm59uawt_test.go:75: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpfm59uawt_test.go:75:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmmsfw2i_test.go:43:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return do_algebra_2(operator[0], operand[0],\
    \ operand[1])\n    }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0],\
    \ operand[0], operator[1], operand[1], operand[2])\n    }\n    if len(operator)\
    \ == 4 {\n        return do_algebra_4(operator[0], operand[0], operator[1], operand[1],\
    \ operator[2], operand[2], operand[3])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofooy8p2_test.go:34:16: undefined: do_algebra_2

    /tmp/tmpofooy8p2_test.go:37:16: undefined: do_algebra_3

    /tmp/tmpofooy8p2_test.go:40:16: undefined: do_algebra_4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpooor85mi_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_29t8hs1_test.go:42:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\": return operand[0]\
    \ + operand[1]\n            case \"-\": return operand[0] - operand[1]\n     \
    \       case \"*\": return operand[0] * operand[1]\n            case \"//\": return\
    \ operand[0] / operand[1]\n            case \"**\": return operand[0] ^ operand[1]\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphkegmsy5_test.go:60: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphkegmsy5_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmphkegmsy5_test.go:60: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = result ^ operand[i+1]\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp72_w704s_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp72_w704s_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpooor85mi_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=-1)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpooor85mi_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        if operator[0] == \"\
    +\" {\n            return operand[0] + operand[1]\n        }\n        if operator[0]\
    \ == \"-\" {\n            return operand[0] - operand[1]\n        }\n        if\
    \ operator[0] == \"*\" {\n            return operand[0] * operand[1]\n       \
    \ }\n        if operator[0] == \"//\" {\n            return operand[0] / operand[1]\n\
    \        }\n        if operator[0] == \"**\" {\n            return operand[0]\
    \ ^ operand[1]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpgt10jzjc_test.go:74: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpgt10jzjc_test.go:74:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpgt10jzjc_test.go:74: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    var result int\n    result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp871x4hlx_test.go:70: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp871x4hlx_test.go:70:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmkc7rkmp_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6hfjknt_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        panic(\"operator\
    \ and operand are not compatible\")\n    }\n    if len(operator) == 0 {\n    \
    \    panic(\"operator is empty\")\n    }\n    if len(operand) < 2 {\n        panic(\"\
    operand is too short\")\n    }\n    result := operand[0]\n    for i := 0; i <\
    \ len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        default:\n            panic(\"\
    unknown operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp82d3al9e_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp82d3al9e_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return 0\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n\
    \        return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpoxxgludl_test.go:69: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpoxxgludl_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand) - 1 {\n        return 0\n\
    \    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpix3od4t2_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpix3od4t2_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttvze00m_test.go:43:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6hfjknt_test.go:42:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpjfasj3s7_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpjfasj3s7_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) + 1 != len(operand) {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpw85d8hb6_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpw85d8hb6_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = result ^ operand[i+1]\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp72_w704s_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp72_w704s_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_gequ4ca_test.go:67: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_gequ4ca_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n            default:\n                return 0\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00w7i_p2_test.go:48:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073162
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgjlemtkl_test.go:39:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return do_algebra_op(operator[0], operand[0],\
    \ operand[1])\n    }\n    return do_algebra_op(operator[0], operand[0], do_algebra(operator[1:],\
    \ operand[1:]))\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1u4294d_test.go:34:16: undefined: do_algebra_op

    /tmp/tmpe1u4294d_test.go:36:12: undefined: do_algebra_op

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplod9fme4_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpjfasj3s7_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpjfasj3s7_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) ==\
    \ 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operator) == 2 {\n        return operand[0] +\
    \ operand[1]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n\
    \    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate :=\
    \ do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"\
    +\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpfkpv5l8m_test.go:63: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpfkpv5l8m_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpfkpv5l8m_test.go:63: expected '%!s(int=8)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 2 {\n        return do_algebra_2(operator[0], operand[0], operand[1])\n \
    \   }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0], operand[0],\
    \ operator[1], operand[1], operand[2])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4vevp0o9_test.go:37:16: undefined: do_algebra_2

    /tmp/tmp4vevp0o9_test.go:40:16: undefined: do_algebra_3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n            operand[i+1] = result\n        case \"-\":\n   \
    \         result = operand[i] - operand[i+1]\n            operand[i+1] = result\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \     operand[i+1] = result\n        case \"//\":\n            result = operand[i]\
    \ / operand[i+1]\n            operand[i+1] = result\n        case \"**\":\n  \
    \          result = operand[i] ^ operand[i+1]\n            operand[i+1] = result\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpe0uzxl8p_test.go:65: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpe0uzxl8p_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[1]\n    }\n    if len(operator) == 1 {\n    \
    \    switch operator[0] {\n            case \"+\":\n                return operand[0]\
    \ + operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] / operand[1]\n     \
    \       case \"**\":\n                return operand[0] ^ operand[1]\n       \
    \ }\n    }\n    if len(operator) == 2 {\n        switch operator[0] {\n      \
    \      case \"+\":\n                return operand[0] + operand[1]\n         \
    \   case \"-\":\n                return operand[0] - operand[1]\n            case\
    \ \"*\":\n                return operand[0] * operand[1]\n            case \"\
    //\":\n                return operand[0] / operand[1]\n            case \"**\"\
    :\n                return operand[0] ^ operand[1]\n        }\n        switch operator[1]\
    \ {\n            case \"+\":\n                return operand[0] + operand[1] +\
    \ operand[2]\n            case \"-\":\n                return operand[0] - operand[1]\
    \ - operand[2]\n            case \"*\":\n                return operand[0] * operand[1]\
    \ * operand[2]\n            case \"//\":\n                return operand[0] /\
    \ operand[1] / operand[2]\n            case \"**\":\n                return operand[0]\
    \ ^ operand[1] ^ operand[2]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpkf0x9wzm_test.go:94: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpkf0x9wzm_test.go:94:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpkf0x9wzm_test.go:94: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n           \
    \ case \"+\":\n                result += operand[i+1]\n            case \"-\"\
    :\n                result -= operand[i+1]\n            case \"*\":\n         \
    \       result *= operand[i+1]\n            case \"//\":\n                result\
    \ /= operand[i+1]\n            case \"**\":\n                result = result ^\
    \ operand[i+1]\n            default:\n                return 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmphfm04vf4_test.go:71: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmphfm04vf4_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n\
    \        } else if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\n\
    \        } else if operator[0] == \"**\" {\n            return operand[0] ^ operand[1]\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpddlqwlwb_test.go:64: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpddlqwlwb_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpddlqwlwb_test.go:64: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result * result\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp1jg2jk3w_test.go:67: expected '%!s(int=37)', got '%!s(int=21)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp1jg2jk3w_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  if i == 0 {\n            result = operand[i]\n        }\n        switch op\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpxrtxnl4c_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpxrtxnl4c_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            operand[i+1]\
    \ = operand[i] + operand[i+1]\n        case \"-\":\n            operand[i+1] =\
    \ operand[i] - operand[i+1]\n        case \"*\":\n            operand[i+1] = operand[i]\
    \ * operand[i+1]\n        case \"//\":\n            operand[i+1] = operand[i]\
    \ / operand[i+1]\n        case \"**\":\n            operand[i+1] = operand[i]\
    \ ^ operand[i+1]\n        }\n    }\n    return operand[len(operand)-1]\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpcsq8o04u_test.go:68: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpcsq8o04u_test.go:68:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp7wp29yyh_test.go:69: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp7wp29yyh_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return do_algebra_op(operator[0], operand[0], operand[1])\n\
    \    }\n    if len(operator) == 1 {\n        return do_algebra_op(operator[0],\
    \ operand[0], do_algebra(operator, operand[1:]))\n    }\n    return do_algebra_op(operator[0],\
    \ operand[0], do_algebra(operator[1:], operand[1:]))\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21kv_e_x_test.go:34:16: undefined: do_algebra_op

    /tmp/tmp21kv_e_x_test.go:37:16: undefined: do_algebra_op

    /tmp/tmp21kv_e_x_test.go:39:12: undefined: do_algebra_op

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073163
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfioktkt_test.go:40:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_5r_ssza_test.go:60: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_5r_ssza_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp9rd15vdv_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp9rd15vdv_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \n    if len(operand) == 0 {\n        return 0\n    }\n\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n\n    if len(operand) == 1 {\n   \
    \     return operand[0]\n    }\n\n    result := operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw42pz2fm_test.go:55:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmplod9fme4_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmplod9fme4_test.go:65: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 0 {\n        return 0\n    }\n    var result int\n   \
    \ switch operator[0] {\n    case \"+\":\n        result = operand[0] + operand[1]\n\
    \    case \"-\":\n        result = operand[0] - operand[1]\n    case \"*\":\n\
    \        result = operand[0] * operand[1]\n    case \"//\":\n        result =\
    \ operand[0] / operand[1]\n    case \"**\":\n        result = operand[0] ^ operand[1]\n\
    \    }\n    return do_algebra(operator[1:], append([]int{result}, operand[2:]...))\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp92d_mcw__test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp92d_mcw__test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp526girm9_test.go:66: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp526girm9_test.go:66:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        return operand[0] + operand[1]\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0] + operand[1]\n    }\n    if len(operator)\
    \ == 2 {\n        return operand[0] + operand[1] + operand[2]\n    }\n    return\
    \ 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpq6_g9_fz_test.go:60: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpq6_g9_fz_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpq6_g9_fz_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = result ^ operand[i+1]\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp72_w704s_test.go:64: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp72_w704s_test.go:64:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        if operator[0] == \"+\" {\n            return\
    \ operand[0] + operand[1]\n        } else if operator[0] == \"-\" {\n        \
    \    return operand[0] - operand[1]\n        } else if operator[0] == \"*\" {\n\
    \            return operand[0] * operand[1]\n        } else if operator[0] ==\
    \ \"//\" {\n            return operand[0] / operand[1]\n        } else if operator[0]\
    \ == \"**\" {\n            return operand[0] ^ operand[1]\n        }\n    }\n\
    \    var result int\n    if operator[0] == \"+\" {\n        result = operand[0]\
    \ + operand[1]\n    } else if operator[0] == \"-\" {\n        result = operand[0]\
    \ - operand[1]\n    } else if operator[0] == \"*\" {\n        result = operand[0]\
    \ * operand[1]\n    } else if operator[0] == \"//\" {\n        result = operand[0]\
    \ / operand[1]\n    } else if operator[0] == \"**\" {\n        result = operand[0]\
    \ ^ operand[1]\n    }\n    return do_algebra(operator[1:], append([]int{result},\
    \ operand[2:]...))\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp0xzgynj7_test.go:76: expected '%!s(int=37)', got '%!s(int=4)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp0xzgynj7_test.go:76:\
    \ expected '%!s(int=9)', got '%!s(int=20)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmp0xzgynj7_test.go:76: expected '%!s(int=8)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return do_algebra_2(operator[0], operand[0],\
    \ operand[1])\n    }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0],\
    \ operand[0], operator[1], operand[1], operand[2])\n    }\n    if len(operator)\
    \ == 4 {\n        return do_algebra_4(operator[0], operand[0], operator[1], operand[1],\
    \ operator[2], operand[2], operand[3])\n    }\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofooy8p2_test.go:34:16: undefined: do_algebra_2

    /tmp/tmpofooy8p2_test.go:37:16: undefined: do_algebra_3

    /tmp/tmpofooy8p2_test.go:40:16: undefined: do_algebra_4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpmvb1gbn3_test.go:61: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpmvb1gbn3_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmprab1cg81_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmprab1cg81_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpq1dq7w1r_test.go:46: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpq1dq7w1r_test.go:46:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpq1dq7w1r_test.go:46: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073162
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i, op := range operator {\n      \
    \  switch op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=37)', got '%!s(int=22)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpasa9berg_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=16)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpasa9berg_test.go:60: expected '%!s(int=8)', got '%!s(int=14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmp_wz4pc6d_test.go:63: expected '%!s(int=37)', got '%!s(int=9)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmp_wz4pc6d_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073163
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59_0c7tj_test.go:45:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
