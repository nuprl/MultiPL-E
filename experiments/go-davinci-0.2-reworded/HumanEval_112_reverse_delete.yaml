name: HumanEval_112_reverse_delete
language: go_test.go
prompt: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Task\n// We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n// then check if the result string\
  \ is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return a list containing the result string and true/false\
  \ for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"\
  bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\"\
  , false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\"\
  , true}\nfunc reverse_delete(s string, c string) []interface{} {\n"
tests: "func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
  bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
  acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
  cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
  dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
  \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
  abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
  \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
  v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"mamma\"\
  , \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // your code here\n    return nil\n}\n", "    var result string\n\
    \    var isPalindrome bool\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    if\
    \ result == reverse(result) {\n        isPalindrome = true\n    }\n    return\
    \ []interface{}{result, isPalindrome}\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    // your code here\n    return nil\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    // your code here\n    return nil\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ res string\n    for _, v := range s {\n        if !strings.Contains(c, string(v))\
    \ {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   var result []interface{}\n    var newStr string\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            newStr += string(char)\n \
    \       }\n    }\n    result = append(result, newStr)\n    result = append(result,\
    \ isPalindrome(newStr))\n    return result\n}\n", "    // your code here\n   \
    \ return nil\n}\n", "    var result string\n    for _, char := range s {\n   \
    \     if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, v := range s {\n        if !strings.Contains(c, string(v)) {\n   \
    \         result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    // your code here\n    return nil\n}\n", "    var result string\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !contains(c, char) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, char)\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    // your code here\n    return nil\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var result string\n    for _, char := range s {\n        if\
    \ !strings.Contains(c, string(char)) {\n            result += string(char)\n \
    \       }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    // your code here\n \
    \   return nil\n}\n", "    // your code here\n    return nil\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !contains(c, char) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result []interface{}\n    var str string\n\
    \    var palindrome bool\n    for _, v := range s {\n        if !contains(c, v)\
    \ {\n            str += string(v)\n        }\n    }\n    palindrome = isPalindrome(str)\n\
    \    result = append(result, str, palindrome)\n    return result\n}\n", "    //\
    \ your code here\n    return nil\n}\n", "    // your code here\n    return nil\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.ContainsRune(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n", "    var result []interface{}\n\
    \    var string_result string\n    var is_palindrome bool\n    for _, char :=\
    \ range s {\n        if !contains(c, char) {\n            string_result += string(char)\n\
    \        }\n    }\n    is_palindrome = isPalindrome(string_result)\n    result\
    \ = append(result, string_result, is_palindrome)\n    return result\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    var result string\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var res []interface{}\n    for _, v := range c {\n\
    \        s = strings.Replace(s, string(v), \"\", -1)\n    }\n    res = append(res,\
    \ s)\n    res = append(res, isPalindrome(s))\n    return res\n}\n", "    var result\
    \ string\n    for _, char := range s {\n        if !strings.Contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    return []interface{}{s, isPalindrome(s)}\n\
    }\n", "    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, v := range\
    \ s {\n        if !strings.Contains(c, string(v)) {\n            result += string(v)\n\
    \        }\n    }\n    return []interface{}{result, result == Reverse(result)}\n\
    }\n", "    var result []interface{}\n    var str string\n    var isPalindrome\
    \ bool\n    for _, v := range s {\n        if !strings.Contains(c, string(v))\
    \ {\n            str += string(v)\n        }\n    }\n    if str == reverse(str)\
    \ {\n        isPalindrome = true\n    }\n    result = append(result, str, isPalindrome)\n\
    \    return result\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result []interface{}\n    var s1 string\n    var s2 string\n  \
    \  var s3 string\n    var s4 string\n    var s5 string\n    var s6 string\n  \
    \  var s7 string\n    var s8 string\n    var s9 string\n    var s10 string\n \
    \   var s11 string\n    var s12 string\n    var s13 string\n    var s14 string\n\
    \    var s15 string\n    var s16 string\n    var s17 string\n    var s18 string\n\
    \    var s19 string\n    var s20 string\n    var s21 string\n    var s22 string\n\
    \    var s23 string\n    var s24 string\n    var s25 string\n    var s26 string\n\
    \    var s27 string\n    var s28 string\n    var s29 string\n    var s30 string\n\
    \    var s31 string\n    var s32 string\n    var s33 string\n    var s34 string\n\
    \    var s35 string\n    var s36 string\n    var s37 string\n    var s38 string\n\
    \    var s39 string\n    var s40 string\n    var s41 string\n    var s42 string\n\
    \    var s43 string\n    var s44 string\n    var s45 string\n    var s46 string\n\
    \    var s47 string\n    var s48 string\n    var s49 string\n    var s50 string\n\
    \    var s51 string\n    var s52 string\n    var s53 string\n    var s54 string\n\
    \    var s55 string\n    var s56 string\n    var s57 string\n    var s58 string\n\
    \    var s59 string\n    var s60 string\n    var s61 string\n    var s62 string\n\
    \    var s63 string\n    var s64 string\n    var s65 string\n    var s66 string\n\
    \    var s67 string\n    var s68 string\n    var s69 string\n    var s70 string\n\
    \    var s71 string\n    var s72 string\n    var s73 string\n    var s74 string\n\
    \    var s75 string\n    var s76 string\n    var s77 string\n    var s78 string\n\
    \    var s79 string\n    var s80 string\n    var s81 string\n    var s82 string\n\
    \    var s83 string\n    var s84 string", "    var result string\n    for _, char\
    \ := range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    var isPalindrome\
    \ bool\n    for _, char := range s {\n        if !contains(c, char) {\n      \
    \      result += string(char)\n        }\n    }\n    isPalindrome = isPalindromeString(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n", "    var result string\n\
    \    for _, v := range s {\n        if !strings.Contains(c, string(v)) {\n   \
    \         result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    var res string\n    for _, v := range s {\n   \
    \     if !strings.ContainsRune(c, v) {\n            res += string(v)\n       \
    \ }\n    }\n    return []interface{}{res, res == reverse(res)}\n}\n", "    var\
    \ result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    // your code here\n    return nil\n}\n", "    return\
    \ []interface{}{s, false}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, char)\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ result string\n    for _, v := range s {\n        if !strings.ContainsRune(c,\
    \ v) {\n            result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, v := range\
    \ s {\n        if !strings.Contains(c, string(v)) {\n            result += string(v)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            result += string(v)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    var result string\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !stringContains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, isPalindrome(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !contains(c, char) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n\
    }\n", "    var result []interface{}\n    var new_s string\n    var is_palindrome\
    \ bool\n    for _, v := range s {\n        if !strings.Contains(c, string(v))\
    \ {\n            new_s += string(v)\n        }\n    }\n    if new_s == reverse(new_s)\
    \ {\n        is_palindrome = true\n    }\n    result = append(result, new_s, is_palindrome)\n\
    \    return result\n}\n", "    var result []interface{}\n    for i := 0; i < len(c);\
    \ i++ {\n        s = strings.Replace(s, string(c[i]), \"\", -1)\n    }\n    result\
    \ = append(result, s)\n    result = append(result, isPalindrome(s))\n    return\
    \ result\n}\n", "    // your code here\n    return nil\n}\n", "    var result\
    \ []interface{}\n    for _, c_char := range c {\n        s = strings.Replace(s,\
    \ string(c_char), \"\", -1)\n    }\n    result = append(result, s)\n    result\
    \ = append(result, isPalindrome(s))\n    return result\n}\n", "    // your code\
    \ here\n    return nil\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !contains(c, char) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, isPalindrome(result)}\n}\n", "    var res string\n   \
    \ for _, v := range s {\n        if !strings.ContainsRune(c, v) {\n          \
    \  res += string(v)\n        }\n    }\n    return []interface{}{res, res == reverse(res)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result []interface{}\n    var str string\n    var isPalindrome bool\n \
    \   for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            str += string(char)\n        }\n    }\n    isPalindrome = isPalindrome(str)\n\
    \    result = append(result, str, isPalindrome)\n    return result\n}\n", "  \
    \  var result []interface{}\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    result = append(result, s)\n    result =\
    \ append(result, isPalindrome(s))\n    return result\n}\n", "    var result []interface{}\n\
    \    var str string\n    var isPalindrome bool\n    for _, char := range s {\n\
    \        if !contains(c, char) {\n            str += string(char)\n        }\n\
    \    }\n    isPalindrome = isPalindromeString(str)\n    result = append(result,\
    \ str, isPalindrome)\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    return []interface{}{s, false}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !contains(c, string(char)) {\n     \
    \       result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !contains(c, char) {\n            result += string(char)\n \
    \       }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !strings.ContainsRune(c, char) {\n \
    \           result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, v := range\
    \ s {\n        if !strings.Contains(c, string(v)) {\n            result += string(v)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result []interface{}\n    var resultString string\n    var isPalindrome\
    \ bool\n    for _, char := range s {\n        if !contains(c, char) {\n      \
    \      resultString += string(char)\n        }\n    }\n    isPalindrome = isPalindromeString(resultString)\n\
    \    result = append(result, resultString, isPalindrome)\n    return result\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result []interface{}\n    var s_new\
    \ string\n    var is_palindrome bool\n\n    for _, char_s := range s {\n     \
    \   is_in_c := false\n        for _, char_c := range c {\n            if char_s\
    \ == char_c {\n                is_in_c = true\n                break\n       \
    \     }\n        }\n        if !is_in_c {\n            s_new += string(char_s)\n\
    \        }\n    }\n\n    is_palindrome = true\n    for i := 0; i < len(s_new)\
    \ / 2; i++ {\n        if s_new[i] != s_new[len(s_new) - i - 1] {\n           \
    \ is_palindrome = false\n            break\n        }\n    }\n\n    result = append(result,\
    \ s_new)\n    result = append(result, is_palindrome)\n    return result\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !strings.Contains(c, string(char)) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, result ==\
    \ reverse(result)}\n}\n", "    var result string\n    for _, v := range s {\n\
    \        if !contains(c, string(v)) {\n            result += string(v)\n     \
    \   }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n", " \
    \   var res []interface{}\n    for _, v := range c {\n        s = strings.Replace(s,\
    \ string(v), \"\", -1)\n    }\n    res = append(res, s)\n    res = append(res,\
    \ isPalindrome(s))\n    return res\n}\n", "    // your code here\n    return nil\n\
    }\n", "    var result string\n    for _, ch := range s {\n        if !strings.Contains(c,\
    \ string(ch)) {\n            result += string(ch)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !contains(c, string(char)) {\n     \
    \       result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !contains(c, char) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !contains(c,\
    \ char) {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    var isPalindrome bool\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    if result == reverse(result) {\n       \
    \ isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !contains(c, string(char)) {\n      \
    \      result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var res string\n    for _, char := range s\
    \ {\n        if !strings.Contains(c, string(char)) {\n            res += string(char)\n\
    \        }\n    }\n    return []interface{}{res, res == reverse(res)}\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    var result string\n    for _,\
    \ v := range s {\n        if !strings.Contains(c, string(v)) {\n            result\
    \ += string(v)\n        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result []interface{}\n\
    \    for _, char := range c {\n        s = strings.Replace(s, string(char), \"\
    \", -1)\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome(s))\n\
    \    return result\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !contains(c, char) {\n            result += string(char)\n       \
    \ }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n", "  \
    \  var result []interface{}\n    var str string\n    var palindrome bool\n   \
    \ for _, char := range s {\n        if !contains(c, string(char)) {\n        \
    \    str += string(char)\n        }\n    }\n    palindrome = isPalindrome(str)\n\
    \    result = append(result, str, palindrome)\n    return result\n}\n", "    //\
    \ your code here\n    return nil\n}\n", "    var result string\n    for _, char\
    \ := range s {\n        if !contains(c, char) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !strings.Contains(c, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    var result string\n    for _, char :=\
    \ range s {\n        if !contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result string\n\
    \    for _, char := range s {\n        if !contains(c, char) {\n            result\
    \ += string(char)\n        }\n    }\n    return []interface{}{result, isPalindrome(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == Reverse(result)}\n\
    }\n", "    var result []interface{}\n    for _, char := range c {\n        s =\
    \ strings.Replace(s, string(char), \"\", -1)\n    }\n    result = append(result,\
    \ s)\n    result = append(result, s == reverse(s))\n    return result\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var result string\n    for _, char := range s {\n        if\
    \ !contains(c, char) {\n            result += string(char)\n        }\n    }\n\
    \    return []interface{}{result, isPalindrome(result)}\n}\n", "    var result\
    \ string\n    for _, char := range s {\n        if !strings.Contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var res []interface{}\n\
    \    for _, char := range c {\n        s = strings.Replace(s, string(char), \"\
    \", -1)\n    }\n    res = append(res, s)\n    res = append(res, isPalindrome(s))\n\
    \    return res\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ result string\n    for _, v := range s {\n        if !strings.Contains(c, string(v))\
    \ {\n            result += string(v)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    for _, char := range c {\n        s =\
    \ strings.Replace(s, string(char), \"\", -1)\n    }\n    return []interface{}{s,\
    \ s == reverse(s)}\n}\n", "    // your code here\n    return nil\n}\n", "    //\
    \ your code here\n    return nil\n}\n", "    var result string\n    for _, v :=\
    \ range s {\n        if !strings.ContainsRune(c, v) {\n            result += string(v)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result string\n \
    \   for _, char := range s {\n        if !contains(c, string(char)) {\n      \
    \      result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    // your code here\n    return nil\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    var result string\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ result == reverse(result)}\n}\n", "    // your code here\n    return nil\n}\n",
  "    var result string\n    for _, char := range s {\n        if !contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, char := range\
    \ s {\n        if !strings.Contains(c, string(char)) {\n            result +=\
    \ string(char)\n        }\n    }\n    return []interface{}{result, result == Reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result []interface{}\n\
    \    for _, char := range c {\n        s = strings.Replace(s, string(char), \"\
    \", -1)\n    }\n    result = append(result, s)\n    result = append(result, isPalindrome(s))\n\
    \    return result\n}\n", "    // your code here\n    return nil\n}\n", "    var\
    \ result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == reverse(result)}\n}\n", "    var result []interface{}\n\
    \    for _, char := range c {\n        s = strings.Replace(s, string(char), \"\
    \", -1)\n    }\n    result = append(result, s)\n    result = append(result, s\
    \ == reverse(s))\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var result string\n    for _, char := range s {\n        if\
    \ !contains(c, char) {\n            result += string(char)\n        }\n    }\n\
    \    return []interface{}{result, isPalindrome(result)}\n}\n", "    var result\
    \ string\n    for _, char := range s {\n        if !contains(c, string(char))\
    \ {\n            result += string(char)\n        }\n    }\n    return []interface{}{result,\
    \ isPalindrome(result)}\n}\n", "    var result string\n    for _, ch := range\
    \ s {\n        if !strings.Contains(c, string(ch)) {\n            result += string(ch)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    var result string\n    for _, char := range s {\n        if !strings.Contains(c,\
    \ string(char)) {\n            result += string(char)\n        }\n    }\n    return\
    \ []interface{}{result, result == Reverse(result)}\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result string\n    for _, char := range s {\n\
    \        if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    // your code here\n \
    \   return nil\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
