name: HumanEval_105_by_length
language: go_test.go
prompt: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
  // reverse the resulting list, and then replace each digit by its corresponding\
  \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
  , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8,\
  \ 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]string{})\n\
  // PATCH list\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1,\
  \ -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n"
tests: "func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
  \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
  \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1,\
  \ 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
  \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i,\
  \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []string\n    for _, v := range arr {\n        if v\
    \ >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, i := range arr {\n        if i >= 1 && i <= 9 {\n   \
    \         temp = append(temp, i)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        result = append(result, num_to_string(temp[i]))\n   \
    \ }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] < 1 || arr[i] > 9 {\n            arr = append(arr[:i], arr[i+1:]...)\n\
    \            i--\n        }\n    }\n    for i := 0; i < len(arr)/2; i++ {\n  \
    \      arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    }\n    var result\
    \ []string\n    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n   \
    \     case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // TODO: Implement\
    \ me!\n    return []string{}\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    var result []string\n    var tmp []int\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            tmp = append(tmp, v)\n        }\n \
    \   }\n    for _, v := range tmp {\n        switch v {\n        case 1:\n    \
    \        result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j =\
    \ i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n   \
    \ return result\n}\n", "    var result []string\n    var temp []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var res []string\n    var tmp []int\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            tmp = append(tmp, v)\n        }\n \
    \   }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n   \
    \     case 1:\n            res = append(res, \"One\")\n        case 2:\n     \
    \       res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n", "    var result []string\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v >= 1 && v <= 9 {\n            res = append(res, get_name(v))\n     \
    \   }\n    }\n    return res\n}\n", "    return []string{}\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var tmp []int\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n        }\n\
    \    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var res []string\n\
    \    for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        switch v {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n", "    var\
    \ res []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n  \
    \          res = append(res, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return\
    \ res\n}\n", "    var res []string\n    for _, v := range arr {\n        if v\
    \ >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n  \
    \      }\n    }\n    return res\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1;\
    \ i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n", "    var result\
    \ []string\n    var sorted []int\n    for _, v := range arr {\n        if v >\
    \ 0 && v < 10 {\n            sorted = append(sorted, v)\n        }\n    }\n  \
    \  for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n     \
    \   case 1:\n            result = append(result, \"One\")\n        case 2:\n \
    \           result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   tmp = append(tmp, v)\n        }\n    }\n    if len(tmp) == 0 {\n        return\
    \ res\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i]\
    \ {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n", "    var result []string\n    var sorted_arr []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            sorted_arr = append(sorted_arr,\
    \ v)\n        }\n    }\n    for i := len(sorted_arr) - 1; i >= 0; i-- {\n    \
    \    result = append(result, num_to_str(sorted_arr[i]))\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v < 1\
    \ || v > 9 {\n            continue\n        }\n        switch v {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, get_name(v))\n        }\n    }\n    return result\n}\n", " \
    \   var result []string\n    for _, v := range arr {\n        if v > 0 && v <\
    \ 10 {\n            result = append(result, convert(v))\n        }\n    }\n  \
    \  reverse(result)\n    return result\n}\n", "    var res []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0;\
    \ i-- {\n        switch tmp[i] {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    var result []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0;\
    \ i-- {\n        switch tmp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n  \
    \  var result []string\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            result = append(result, get_string(v))\n        }\n    }\n  \
    \  return result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n \
    \   }\n    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, get_name(v))\n        }\n \
    \   }\n    return reverse(result)\n}\n", "    var result []string\n    var temp\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >=\
    \ 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n  \
    \  var res []string\n    var tmp []int\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            tmp = append(tmp, v)\n        }\n    }\n    for\
    \ i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n\
    \            res = append(res, \"One\")\n        case 2:\n            res = append(res,\
    \ \"Two\")\n        case 3:\n            res = append(res, \"Three\")\n      \
    \  case 4:\n            res = append(res, \"Four\")\n        case 5:\n       \
    \     res = append(res, \"Five\")\n        case 6:\n            res = append(res,\
    \ \"Six\")\n        case 7:\n            res = append(res, \"Seven\")\n      \
    \  case 8:\n            res = append(res, \"Eight\")\n        case 9:\n      \
    \      res = append(res, \"Nine\")\n        }\n    }\n    return res\n}\n", " \
    \   // Write your code here\n    return nil\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ numbers = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n      \
    \  3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\"\
    ,\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, numbers[v])\n        }\n    }\n    for i, j := 0, len(result)-1;\
    \ i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n\
    \    }\n    return result\n}\n", "    var result []string\n    var tmp []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            tmp =\
    \ append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n\
    \        switch tmp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var res []string\n    var sorted []int\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n\
    \        }\n    }\n    if len(sorted) == 0 {\n        return res\n    }\n    for\
    \ i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case\
    \ 1:\n            res = append(res, \"One\")\n        case 2:\n            res\
    \ = append(res, \"Two\")\n        case 3:\n            res = append(res, \"Three\"\
    )\n        case 4:\n            res = append(res, \"Four\")\n        case 5:\n\
    \            res = append(res, \"Five\")\n        case 6:\n            res = append(res,\
    \ \"Six\")\n        case 7:\n            res = append(res, \"Seven\")\n      \
    \  case 8:\n            res = append(res, \"Eight\")\n        case 9:\n      \
    \      res = append(res, \"Nine\")\n        }\n    }\n    return res\n}\n", " \
    \   var res []string\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n        }\n    }\n\
    \    return res\n}\n", "    var result []string\n    var sorted []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted_arr []int\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            sorted_arr = append(sorted_arr,\
    \ v)\n        }\n    }\n    for i := len(sorted_arr) - 1; i >= 0; i-- {\n    \
    \    switch sorted_arr[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var dict = map[int]string{\n   \
    \     1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            result = append(result, dict[v])\n    \
    \    }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n  \
    \      result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, get_name(v))\n        }\n    }\n    return reverse(result)\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1;\
    \ i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    var result []string\n    var temp []int\n \
    \   for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp =\
    \ append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n\
    \        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, int_to_string(v))\n       \
    \ }\n    }\n    return reverse(result)\n}\n", "    var result []string\n    var\
    \ sorted []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n \
    \           sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n   \
    \         temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var sorted_arr []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted_arr = append(sorted_arr,\
    \ v)\n        }\n    }\n    for i := len(sorted_arr) - 1; i >= 0; i-- {\n    \
    \    switch sorted_arr[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var res []string\n    var tmp []int\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n   \
    \     }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        res = append(res,\
    \ num2str(tmp[i]))\n    }\n    return res\n}\n", "    var result []string\n  \
    \  var sorted []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ get_name(v))\n        }\n    }\n    reverse(result)\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            switch\
    \ v {\n            case 1:\n                result = append(result, \"One\")\n\
    \            case 2:\n                result = append(result, \"Two\")\n     \
    \       case 3:\n                result = append(result, \"Three\")\n        \
    \    case 4:\n                result = append(result, \"Four\")\n            case\
    \ 5:\n                result = append(result, \"Five\")\n            case 6:\n\
    \                result = append(result, \"Six\")\n            case 7:\n     \
    \           result = append(result, \"Seven\")\n            case 8:\n        \
    \        result = append(result, \"Eight\")\n            case 9:\n           \
    \     result = append(result, \"Nine\")\n            }\n        }\n    }\n   \
    \ for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n", "    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    //\
    \ your code here\n    return []string{}\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    //\
    \ TODO: implement this function\n    return nil\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            sorted = append(sorted, v)\n        }\n    }\n    for i :=\
    \ len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    var res []string\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            switch v {\n     \
    \       case 1:\n                res = append(res, \"One\")\n            case\
    \ 2:\n                res = append(res, \"Two\")\n            case 3:\n      \
    \          res = append(res, \"Three\")\n            case 4:\n               \
    \ res = append(res, \"Four\")\n            case 5:\n                res = append(res,\
    \ \"Five\")\n            case 6:\n                res = append(res, \"Six\")\n\
    \            case 7:\n                res = append(res, \"Seven\")\n         \
    \   case 8:\n                res = append(res, \"Eight\")\n            case 9:\n\
    \                res = append(res, \"Nine\")\n            }\n        }\n    }\n\
    \    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j]\
    \ = res[j], res[i]\n    }\n    return res\n}\n", "    var result []string\n  \
    \  var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n   \
    \         temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n    \
    \        tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i\
    \ >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result =\
    \ append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ sorted []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n \
    \           sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0;\
    \ i-- {\n        switch tmp[i] {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    var result []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0;\
    \ i-- {\n        switch tmp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var temp []int\n    for _, v :=\
    \ range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n\
    \        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n   \
    \ for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var sorted []int\n    var sorted_reverse []int\n    var sorted_reverse_string\
    \ []string\n    var sorted_reverse_string_result []string\n\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n\
    \        }\n    }\n\n    for i := len(sorted) - 1; i >= 0; i-- {\n        sorted_reverse\
    \ = append(sorted_reverse, sorted[i])\n    }\n\n    for _, v := range sorted_reverse\
    \ {\n        switch v {\n        case 1:\n            sorted_reverse_string =\
    \ append(sorted_reverse_string, \"One\")\n        case 2:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Two\")\n        case 3:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Three\")\n        case 4:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Four\")\n        case 5:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Five\")\n        case 6:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Six\")\n        case 7:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Seven\")\n        case 8:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Eight\")\n        case 9:\n            sorted_reverse_string\
    \ = append(sorted_reverse_string, \"Nine\")\n        }\n    }\n\n    for _, v\
    \ := range sorted_reverse_string {\n        if v != \"\" {\n            sorted_reverse_string_result\
    \ = append(sorted_reverse_string_result, v)\n        }\n    }\n\n    return sorted_reverse_string_result\n\
    }\n", "    var result []string\n    var nums []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            nums = append(nums, v)\n     \
    \   }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch nums[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n    var result\
    \ []string\n    var temp []int\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            temp = append(temp, v)\n        }\n    }\n    for i\
    \ := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, i := range arr {\n        if i > 0 && i < 10 {\n\
    \            temp = append(temp, i)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n   \
    \         temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    if len(sorted) == 0 {\n\
    \        return res\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n    \
    \    switch sorted[i] {\n        case 1:\n            res = append(res, \"One\"\
    )\n        case 2:\n            res = append(res, \"Two\")\n        case 3:\n\
    \            res = append(res, \"Three\")\n        case 4:\n            res =\
    \ append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    var result []string\n    var temp\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >=\
    \ 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var res []string\n    for _, v := range arr {\n        if\
    \ v >= 1 && v <= 9 {\n            res = append(res, int_to_string(v))\n      \
    \  }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n       \
    \ res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n", "    var result\
    \ []string\n    var tmp []int\n    var tmp2 []int\n    var tmp3 []int\n    var\
    \ tmp4 []int\n    var tmp5 []int\n    var tmp6 []int\n    var tmp7 []int\n   \
    \ var tmp8 []int\n    var tmp9 []int\n    for _, v := range arr {\n        if\
    \ v == 1 {\n            tmp = append(tmp, v)\n        } else if v == 2 {\n   \
    \         tmp2 = append(tmp2, v)\n        } else if v == 3 {\n            tmp3\
    \ = append(tmp3, v)\n        } else if v == 4 {\n            tmp4 = append(tmp4,\
    \ v)\n        } else if v == 5 {\n            tmp5 = append(tmp5, v)\n       \
    \ } else if v == 6 {\n            tmp6 = append(tmp6, v)\n        } else if v\
    \ == 7 {\n            tmp7 = append(tmp7, v)\n        } else if v == 8 {\n   \
    \         tmp8 = append(tmp8, v)\n        } else if v == 9 {\n            tmp9\
    \ = append(tmp9, v)\n        }\n    }\n    for i := len(tmp9) - 1; i >= 0; i--\
    \ {\n        result = append(result, \"Nine\")\n    }\n    for i := len(tmp8)\
    \ - 1; i >= 0; i-- {\n        result = append(result, \"Eight\")\n    }\n    for\
    \ i := len(tmp7) - 1; i >= 0; i-- {\n        result = append(result, \"Seven\"\
    )\n    }\n    for i := len(tmp6) - 1; i >= 0; i-- {\n        result = append(result,\
    \ \"Six\")\n    }\n    for i := len(tmp5) - 1; i >= 0; i-- {\n        result =\
    \ append(result, \"Five\")\n    }\n    for i := len(tmp4) - 1; i >= 0; i-- {\n\
    \        result = append(result, \"Four\")\n    }\n    for i := len(tmp3) - 1;\
    \ i >= 0; i-- {\n        result = append(result, \"Three\")\n    }\n    for i\
    \ :=", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n     \
    \   }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var res []string\n    for _, v := range arr {\n        if v > 0 &&\
    \ v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    return res\n}\n", "    var result []string\n    var tmp []int\n  \
    \  for _, v := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // TODO: implement this function\n    return []string{}\n}\n", "  \
    \  // your code here\n    return nil\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    // your code here\n    return []string{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    var result []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ get_name(v))\n        }\n    }\n    reverse(result)\n    return result\n}\n",
  "    // your code here\n    return nil\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []string\n    var tmp []int\n    var tmp_str string\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n\
    \        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i]\
    \ {\n        case 1:\n            tmp_str = \"One\"\n        case 2:\n       \
    \     tmp_str = \"Two\"\n        case 3:\n            tmp_str = \"Three\"\n  \
    \      case 4:\n            tmp_str = \"Four\"\n        case 5:\n            tmp_str\
    \ = \"Five\"\n        case 6:\n            tmp_str = \"Six\"\n        case 7:\n\
    \            tmp_str = \"Seven\"\n        case 8:\n            tmp_str = \"Eight\"\
    \n        case 9:\n            tmp_str = \"Nine\"\n        }\n        result =\
    \ append(result, tmp_str)\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, v := range arr {\n      \
    \  if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\"\
    , v))\n        }\n    }\n    return result\n}\n", "    var res []string\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n", "    var result\
    \ []string\n    var temp []int\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            temp = append(temp, v)\n        }\n    }\n    for i\
    \ := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []string{}\n    }\n    // sort\n    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n    // reverse\n    for i := 0; i < len(arr)/2; i++ {\n    \
    \    arr[i], arr[len(arr)-1-i] = arr[len(arr)-1-i], arr[i]\n    }\n    // replace\n\
    \    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n\
    \            arr[i] = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n\
    \        case 3:\n            arr[i] = \"Three\"\n        case 4:\n          \
    \  arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\n       \
    \ case 6:\n            arr[i] = \"Six\"\n        case 7:\n            arr[i] =\
    \ \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n        case 9:\n\
    \            arr[i] = \"Nine\"\n        default:\n            arr[i] = \"\"\n\
    \        }\n    }\n    // filter\n    var res []string\n    for _, v := range\
    \ arr {\n        if v != \"\" {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n", "    var result []string\n\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n\n    for i, j := 0, len(result)-1; i < j; i, j =\
    \ i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n\n \
    \   for i, v := range result {\n        switch v {\n        case \"1\":\n    \
    \        result[i] = \"One\"\n        case \"2\":\n            result[i] = \"\
    Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case \"\
    4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        }\n    }\n\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ to_name(v))\n        }\n    }\n    reverse(result)\n    return result\n}\n",
  "    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    return result\n}\n", "    var result []string\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n   \
    \         temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []string\n    var dict = map[int]string{\n        1: \"One\",\n     \
    \   2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\"\
    ,\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n       \
    \ 9: \"Nine\",\n    }\n    for _, v := range arr {\n        if v < 1 || v > 9\
    \ {\n            continue\n        }\n        result = append(result, dict[v])\n\
    \    }\n    return result\n}\n", "    var result []string\n    var temp []int\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp\
    \ = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i--\
    \ {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var nums = map[int]string{\n   \
    \     1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\"\
    ,\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    for _, num := range arr {\n   \
    \     if num >= 1 && num <= 9 {\n            result = append(result, nums[num])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var temp []int\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    var result []string\n    var temp\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >=\
    \ 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var temp []int\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n \
    \       }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n    var\
    \ result []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            result = append(result, get_name(v))\n        }\n    }\n    return\
    \ reverse(result)\n}\n", "    var result []string\n    var tmp []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, int_to_string(v))\n       \
    \ }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n    var result []string\n    var tmp []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n       \
    \ }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n\
    \        case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n  \
    \  var result []string\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            result = append(result, get_name(v))\n        }\n    }\n    return\
    \ reverse(result)\n}\n", "    var res []string\n    var tmp []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            res = append(res, \"One\")\n        case\
    \ 2:\n            res = append(res, \"Two\")\n        case 3:\n            res\
    \ = append(res, \"Three\")\n        case 4:\n            res = append(res, \"\
    Four\")\n        case 5:\n            res = append(res, \"Five\")\n        case\
    \ 6:\n            res = append(res, \"Six\")\n        case 7:\n            res\
    \ = append(res, \"Seven\")\n        case 8:\n            res = append(res, \"\
    Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n        }\n\
    \    }\n    return res\n}\n", "    var result []string\n    var temp []int\n \
    \   for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            temp =\
    \ append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n\
    \        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var res []string\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return res\n}\n", "    var res []string\n    var tmp []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            tmp =\
    \ append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n\
    \        switch tmp[i] {\n        case 1:\n            res = append(res, \"One\"\
    )\n        case 2:\n            res = append(res, \"Two\")\n        case 3:\n\
    \            res = append(res, \"Three\")\n        case 4:\n            res =\
    \ append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1;\
    \ i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    var\
    \ result []string\n    var temp []int\n    for _, v := range arr {\n        if\
    \ v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n \
    \   for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n  \
    \          sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ get_name(v))\n        }\n    }\n    return reverse(result)\n}\n", "    var result\
    \ []string\n    var sorted []int\n    for _, v := range arr {\n        if v >\
    \ 0 && v < 10 {\n            sorted = append(sorted, v)\n        }\n    }\n  \
    \  for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n     \
    \   case 1:\n            result = append(result, \"One\")\n        case 2:\n \
    \           result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    var result []string\n    if len(arr)\
    \ == 0 {\n        return result\n    }\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            result = append(result, get_name(v))\n      \
    \  }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n    \
    \    result[i], result[j] = result[j], result[i]\n    }\n    return result\n}\n",
  "    var res []string\n    var tmp []int\n    for _, v := range arr {\n        if\
    \ v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n        }\n    }\n   \
    \ for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case\
    \ 1:\n            res = append(res, \"One\")\n        case 2:\n            res\
    \ = append(res, \"Two\")\n        case 3:\n            res = append(res, \"Three\"\
    )\n        case 4:\n            res = append(res, \"Four\")\n        case 5:\n\
    \            res = append(res, \"Five\")\n        case 6:\n            res = append(res,\
    \ \"Six\")\n        case 7:\n            res = append(res, \"Seven\")\n      \
    \  case 8:\n            res = append(res, \"Eight\")\n        case 9:\n      \
    \      res = append(res, \"Nine\")\n        }\n    }\n    return res\n}\n", " \
    \   if len(arr) == 0 {\n        return []string{}\n    }\n    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ map_int_to_str = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\
    ,\n    }\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n        \
    \    result = append(result, map_int_to_str[v])\n        }\n    }\n    for i,\
    \ j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var res []string\n    for _, v := range arr {\n        if v > 0 &&\
    \ v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    return res\n}\n", "    // TODO: implement this function\n    return\
    \ []string{}\n}\n", "    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n  \
    \          sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ nums = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n \
    \   for _, num := range arr {\n        if num >= 1 && num <= 9 {\n           \
    \ result = append(result, nums[num])\n        }\n    }\n    for i, j := 0, len(result)-1;\
    \ i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, get_string(v))\n        }\n\
    \    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, i := range arr {\n        if i > 0 && i < 10 {\n      \
    \      result = append(result, fmt.Sprintf(\"%d\", i))\n        }\n    }\n   \
    \ return result\n}\n", "    var res []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\"\
    , v))\n        }\n    }\n    return res\n}\n", "    var res []string\n    for\
    \ _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n   \
    \     }\n        res = append(res, fmt.Sprintf(\"%d\", v))\n    }\n    return\
    \ res\n}\n", "    var result []string\n    var tmp []int\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp, v)\n    \
    \    }\n    }\n    if len(tmp) == 0 {\n        return result\n    }\n    for i\
    \ := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n \
    \           result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var sorted []int\n    var sorted_map = make(map[int]string)\n    sorted_map[1]\
    \ = \"One\"\n    sorted_map[2] = \"Two\"\n    sorted_map[3] = \"Three\"\n    sorted_map[4]\
    \ = \"Four\"\n    sorted_map[5] = \"Five\"\n    sorted_map[6] = \"Six\"\n    sorted_map[7]\
    \ = \"Seven\"\n    sorted_map[8] = \"Eight\"\n    sorted_map[9] = \"Nine\"\n\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n\n    for i := len(sorted) - 1; i >=\
    \ 0; i-- {\n        result = append(result, sorted_map[sorted[i]])\n    }\n\n\
    \    return result\n}\n", "    // your code here\n    return []string{}\n}\n",
  "    var result []string\n    var sorted []int\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n        }\n\
    \    }\n    for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n", "    // TODO:\
    \ implement\n    return []string{}\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) -\
    \ 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var res []string\n    var temp []int\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n \
    \       }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n", "    var result []string\n    var temp []int\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n  \
    \      }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n \
    \       }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n      \
    \  }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n     \
    \   }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []string{}\n    }\n    result := []string{}\n    for _,\
    \ n := range arr {\n        if n < 1 || n > 9 {\n            continue\n      \
    \  }\n        switch n {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    for\
    \ i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n    \
    \        tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i\
    \ >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result =\
    \ append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement\n    return\
    \ []string{}\n}\n", "    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, numberToString(v))\n        }\n    }\n    return\
    \ reverse(result)\n}\n", "    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, num := range arr\
    \ {\n        if num >= 1 && num <= 9 {\n            result = append(result, numbers[num])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    for i := 0; i < len(sorted); i++ {\n        for j := i +\
    \ 1; j < len(sorted); j++ {\n            if sorted[i] > sorted[j] {\n        \
    \        sorted[i], sorted[j] = sorted[j], sorted[i]\n            }\n        }\n\
    \    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n      \
    \  }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v < 1\
    \ || v > 9 {\n            continue\n        }\n        switch v {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return reverse(result)\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9\
    \ {\n            temp = append(temp, v)\n        }\n    }\n    for i := len(temp)\
    \ - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ temp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n   \
    \         temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1;\
    \ i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, v := range arr {\n      \
    \  if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\"\
    , v))\n        }\n    }\n    return result\n}\n", "    var res []string\n    var\
    \ tmp []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n    \
    \        tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1; i\
    \ >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    var result []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n}\n", "    var\
    \ res []string\n    var tmp []int\n    for _, v := range arr {\n        if v >=\
    \ 1 && v <= 9 {\n            tmp = append(tmp, v)\n        }\n    }\n    if len(tmp)\
    \ == 0 {\n        return res\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n\
    \        switch tmp[i] {\n        case 1:\n            res = append(res, \"One\"\
    )\n        case 2:\n            res = append(res, \"Two\")\n        case 3:\n\
    \            res = append(res, \"Three\")\n        case 4:\n            res =\
    \ append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i := 0; i < len(result); i++ {\n        for\
    \ j := i + 1; j < len(result); j++ {\n            if result[i] < result[j] {\n\
    \                result[i], result[j] = result[j], result[i]\n            }\n\
    \        }\n    }\n    for i, v := range result {\n        switch v {\n      \
    \  case \"1\":\n            result[i] = \"One\"\n        case \"2\":\n       \
    \     result[i] = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\
    \n        case \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n\
    \            result[i] = \"Five\"\n        case \"6\":\n            result[i]\
    \ = \"Six\"\n        case \"7\":\n            result[i] = \"Seven\"\n        case\
    \ \"8\":\n            result[i] = \"Eight\"\n        case \"9\":\n           \
    \ result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    var result []string\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i := 0; i < len(result)/2;\
    \ i++ {\n        j := len(result) - i - 1\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    for i, v := range result {\n        switch v {\n     \
    \   case \"1\":\n            result[i] = \"One\"\n        case \"2\":\n      \
    \      result[i] = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\
    \n        case \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n\
    \            result[i] = \"Five\"\n        case \"6\":\n            result[i]\
    \ = \"Six\"\n        case \"7\":\n            result[i] = \"Seven\"\n        case\
    \ \"8\":\n            result[i] = \"Eight\"\n        case \"9\":\n           \
    \ result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n    var result []string\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i := 0; i < len(result)/2;\
    \ i++ {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    for i, v := range result {\n        switch v {\n     \
    \   case \"1\":\n            result[i] = \"One\"\n        case \"2\":\n      \
    \      result[i] = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\
    \n        case \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n\
    \            result[i] = \"Five\"\n        case \"6\":\n            result[i]\
    \ = \"Six\"\n        case \"7\":\n            result[i] = \"Seven\"\n        case\
    \ \"8\":\n            result[i] = \"Eight\"\n        case \"9\":\n           \
    \ result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    var temp []int\n    var temp_str string\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n  \
    \      }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            temp_str = \"One\"\n        case 2:\n      \
    \      temp_str = \"Two\"\n        case 3:\n            temp_str = \"Three\"\n\
    \        case 4:\n            temp_str = \"Four\"\n        case 5:\n         \
    \   temp_str = \"Five\"\n        case 6:\n            temp_str = \"Six\"\n   \
    \     case 7:\n            temp_str = \"Seven\"\n        case 8:\n           \
    \ temp_str = \"Eight\"\n        case 9:\n            temp_str = \"Nine\"\n   \
    \     }\n        result = append(result, temp_str)\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) -\
    \ 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
