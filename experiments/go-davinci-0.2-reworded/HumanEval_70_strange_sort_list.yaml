name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3,\
  \ 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5,\
  \ 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
  \ []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return lst\n    }\n    var min, max\
    \ int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n     \
    \   if v < min {\n            min = v\n        }\n        if v > max {\n     \
    \       max = v\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    result := make([]int, len(lst))\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            result[i] = min(lst)\n\
    \        } else {\n            result[i] = max(lst)\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    res[0] = min\n    res[len(lst)\
    \ - 1] = max\n    for i := 1; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n\
    \            res[i] = max\n            max = max - 1\n        } else {\n     \
    \       res[i] = min\n            min = min + 1\n        }\n    }\n    return\
    \ res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    var result []int\n    var min, max int\n    min = lst[0]\n\
    \    max = lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for _, v := range lst {\n        if v != min && v != max {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    var res []int\n    var min, max int\n\
    \    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n        res = append(res,\
    \ min)\n        if min != max {\n            res = append(res, max)\n        }\n\
    \        lst = removeMinMax(lst, min, max)\n    }\n    return res\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    res := []int{min}\n    lst = append(lst[:0], lst[1:]...)\n    for len(lst)\
    \ > 0 {\n        min = lst[0]\n        max = lst[0]\n        for _, v := range\
    \ lst {\n            if v < min {\n                min = v\n            }\n  \
    \          if v > max {\n                max = v\n            }\n        }\n \
    \       res = append(res, max)\n        lst = append(lst[:0], lst[1:]...)\n  \
    \      for i, v := range lst {\n            if v == max {\n                lst\
    \ = append(lst[:i], lst[i+1:]...)\n                break\n            }\n    \
    \    }\n        if len(lst) > 0 {\n            res = append(res, min)\n      \
    \      lst = append(lst[:0], lst[1:]...)\n            for i, v := range lst {\n\
    \                if v == min {\n                    lst = append(lst[:i], lst[i+1:]...)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  var res []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max\
    \ = findMinMax(lst)\n        res = append(res, min)\n        if min != max {\n\
    \            res = append(res, max)\n        }\n        lst = remove(lst, min)\n\
    \        lst = remove(lst, max)\n    }\n    return res\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    var min, max int\n    min, max = lst[0],\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    var res []int\n    res = append(res, min)\n    res = append(res, max)\n \
    \   for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n\
    \    var min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n    lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    return append(result, strange_sort_list(lst)...)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n        result =\
    \ append(result, min)\n        if min != max {\n            result = append(result,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    var min, max int\n    for i, v := range lst {\n        if i == 0 {\n\
    \            min = v\n            max = v\n        } else {\n            if v\
    \ < min {\n                min = v\n            }\n            if v > max {\n\
    \                max = v\n            }\n        }\n    }\n    var new_lst []int\n\
    \    var i, j int\n    for {\n        if i == len(lst) {\n            break\n\
    \        }\n        if lst[i] == min {\n            new_lst = append(new_lst,\
    \ min)\n            i++\n        } else {\n            break\n        }\n    }\n\
    \    for {\n        if j == len(lst) {\n            break\n        }\n       \
    \ if lst[j] == max {\n            new_lst = append(new_lst, max)\n           \
    \ j++\n        } else {\n            break\n        }\n    }\n    if i == len(lst)\
    \ || j == len(lst) {\n        return new_lst\n    }\n    return append(new_lst,\
    \ strange_sort_list(lst[i:j])...)\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    var min int\n    var max int\n    var min_idx int\n    var max_idx\
    \ int\n    var res []int\n    for i, v := range lst {\n        if i == 0 {\n \
    \           min = v\n            max = v\n            min_idx = 0\n          \
    \  max_idx = 0\n        } else {\n            if v < min {\n                min\
    \ = v\n                min_idx = i\n            }\n            if v > max {\n\
    \                max = v\n                max_idx = i\n            }\n       \
    \ }\n    }\n    res = append(res, min)\n    res = append(res, max)\n    lst =\
    \ append(lst[:min_idx], lst[min_idx+1:]...)\n    lst = append(lst[:max_idx], lst[max_idx+1:]...)\n\
    \    res = append(res, strange_sort_list(lst)...)\n    return res\n}\n", "   \
    \ if len(lst) == 0 {\n        return lst\n    }\n    var res []int\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var new_lst []int\n    var min, max int\n\
    \    min, max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       new_lst = append(new_lst, v)\n        }\n    }\n    return new_lst\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n    var\
    \ min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n \
    \       result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    var min, max int\n    var min_index, max_index int\n    var new_lst\
    \ []int\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n        min_index,\
    \ max_index = 0, 0\n        for i, v := range lst {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n        new_lst = append(new_lst, min)\n        lst\
    \ = append(lst[:min_index], lst[min_index+1:]...)\n        if min_index < max_index\
    \ {\n            max_index--\n        }\n        new_lst = append(new_lst, max)\n\
    \        lst = append(lst[:max_index], lst[max_index+1:]...)\n    }\n    return\
    \ new_lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    var res []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    res =\
    \ append(res, min)\n    res = append(res, max)\n    for _, v := range lst {\n\
    \        if v != min && v != max {\n            res = append(res, v)\n       \
    \ }\n    }\n    return res\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    var min, max int\n    for i, v := range lst {\n        if i == 0 {\n\
    \            min = v\n            max = v\n        } else {\n            if v\
    \ < min {\n                min = v\n            }\n            if v > max {\n\
    \                max = v\n            }\n        }\n    }\n    var new_lst []int\n\
    \    new_lst = append(new_lst, min)\n    var i int\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] == min {\n            break\n        }\n    }\n   \
    \ lst = append(lst[:i], lst[i+1:]...)\n    for len(lst) > 0 {\n        var min,\
    \ max int\n        for i, v := range lst {\n            if i == 0 {\n        \
    \        min = v\n                max = v\n            } else {\n            \
    \    if v < min {\n                    min = v\n                }\n          \
    \      if v > max {\n                    max = v\n                }\n        \
    \    }\n        }\n        new_lst = append(new_lst, max)\n        for i, v :=\
    \ range lst {\n            if v == max {\n                lst = append(lst[:i],\
    \ lst[i+1:]...)\n                break\n            }\n        }\n        new_lst\
    \ = append(new_lst, min)\n        for i, v := range lst {\n            if v ==\
    \ min {\n                lst = append(lst[:i], lst[i+1:]...)\n               \
    \ break\n            }\n        }\n    }\n    return new_lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    for len(lst) > 0 {\n        min, max = minMax(lst)\n        result = append(result,\
    \ min)\n        if min != max {\n            result = append(result, max)\n  \
    \      }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n   \
    \ }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
