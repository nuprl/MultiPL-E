language: go_test.go
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if sum_digits(num)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo57xe0_d_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if sum_digits(v) > 0 {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbnx9fxpr_test.go:24:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, val := range arr {\n        if val\
    \ < 0 {\n            val = -val\n        }\n        sum := 0\n        for val\
    \ > 0 {\n            sum += val % 10\n            val /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpupqjg4d9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpupqjg4d9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpupqjg4d9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpupqjg4d9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if sum_digits(v) > 0 {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbnx9fxpr_test.go:24:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        if n < 0\
    \ {\n            n = -n\n        }\n        if n > 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0fwfv_gh_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0fwfv_gh_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0fwfv_gh_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0fwfv_gh_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if sum_digits(num) > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcy8yccj3_test.go:24:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            for v > 0 {\n                count++\n        \
    \        v /= 10\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplsbxs_kp_test.go:56: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplsbxs_kp_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplsbxs_kp_test.go:56: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplsbxs_kp_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=9)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplsbxs_kp_test.go:56: expected '%!s(int=5)', got '%!s(int=11)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplsbxs_kp_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        if n < 0\
    \ {\n            n = -n\n        }\n        sum := 0\n        for n > 0 {\n  \
    \          sum += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpr9vrk1p7_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpr9vrk1p7_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpr9vrk1p7_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpr9vrk1p7_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num == 0 {\n          \
    \  count++\n            continue\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num == 0 {\n          \
    \  count++\n            continue\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ sum := 0\n            for num > 0 {\n                sum += num % 10\n     \
    \           num /= 10\n            }\n            if sum > 0 {\n             \
    \   count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpe26vaip0_test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpe26vaip0_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpe26vaip0_test.go:58: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpe26vaip0_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if sum_digits(num)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo57xe0_d_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if sum_digits(num) > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcy8yccj3_test.go:24:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num == 0 {\n          \
    \  count++\n            continue\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpoaq_25r5_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpoaq_25r5_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v >= 10 {\n            sum := 0\n\
    \            for v > 0 {\n                sum += v % 10\n                v /=\
    \ 10\n            }\n            if sum > 0 {\n                count++\n     \
    \       }\n        } else {\n            if v > 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpnzv0713s_test.go:62: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpnzv0713s_test.go:62:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpnzv0713s_test.go:62: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpnzv0713s_test.go:62:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, i := range arr {\n        if i < 0\
    \ {\n            i = -i\n        }\n        sum := 0\n        for i > 0 {\n  \
    \          sum += i % 10\n            i /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp82q3bz_y_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp82q3bz_y_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp82q3bz_y_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp82q3bz_y_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, val := range arr {\n        if sum_digits(val)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9ar3p8g_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, val := range arr {\n        if val\
    \ < 0 {\n            val = -val\n        }\n        if val > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp5g79se9b_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp5g79se9b_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp5g79se9b_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp5g79se9b_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n\
    \  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpa64lacn6_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpa64lacn6_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if sum_digits(num)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo57xe0_d_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvklh4qas_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if sum_digits(num) > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcy8yccj3_test.go:24:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num < 10 {\n          \
    \  count++\n        } else {\n            sum := 0\n            for num > 0 {\n\
    \                sum += num % 10\n                num /= 10\n            }\n \
    \           if sum > 0 {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv69s31r_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T)\
    \ {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual:\
    \ candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12,\
    \ 23, 34, -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmped0j6b5v_test.go:51: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmped0j6b5v_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v < 10 {\n            count++\n\
    \        } else {\n            sum := 0\n            for v > 0 {\n           \
    \     sum += v % 10\n                v /= 10\n            }\n            if sum\
    \ > 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: 0 },\n    \
    \ { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmplky2s4c9_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmplky2s4c9_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        if v == 0 {\n            count++\n\
    \            continue\n        }\n        sum := 0\n        for v > 0 {\n    \
    \        sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpsj2psrsy_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmpsj2psrsy_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, i := range arr {\n        if i < 0\
    \ {\n            i = -i\n        }\n        sum := 0\n        for i > 0 {\n  \
    \          sum += i % 10\n            i /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp82q3bz_y_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp82q3bz_y_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp82q3bz_y_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp82q3bz_y_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikvc9058_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, n := range arr {\n        if n < 0\
    \ {\n            n = -n\n        }\n        sum := 0\n        for n > 0 {\n  \
    \          sum += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpr9vrk1p7_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpr9vrk1p7_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpr9vrk1p7_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpr9vrk1p7_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v > 0\
    \ {\n            count += sum_digits(v)\n        } else {\n            count +=\
    \ sum_digits(v * -1)\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0pfcy5r_test.go:22:22: undefined: sum_digits

    /tmp/tmpj0pfcy5r_test.go:24:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    var count int\n    for _, v := range arr {\n        if v <\
    \ 0 {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpknf5oddc_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpknf5oddc_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num > 0 {\n           \
    \ sum := 0\n            for num > 0 {\n                sum += num % 10\n     \
    \           num /= 10\n            }\n            if sum > 0 {\n             \
    \   count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpe26vaip0_test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpe26vaip0_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpe26vaip0_test.go:58: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpe26vaip0_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        if num < 10 {\n          \
    \  count++\n        } else {\n            sum := 0\n            for num > 0 {\n\
    \                sum += num % 10\n                num /= 10\n            }\n \
    \           if sum > 0 {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate\
    \ := count_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual:\
    \ candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 6, 9, -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100,\
    \ 98, -7, 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34,\
    \ -45, -56, 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp0ayherbw_test.go:60: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__6 (0.00s)\n        tmp0ayherbw_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  count += num % 10\n            num /= 10\n        }\n    }\n    return count\n\
    }\n\nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpqa4fq678_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpqa4fq678_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if sum_digits(v)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvpv5p42a_test.go:21:12: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        sum := 0\n        for v > 0 {\n  \
    \          sum += v % 10\n            v /= 10\n        }\n        if sum > 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpprpwq3o9_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpprpwq3o9_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        sum := 0\n        for num\
    \ > 0 {\n            sum += num % 10\n            num /= 10\n        }\n     \
    \   if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual:\
    \ candidate([]int{-1, -2, 0}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 2, -2, 3, 4, 5}), expected: 6 },\n     { actual: candidate([]int{1, 6, 9,\
    \ -6, 0, 1, 5}), expected: 5 },\n     { actual: candidate([]int{1, 100, 98, -7,\
    \ 1, -1}), expected: 4 },\n     { actual: candidate([]int{12, 23, 34, -45, -56,\
    \ 0}), expected: 5 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpdn0tj1vi_test.go:56: expected '%!s(int=5)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpdn0tj1vi_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, v := range arr {\n        if v < 0\
    \ {\n            v = -v\n        }\n        for v > 0 {\n            count +=\
    \ v % 10\n            v /= 10\n        }\n    }\n    return count\n}\n\nfunc TestCount_Nums(t\
    \ *testing.T) {\n  candidate := count_nums\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1, -2, 0}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected: 5 },\n\
    \     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n    \
    \ { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n     {\
    \ actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__1\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCount_Nums/test_num__2 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=6)', got '%!s(int=18)'\n    --- FAIL: TestCount_Nums/test_num__3\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=28)'\n\
    \    --- FAIL: TestCount_Nums/test_num__4 (0.00s)\n        tmpw21tysiv_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=28)'\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmpw21tysiv_test.go:52: expected '%!s(int=5)', got '%!s(int=35)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function count_nums which takes a list of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1,\
    \ 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr\
    \ []int) int {\n    count := 0\n    for _, num := range arr {\n        if num\
    \ == 0 {\n            continue\n        }\n        sum := 0\n        for num !=\
    \ 0 {\n            sum += num % 10\n            num /= 10\n        }\n       \
    \ if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
    \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
    \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
    \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n  \
    \   { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Nums (0.00s)\n    --- FAIL: TestCount_Nums/test_num__5\
    \ (0.00s)\n        tmp7smug592_test.go:56: expected '%!s(int=5)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074259
