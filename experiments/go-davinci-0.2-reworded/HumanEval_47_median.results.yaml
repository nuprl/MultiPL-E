language: go_test.go
name: HumanEval_47_median
results:
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1ci22yj_test.go:24:45: undefined: min

    /tmp/tmpl1ci22yj_test.go:24:74: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement median\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpqw2eetaz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpqw2eetaz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpqw2eetaz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpqw2eetaz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpqw2eetaz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwl41ait_test.go:24:45: undefined: max

    /tmp/tmpcwl41ait_test.go:24:74: undefined: min

    /tmp/tmpcwl41ait_test.go:27:52: undefined: max

    /tmp/tmpcwl41ait_test.go:27:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort the list.\n    for i := 0; i < len(l); i++ {\n      \
    \  for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n         \
    \       l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\n    // Return\
    \ median.\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3],\
    \ min(l[4], l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0_wv5244_test.go:37:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2]\
    \ + l[n/2-1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpm_wysqed_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpm_wysqed_test.go:47:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpm_wysqed_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var sum float64 = 0\n    for _, v := range l {\n        sum +=\
    \ float64(v)\n    }\n    return sum / float64(len(l))\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmpr4x8fo_f_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpr4x8fo_f_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    n := len(l)\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n % 2 == 0 {\n        m = float64(l[n/2-1] + l[n/2]) / 2\n\
    \    } else {\n        m = float64(l[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptson3htj_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptson3htj_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptson3htj_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpfkrzm8_v_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpfkrzm8_v_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpfkrzm8_v_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    return float64(l[0] + l[1] + l[2] + l[3] - min(l[0], min(l[1], min(l[2],\
    \ l[3]))) - max(l[0], max(l[1], max(l[2], l[3])))) / 2\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvif7d5n_test.go:24:45: undefined: min

    /tmp/tmpdvif7d5n_test.go:24:74: undefined: max

    /tmp/tmpdvif7d5n_test.go:26:48: undefined: min

    /tmp/tmpdvif7d5n_test.go:26:88: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwl41ait_test.go:24:45: undefined: max

    /tmp/tmpcwl41ait_test.go:24:74: undefined: min

    /tmp/tmpcwl41ait_test.go:27:52: undefined: max

    /tmp/tmpcwl41ait_test.go:27:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = (float64(l[len(l)/2])\
    \ + float64(l[len(l)/2-1])) / 2\n    } else {\n        m = float64(l[len(l)/2])\n\
    \    }\n    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr5te8r0x_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr5te8r0x_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr5te8r0x_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwl41ait_test.go:24:45: undefined: max

    /tmp/tmpcwl41ait_test.go:24:74: undefined: min

    /tmp/tmpcwl41ait_test.go:27:52: undefined: max

    /tmp/tmpcwl41ait_test.go:27:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8u63lio5_test.go:24:45: undefined: max

    /tmp/tmp8u63lio5_test.go:24:74: undefined: min

    /tmp/tmp8u63lio5_test.go:27:52: undefined: max

    /tmp/tmp8u63lio5_test.go:27:92: undefined: min

    /tmp/tmp8u63lio5_test.go:30:59: undefined: max

    /tmp/tmp8u63lio5_test.go:30:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76ug9_v2_test.go:24:45: undefined: min

    /tmp/tmp76ug9_v2_test.go:24:74: undefined: max

    /tmp/tmp76ug9_v2_test.go:27:52: undefined: min

    /tmp/tmp76ug9_v2_test.go:27:92: undefined: max

    /tmp/tmp76ug9_v2_test.go:30:59: undefined: min

    /tmp/tmp76ug9_v2_test.go:30:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    var n = len(l)\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n % 2\
    \ == 0 {\n        m = float64(l[n/2] + l[n/2-1]) / 2\n    } else {\n        m\
    \ = float64(l[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpad6vw1wm_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpad6vw1wm_test.go:47:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpad6vw1wm_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmprwbf1o12_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8u63lio5_test.go:24:45: undefined: max

    /tmp/tmp8u63lio5_test.go:24:74: undefined: min

    /tmp/tmp8u63lio5_test.go:27:52: undefined: max

    /tmp/tmp8u63lio5_test.go:27:92: undefined: min

    /tmp/tmp8u63lio5_test.go:30:59: undefined: max

    /tmp/tmp8u63lio5_test.go:30:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3],\
    \ max(l[4], l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjp_gzcga_test.go:37:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1]) / 2\n \
    \   }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ttpqirq_test.go:25:45: undefined: min

    /tmp/tmp8ttpqirq_test.go:25:74: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr3xficd2_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr3xficd2_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr3xficd2_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8u63lio5_test.go:24:45: undefined: max

    /tmp/tmp8u63lio5_test.go:24:74: undefined: min

    /tmp/tmp8u63lio5_test.go:27:52: undefined: max

    /tmp/tmp8u63lio5_test.go:27:92: undefined: min

    /tmp/tmp8u63lio5_test.go:30:59: undefined: max

    /tmp/tmp8u63lio5_test.go:30:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpowpcwyll_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpowpcwyll_test.go:50:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpowpcwyll_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n     \
    \   return (float64(l[len(l)/2]) + float64(l[len(l)/2 - 1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpz8yyzgn__test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpz8yyzgn__test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpz8yyzgn__test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n/2-1]+l[n/2]) / 2\n    }\n    return\
    \ float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpz4_i8_3y_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpz4_i8_3y_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpz4_i8_3y_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    l = mergeSort(l)\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpskfgp_4i_test.go:14:9: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1ci22yj_test.go:24:45: undefined: min

    /tmp/tmpl1ci22yj_test.go:24:74: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2-1]\
    \ + l[len(l)/2]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp1rf5ao2w_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp1rf5ao2w_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp1rf5ao2w_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwl41ait_test.go:24:45: undefined: max

    /tmp/tmpcwl41ait_test.go:24:74: undefined: min

    /tmp/tmpcwl41ait_test.go:27:52: undefined: max

    /tmp/tmpcwl41ait_test.go:27:92: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9bfwmgy_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9bfwmgy_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpf9bfwmgy_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx8i0sjtn_test.go:24:45: undefined: min

    /tmp/tmpx8i0sjtn_test.go:24:74: undefined: max

    /tmp/tmpx8i0sjtn_test.go:27:52: undefined: min

    /tmp/tmpx8i0sjtn_test.go:27:92: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76ug9_v2_test.go:24:45: undefined: min

    /tmp/tmp76ug9_v2_test.go:24:74: undefined: max

    /tmp/tmp76ug9_v2_test.go:27:52: undefined: min

    /tmp/tmp76ug9_v2_test.go:27:92: undefined: max

    /tmp/tmp76ug9_v2_test.go:30:59: undefined: min

    /tmp/tmp76ug9_v2_test.go:30:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - max(l[0], max(l[1],\
    \ max(l[2], max(l[3], max(l[4], l[5]))))) - min(l[0], min(l[1], min(l[2], min(l[3],\
    \ min(l[4], l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] - max(\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0_wv5244_test.go:37:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76ug9_v2_test.go:24:45: undefined: min

    /tmp/tmp76ug9_v2_test.go:24:74: undefined: max

    /tmp/tmp76ug9_v2_test.go:27:52: undefined: min

    /tmp/tmp76ug9_v2_test.go:27:92: undefined: max

    /tmp/tmp76ug9_v2_test.go:30:59: undefined: min

    /tmp/tmp76ug9_v2_test.go:30:110: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1]) / 2\n    }\n    return\
    \ float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpulijg33t_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpulijg33t_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpulijg33t_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) % 2 == 0 {\n        return\
    \ (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpolc_gg_0_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpolc_gg_0_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpolc_gg_0_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3],\
    \ max(l[4], l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjp_gzcga_test.go:37:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - min(l[0], min(l[1], l[2])) - max(l[0], max(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - min(l[0], min(l[1], min(l[2], l[3]))) - max(l[0], max(l[1], max(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - min(l[0], min(l[1], min(l[2], min(l[3], l[4])))) - max(l[0],\
    \ max(l[1], max(l[2], max(l[3], l[4]))))) / 2\n    }\n    if len(l) == 6 {\n \
    \       return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] - min(l[0], min(l[1],\
    \ min(l[2], min(l[3], min(l[4], l[5]))))) - max(l[0], max(l[1], max(l[2], max(l[3],\
    \ max(l[4], l[5])))))) / 2\n    }\n    if len(l) == 7 {\n        return float64(l[0]\
    \ + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] - min(\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjp_gzcga_test.go:37:6: expected ''('', found TestMedian

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpae7odw81_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpae7odw81_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpae7odw81_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0]\
    \ + l[1] + l[2] - max(l[0], max(l[1], l[2])) - min(l[0], min(l[1], l[2]))) / 2\n\
    \    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]\
    \ - max(l[0], max(l[1], max(l[2], l[3]))) - min(l[0], min(l[1], min(l[2], l[3]))))\
    \ / 2\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2]\
    \ + l[3] + l[4] - max(l[0], max(l[1], max(l[2], max(l[3], l[4])))) - min(l[0],\
    \ min(l[1], min(l[2], min(l[3], l[4]))))) / 2\n    }\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8u63lio5_test.go:24:45: undefined: max

    /tmp/tmp8u63lio5_test.go:24:74: undefined: min

    /tmp/tmp8u63lio5_test.go:27:52: undefined: max

    /tmp/tmp8u63lio5_test.go:27:92: undefined: min

    /tmp/tmp8u63lio5_test.go:30:59: undefined: max

    /tmp/tmp8u63lio5_test.go:30:110: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2]\
    \ + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpoubu5a_1_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpoubu5a_1_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpoubu5a_1_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmprwbf1o12_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzwyneyny_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpzwyneyny_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzwyneyny_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n     \
    \   return (float64(l[len(l)/2]) + float64(l[len(l)/2 - 1])) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpz8yyzgn__test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpz8yyzgn__test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpz8yyzgn__test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptb_qh6jz_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptb_qh6jz_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptb_qh6jz_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return\
    \ float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4qs4oxcc_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4qs4oxcc_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4qs4oxcc_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmprwbf1o12_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) == 0 {\n        return m\n    }\n\
    \    if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] + l[len(l)/2-1]) /\
    \ 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n    return m\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpo3pipavo_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpo3pipavo_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpo3pipavo_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement this function.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjf9418om_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpjf9418om_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjf9418om_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
