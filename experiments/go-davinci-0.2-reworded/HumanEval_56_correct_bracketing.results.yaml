language: go_test.go
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmprflihreb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmprflihreb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmprflihreb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmprflihreb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, byte(c))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if string(c) == \"<\" {\n            stack = append(stack, \"<\")\n  \
    \      } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, byte(c))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count += 1\n        } else if c == '>' {\n         \
    \   count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []string{}\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if len(brackets) == 1 {\n        return false\n    }\n    if brackets[0] ==\
    \ '>' {\n        return false\n    }\n    if brackets[len(brackets)-1] == '<'\
    \ {\n        return false\n    }\n    if brackets[0] == '<' {\n        return\
    \ correct_bracketing(brackets[1:])\n    }\n    if brackets[len(brackets)-1] ==\
    \ '>' {\n        return correct_bracketing(brackets[:len(brackets)-1])\n    }\n\
    \    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp5aqxsbvn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp5aqxsbvn_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp5aqxsbvn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp5aqxsbvn_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range []byte(brackets)\
    \ {\n        if b == '<' {\n            stack = append(stack, b)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, byte(c))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, bracket := range brackets {\n\
    \        if bracket == '<' {\n            stack = append(stack, bracket)\n   \
    \     } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp1ux6wfyd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp1ux6wfyd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]byte, 0)\n    for i := 0; i < len(brackets);\
    \ i++ {\n        if brackets[i] == '<' {\n            stack = append(stack, brackets[i])\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []byte{}\n    for _, b := range brackets {\n  \
    \      if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            stack = append(stack, \"<\")\n \
    \       } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range []byte(brackets)\
    \ {\n        if b == '<' {\n            stack = append(stack, b)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range []byte(brackets)\
    \ {\n        if b == '<' {\n            stack = append(stack, b)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, bracket := range brackets {\n\
    \        if bracket == '<' {\n            stack = append(stack, bracket)\n   \
    \     } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, c := range brackets {\n \
    \       if c == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            count += 1\n        } else if bracket\
    \ == '>' {\n            count -= 1\n        }\n        if count < 0 {\n      \
    \      return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            count++\n        } else {\n    \
    \        count--\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpdy3mvric_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpdy3mvric_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpdy3mvric_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpdy3mvric_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, b := range brackets {\n  \
    \      if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmprflihreb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmprflihreb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmprflihreb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmprflihreb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        if string(bracket) == \"<\" {\n            stack = append(stack,\
    \ \"<\")\n        } else {\n            if len(stack) == 0 {\n               \
    \ return false\n            }\n            stack = stack[:len(stack)-1]\n    \
    \    }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, '<')\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if brackets[0] == '>' {\n        return false\n    }\n    if brackets[len(brackets)-1]\
    \ == '<' {\n        return false\n    }\n    var stack []byte\n    for _, b :=\
    \ range brackets {\n        if b == '<' {\n            stack = append(stack, '<')\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if len(brackets) % 2 != 0 {\n        return false\n    }\n    if brackets[0]\
    \ == '>' {\n        return false\n    }\n    if brackets[len(brackets) - 1] ==\
    \ '<' {\n        return false\n    }\n    for i := 0; i < len(brackets); i++ {\n\
    \        if brackets[i] == '<' {\n            for j := i + 1; j < len(brackets);\
    \ j++ {\n                if brackets[j] == '>' {\n                    return correct_bracketing(brackets[i\
    \ + 1:j]) && correct_bracketing(brackets[j + 1:])\n                }\n       \
    \     }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqt7m4v71_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqt7m4v71_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqt7m4v71_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, b := range brackets {\n \
    \       if b == '<' {\n            stack = append(stack, \"<\")\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, r := range brackets {\n   \
    \     if r == '<' {\n            stack = append(stack, r)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count += 1\n        } else if c == '>' {\n \
    \           count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
