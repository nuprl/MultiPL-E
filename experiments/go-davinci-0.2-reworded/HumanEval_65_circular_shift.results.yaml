language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[0])\n        digits = digits[1:]\n    }\n    var result string\n    for\
    \ i := len(digits) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmptgwmtxoe_test.go:49: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    var digit int\n    var i int\n    var j int\n    var k int\n   \
    \ var n int\n    var x_copy int\n\n    x_copy = x\n    n = 0\n    for x_copy >\
    \ 0 {\n        x_copy /= 10\n        n++\n    }\n    if shift > n {\n        for\
    \ i = 0; i < n; i++ {\n            digit = x % 10\n            x /= 10\n     \
    \       result += fmt.Sprintf(\"%d\", digit)\n        }\n    } else {\n      \
    \  for i = 0; i < shift; i++ {\n            digit = x % 10\n            x /= 10\n\
    \        }\n        for j = 0; j < n - shift; j++ {\n            result += fmt.Sprintf(\"\
    %d\", digit)\n            digit = x % 10\n            x /= 10\n        }\n   \
    \     for k = 0; k < shift; k++ {\n            result += fmt.Sprintf(\"%d\", digit)\n\
    \            digit = x % 10\n            x /= 10\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmph7kpaq9j_test.go:72: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmph7kpaq9j_test.go:72:\
    \ expected '12', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length\
    \ of the string.\n    l := len(s)\n    // If shift is greater than the length\
    \ of the string, reverse the string.\n    if shift > l {\n        s = reverse(s)\n\
    \    } else {\n        // Otherwise, shift the digits right by shift.\n      \
    \  s = s[l-shift:] + s[:l-shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgi4ls3mk_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var s string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        s += fmt.Sprintf(\"%d\", digits[i])\n    }\n   \
    \ return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmprc1mv8eh_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    shift %= len(digits)\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    return fmt.Sprintf(\"%d\", digits[shift:] + digits[:shift])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjqjxhh8_test.go:28:36: invalid operation: operator + not defined on digits[shift:]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps61cqpcp_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n        return\
    \ reverse(string(digits))\n    }\n    return string(append(digits[shift:], digits[:shift]...))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60ph8epz_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps61cqpcp_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > len(fmt.Sprintf(\"\
    %d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n    }\n    return fmt.Sprintf(\"\
    %d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp00w6ijxi_test.go:20:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    var digits []int\n    var i int\n    var j int\n    var digit int\n\
    \n    // Get the digits of the number\n    for x > 0 {\n        digit = x % 10\n\
    \        digits = append(digits, digit)\n        x = x / 10\n    }\n\n    // Reverse\
    \ the digits\n    for i, j = 0, len(digits) - 1; i < j; i, j = i + 1, j - 1 {\n\
    \        digits[i], digits[j] = digits[j], digits[i]\n    }\n\n    // Shift the\
    \ digits\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n \
    \   digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \n    // Reverse the digits\n    for i, j = 0, len(digits) - 1; i < j; i, j =\
    \ i + 1, j - 1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n\
    \n    // Convert the digits to a string\n    for _, digit = range digits {\n \
    \       result += fmt.Sprintf(\"%d\", digit)\n    }\n\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpya6fldzh_test.go:70: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpya6fldzh_test.go:70:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpya6fldzh_test.go:70: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  result := \"\"\n    for _, digit := range digits {\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgg0gpiox_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpgg0gpiox_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpgg0gpiox_test.go:52: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n  \
    \  l := len(s)\n    // If shift is greater than length of string, reverse the\
    \ string\n    if shift > l {\n        s = reverse(s)\n    } else {\n        //\
    \ Shift the string\n        s = s[l-shift:] + s[:l-shift]\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbfl6oqz_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    shift = shift % len(digits)\n    if shift == 0 {\n        shift = len(digits)\n\
    \    }\n    digits = append(digits[shift:], digits[:shift]...)\n    result :=\
    \ \"\"\n    for _, digit := range digits {\n        result += fmt.Sprintf(\"%d\"\
    , digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmprtm02bm9_test.go:53: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmprtm02bm9_test.go:53:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmprtm02bm9_test.go:53: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n\
    \    str_len := len(str)\n    // If shift > number of digits, return digits reversed\n\
    \    if shift > str_len {\n        return reverse(str)\n    }\n    // Get the\
    \ last shift digits\n    last_shift := str[str_len-shift:]\n    // Get the first\
    \ str_len-shift digits\n    first_shift := str[:str_len-shift]\n    // Concatenate\
    \ the last shift digits with the first str_len-shift digits\n    return last_shift\
    \ + first_shift\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcpj1bi3f_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x_str :=\
    \ fmt.Sprintf(\"%d\", x)\n    x_len := len(x_str)\n    if shift > x_len {\n  \
    \      return reverse(x_str)\n    }\n    return x_str[x_len-shift:] + x_str[:x_len-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw3f6v6t7_test.go:19:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[shift:], digits[:shift]...)\n    var result string\n\
    \    for _, digit := range digits {\n        result += fmt.Sprintf(\"%d\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_taa520f_test.go:49: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_taa520f_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp_taa520f_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n\
    \    x_len := len(x_str)\n    // If shift > number of digits, return digits reversed\n\
    \    if shift > x_len {\n        return reverse(x_str)\n    }\n    // Get the\
    \ last shift digits\n    last_shift := x_str[x_len-shift:]\n    // Get the first\
    \ x_len-shift digits\n    first_x_len_shift := x_str[:x_len-shift]\n    // Return\
    \ the last shift digits + the first x_len-shift digits\n    return last_shift\
    \ + first_x_len_shift\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnghp85i_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n\
    \    l := len(s)\n    // If shift is greater than length, reverse the string\n\
    \    if shift > l {\n        for i, j := 0, l-1; i < j; i, j = i+1, j-1 {\n  \
    \          s[i], s[j] = s[j], s[i]\n        }\n        return s\n    }\n    //\
    \ Otherwise, shift the string\n    return s[l-shift:] + s[:l-shift]\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr9aysaah_test.go:23:13: cannot assign to s[i] (value of type byte)

    /tmp/tmpr9aysaah_test.go:23:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbhvasntk_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \    var s string\n    for _, digit := range digits {\n        s += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp99m824fd_test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp99m824fd_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp99m824fd_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074592
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9684acsv_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    shift %= len(digits)\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %v\", digits)\n    }\n    return fmt.Sprintf(\"%v\", append(digits[shift:], digits[:shift]...))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp0kyk_6lw_test.go:45: expected '001', got '[1 0 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp0kyk_6lw_test.go:45:\
    \ expected '12', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp0kyk_6lw_test.go:45: expected '79', got '[7 9]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp0kyk_6lw_test.go:45: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp0kyk_6lw_test.go:45:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    str := fmt.Sprintf(\"%d\", x)\n    return str[len(str) - shift:] +\
    \ str[:len(str) - shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp1k35qjv_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length\
    \ of the string.\n    n := len(s)\n    // If shift is greater than the length\
    \ of the string, reverse the string.\n    if shift > n {\n        s = reverse(s)\n\
    \    } else {\n        // Get the first n - shift characters.\n        s1 := s[0:n\
    \ - shift]\n        // Get the last shift characters.\n        s2 := s[n - shift:n]\n\
    \        // Concatenate the two strings.\n        s = s2 + s1\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76aqwm0c_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    var digit int\n    var i int\n    var j int\n    var num_digits\
    \ int\n    var num_shifts int\n    var reversed bool\n\n    // Count the number\
    \ of digits in x.\n    num_digits = 0\n    for i = x; i > 0; i /= 10 {\n     \
    \   num_digits++\n    }\n\n    // If shift > number of digits, reverse the digits.\n\
    \    if shift > num_digits {\n        reversed = true\n        shift = num_digits\n\
    \    }\n\n    // Shift the digits.\n    num_shifts = 0\n    for i = x; i > 0;\
    \ i /= 10 {\n        digit = i % 10\n        if num_shifts < shift {\n       \
    \     result = fmt.Sprintf(\"%d%s\", digit, result)\n        } else {\n      \
    \      result = fmt.Sprintf(\"%s%d\", result, digit)\n        }\n        num_shifts++\n\
    \    }\n\n    // If the digits were reversed, reverse them again.\n    if reversed\
    \ {\n        result = reverse(result)\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwu3jh31_test.go:19:9: j declared but not used

    /tmp/tmpkwu3jh31_test.go:50:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  var result string\n    for _, d := range digits {\n        result += fmt.Sprintf(\"\
    %d\", d)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpf2esx592_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpf2esx592_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpf2esx592_test.go:52: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length\n    l := len(s)\n\
    \    // If shift is greater than length, reverse the string\n    if shift > l\
    \ {\n        return reverse(s)\n    }\n    // Split the string into two parts\n\
    \    a := s[:l-shift]\n    b := s[l-shift:]\n    // Return the two parts concatenated\n\
    \    return b + a\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp30vcf1uo_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to a string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get the length of\
    \ the string\n    x_len := len(x_str)\n    // If shift > length of string, reverse\
    \ the string\n    if shift > x_len {\n        x_str = reverse(x_str)\n    } else\
    \ {\n        // Get the first shift digits of the string\n        first := x_str[:shift]\n\
    \        // Get the remaining digits of the string\n        last := x_str[shift:]\n\
    \        // Concatenate the remaining digits with the first shift digits\n   \
    \     x_str = last + first\n    }\n    return x_str\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8e671pyq_test.go:22:17: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // If shift >\
    \ number of digits, reverse the digits.\n    if shift > len(s) {\n        s =\
    \ reverse(s)\n    } else {\n        // Otherwise, shift the digits right by shift.\n\
    \        s = s[len(s) - shift:] + s[:len(s) - shift]\n    }\n    return s\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_2dj25gk_test.go:20:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length of the string\n\
    \    l := len(s)\n    // If shift is greater than the length of the string, reverse\
    \ the string\n    if shift > l {\n        s = reverse(s)\n    } else {\n     \
    \   // Convert the string to a slice of runes\n        runes := []rune(s)\n  \
    \      // Shift the slice of runes\n        runes = append(runes[shift:], runes[:shift]...)\n\
    \        // Convert the slice of runes back to a string\n        s = string(runes)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpha0dg8o3_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[shift:], digits[:shift]...)\n    result := \"\"\n    for _,\
    \ digit := range digits {\n        result = fmt.Sprintf(\"%d%s\", digit, result)\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpdapw3vy9_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n  \
    \  l := len(s)\n    // If shift > length of string, return reversed string\n \
    \   if shift > l {\n        return reverse(s)\n    }\n    // Return shifted string\n\
    \    return s[l-shift:] + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0jzdqdga_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length\
    \ of the string.\n    l := len(s)\n    // If the shift is greater than the length\
    \ of the string, reverse the\n    // string.\n    if shift > l {\n        s =\
    \ reverse(s)\n    } else {\n        // Get the first part of the string.\n   \
    \     s1 := s[0:l-shift]\n        // Get the second part of the string.\n    \
    \    s2 := s[l-shift:l]\n        // Concatenate the two parts.\n        s = s2\
    \ + s1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdama_t1_test.go:23:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n\
    \    length := len(str)\n    // If shift > length, reverse string\n    if shift\
    \ > length {\n        // Reverse string\n        for i, j := 0, len(str)-1; i\
    \ < j; i, j = i+1, j-1 {\n            str[i], str[j] = str[j], str[i]\n      \
    \  }\n        return str\n    }\n    // Shift string\n    return str[shift:] +\
    \ str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4_kxrnn_test.go:24:13: cannot assign to str[i] (value of type byte)

    /tmp/tmpq4_kxrnn_test.go:24:21: cannot assign to str[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074593
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get the\
    \ length of the string.\n    x_len := len(x_str)\n    // If shift > number of\
    \ digits, return digits reversed.\n    if shift > x_len {\n        // Reverse\
    \ the string.\n        x_rev := \"\"\n        for i := x_len - 1; i >= 0; i--\
    \ {\n            x_rev += string(x_str[i])\n        }\n        return x_rev\n\
    \    }\n    // Shift the digits right by shift.\n    x_shift := \"\"\n    for\
    \ i := x_len - shift; i < x_len; i++ {\n        x_shift += string(x_str[i])\n\
    \    }\n    for i := 0; i < x_len - shift; i++ {\n        x_shift += string(x_str[i])\n\
    \    }\n    return x_shift\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n        for i,\
    \ j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n            digits[i], digits[j]\
    \ = digits[j], digits[i]\n        }\n        return string(digits)\n    }\n  \
    \  return string(append(digits[shift:], digits[:shift]...))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_p_w_u1r_test.go:43: expected '001', got '010'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    // Get the number\
    \ of digits in x\n    digits := 0\n    for i := x; i > 0; i /= 10 {\n        digits++\n\
    \    }\n    if shift >= digits {\n        return fmt.Sprintf(\"%d\", reverse(x))\n\
    \    }\n    // Get the first digit of x\n    first := x / int(pow(10, digits -\
    \ shift))\n    // Get the rest of the digits of x\n    rest := x % int(pow(10,\
    \ digits - shift))\n    // Return the circular shift\n    return fmt.Sprintf(\"\
    %d%d\", rest, first)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj78kp3r8_test.go:25:34: undefined: reverse

    /tmp/tmpj78kp3r8_test.go:28:22: undefined: pow

    /tmp/tmpj78kp3r8_test.go:30:21: undefined: pow

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    str := fmt.Sprintf(\"%d\", x)\n    // Reverse the string\n\
    \    str = reverse(str)\n    // Shift the string\n    str = str[:shift] + reverse(str[shift:])\n\
    \    // Reverse the string\n    str = reverse(str)\n    return str\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkcl_5jlz_test.go:19:11: undefined: reverse

    /tmp/tmpkcl_5jlz_test.go:21:25: undefined: reverse

    /tmp/tmpkcl_5jlz_test.go:23:11: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse the string\n    r\
    \ := reverse(s)\n    // Shift the string\n    s = shift_string(r, shift)\n   \
    \ // Reverse the string\n    r = reverse(s)\n    return r\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6pzkrjp_test.go:19:10: undefined: reverse

    /tmp/tmpz6pzkrjp_test.go:21:9: undefined: shift_string

    /tmp/tmpz6pzkrjp_test.go:23:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n     \
    \   digits = digits[1:]\n    }\n    result := \"\"\n    for i := len(digits) -\
    \ 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpmu9p6b_l_test.go:55: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \    var result string\n    for _, digit := range digits {\n        result +=\
    \ fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp9bwbnrno_test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp9bwbnrno_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp9bwbnrno_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to a string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length of the\
    \ string\n    l := len(s)\n    // If shift is greater than the length of the string,\
    \ reverse the string\n    if shift > l {\n        s = reverse(s)\n    } else {\n\
    \        // Get the substring from the shift to the end of the string\n      \
    \  s1 := s[shift:]\n        // Get the substring from the beginning of the string\
    \ to the shift\n        s2 := s[:shift]\n        // Concatenate the two substrings\n\
    \        s = s1 + s2\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpko3fhn49_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // reverse string\n    r :=\
    \ reverse(s)\n    // if shift > number of digits, return digits reversed\n   \
    \ if shift > len(s) {\n        return r\n    }\n    // shift the digits right\
    \ by shift\n    return r[:shift] + s[shift:]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xpd9c1p_test.go:19:10: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Convert shift to string\n\
    \    shift_str := fmt.Sprintf(\"%d\", shift)\n    // Get the length of the string\n\
    \    x_len := len(x_str)\n    // Get the length of the shift\n    shift_len :=\
    \ len(shift_str)\n    // If shift is greater than the length of the string, return\
    \ the string reversed\n    if shift_len > x_len {\n        // Reverse the string\n\
    \        x_str_rev := \"\"\n        for i := x_len - 1; i >= 0; i-- {\n      \
    \      x_str_rev += string(x_str[i])\n        }\n        return x_str_rev\n  \
    \  } else {\n        // Get the first part of the string\n        x_str_first\
    \ := x_str[:shift_len]\n        // Get the second part of the string\n       \
    \ x_str_second := x_str[shift_len:]\n        // Return the second part of the\
    \ string + the first part of the string\n        return x_str_second + x_str_first\n\
    \    }\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpolircuxf_test.go:59: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074595
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length\n    l := len(s)\n\
    \    // If shift > length, reverse string\n    if shift > l {\n        s = reverse(s)\n\
    \    } else {\n        // Split string into two parts\n        s1 := s[0:l-shift]\n\
    \        s2 := s[l-shift:l]\n        // Concatenate the two parts\n        s =\
    \ s2 + s1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23hq6scc_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074595
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := make([]int,\
    \ 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n\
    \    }\n    if shift >= len(digits) {\n        for i, j := 0, len(digits) - 1;\
    \ i < j; i, j = i + 1, j - 1 {\n            digits[i], digits[j] = digits[j],\
    \ digits[i]\n        }\n    } else {\n        digits = append(digits[shift:],\
    \ digits[:shift]...)\n    }\n    result := \"\"\n    for _, digit := range digits\
    \ {\n        result += fmt.Sprintf(\"%d\", digit)\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3fh516az_test.go:55: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp3fh516az_test.go:55:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp3fh516az_test.go:55: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  result := \"\"\n    for _, d := range digits {\n        result += fmt.Sprintf(\"\
    %d\", d)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp633ovf5m_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp633ovf5m_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp633ovf5m_test.go:52: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n\
    \    l := len(s)\n    // If shift is greater than length of string, reverse string\n\
    \    if shift > l {\n        s = reverse(s)\n    } else {\n        // Get substring\
    \ from shift to end of string\n        s1 := s[shift:]\n        // Get substring\
    \ from 0 to shift\n        s2 := s[:shift]\n        // Concatenate s1 and s2\n\
    \        s = s1 + s2\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_f_8lqf_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps61cqpcp_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_digits(x)\n    }\n    return fmt.Sprintf(\"\
    %d%d\", x % int(math.Pow10(shift)), x / int(math.Pow10(shift)))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeubq0f5y_test.go:16:16: undefined: num_digits

    /tmp/tmpeubq0f5y_test.go:17:16: undefined: reverse_digits

    /tmp/tmpeubq0f5y_test.go:19:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    var result []int\n    var result_str string\n    var i int\n    var\
    \ j int\n    var k int\n    var n int\n    var x_copy int\n\n    // Get the digits\
    \ of x\n    x_copy = x\n    for x_copy > 0 {\n        digits = append(digits,\
    \ x_copy % 10)\n        x_copy /= 10\n    }\n    n = len(digits)\n\n    // Shift\
    \ the digits\n    for i = 0; i < n; i++ {\n        j = (i + shift) % n\n     \
    \   result = append(result, digits[j])\n    }\n\n    // Convert the result to\
    \ a string\n    for k = 0; k < n; k++ {\n        result_str += fmt.Sprintf(\"\
    %d\", result[k])\n    }\n\n    return result_str\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpze9ncjnc_test.go:64: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpze9ncjnc_test.go:64:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpze9ncjnc_test.go:64: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // If shift >\
    \ number of digits, return digits reversed.\n    if shift > len(s) {\n       \
    \ return reverse(s)\n    }\n    // Split the string into two parts.\n    s1 :=\
    \ s[:len(s) - shift]\n    s2 := s[len(s) - shift:]\n    // Return the two parts\
    \ reversed.\n    return reverse(s2) + reverse(s1)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0ea_30c_test.go:20:16: undefined: reverse

    /tmp/tmpv0ea_30c_test.go:26:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift >= len(digits) {\n        for i := 0; i < len(digits) / 2;\
    \ i++ {\n            digits[i], digits[len(digits) - i - 1] = digits[len(digits)\
    \ - i - 1], digits[i]\n        }\n        return fmt.Sprintf(\"%d\", digits)\n\
    \    }\n    return fmt.Sprintf(\"%d\", append(digits[len(digits) - shift:], digits[:len(digits)\
    \ - shift]...))\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpe9pkg_ni_test.go:50: expected '001', got '[0 1 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpe9pkg_ni_test.go:50:\
    \ expected '12', got '[1 2]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpe9pkg_ni_test.go:50: expected '79', got '[9 7]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpe9pkg_ni_test.go:50: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpe9pkg_ni_test.go:50:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Shift the\
    \ digits right by shift.\n    if shift > len(s) {\n        shift = len(s)\n  \
    \  }\n    s = s[len(s) - shift:] + s[:len(s) - shift]\n    return s\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpe_80ap7p_test.go:43: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length\
    \ of the string\n    l := len(s)\n    // If shift > length of string, reverse\
    \ the string\n    if shift > l {\n        s = reverse(s)\n    } else {\n     \
    \   // Otherwise, shift the string right by shift\n        s = s[l-shift:] + s[:l-shift]\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0anpasbz_test.go:22:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift >= len(digits) {\n        for i := 0; i < len(digits) / 2;\
    \ i++ {\n            digits[i], digits[len(digits) - i - 1] = digits[len(digits)\
    \ - i - 1], digits[i]\n        }\n        return fmt.Sprintf(\"%d\", digits)\n\
    \    }\n    digits = append(digits[shift:], digits[:shift]...)\n    return fmt.Sprintf(\"\
    %d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpj0ki44r3_test.go:51: expected '001', got '[1 0 0]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpj0ki44r3_test.go:51:\
    \ expected '12', got '[1 2]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpj0ki44r3_test.go:51: expected '79', got '[9 7]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpj0ki44r3_test.go:51: expected '21', got '[1 2]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpj0ki44r3_test.go:51:\
    \ expected '11', got '[1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Convert the\
    \ string to a slice of runes.\n    r := []rune(s)\n    // Reverse the slice of\
    \ runes.\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n     \
    \   r[i], r[j] = r[j], r[i]\n    }\n    // Convert the slice of runes back to\
    \ a string.\n    s = string(r)\n    // Return the string.\n    return s\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmprb4e7bny_test.go:47: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps61cqpcp_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the number\
    \ of digits in the string.\n    n := len(s)\n    // If shift > number of digits,\
    \ return digits reversed.\n    if shift > n {\n        return reverse(s)\n   \
    \ }\n    // If shift == number of digits, return digits.\n    if shift == n {\n\
    \        return s\n    }\n    // If shift < number of digits, return the digits\
    \ shifted right by shift.\n    return s[n-shift:] + s[:n-shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrbi8gn__test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[shift:], digits[:shift]...)\n    result := \"\"\n    for _,\
    \ digit := range digits {\n        result = fmt.Sprintf(\"%d%s\", digit, result)\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpdapw3vy9_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Get the length\
    \ of the string.\n    l := len(s)\n    // If shift is greater than the length\
    \ of the string, reverse the string.\n    if shift > l {\n        return reverse(s)\n\
    \    }\n    // Return the string with the last shift digits moved to the front.\n\
    \    return s[l-shift:] + s[:l-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp259_qo7k_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074596
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if x < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := []int{}\n \
    \   for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n  \
    \  }\n\n    if shift > len(digits) {\n        for i, j := 0, len(digits) - 1;\
    \ i < j; i, j = i + 1, j - 1 {\n            digits[i], digits[j] = digits[j],\
    \ digits[i]\n        }\n    } else {\n        for i := 0; i < shift; i++ {\n \
    \           digits = append(digits, digits[0])\n            digits = digits[1:]\n\
    \        }\n    }\n\n    result := \"\"\n    for i := len(digits) - 1; i >= 0;\
    \ i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    shift = shift % len(digits)\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    digits = append(digits[shift:], digits[:shift]...)\n    result\
    \ := \"\"\n    for _, digit := range digits {\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvldvc5p6_test.go:53: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpvldvc5p6_test.go:53:\
    \ expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpvldvc5p6_test.go:53: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvldvc5p6_test.go:53: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[shift:], digits[:shift]...)\n    result := \"\"\n    for _,\
    \ digit := range digits {\n        result = fmt.Sprintf(\"%d%s\", digit, result)\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpdapw3vy9_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n\n    result := \"\"\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp314c8h65_test.go:60: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    shift %= len(digits)\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    return fmt.Sprintf(\"%d\", digits[shift:] + digits[:shift])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjqjxhh8_test.go:28:36: invalid operation: operator + not defined on digits[shift:]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n     \
    \   digits = digits[1:]\n    }\n    result := \"\"\n    for i := len(digits) -\
    \ 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpmu9p6b_l_test.go:55: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Convert shift to string\n\
    \    shift_str := fmt.Sprintf(\"%d\", shift)\n    // Get length of x_str\n   \
    \ x_str_len := len(x_str)\n    // Get length of shift_str\n    shift_str_len :=\
    \ len(shift_str)\n    // If shift > number of digits, return digits reversed\n\
    \    if shift_str_len > x_str_len {\n        return reverse(x_str)\n    }\n  \
    \  // Get the number of digits to shift\n    shift_digits := x_str[x_str_len -\
    \ shift_str_len:]\n    // Get the number of digits to keep\n    keep_digits :=\
    \ x_str[:x_str_len - shift_str_len]\n    // Return the shifted digits\n    return\
    \ shift_digits + keep_digits\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n \
    \ candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74rxm5xp_test.go:26:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // If shift is\
    \ greater than the number of digits, reverse the digits.\n    if shift > len(s)\
    \ {\n        s = reverse(s)\n    } else {\n        // Split the string into two\
    \ parts.\n        a := s[:len(s) - shift]\n        b := s[len(s) - shift:]\n \
    \       // Concatenate the two parts.\n        s = b + a\n    }\n    return s\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpztpc7pk4_test.go:20:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > len(fmt.Sprintf(\"\
    %d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n    }\n    return fmt.Sprintf(\"\
    %d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp00w6ijxi_test.go:20:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []rune(fmt.Sprintf(\"\
    %d\", x))\n    if shift >= len(digits) {\n        for i, j := 0, len(digits)-1;\
    \ i < j; i, j = i+1, j-1 {\n            digits[i], digits[j] = digits[j], digits[i]\n\
    \        }\n        return string(digits)\n    }\n    return string(append(digits[len(digits)-shift:],\
    \ digits[:len(digits)-shift]...))\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpnrt54082_test.go:46: expected '12', got '21'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074597
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse the\
    \ string.\n    r := reverse(s)\n    // Get the length of the string.\n    l :=\
    \ len(r)\n    // If shift is greater than the length of the string, return the\
    \ string.\n    if shift >= l {\n        return r\n    }\n    // Return the string\
    \ with the shift applied.\n    return r[shift:] + r[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuy7yq2rk_test.go:19:10: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Get length of string\n  \
    \  l := len(s)\n    // If shift > length, reverse string\n    if shift > l {\n\
    \        // Reverse string\n        for i, j := 0, len(s)-1; i < j; i, j = i+1,\
    \ j-1 {\n            s[i], s[j] = s[j], s[i]\n        }\n        return s\n  \
    \  }\n    // Split string into two parts\n    a := s[:l-shift]\n    b := s[l-shift:]\n\
    \    // Return concatenation of b and a\n    return b + a\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpuedh4q_test.go:24:13: cannot assign to s[i] (value of type byte)

    /tmp/tmphpuedh4q_test.go:24:19: cannot assign to s[j] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074597
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse the string\n    r\
    \ := reverse(s)\n    // Shift the string\n    s = shift_string(r, shift)\n   \
    \ // Reverse the string\n    r = reverse(s)\n    return r\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6pzkrjp_test.go:19:10: undefined: reverse

    /tmp/tmpz6pzkrjp_test.go:21:9: undefined: shift_string

    /tmp/tmpz6pzkrjp_test.go:23:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074594
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9684acsv_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074592
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n        return\
    \ string(reverse(digits))\n    }\n    return string(append(digits[shift:], digits[:shift]...))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0gnachor_test.go:18:23: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        s = reverse(s)\n    } else {\n    \
    \    s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy061x7cs_test.go:18:13: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ the integer to a string.\n    s := fmt.Sprintf(\"%d\", x)\n    // If shift is\
    \ greater than the number of digits, reverse the digits.\n    if shift > len(s)\
    \ {\n        r := []rune(s)\n        for i, j := 0, len(r)-1; i < len(r)/2; i,\
    \ j = i+1, j-1 {\n            r[i], r[j] = r[j], r[i]\n        }\n        return\
    \ string(r)\n    }\n    // Otherwise, shift the digits right by shift.\n    return\
    \ s[len(s)-shift:] + s[:len(s)-shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    digits := []rune(fmt.Sprintf(\"\
    %d\", x))\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\n\
    \    return string(append(digits[len(digits) - shift:], digits[:len(digits) -\
    \ shift]...))\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpvyk5vk3w_test.go:45: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Convert string to slice\
    \ of runes\n    runes := []rune(s)\n    // Reverse the slice of runes\n    for\
    \ i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j]\
    \ = runes[j], runes[i]\n    }\n    // Convert slice of runes to string\n    s\
    \ = string(runes)\n    // Return the shifted string\n    return s[0:shift] + s[shift:]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:8] with length 2 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:8] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x8)\n\t/tmp/tmpxsh4l3g4_test.go:27\
    \ +0x10b\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpxsh4l3g4_test.go:39\
    \ +0x96\ntesting.tRunner(0xc0000da1a0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n     \
    \   digits = digits[1:]\n    }\n    result := \"\"\n    for i := len(digits) -\
    \ 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpmu9p6b_l_test.go:55: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[shift:], digits[:shift]...)\n    var result string\n\
    \    for _, digit := range digits {\n        result += fmt.Sprintf(\"%d\", digit)\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_taa520f_test.go:49: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_taa520f_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp_taa520f_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := fmt.Sprintf(\"\
    %d\", x)\n    if shift > len(s) {\n        return reverse(s)\n    }\n    return\
    \ s[shift:] + s[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cd2vtyf_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := fmt.Sprintf(\"\
    %d\", x)\n    if shift >= len(digits) {\n        return reverse(digits)\n    }\n\
    \    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi92uyqj_test.go:21:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > num_digits(x) {\n        return reverse_digits(x)\n    }\n    return fmt.Sprintf(\"\
    %d%d\", x%power(10, shift), x/power(10, shift))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmz0i2h_q_test.go:16:16: undefined: num_digits

    /tmp/tmpmz0i2h_q_test.go:17:16: undefined: reverse_digits

    /tmp/tmpmz0i2h_q_test.go:19:34: undefined: power

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ to string\n    s := fmt.Sprintf(\"%d\", x)\n    // Reverse the string\n    r\
    \ := reverse(s)\n    // Shift the string\n    s = r[0:shift] + r[shift:]\n   \
    \ // Reverse the string\n    r = reverse(s)\n    return r\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp582fihm__test.go:19:10: undefined: reverse

    /tmp/tmp582fihm__test.go:23:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits []int\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    shift %= len(digits)\n    if shift == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[0])\n        digits = digits[1:]\n    }\n    var result int\n    for\
    \ i := 0; i < len(digits); i++ {\n        result *= 10\n        result += digits[i]\n\
    \    }\n    return fmt.Sprintf(\"%d\", result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpctf1kb60_test.go:57: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpctf1kb60_test.go:57:\
    \ expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpctf1kb60_test.go:57: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpctf1kb60_test.go:57: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    var digits []int\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  var result string\n    for _, digit := range digits {\n        result += fmt.Sprintf(\"\
    %d\", digit)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp4bf0xcy7_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp4bf0xcy7_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp4bf0xcy7_test.go:52: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[shift:], digits[:shift]...)\n    var result string\n\
    \    for _, d := range digits {\n        result += fmt.Sprintf(\"%d\", d)\n  \
    \  }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp1h_klezw_test.go:49: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp1h_klezw_test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp1h_klezw_test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var result\
    \ string\n    var digit int\n    var i int\n\n    for i = 0; i < shift; i++ {\n\
    \        digit = x % 10\n        x = x / 10\n        result = fmt.Sprintf(\"%d%s\"\
    , digit, result)\n    }\n\n    if x > 0 {\n        result = fmt.Sprintf(\"%d%s\"\
    , x, result)\n    }\n\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpiyxz7o4f_test.go:50: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpiyxz7o4f_test.go:50:\
    \ expected '79', got '00000097'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpiyxz7o4f_test.go:50: expected '21', got '12'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpiyxz7o4f_test.go:50: expected\
    \ '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, 0)\n    for x > 0 {\n        digits = append(digits, x % 10)\n \
    \       x /= 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpi1nuavn9_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ >= len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf1e3qy8q_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    var result []int\n    var result_str string\n\n    for x > 0 {\n\
    \        digits = append(digits, x % 10)\n        x /= 10\n    }\n\n    if shift\
    \ > len(digits) {\n        for i := len(digits) - 1; i >= 0; i-- {\n         \
    \   result = append(result, digits[i])\n        }\n    } else {\n        for i\
    \ := shift; i < len(digits); i++ {\n            result = append(result, digits[i])\n\
    \        }\n        for i := 0; i < shift; i++ {\n            result = append(result,\
    \ digits[i])\n        }\n    }\n\n    for i := 0; i < len(result); i++ {\n   \
    \     result_str += fmt.Sprintf(\"%d\", result[i])\n    }\n\n    return result_str\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpxm1p8hok_test.go:62: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpxm1p8hok_test.go:62:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpxm1p8hok_test.go:62: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpxm1p8hok_test.go:62: expected '21', got '12'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    if shift > len(fmt.Sprintf(\"\
    %d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n    }\n    return fmt.Sprintf(\"\
    %d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp00w6ijxi_test.go:20:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[0])\n\
    \        digits = digits[1:]\n    }\n    var result string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", digits[i])\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp43lw2f59_test.go:52: expected '79', got '97'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []rune(fmt.Sprintf(\"%d\", x))\n    if shift > len(digits) {\n        for i,\
    \ j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n            digits[i], digits[j]\
    \ = digits[j], digits[i]\n        }\n        return string(digits)\n    }\n  \
    \  return string(append(digits[shift:], digits[:shift]...))\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_p_w_u1r_test.go:43: expected '001', got '010'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074594
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    x_len := len(x_str)\n\
    \    if shift > x_len {\n        // Reverse the string\n        x_rev := make([]byte,\
    \ x_len)\n        for i := 0; i < x_len; i++ {\n            x_rev[i] = x_str[x_len\
    \ - i - 1]\n        }\n        return string(x_rev)\n    }\n    return x_str[shift:]\
    \ + x_str[:shift]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp0fqn4hh9_test.go:47: expected '001', got '010'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074598
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ fmt.Sprintf(\"%d\", x)\n    if shift > len(digits) {\n        return reverse(digits)\n\
    \    }\n    return digits[shift:] + digits[:shift]\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp832sgdoj_test.go:18:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    var digits\
    \ []int\n    for x > 0 {\n        digits = append(digits, x % 10)\n        x /=\
    \ 10\n    }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n\
    \    digits = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n\
    \    var result string\n    for _, d := range digits {\n        result += fmt.Sprintf(\"\
    %d\", d)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmphtqpeb3__test.go:49: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmphtqpeb3__test.go:49:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmphtqpeb3__test.go:49: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074599
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []rune(fmt.Sprintf(\"\
    %d\", x))\n    if shift > len(digits) {\n        return fmt.Sprintf(\"%s\", string(reverse(digits)))\n\
    \    }\n    return fmt.Sprintf(\"%s%s\", string(digits[shift:]), string(digits[:shift]))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprs6pzpna_test.go:21:41: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ == 0 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    digits := []int{}\n\
    \    for x > 0 {\n        digits = append(digits, x % 10)\n        x /= 10\n \
    \   }\n    if shift > len(digits) {\n        shift = len(digits)\n    }\n    digits\
    \ = append(digits[len(digits) - shift:], digits[:len(digits) - shift]...)\n  \
    \  result := \"\"\n    for _, d := range digits {\n        result += fmt.Sprintf(\"\
    %d\", d)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp633ovf5m_test.go:52: expected '001', got '010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp633ovf5m_test.go:52:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp633ovf5m_test.go:52: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074596
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    // Convert\
    \ x to string\n    x_str := fmt.Sprintf(\"%d\", x)\n    // Get length of x\n \
    \   x_len := len(x_str)\n    // If shift > number of digits, return digits reversed\n\
    \    if shift > x_len {\n        return reverse(x_str)\n    }\n    // Get the\
    \ first shift digits of x\n    first_digits := x_str[:shift]\n    // Get the last\
    \ x_len - shift digits of x\n    last_digits := x_str[shift:]\n    // Concatenate\
    \ the last digits and the first digits\n    return last_digits + first_digits\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdtvfo3rj_test.go:22:16: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074598
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(fmt.Sprintf(\"%d\", x)) {\n        return fmt.Sprintf(\"%d\", x)[::-1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", x)[shift:] + fmt.Sprintf(\"%d\", x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps3aimedr_test.go:17:37: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
