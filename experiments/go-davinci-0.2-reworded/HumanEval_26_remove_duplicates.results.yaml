language: go_test.go
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpud9kin3n_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var unique []int\n    for _, number := range numbers {\n        if !contains(unique,\
    \ number) {\n            unique = append(unique, number)\n        }\n    }\n \
    \   return unique\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoox1kgk6_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpicgi5r5d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num :=\
    \ range numbers {\n        if !seen[num] {\n            seen[num] = true\n   \
    \         result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpyb2u6wa5_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    var result\
    \ []int\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] != numbers[i-1] {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpd6n94gd7_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    m := make(map[int]bool)\n    for _, v := range\
    \ numbers {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp2h9u6r4g_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _,\
    \ number := range numbers {\n        if !seen[number] {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp1jxzoows_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpud9kin3n_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpicgi5r5d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num :=\
    \ range numbers {\n        if !seen[num] {\n            seen[num] = true\n   \
    \         result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpyb2u6wa5_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, num := range numbers {\n        if !contains(result,\
    \ num) {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa30m8g2x_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var m = make(map[int]bool)\n    for _, number :=\
    \ range numbers {\n        if _, ok := m[number]; !ok {\n            m[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpw860zisx_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers))\n    result = append(result, numbers[0])\n    for\
    \ _, n := range numbers[1:] {\n        if n != result[len(result)-1] {\n     \
    \       result = append(result, n)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpvvo9_f7t_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    var result\
    \ []int\n    result = append(result, numbers[0])\n    for _, number := range numbers[1:]\
    \ {\n        if number != result[len(result)-1] {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp74ydrpbi_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpud9kin3n_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var unique []int\n    for _, number := range numbers {\n        if !contains(unique,\
    \ number) {\n            unique = append(unique, number)\n        }\n    }\n \
    \   return unique\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoox1kgk6_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    var result\
    \ []int\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] != numbers[i-1] {\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpd6n94gd7_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, v := range numbers {\n        if !contains(result,\
    \ v) {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto0ejhce_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := make(map[int]bool)\n    for _, number :=\
    \ range numbers {\n        if !seen[number] {\n            result = append(result,\
    \ number)\n            seen[number] = true\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpbqtq5wny_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    seen := make(map[int]bool)\n    for _, number :=\
    \ range numbers {\n        if _, ok := seen[number]; !ok {\n            result\
    \ = append(result, number)\n            seen[number] = true\n        }\n    }\n\
    \    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp3a3ompeo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var numbers_map = make(map[int]bool)\n    for _,\
    \ number := range numbers {\n        if _, ok := numbers_map[number]; !ok {\n\
    \            result = append(result, number)\n            numbers_map[number]\
    \ = true\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpjfuyd8qo_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers))\n    result = append(result, numbers[0])\n    for\
    \ _, number := range numbers[1:] {\n        if number != result[len(result)-1]\
    \ {\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpykto5axr_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var m = make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if _, ok := m[n]; !ok {\n            m[n] = true\n      \
    \      result = append(result, n)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp1hjvn_2t_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    var result\
    \ []int\n    result = append(result, numbers[0])\n    for _, number := range numbers[1:]\
    \ {\n        if number != result[len(result)-1] {\n            result = append(result,\
    \ number)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp74ydrpbi_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var m = make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if _, ok := m[n]; !ok {\n            m[n] = true\n      \
    \      result = append(result, n)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp1hjvn_2t_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    // TODO: Implement me\n    return numbers\n}\n\nfunc TestRemove_Duplicates(t\
    \ *testing.T) {\n  candidate := remove_duplicates\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmptdzwj9jv_test.go:32: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result :=\
    \ make([]int, 0, len(numbers))\n    result = append(result, numbers[0])\n    for\
    \ _, v := range numbers[1:] {\n        if v != result[len(result)-1] {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp5xd5b0d8_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    result := []int{}\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuskxgfsn_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, n := range numbers {\n        if !contains(result,\
    \ n) {\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxzizqhi_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if seen[n] {\n            continue\n        }\n   \
    \     seen[n] = true\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpicgi5r5d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var m = make(map[int]bool)\n    for _, v := range\
    \ numbers {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpvpmvohwi_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var m = make(map[int]bool)\n    for _, n := range\
    \ numbers {\n        if _, ok := m[n]; !ok {\n            m[n] = true\n      \
    \      result = append(result, n)\n        }\n    }\n    return result\n}\n\n\
    func TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmp1hjvn_2t_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if !seen[number] {\n            seen[number] = true\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpp522v2gy_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    for _, number := range numbers {\n        if !contains(result,\
    \ number) {\n            result = append(result, number)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate\
    \ := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected:\
    \ []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplz896dh0_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, n :=\
    \ range numbers {\n        if !seen[n] {\n            seen[n] = true\n       \
    \     result = append(result, n)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpneh2cy_0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, number\
    \ := range numbers {\n        if _, ok := seen[number]; !ok {\n            seen[number]\
    \ = true\n            result = append(result, number)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n  candidate := remove_duplicates\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}), expected: []int{1, 4, 5}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpspv3qzc8_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// From a list of integers, remove all elements that occur more than once.\n\
    // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1,\
    \ 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int\
    \ {\n    var result []int\n    var found map[int]bool = make(map[int]bool)\n \
    \   for _, number := range numbers {\n        if !found[number] {\n          \
    \  result = append(result, number)\n            found[number] = true\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestRemove_Duplicates(t *testing.T) {\n\
    \  candidate := remove_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ []int{1, 2, 3, 4} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 3, 5}),\
    \ expected: []int{1, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRemove_Duplicates (0.00s)\n    --- FAIL: TestRemove_Duplicates/test_num__2\
    \ (0.00s)\n        tmpr3wf2y_1_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
