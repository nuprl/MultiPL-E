language: go_test.go
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if !(txt[i]\
    \ >= 'a' && txt[i] <= 'z' || txt[i] >= 'A' && txt[i] <= 'Z') {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyy3xlx7v_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyy3xlx7v_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyy3xlx7v_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-2] == ' ' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmph7b4xlfp_test.go:28\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmph7b4xlfp_test.go:44 +0x25\ntesting.tRunner(0xc000199040, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    for i := len(txt) - 1; i >=\
    \ 0; i-- {\n        if txt[i] == ' ' {\n            return false\n        }\n\
    \        if txt[i] < 'a' || txt[i] > 'z' {\n            return false\n       \
    \ }\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpa6iolx0s_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpa6iolx0s_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpa6iolx0s_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpa6iolx0s_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    return txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1] >= 'A' && txt[len(txt)-1] <=\
    \ 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpo38o8qwf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpo38o8qwf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpo38o8qwf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp_0xrut0a_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-2] == ' ' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmph7b4xlfp_test.go:28\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmph7b4xlfp_test.go:44 +0x25\ntesting.tRunner(0xc000199040, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    for i := len(txt) - 1; i >=\
    \ 0; i-- {\n        if txt[i] == ' ' {\n            return false\n        }\n\
    \        if txt[i] >= 'a' && txt[i] <= 'z' || txt[i] >= 'A' && txt[i] <= 'Z' {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for _, v := range txt {\n        if v ==\
    \ ' ' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpx0hqe_a5_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1 (0.00s)\n      \
    \  tmpx0hqe_a5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpx0hqe_a5_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        if\
    \ len(txt) == 1 {\n            return true\n        }\n        if txt[len(txt)-2]\
    \ == ' ' {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := 0; i < len(txt)-1; i++ {\n    \
    \    if txt[i] == ' ' && txt[i+1] == txt[len(txt)-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp0gh5qlfi_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1 (0.00s)\n      \
    \  tmp0gh5qlfi_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp0gh5qlfi_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp0gh5qlfi_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    for i := len(txt) - 1; i >=\
    \ 0; i-- {\n        if txt[i] == ' ' {\n            return false\n        }\n\
    \        if txt[i] >= 'a' && txt[i] <= 'z' || txt[i] >= 'A' && txt[i] <= 'Z' {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpwoqxc5kc_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-2] == ' ' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmph7b4xlfp_test.go:28\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmph7b4xlfp_test.go:44 +0x25\ntesting.tRunner(0xc000199040, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    return (txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z') || (txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z')\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmph3ilt7zo_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmph3ilt7zo_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmph3ilt7zo_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n\
    \    if lastChar >= 'a' && lastChar <= 'z' {\n        return true\n    }\n   \
    \ if lastChar >= 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z' {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpc2lqlbeo_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n\
    \    if lastChar >= 'a' && lastChar <= 'z' {\n        return true\n    }\n   \
    \ if lastChar >= 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            break\n        }\n        if txt[i] < 'a'\
    \ || txt[i] > 'z' {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp0r65_piu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp0r65_piu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp0r65_piu_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp0r65_piu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] < 'a' ||\
    \ txt[len(txt)-1] > 'z' {\n        return false\n    }\n    if len(txt) > 1 &&\
    \ txt[len(txt)-2] != ' ' {\n        return false\n    }\n    return true\n}\n\n\
    func TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3\
    \ (0.00s)\n        tmparl0yxgx_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    if txt[len(txt)-2] == ' ' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmph7b4xlfp_test.go:28\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmph7b4xlfp_test.go:44 +0x25\ntesting.tRunner(0xc000199040, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n\
    \    if lastChar >= 'a' && lastChar <= 'z' {\n        return true\n    }\n   \
    \ if lastChar >= 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpf73fqfpz_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1:]\n\
    \    if lastChar == \" \" {\n        return false\n    }\n    return lastChar\
    \ >= \"a\" && lastChar <= \"z\" || lastChar >= \"A\" && lastChar <= \"Z\"\n}\n\
    \nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpvrtsbhrw_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpvrtsbhrw_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpvrtsbhrw_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return txt[len(txt)-1] >= 'a' && txt[len(txt)-1]\
    \ <= 'z' || txt[len(txt)-1] >= 'A' && txt[len(txt)-1] <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpxihb2opi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpxihb2opi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpxihb2opi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for i := len(txt)-1; i >= 0; i-- {\n   \
    \     if txt[i] == ' ' {\n            return true\n        }\n        if txt[i]\
    \ < 'a' || txt[i] > 'z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpyb8jimj__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    for _, v := range txt {\n        if v ==\
    \ ' ' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpx0hqe_a5_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1 (0.00s)\n      \
    \  tmpx0hqe_a5_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpx0hqe_a5_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp4anqzzev_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last_char := txt[len(txt)-1]\n\
    \    if last_char >= 'a' && last_char <= 'z' {\n        return true\n    }\n \
    \   if last_char >= 'A' && last_char <= 'Z' {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpodi2a18w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >= 'a'\
    \ && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp3s2oy5gq_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp70sw96ut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n\
    // false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
    \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
    \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    if\
    \ len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] == ' '\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpt5z3xfne_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
