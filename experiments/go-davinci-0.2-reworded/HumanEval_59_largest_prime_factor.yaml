name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var largest int\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            n /= i\n            i = 1\n \
    \       }\n    }\n    return largest\n}\n", "    // TODO: Implement me!\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n   \
    \     if n % i == 0 {\n            return largest_prime_factor(n / i)\n      \
    \  }\n    }\n    return n\n}\n", "    // TODO: implement me\n    return 0\n}\n",
  "    // TODO: implement me\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // TODO: implement this function\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // Start with the smallest prime factor, 2.\n    factor\
    \ := 2\n    for n > 1 {\n        // If n is divisible by factor, divide it out.\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ Move on to the next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime number.\n    factor := 2\n    for n > 1 {\n        if\
    \ n % factor == 0 {\n            n /= factor\n        } else {\n            factor\
    \ += 1\n        }\n    }\n    return factor\n}\n", "    // TODO: implement\n \
    \   return 0\n}\n", "    var largest_prime int = 1\n    var i int = 2\n    for\
    \ i * i <= n {\n        if n % i == 0 {\n            largest_prime = i\n     \
    \       n /= i\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ n > 1 {\n        largest_prime = n\n    }\n    return largest_prime\n}\n", " \
    \   var i int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n       \
    \     n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    // Find the largest prime factor of n.\n    //\n    // The largest\
    \ prime factor of n is the largest prime number that divides n.\n    //\n    //\
    \ The prime factors of n are the prime numbers that divide n.\n    //\n    //\
    \ A prime number is a number that is only divisible by 1 and itself.\n    //\n\
    \    // A number is divisible by another number if the remainder is 0.\n    //\n\
    \    // The remainder of n divided by d is n % d.\n    //\n    // The largest\
    \ number that divides n is n.\n    //\n    // The smallest number that divides\
    \ n is 1.\n    //\n    // The smallest number that divides n evenly is a factor\
    \ of n.\n    //\n    // The largest number that divides n evenly is a factor of\
    \ n.\n    //\n    // The smallest number that divides n evenly and is a prime\
    \ number is the\n    // smallest prime factor of n.\n    //\n    // The largest\
    \ number that divides n evenly and is a prime number is the\n    // largest prime\
    \ factor of n.\n    //\n    // The smallest prime factor of n is the smallest\
    \ prime number that divides\n    // n.\n    //\n    // The largest prime factor\
    \ of n is the largest prime number that divides n.\n    //\n    // The smallest\
    \ prime factor of n is the smallest prime number that divides\n    // n.\n   \
    \ //\n    // The largest prime factor of n is the largest prime number that divides\
    \ n.\n    //\n    // The smallest prime factor of n is the smallest prime number\
    \ that divides\n    // n.\n    //\n    // The largest prime factor of n is the\
    \ largest prime number that divides n.\n    //\n    // The smallest prime factor\
    \ of n is the smallest prime number that divides\n    // n.\n    //\n    // The\
    \ largest prime factor of n is the largest prime number that divides n.\n    //\n\
    \    // The smallest prime factor of n is the smallest prime number that divides\n\
    \    // n.\n    //\n    // The largest prime factor of n is the largest prime\
    \ number that divides n.\n    //\n    // The smallest prime factor of n is the\
    \ smallest prime number that divides\n    // n.\n    //\n    // The largest prime\
    \ factor of n is the largest prime number that divides n.\n    //\n   ", "   \
    \ var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // Start with the smallest prime factor and work our way up.\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO\n    return 0\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    if n <= 1 {\n        return 0\n    }\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n\
    \    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "   \
    \ var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // Start\
    \ with the smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n     \
    \   // If n is divisible by factor, divide it out.\n        if n % factor == 0\
    \ {\n            n /= factor\n        } else {\n            // Otherwise, increment\
    \ the factor.\n            factor += 1\n        }\n    }\n    return factor\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Start with the smallest prime number, 2.\n    factor := 2\n    for\
    \ n > 1 {\n        // If n is divisible by factor, divide it out.\n        for\
    \ n % factor == 0 {\n            n /= factor\n        }\n        // Move to the\
    \ next prime number.\n        factor += 1\n    }\n    return factor\n}\n", " \
    \   var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n        \
    \    n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Check the next factor.\n        factor += 1\n    }\n  \
    \  return factor\n}\n", "    // TODO\n    return 0\n}\n", "    // TODO: Implement\
    \ this function.\n    return 0\n}\n", "    // Start with the largest possible\
    \ factor and work down to the smallest\n    // possible factor.\n    for i :=\
    \ n / 2; i > 1; i-- {\n        // If i is a factor of n, then i is prime iff n\
    \ / i is not a factor of n.\n        if n % i == 0 && n % (n / i) != 0 {\n   \
    \         return i\n        }\n    }\n    return 1\n}\n", "    // Start with the\
    \ smallest prime number, 2.\n    for i := 2; i < n; i++ {\n        // If n is\
    \ divisible by i, then i is a factor of n.\n        if n % i == 0 {\n        \
    \    // If i is a factor of n, then n/i is also a factor of n.\n            //\
    \ If n/i is a factor of n, then n/i is not a prime number.\n            // If\
    \ n/i is not a prime number, then n/i has a factor.\n            // If n/i has\
    \ a factor, then the largest factor of n/i is the largest factor of n.\n     \
    \       return largest_prime_factor(n / i)\n        }\n    }\n    // If n is not\
    \ divisible by any number, then n is a prime number.\n    return n\n}\n", "  \
    \  largest := 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n    \
    \        largest = i\n            n /= i\n            i = 1\n        }\n    }\n\
    \    return largest\n}\n", "    // TODO\n    return 0\n}\n", "    i := 2\n   \
    \ for ; n % i != 0; i++ {\n    }\n    if n == i {\n        return n\n    }\n \
    \   return largest_prime_factor(n / i)\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    // Keep going until we're done.\n   \
    \ for n > 1 {\n        // If n is divisible by factor, divide it out.\n      \
    \  for n % factor == 0 {\n            n /= factor\n        }\n        // Next\
    \ factor.\n        factor += 1\n    }\n    // The last factor is the largest.\n\
    \    return factor\n}\n", "    var i int\n    for i = 2; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            n /= i\n            i--\n        }\n    }\n \
    \   return i\n}\n", "    var largest_prime int\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            largest_prime = i\n            n /= i\n\
    \            i = 1\n        }\n    }\n    return largest_prime\n}\n", "    var\
    \ largest_prime int\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           largest_prime = i\n            n = n / i\n            i = 1\n    \
    \    }\n    }\n    return largest_prime\n}\n", "    var i int = 2\n    for i <\
    \ n {\n        if n % i == 0 {\n            n = n / i\n        } else {\n    \
    \        i += 1\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ i\n}\n", "    // TODO: implement me\n    return 0\n}\n", "    // Start with\
    \ the smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n        //\
    \ If n is divisible by factor, divide it out.\n        for n % factor == 0 {\n\
    \            n /= factor\n        }\n        // Next factor.\n        factor +=\
    \ 1\n    }\n    return factor\n}\n", "    // Start with the smallest prime factor.\n\
    \    factor := 2\n    for n > 1 {\n        // If n is divisible by factor, divide\
    \ it out.\n        for n % factor == 0 {\n            n /= factor\n        }\n\
    \        // Move on to the next factor.\n        factor += 1\n    }\n    return\
    \ factor\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n     \
    \       return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest_prime = i\n            n = n / i\n            i = 1\n\
    \        }\n    }\n    return largest_prime\n}\n", "    var i int\n    for i =\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n  \
    \  }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    //\
    \ Find the smallest prime factor of n.\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            // Divide n by the smallest prime factor.\n   \
    \         n /= i\n            // Continue to find the smallest prime factor of\
    \ n.\n            i--\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    if n <= 1 {\n        return -1\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n    \
    \        return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Start with the smallest prime factor.\n    factor := 2\n    for\
    \ n > 1 {\n        // If n is divisible by factor, divide it out.\n        for\
    \ n % factor == 0 {\n            n /= factor\n        }\n        // Move on to\
    \ the next prime.\n        factor++\n    }\n    return factor - 1\n}\n", "   \
    \ var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    var largest\
    \ int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n            n /= i\n            i--\n        }\n    }\n    return largest\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // TODO:\
    \ implement this function\n    return 0\n}\n", "    var i int = 2\n    for ; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    if n == 1 {\n        return\
    \ 1\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n        \
    \    return largest_prime_factor(n / i)\n        }\n    }\n\n    return n\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    // Start with the smallest prime factor, 2.\n    factor := 2\n    // Keep dividing\
    \ by the smallest prime factor until we can't anymore.\n    for n % factor ==\
    \ 0 {\n        n /= factor\n    }\n    // Now factor is the next prime number.\n\
    \    factor = 3\n    // Keep dividing by the smallest prime factor until we can't\
    \ anymore.\n    for n % factor == 0 {\n        n /= factor\n    }\n    // Now\
    \ factor is the next prime number.\n    factor = 5\n    // Keep dividing by the\
    \ smallest prime factor until we can't anymore.\n    for n % factor == 0 {\n \
    \       n /= factor\n    }\n    // Now factor is the next prime number.\n    factor\
    \ = 7\n    // Keep dividing by the smallest prime factor until we can't anymore.\n\
    \    for n % factor == 0 {\n        n /= factor\n    }\n    // Now factor is the\
    \ next prime number.\n    factor = 11\n    // Keep dividing by the smallest prime\
    \ factor until we can't anymore.\n    for n % factor == 0 {\n        n /= factor\n\
    \    }\n    // Now factor is the next prime number.\n    factor = 13\n    // Keep\
    \ dividing by the smallest prime factor until we can't anymore.\n    for n % factor\
    \ == 0 {\n        n /= factor\n    }\n    // Now factor is the next prime number.\n\
    \    factor = 17\n    // Keep dividing by the smallest prime factor until we can't\
    \ anymore.\n    for n % factor == 0 {\n        n /= factor\n    }\n    // Now\
    \ factor is the next prime number.\n    factor = 19\n    // Keep dividing by the\
    \ smallest prime factor until we can't anymore.\n    for n % factor == 0 {\n \
    \       n /= factor\n    }\n    // Now factor is the next prime number.\n    factor\
    \ = 23\n    // Keep dividing by the smallest prime factor until we can't anymore.\n\
    \    for n % factor == 0 {\n        n /= factor\n    }\n    // Now factor is the\
    \ next prime number.\n    factor = 29\n    // Keep dividing by the smallest prime\
    \ factor until we can't anymore.\n    for n % factor == 0 {\n        n /= factor\n\
    \    }\n    // Now factor is the next prime number.", "    // Find the first factor\
    \ of n.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            //\
    \ If i is a factor of n, then n/i is a factor of n.\n            // Return the\
    \ largest of the two factors.\n            return max(i, largest_prime_factor(n/i))\n\
    \        }\n    }\n    // If no factor is found, n is prime.\n    return n\n}\n",
  "    // Start with the smallest prime factor, 2.\n    factor := 2\n    for n > 1\
    \ {\n        // If n is divisible by factor, divide it out.\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        // Move to the next factor.\n\
    \        factor += 1\n    }\n    return factor\n}\n", "    for i := 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n /\
    \ i)\n        }\n    }\n    return n\n}\n", "    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n  \
    \          i--\n        }\n    }\n    return i\n}\n", "    if n == 1 {\n     \
    \   return 1\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Find the smallest prime factor of n.\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            // If i is the largest prime factor\
    \ of n, return it.\n            if n / i == 1 {\n                return i\n  \
    \          }\n            // Otherwise, find the largest prime factor of n / i.\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ 0\n}\n", "    // TODO: implement me\n    return 0\n}\n", "    var largest int\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest =\
    \ i\n            n /= i\n            i = 1\n        }\n    }\n    return largest\n\
    }\n", "    var i int = 2\n    var max int = 0\n    for ; i < n; i++ {\n      \
    \  if n % i == 0 {\n            if is_prime(i) {\n                max = i\n  \
    \          }\n        }\n    }\n    return max\n}\n", "    var i int = 2\n   \
    \ for ; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var largest_factor int\n  \
    \  for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest_factor\
    \ = i\n            n /= i\n            i = 1\n        }\n    }\n    return largest_factor\n\
    }\n", "    var largest int\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n            n = n / i\n            i = 1\n   \
    \     }\n    }\n    return largest\n}\n", "    // Start with the smallest prime\
    \ factor\n    factor := 2\n    // Keep dividing by the smallest prime factor until\
    \ it is no longer a factor\n    for n % factor == 0 {\n        n /= factor\n \
    \   }\n    // The largest prime factor is the largest factor\n    return n\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO\n    return 0\n}\n", "    //\
    \ Start with the smallest prime number, 2.\n    factor := 2\n    for n > 1 {\n\
    \        // If n is divisible by factor, divide it out.\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        // Move on to the next prime\
    \ number.\n        factor++\n    }\n    return factor - 1\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO: implement me\n    return 0\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    // Start with the smallest prime factor,\
    \ 2.\n    largest_prime_factor := 2\n    for i := 3; i <= n; i += 2 {\n      \
    \  if n % i == 0 {\n            largest_prime_factor = i\n            n /= i\n\
    \        }\n    }\n    return largest_prime_factor\n}\n", "    var i int = 2\n\
    \    for i < n {\n        if n % i == 0 {\n            n = n / i\n        } else\
    \ {\n            i++\n        }\n    }\n    return n\n}\n", "    // TODO\n   \
    \ return 0\n}\n", "    // Start with the smallest prime factor, 2.\n    factor\
    \ := 2\n    for n > 1 {\n        // If n is divisible by factor, divide it out.\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ Move on to the next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // TODO: Implement me!\n    return 0\n}\n", "    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n      \
    \  }\n    }\n    return n\n}\n", "    // TODO: Implement this function.\n    return\
    \ 0\n}\n", "    var i int = 2\n    for i * i <= n {\n        if n % i == 0 {\n\
    \            n /= i\n        } else {\n            i++\n        }\n    }\n   \
    \ return n\n}\n", "    // TODO\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    var largest int\n    for i := 2; i <= n; i++ {\n   \
    \     if n % i == 0 {\n            largest = i\n            n /= i\n         \
    \   i--\n        }\n    }\n    return largest\n}\n", "    var i int\n    for i\
    \ = 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    if n < 2 {\n        return\
    \ 0\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   var i int = 2\n    var largest int = 0\n    for i * i <= n {\n        if n\
    \ % i == 0 {\n            largest = i\n            n /= i\n        } else {\n\
    \            i += 1\n        }\n    }\n    if n > 1 {\n        largest = n\n \
    \   }\n    return largest\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // TODO: Implement me!\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    var largest_prime int\n    for i := 2; i <= n; i++ {\n        if n % i == 0\
    \ {\n            largest_prime = i\n            n /= i\n            i = 1\n  \
    \      }\n    }\n    return largest_prime\n}\n", "    var i int\n    for i = 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n\
    \        }\n    }\n    return i\n}\n", "    // TODO\n    return 0\n}\n", "   \
    \ var largest int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n  \
    \          largest = i\n            n /= i\n            i--\n        }\n    }\n\
    \    return largest\n}\n", "    // Start with the smallest prime.\n    factor\
    \ := 2\n    for n % factor != 0 {\n        factor += 1\n    }\n    // If n is\
    \ prime, return n.\n    if n == factor {\n        return n\n    }\n    // Otherwise,\
    \ return the largest prime factor of n/factor.\n    return largest_prime_factor(n\
    \ / factor)\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var largest\
    \ int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n            n /= i\n            i--\n        }\n    }\n    return largest\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime number, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Move on to the next prime number.\n        factor++\n \
    \   }\n    return factor - 1\n}\n", "    // TODO: Implement me!\n    return 0\n\
    }\n", "    // TODO: implement this function\n    return 0\n}\n", "    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int = 2\n    var largest int = 1\n    for i * i <= n {\n\
    \        if n % i == 0 {\n            largest = i\n            n /= i\n      \
    \  } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n        largest\
    \ = n\n    }\n    return largest\n}\n", "    // TODO: implement\n    return 0\n\
    }\n", "    // TODO: implement me\n    return 0\n}\n", "    var i int\n    for\
    \ i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n         \
    \   i--\n        }\n    }\n    return i\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // Start with the smallest prime factor, 2.\n    factor := 2\n\
    \    for n > 1 {\n        // If n is divisible by factor, divide it out.\n   \
    \     for n % factor == 0 {\n            n /= factor\n        }\n        // Try\
    \ the next factor.\n        factor += 1\n    }\n    return factor\n}\n", "   \
    \ for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If factor divides\
    \ n, then n is not prime.\n        if n % factor == 0 {\n            // Divide\
    \ n by factor and continue.\n            n /= factor\n        } else {\n     \
    \       // Factor does not divide n, so try the next prime.\n            factor\
    \ += 1\n        }\n    }\n    return factor\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        if n % factor == 0 {\n            n /= factor\n\
    \        } else {\n            // Otherwise, increment factor by 1.\n        \
    \    factor += 1\n        }\n    }\n    return factor\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            break\n   \
    \     }\n    }\n    if i == n {\n        return n\n    }\n    return largest_prime_factor(n\
    \ / i)\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // Start with the smallest prime factor and work up.\n    for i := 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n /\
    \ i)\n        }\n    }\n    return n\n}\n", "    // Find the largest prime factor\
    \ of n.\n    //\n    // First, find the smallest prime factor of n.\n    // Then,\
    \ divide n by that factor.\n    // Repeat until n is prime.\n    //\n    // This\
    \ is O(n^2) time.\n    //\n    // We can do better.\n    //\n    // We can use\
    \ the fact that the largest prime factor of n must be less than\n    // or equal\
    \ to sqrt(n).\n    //\n    // We can also use the fact that if n is not prime,\
    \ then it must have a\n    // prime factor less than or equal to sqrt(n).\n  \
    \  //\n    // So, we can iterate over the primes less than or equal to sqrt(n),\
    \ and\n    // check if each is a factor of n.\n    //\n    // This is O(n^(1/2))\
    \ time.\n    //\n    // We can do better.\n    //\n    // We can use the fact\
    \ that if n is not prime, then it must have a prime\n    // factor less than or\
    \ equal to sqrt(n).\n    //\n    // So, we can iterate over the primes less than\
    \ or equal to sqrt(n), and\n    // check if each is a factor of n.\n    //\n \
    \   // This is O(n^(1/2)) time.\n    //\n    // We can do better.\n    //\n  \
    \  // We can use the fact that if n is not prime, then it must have a prime\n\
    \    // factor less than or equal to sqrt(n).\n    //\n    // So, we can iterate\
    \ over the primes less than or equal to sqrt(n), and\n    // check if each is\
    \ a factor of n.\n    //\n    // This is O(n^(1/2)) time.\n    //\n    // We can\
    \ do better.\n    //\n    // We can use the fact that if n is not prime, then\
    \ it must have a prime\n    // factor less than or equal to sqrt(n).\n    //\n\
    \    // So, we can iterate over the primes less than or equal to sqrt(n), and\n\
    \    // check if each is a factor of n.\n    //\n    //", "    // Start with the\
    \ largest prime factor, 2.\n    largest_prime_factor := 2\n    for i := 3; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            largest_prime_factor = i\n  \
    \          n /= i\n        }\n    }\n    return largest_prime_factor\n}\n", " \
    \   // TODO: implement this function\n    return 0\n}\n", "    // Start with the\
    \ smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n\
    \ is divisible by factor, divide it out and keep going.\n        for n % factor\
    \ == 0 {\n            n /= factor\n        }\n        // Otherwise, try the next\
    \ number up.\n        factor += 1\n    }\n    return factor\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            n /= i\n            i--\n        }\n   \
    \ }\n    return i\n}\n", "    // TODO\n    return 0\n}\n", "    var i int\n  \
    \  for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n    \
    \        i--\n        }\n    }\n    return i\n}\n", "    // TODO\n    return 0\n\
    }\n", "    var i int = 2\n    for ; i < n; i++ {\n        if n % i == 0 {\n  \
    \          return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Start with the smallest prime number, 2.\n    factor := 2\n    for\
    \ n > 1 {\n        if n % factor == 0 {\n            n /= factor\n        } else\
    \ {\n            factor += 1\n        }\n    }\n    return factor\n}\n", "   \
    \ var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // Start with the smallest prime number.\n    p := 2\n    // Keep dividing\
    \ by p until n is no longer divisible by p.\n    for n % p == 0 {\n        n /=\
    \ p\n    }\n    // p is now the largest prime factor of n.\n    return p\n}\n",
  "    // Start with the smallest prime number, 2.\n    factor := 2\n    for n > 1\
    \ {\n        if n % factor == 0 {\n            n /= factor\n        } else {\n\
    \            factor += 1\n        }\n    }\n    return factor\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime number.\n    factor := 2\n    // Keep dividing by the smallest prime number\
    \ until it is no longer a factor.\n    for n % factor == 0 {\n        n /= factor\n\
    \    }\n    // Now we know that the largest prime factor is less than n.\n   \
    \ // We can start with the next prime number.\n    factor = 3\n    // Keep dividing\
    \ by the next prime number until it is no longer a factor.\n    for n > 1 {\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ We can skip even numbers because they are not prime.\n        factor += 2\n\
    \    }\n    // The last factor we found is the largest prime factor.\n    return\
    \ factor - 2\n}\n", "    i := 2\n    for i * i <= n {\n        if n % i == 0 {\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return n\n}\n", "    var i int = 2\n    for ; i < n; i++ {\n        if n\
    \ % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ i\n}\n", "    // TODO: implement this function\n    return 0\n}\n", "    var\
    \ i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    if n <= 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n    \
    \        return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Start with the smallest prime number, 2.\n    // Keep dividing n\
    \ by 2 until it is no longer divisible by 2.\n    // Then, increment the prime\
    \ number by 1.\n    // Repeat until the prime number is greater than the square\
    \ root of n.\n    // The last prime number is the largest prime factor of n.\n\
    \    prime := 2\n    for prime <= n/prime {\n        for n % prime == 0 {\n  \
    \          n /= prime\n        }\n        prime++\n    }\n    return n\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n   \
    \     if n % i == 0 {\n            return largest_prime_factor(n / i)\n      \
    \  }\n    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // First, find the smallest prime factor of n.\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            // Then, recursively find the largest\
    \ prime factor of n/i.\n            return largest_prime_factor(n / i)\n     \
    \   }\n    }\n    // If n is prime, then n is the largest prime factor of n.\n\
    \    return n\n}\n", "    // TODO: implement this\n    return 0\n}\n", "    var\
    \ i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /=\
    \ i\n            i--\n        }\n    }\n    return i\n}\n", "    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO: implement this function\n  \
    \  return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n  \
    \          return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    var i int = 2\n    var largest int = 0\n    for i * i <= n {\n    \
    \    if n % i == 0 {\n            largest = i\n            n /= i\n        } else\
    \ {\n            i++\n        }\n    }\n    if n > 1 {\n        largest = n\n\
    \    }\n    return largest\n}\n", "    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n  \
    \          i--\n        }\n    }\n    return i\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var i int = 2\n    for i < n {\n        if n % i == 0 {\n    \
    \        n = n / i\n        } else {\n            i++\n        }\n    }\n    return\
    \ n\n}\n", "    // TODO: implement me\n    return 0\n}\n", "    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int\n    for i = 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n  \
    \  return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ i\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // TODO\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    var\
    \ largest_prime int\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            largest_prime = i\n            n /= i\n            i = 1\n      \
    \  }\n    }\n    return largest_prime\n}\n", "    for i := 2; i < n; i++ {\n \
    \       if n % i == 0 {\n            return largest_prime_factor(n / i)\n    \
    \    }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n    return 0\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    // Find the largest prime\
    \ factor of n.\n    //\n    // First, find the smallest prime factor of n.\n \
    \   // Then, divide n by that prime factor.\n    // Repeat until n is a prime\
    \ number.\n    //\n    // The largest prime factor of n is the last prime factor\
    \ found.\n    //\n    // If n is a prime number, then the largest prime factor\
    \ of n is n.\n    //\n    // If n is 1, then the largest prime factor of n is\
    \ 1.\n    //\n    // If n is less than 1, then the largest prime factor of n is\
    \ undefined.\n    //\n    // If n is not an integer, then the largest prime factor\
    \ of n is undefined.\n    //\n    // If n is not a real number, then the largest\
    \ prime factor of n is undefined.\n    //\n    // If n is not a number, then the\
    \ largest prime factor of n is undefined.\n    //\n    // If n is not a number,\
    \ then the largest prime factor of n is undefined.\n    //\n    // If n is not\
    \ a number, then the largest prime factor of n is undefined.\n    //\n    // If\
    \ n is not a number, then the largest prime factor of n is undefined.\n    //\n\
    \    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If n is not a number, then the largest prime factor of n is undefined.\n\
    \    //\n    // If"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
