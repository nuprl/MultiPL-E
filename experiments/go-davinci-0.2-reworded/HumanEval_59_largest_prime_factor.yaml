name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var largest int\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            n /= i\n            i = 1\n \
    \       }\n    }\n    return largest\n}\n", "    // TODO: Implement me!\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n   \
    \     if n % i == 0 {\n            return largest_prime_factor(n / i)\n      \
    \  }\n    }\n    return n\n}\n", "    // TODO: implement me\n    return 0\n}\n",
  "    // TODO: implement me\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // TODO: implement this function\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // Start with the smallest prime factor, 2.\n    factor\
    \ := 2\n    for n > 1 {\n        // If n is divisible by factor, divide it out.\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        //\
    \ Move on to the next factor.\n        factor += 1\n    }\n    return factor\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime number.\n    factor := 2\n    for n > 1 {\n        if\
    \ n % factor == 0 {\n            n /= factor\n        } else {\n            factor\
    \ += 1\n        }\n    }\n    return factor\n}\n", "    // TODO: implement\n \
    \   return 0\n}\n", "    var largest_prime int = 1\n    var i int = 2\n    for\
    \ i * i <= n {\n        if n % i == 0 {\n            largest_prime = i\n     \
    \       n /= i\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ n > 1 {\n        largest_prime = n\n    }\n    return largest_prime\n}\n", " \
    \   var i int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n       \
    \     n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
