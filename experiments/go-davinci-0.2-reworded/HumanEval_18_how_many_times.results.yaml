language: go_test.go
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i+1]\
    \ == substring[1] {\n                    count++\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range\
    \ [9] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpvapyisfp_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpvapyisfp_test.go:43\
    \ +0x345\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n\n    if len(myString) == 0 {\n        return 0\n    }\n\n    count\
    \ := 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    var count\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] ==\
    \ substring[0] {\n            var j int = 0\n            for j = 0; j < len(substring);\
    \ j++ {\n                if myString[i+j] != substring[j] {\n                \
    \    break\n                }\n            }\n            if j == len(substring)\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range\
    \ [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpqagl7yiy_test.go:27\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpqagl7yiy_test.go:48\
    \ +0x37a\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                return\
    \ count\n            }\n            if myString[i:i+len(substring)] == substring\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n\n    var count int\n    for i := 0; i < len(myString); i++ {\n  \
    \      if myString[i] == substring[0] {\n            if len(substring) == 1 {\n\
    \                count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i:i+len(substring)] == substring {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpr4s7lzi__test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpr4s7lzi__test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                break\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if i + len(substring)\
    \ <= len(myString) {\n                if myString[i:i+len(substring)] == substring\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpbq0hurf5_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpbq0hurf5_test.go:34\
    \ +0x37d\ntesting.tRunner(0xc0001036c0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) > len(myString) {\n \
    \       return 0\n    }\n    var count int = 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            var j int = 0\n\
    \            for j = 0; j < len(substring); j++ {\n                if i + j >=\
    \ len(myString) || myString[i + j] != substring[j] {\n                    break\n\
    \                }\n            }\n            if j == len(substring) {\n    \
    \            count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplv_oq5x2_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplv_oq5x2_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n\n    count := 0\n    for i := 0; i < len(myString); i++ {\n     \
    \   if myString[i] == substring[0] {\n            if len(substring) == 1 {\n \
    \               count++\n            } else {\n                if len(myString)\
    \ - i >= len(substring) {\n                    if myString[i:i+len(substring)]\
    \ == substring {\n                        count++\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplv_oq5x2_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplv_oq5x2_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i:i+len(substring)] == substring {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpr4s7lzi__test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpr4s7lzi__test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ var j int = 0\n            for j = 0; j < len(substring); j++ {\n          \
    \      if myString[i+j] != substring[j] {\n                    break\n       \
    \         }\n            }\n            if j == len(substring) {\n           \
    \     count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range\
    \ [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpc4suudp7_test.go:21\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpc4suudp7_test.go:42\
    \ +0x37a\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i:i+len(substring)] == substring {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpr4s7lzi__test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpr4s7lzi__test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if len(myString)\
    \ - i >= len(substring) {\n                    if myString[i:i+len(substring)]\
    \ == substring {\n                        count++\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                break\n       \
    \     }\n            if myString[i:i+len(substring)] == substring {\n        \
    \        count++\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplv_oq5x2_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplv_oq5x2_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] == substring[0] {\n            if len(substring) == 1\
    \ {\n                count++\n            } else {\n                if len(myString)\
    \ - i >= len(substring) {\n                    if myString[i:i+len(substring)]\
    \ == substring {\n                        count++\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    var count\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] ==\
    \ substring[0] {\n            if len(myString) - i >= len(substring) {\n     \
    \           if myString[i:i+len(substring)] == substring {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ var j int = 0\n            for j = 0; j < len(substring); j++ {\n          \
    \      if i + j >= len(myString) || myString[i + j] != substring[j] {\n      \
    \              break\n                }\n            }\n            if j == len(substring)\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    var i int = 0\n\
    \    for i < len(myString) {\n        if myString[i] == substring[0] {\n     \
    \       var j int = 0\n            for j < len(substring) {\n                if\
    \ i + j >= len(myString) || myString[i + j] != substring[j] {\n              \
    \      break\n                }\n                j++\n            }\n        \
    \    if j == len(substring) {\n                count++\n                i += j\
    \ - 1\n            }\n        }\n        i++\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmp9lx47q7w_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    if len(myString) == len(substring)\
    \ {\n        if myString == substring {\n            return 1\n        } else\
    \ {\n            return 0\n        }\n    }\n    count := 0\n    for i := 0; i\
    \ < len(myString) - len(substring) + 1; i++ {\n        if myString[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpbq0hurf5_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpbq0hurf5_test.go:34\
    \ +0x37d\ntesting.tRunner(0xc0001036c0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    if len(myString) == len(substring)\
    \ {\n        if myString == substring {\n            return 1\n        } else\
    \ {\n            return 0\n        }\n    }\n    count := 0\n    for i := 0; i\
    \ < len(myString); i++ {\n        if myString[i] == substring[0] {\n         \
    \   if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpkiznwp_9_test.go:35\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpkiznwp_9_test.go:52\
    \ +0x3b2\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString) - len(substring) + 1; i++ {\n        if myString[i:i+len(substring)]\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                return\
    \ count\n            }\n            if myString[i:i+len(substring)] == substring\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    var i int = 0\n\
    \    for i < len(myString) {\n        if myString[i] == substring[0] {\n     \
    \       var j int = 0\n            for j < len(substring) {\n                if\
    \ i + j >= len(myString) || myString[i + j] != substring[j] {\n              \
    \      break\n                }\n                j++\n            }\n        \
    \    if j == len(substring) {\n                count++\n                i += j\
    \ - 1\n            }\n        }\n        i++\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmp9lx47q7w_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                return\
    \ count\n            }\n            if myString[i:i+len(substring)] == substring\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                return\
    \ count\n            }\n            if myString[i:i+len(substring)] == substring\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    var count\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] ==\
    \ substring[0] {\n            if len(myString[i:]) < len(substring) {\n      \
    \          return count\n            }\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i:i+len(substring)] == substring {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:10] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:10] with length 9\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpbq0hurf5_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpbq0hurf5_test.go:34\
    \ +0x37d\ntesting.tRunner(0xc0001036c0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    var i int = 0\n\
    \    for i < len(myString) {\n        if myString[i] == substring[0] {\n     \
    \       var j int = 0\n            for j < len(substring) {\n                if\
    \ myString[i+j] != substring[j] {\n                    break\n               \
    \ }\n                j++\n            }\n            if j == len(substring) {\n\
    \                count++\n            }\n        }\n        i++\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range\
    \ [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp7izcwmq__test.go:22\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp7izcwmq__test.go:45\
    \ +0x37a\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i >= len(substring) {\n                if\
    \ myString[i:i+len(substring)] == substring {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ var j int = 0\n            for j = 0; j < len(substring); j++ {\n          \
    \      if i + j >= len(myString) || myString[i + j] != substring[j] {\n      \
    \              break\n                }\n            }\n            if j == len(substring)\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return count\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                break\n       \
    \     }\n            if myString[i:i+len(substring)] == substring {\n        \
    \        count++\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if myString[i:i+len(substring)] == substring {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpr4s7lzi__test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpr4s7lzi__test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n\n    count := 0\n    for i := 0; i < len(myString); i++ {\n     \
    \   if myString[i] == substring[0] {\n            if len(substring) == 1 {\n \
    \               count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                break\n            }\n            if\
    \ myString[i:i+len(substring)] == substring {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    var index int =\
    \ 0\n    for index < len(myString) {\n        var found int = strings.Index(myString[index:],\
    \ substring)\n        if found == -1 {\n            break\n        }\n       \
    \ count++\n        index += found + 1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0kf4zxt8_test.go:19:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString[i:]) < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            count++\n            for j :=\
    \ 1; j < len(substring); j++ {\n                if i + j >= len(myString) || myString[i\
    \ + j] != substring[j] {\n                    count--\n                    break\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpnl9y72qj_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpnl9y72qj_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc000103520, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplv_oq5x2_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplv_oq5x2_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] == substring[0] {\n            if len(substring) == 1\
    \ {\n                count++\n            } else {\n                if i+len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmplv_oq5x2_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmplv_oq5x2_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000198ea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    var count\
    \ int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] ==\
    \ substring[0] {\n            if len(myString) - i < len(substring) {\n      \
    \          break\n            }\n            if myString[i:i+len(substring)] ==\
    \ substring {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i < len(substring) {\n                break\n           \
    \ }\n            if myString[i:i+len(substring)] == substring {\n            \
    \    count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    count :=\
    \ 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == substring[0]\
    \ {\n            if len(myString) - i < len(substring) {\n                return\
    \ count\n            }\n            if myString[i:i+len(substring)] == substring\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    var count int\n    for i := 0; i < len(myString); i++ {\n    \
    \    if myString[i] == substring[0] {\n            if len(substring) == 1 {\n\
    \                count++\n            } else {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp0rpvoxgn_test.go:25\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp0rpvoxgn_test.go:43\
    \ +0x39d\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    times := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i < len(substring) {\n                return times\n            }\n      \
    \      if myString[i:i+len(substring)] == substring {\n                times++\n\
    \            }\n        }\n    }\n    return times\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if len(myString) - i >= len(substring) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int = 0\n    for i := 0; i <\
    \ len(myString); i++ {\n        if myString[i] == substring[0] {\n           \
    \ if i + len(substring) <= len(myString) {\n                if myString[i:i+len(substring)]\
    \ == substring {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073999
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if len(substring) == 1 {\n   \
    \             count++\n            } else {\n                if i + len(substring)\
    \ <= len(myString) {\n                    if myString[i:i+len(substring)] == substring\
    \ {\n                        count++\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpdpvxiimu_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpdpvxiimu_test.go:36\
    \ +0x3b2\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    if myString == substring {\n\
    \        return 1\n    }\n    if len(myString) == len(substring) {\n        return\
    \ 0\n    }\n    count := 0\n    for i := 0; i < len(myString); i++ {\n       \
    \ if myString[i] == substring[0] {\n            if myString[i:i+len(substring)]\
    \ == substring {\n                count++\n            }\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpyjjcgt49_test.go:34\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpyjjcgt49_test.go:51\
    \ +0x3b2\ntesting.tRunner(0xc00011aea0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073999
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    return 0\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpn12zn8gv_test.go:35:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpn12zn8gv_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    if len(substring) == 0 {\n        return\
    \ 0\n    }\n    if len(myString) == 0 {\n        return 0\n    }\n    if len(myString)\
    \ < len(substring) {\n        return 0\n    }\n    count := 0\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == substring[0] {\n       \
    \     if len(myString) - i < len(substring) {\n                return count\n\
    \            }\n            if myString[i:i+len(substring)] == substring {\n \
    \               count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    count := 0\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073995
- exit_code: 0
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
    aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString\
    \ string, substring string) int {\n    var count int\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] == substring[0] {\n            if len(myString)\
    \ - i >= len(substring) {\n                if myString[i:i+len(substring)] ==\
    \ substring {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073998
